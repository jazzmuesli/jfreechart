/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:21:45 GMT 2019
 */

package org.jfree.chart.ui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ui.LengthAdjustmentType;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.util.UnitType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RectangleInsets_ESTest extends RectangleInsets_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-837.7632388270055), 1.0, 0.0, 1.0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangleInsets0.trim(rectangle2D_Double0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.0, 2468.7813111, (-1379.44219609873), 0.0);
      Rectangle rectangle0 = new Rectangle(2019, 2);
      rectangleInsets0.trim(rectangle0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 1952.1626, (-1713.549), 1254.8681386296, 1254.8681386296);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-1.0F), (-728.0F), (-1.0F), 0.0F);
      Rectangle2D rectangle2D0 = rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle2D_Float0);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      rectangleInsets0.createAdjustedRectangle(rectangle2D0, lengthAdjustmentType0, lengthAdjustmentType0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 2354.885119474, 2354.885119474, 2354.885119474, 0.0);
      Rectangle rectangle0 = new Rectangle((-1416), (-106), 0, (-2883));
      rectangleInsets0.createOutsetRectangle((Rectangle2D) rectangle0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-3405.1), (-1458.12), (-1458.12), (-1458.12));
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(763.7762537, 1.0, (-3405.1), (-2863.0));
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-1848.4821), (-1848.4821), 0.0, 117.74853714435616);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangleInsets0.createOutsetRectangle((Rectangle2D) rectangle2D_Double0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-2284.149), (-2284.149), (-2284.149), (-2284.149));
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangleInsets0.createOutsetRectangle((Rectangle2D) rectangle2D_Double0, true, false);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 352.04, 141.8, 0.0);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      rectangleInsets0.createAdjustedRectangle(rectangle2D_Double0, lengthAdjustmentType0, lengthAdjustmentType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.0, 0.0, (-24.98), 0.0);
      Rectangle rectangle0 = new Rectangle(895, 2, 2, (-3746));
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      rectangleInsets0.createAdjustedRectangle(rectangle0, lengthAdjustmentType0, lengthAdjustmentType0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-1.0), (-1.0), 1385.93228, 1550.2504554);
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      LengthAdjustmentType lengthAdjustmentType1 = LengthAdjustmentType.NO_CHANGE;
      rectangleInsets0.ZERO_INSETS.createAdjustedRectangle(rectangle2D0, lengthAdjustmentType0, lengthAdjustmentType1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets(0.0, (-691.95805149634), 886, (-1441.3558258));
      rectangleInsets0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-691.95805149634), (-691.95805149634), (-691.95805149634), 1.0);
      rectangleInsets0.hashCode();
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-1848.4821), (-1848.4821), 0.0, 117.74853714435616);
      rectangleInsets0.hashCode();
      assertEquals((-1848.4821), rectangleInsets0.getLeft(), 0.01);
      assertEquals(117.74853714435616, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals((-1848.4821), rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets(0.0, 0.0, 0.0, 1.0);
      RectangleInsets rectangleInsets1 = new RectangleInsets((-553.1465), 0.0, (-290.600556937), 1.0);
      boolean boolean0 = rectangleInsets0.equals(rectangleInsets1);
      assertEquals((-290.600556937), rectangleInsets1.getBottom(), 0.01);
      assertEquals((-553.1465), rectangleInsets1.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(0.0, rectangleInsets1.getLeft(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      RectangleInsets rectangleInsets1 = new RectangleInsets(1.0, 0.0, 4994.103, 640.753);
      boolean boolean0 = rectangleInsets0.equals(rectangleInsets1);
      assertEquals(640.753, rectangleInsets1.getRight(), 0.01);
      assertEquals(4994.103, rectangleInsets1.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets1.getLeft(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      RectangleInsets rectangleInsets1 = new RectangleInsets(710.8608933304129, 2189.445, 1466.4180722279675, (-1764.0));
      boolean boolean0 = rectangleInsets0.equals(rectangleInsets1);
      assertEquals(2189.445, rectangleInsets1.getLeft(), 0.01);
      assertEquals(1466.4180722279675, rectangleInsets1.getBottom(), 0.01);
      assertEquals(710.8608933304129, rectangleInsets1.getTop(), 0.01);
      assertEquals((-1764.0), rectangleInsets1.getRight(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.trimWidth(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      double double0 = rectangleInsets0.trimWidth(1.0);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.trimHeight(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      double double0 = rectangleInsets0.trimHeight(0.0);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals((-2.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.getTop();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-1.0), (-1.0), 1385.93228, 1550.2504554);
      double double0 = rectangleInsets0.getTop();
      assertEquals((-1.0), rectangleInsets0.getLeft(), 0.01);
      assertEquals(1550.2504554, rectangleInsets0.getRight(), 0.01);
      assertEquals(1385.93228, rectangleInsets0.getBottom(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-837.7632388270055), 1.0, 0.0, 1.0);
      double double0 = rectangleInsets0.getRight();
      assertEquals(1.0, double0, 0.01);
      assertEquals((-837.7632388270055), rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-783.6031974780777), (-783.6031974780777), (-1.0), (-1.0));
      double double0 = rectangleInsets0.getRight();
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-783.6031974780777), rectangleInsets0.getLeft(), 0.01);
      assertEquals((-1.0), rectangleInsets0.getBottom(), 0.01);
      assertEquals((-783.6031974780777), rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.getLeft();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-322.17812), (-1716.49), 2710.37830634553, 1993.2448262631);
      double double0 = rectangleInsets0.getLeft();
      assertEquals(2710.37830634553, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1993.2448262631, rectangleInsets0.getRight(), 0.01);
      assertEquals((-322.17812), rectangleInsets0.getTop(), 0.01);
      assertEquals((-1716.49), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-1848.4821), (-1848.4821), 0.0, 117.74853714435616);
      double double0 = rectangleInsets0.getBottom();
      assertEquals((-1848.4821), rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(117.74853714435616, rectangleInsets0.getRight(), 0.01);
      assertEquals((-1848.4821), rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      double double0 = rectangleInsets0.getBottom();
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.extendWidth(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-2047.089), (-2047.089), (-2047.089), 0.0);
      double double0 = rectangleInsets0.extendWidth(1238.4291907386);
      assertEquals((-2047.089), rectangleInsets0.getBottom(), 0.01);
      assertEquals((-808.6598092613999), double0, 0.01);
      assertEquals((-2047.089), rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets(0.0, 1184.557796, 0.0, 0.0);
      double double0 = rectangleInsets0.extendHeight(0.0);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1184.557796, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-1848.4821), (-1848.4821), 0.0, 117.74853714435616);
      double double0 = rectangleInsets0.extendHeight(117.74853714435616);
      assertEquals((-1848.4821), rectangleInsets0.getLeft(), 0.01);
      assertEquals((-1730.7335628556439), double0, 0.01);
      assertEquals(117.74853714435616, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      Line2D.Double line2D_Double0 = new Line2D.Double((-1.0), (-1039.203514572), (-1.0), (-1764.0));
      Rectangle rectangle0 = line2D_Double0.getBounds();
      Rectangle2D rectangle2D0 = rectangleInsets0.createOutsetRectangle((Rectangle2D) rectangle0, false, false);
      assertEquals((-1401.5), rectangle2D0.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      Rectangle2D rectangle2D0 = rectangleInsets0.ZERO_INSETS.createOutsetRectangle((Rectangle2D) rectangle0);
      Rectangle2D rectangle2D1 = rectangleInsets0.createOutsetRectangle(rectangle2D0, false, false);
      assertTrue(rectangle2D1.equals((Object)rectangle2D0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, 1.0F, 3145.6F, (-1501.0F));
      Rectangle2D rectangle2D0 = rectangleInsets0.createOutsetRectangle((Rectangle2D) rectangle2D_Float0, true, true);
      Rectangle2D rectangle2D1 = rectangleInsets0.ZERO_INSETS.createOutsetRectangle(rectangle2D0);
      assertEquals(1573.800048828125, rectangle2D1.getCenterX(), 0.01);
      assertEquals((-749.5), rectangle2D1.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      Point point0 = new Point(1, 1);
      Rectangle rectangle0 = new Rectangle(point0);
      Rectangle2D rectangle2D0 = rectangleInsets0.createOutsetRectangle((Rectangle2D) rectangle0);
      assertEquals(1.0, rectangle2D0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D0.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 1.0, (-27.589248436432836), 1.0);
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle2D_Double0);
      assertEquals((-13.794624218216418), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.x, 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-2747.891031155), 0.0, 0.0, (-1875.882));
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      Rectangle2D rectangle2D0 = rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle0);
      assertEquals((-1373.9455155775), rectangle2D0.getCenterY(), 0.01);
      assertEquals(937.941, rectangle2D0.getCenterX(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-783.6031974780777), (-783.6031974780777), (-1.0), (-1.0));
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      Rectangle2D rectangle2D0 = rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle0);
      assertEquals((-391.30159873903887), rectangle2D0.getCenterY(), 0.01);
      assertEquals((-391.30159873903887), rectangle2D0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      Line2D.Double line2D_Double0 = new Line2D.Double((-2222.81), (-2222.81), 0.0, 0.0);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangleInsets0.createAdjustedRectangle(rectangle2D0, lengthAdjustmentType0, lengthAdjustmentType0);
      assertEquals((-1111.405), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(2220.81, rectangle2D_Double0.height, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      Dimension dimension0 = new Dimension((-1), (-2017));
      Rectangle rectangle0 = new Rectangle(dimension0);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangleInsets0.createAdjustedRectangle(rectangle0, lengthAdjustmentType0, lengthAdjustmentType0);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      double double0 = rectangleInsets0.calculateTopOutset(0.0);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-1754.6), 1869.03, (-1914.0), (-1754.6));
      double double0 = rectangleInsets0.calculateTopOutset(1.0);
      assertEquals(1869.03, rectangleInsets0.getLeft(), 0.01);
      assertEquals((-1754.6), double0, 0.01);
      assertEquals((-1914.0), rectangleInsets0.getBottom(), 0.01);
      assertEquals((-1754.6), rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      double double0 = rectangleInsets0.calculateTopInset((-2524.832));
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      double double0 = rectangleInsets0.calculateRightOutset(0.0);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-1.0), (-1077.428), (-1510.0), (-1.0));
      double double0 = rectangleInsets0.calculateRightOutset((-1077.428));
      assertEquals((-1510.0), rectangleInsets0.getBottom(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1.0), rectangleInsets0.getTop(), 0.01);
      assertEquals((-1077.428), rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      double double0 = rectangleInsets0.calculateRightInset(604.8325529410943);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.0, 2468.7813111, (-1379.44219609873), 0.0);
      double double0 = rectangleInsets0.calculateLeftOutset(3191146.72272786);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals((-1379.44219609873), rectangleInsets0.getBottom(), 0.01);
      assertEquals((-3192439.846518195), double0, 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      double double0 = rectangleInsets0.calculateLeftInset(0.0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-2284.149), (-2284.149), (-2284.149), (-2284.149));
      double double0 = rectangleInsets0.calculateLeftInset(0.0);
      assertEquals((-2284.149), rectangleInsets0.getRight(), 0.01);
      assertEquals((-2284.149), rectangleInsets0.getBottom(), 0.01);
      assertEquals((-2284.149), double0, 0.01);
      assertEquals((-2284.149), rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      double double0 = rectangleInsets0.calculateBottomOutset(0.0);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-1.0), (-1077.428), (-1510.0), (-1.0));
      double double0 = rectangleInsets0.calculateBottomOutset((-1.0));
      assertEquals((-1.0), rectangleInsets0.getRight(), 0.01);
      assertEquals((-1510.0), double0, 0.01);
      assertEquals((-1077.428), rectangleInsets0.getLeft(), 0.01);
      assertEquals((-1.0), rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 1922.5, 1922.5, 1922.5, 1922.5);
      double double0 = rectangleInsets0.calculateBottomInset((-3335));
      assertEquals(1922.5, double0, 0.01);
      assertEquals(1922.5, rectangleInsets0.getRight(), 0.01);
      assertEquals(1922.5, rectangleInsets0.getTop(), 0.01);
      assertEquals(1922.5, rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.calculateRightOutset(1.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.0, 0.0, 0.0, 0.0);
      double double0 = rectangleInsets0.calculateRightOutset(1035.1437);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-3405.1), (-1458.12), (-1458.12), (-1458.12));
      double double0 = rectangleInsets0.calculateRightInset(1.0);
      assertEquals((-1458.12), double0, 0.01);
      assertEquals((-3405.1), rectangleInsets0.getTop(), 0.01);
      assertEquals((-1458.12), rectangleInsets0.getLeft(), 0.01);
      assertEquals((-1458.12), rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.calculateRightInset(3324.46005);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.0, (-548.060111325214), (-548.060111325214), (-1.0));
      double double0 = rectangleInsets0.calculateLeftOutset((-3016.68571069));
      assertEquals(3005.717143260443, double0, 0.01);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals((-548.060111325214), rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.calculateLeftOutset((-1375.9));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.calculateLeftInset(949.3281);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.0, 0.0, 284.355405, 0.0);
      double double0 = rectangleInsets0.calculateLeftInset(2287.0);
      assertEquals(284.355405, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 1240.0, (-140.7376415), (-1.0), 1240.0);
      double double0 = rectangleInsets0.calculateBottomOutset(0.0);
      assertEquals((-1.0), rectangleInsets0.getBottom(), 0.01);
      assertEquals((-140.7376415), rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1240.0, rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-536.3069961522), 1.0, (-536.3069961522), (-3830.458035));
      double double0 = rectangleInsets0.calculateBottomInset(1.0);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals((-536.3069961522), double0, 0.01);
      assertEquals((-3830.458035), rectangleInsets0.getRight(), 0.01);
      assertEquals((-536.3069961522), rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.calculateBottomInset(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.0, 0.0, (-24.98), 0.0);
      double double0 = rectangleInsets0.calculateTopOutset(895.0F);
      assertEquals((-24.98), rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.0, 0.0, (-24.98), 0.0);
      double double0 = rectangleInsets0.calculateTopInset((-2305.7687));
      assertEquals(-0.0, double0, 0.01);
      assertEquals((-24.98), rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-263.7523213429721), (-263.7523213429721), 1381.8950691, 0.0);
      double double0 = rectangleInsets0.calculateTopInset(1381.8950691);
      assertEquals(1381.8950691, rectangleInsets0.getBottom(), 0.01);
      assertEquals((-263.7523213429721), rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals((-263.7523213429721), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      // Undeclared exception!
      try { 
        rectangleInsets0.createOutsetRectangle((Rectangle2D) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.ui.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-1012.3369), (-1012.3369), 209.1, (-1012.3369));
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle2D_Double0, true, true);
      assertEquals((-804.2369), rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-1518.50535), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-1011.3369), rectangle2D_Double1.y, 0.01);
      assertEquals((-907.7869000000001), rectangle2D_Double1.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      // Undeclared exception!
      try { 
        rectangleInsets0.ZERO_INSETS.createInsetRectangle((Rectangle2D) null, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.ui.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-691.95805149634), (-691.95805149634), (-691.95805149634), 1.0);
      Rectangle rectangle0 = new Rectangle(886, 886, 29, 3);
      Rectangle2D rectangle2D0 = rectangleInsets0.createOutsetRectangle((Rectangle2D) rectangle0, false, false);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangleInsets0.createInsetRectangle(rectangle2D0, false, true);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(194.04194850366002, rectangle2D_Double0.y, 0.01);
      assertEquals(900.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(887.5, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-691.95805149634), rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.0, 0.0, 284.355405, 0.0);
      // Undeclared exception!
      try { 
        rectangleInsets0.createOutsetRectangle((Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.ui.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-837.7632388270055), 1.0, 0.0, 1.0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle2D_Double0, false, false);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertTrue(rectangle2D0.equals((Object)rectangle2D_Double0));
      assertEquals((-837.7632388270055), rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-837.7632388270055), 1.0, (-837.7632388270055), 1.0);
      // Undeclared exception!
      try { 
        rectangleInsets0.ZERO_INSETS.createInsetRectangle((Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.ui.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-691.95805149634), (-691.95805149634), (-691.95805149634), 1.0);
      Rectangle rectangle0 = new Rectangle(886, 886, 29, 3);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangleInsets0.createAdjustedRectangle(rectangle0, lengthAdjustmentType0, lengthAdjustmentType0);
      assertEquals(887.5, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1380.91610299268), rectangle2D_Double0.height, 0.01);
      assertEquals(1246.97902574817, rectangle2D_Double0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 396.58667998589317, (-2733.0), 1493.69659919, (-2733.0));
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      // Undeclared exception!
      try { 
        rectangleInsets0.createAdjustedRectangle((Rectangle2D) null, lengthAdjustmentType0, lengthAdjustmentType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.ui.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-837.7632388270055), 1.0, (-837.7632388270055), 1.0);
      rectangleInsets0.ZERO_INSETS.hashCode();
      assertEquals((-837.7632388270055), rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals((-837.7632388270055), rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      rectangleInsets0.hashCode();
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      RectangleInsets rectangleInsets1 = new RectangleInsets();
      boolean boolean0 = rectangleInsets0.equals(rectangleInsets1);
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets1.getLeft(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-691.95805149634), (-691.95805149634), (-691.95805149634), 1.0);
      RectangleInsets rectangleInsets1 = new RectangleInsets(0.0, (-691.95805149634), 886, (-1441.3558258));
      boolean boolean0 = rectangleInsets0.equals(rectangleInsets1);
      assertEquals((-691.95805149634), rectangleInsets1.getLeft(), 0.01);
      assertEquals(886.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets1.getTop(), 0.01);
      assertEquals((-1441.3558258), rectangleInsets1.getRight(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 3143.4, 3143.4, 3143.4, 2701.311052);
      RectangleInsets rectangleInsets1 = RectangleInsets.ZERO_INSETS;
      boolean boolean0 = rectangleInsets0.equals(rectangleInsets1);
      assertEquals(3143.4, rectangleInsets0.getLeft(), 0.01);
      assertEquals(3143.4, rectangleInsets0.getTop(), 0.01);
      assertFalse(boolean0);
      assertEquals(3143.4, rectangleInsets0.getBottom(), 0.01);
      assertEquals(2701.311052, rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-1.0), (-1.0), 1.0, 1.0);
      RectangleInsets rectangleInsets1 = new RectangleInsets((-1906.0186074), (-1.0), (-1906.0186074), 0);
      boolean boolean0 = rectangleInsets0.equals(rectangleInsets1);
      assertEquals((-1.0), rectangleInsets1.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets1.getRight(), 0.01);
      assertEquals((-1906.0186074), rectangleInsets1.getBottom(), 0.01);
      assertEquals((-1.0), rectangleInsets0.getTop(), 0.01);
      assertEquals((-1906.0186074), rectangleInsets1.getTop(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-837.7632388270055), 1.0, (-837.7632388270055), 1.0);
      Object object0 = new Object();
      boolean boolean0 = rectangleInsets0.equals(object0);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals((-837.7632388270055), rectangleInsets0.getTop(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals((-837.7632388270055), rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      boolean boolean0 = rectangleInsets0.equals(rectangleInsets0);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertTrue(boolean0);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-837.7632388270055), 1.0, (-837.7632388270055), 1.0);
      RectangleInsets rectangleInsets1 = new RectangleInsets();
      boolean boolean0 = rectangleInsets0.equals(rectangleInsets1);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertFalse(boolean0);
      assertEquals((-837.7632388270055), rectangleInsets0.getBottom(), 0.01);
      assertEquals((-837.7632388270055), rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-837.7632388270055), 1.0, (-837.7632388270055), 1.0);
      rectangleInsets0.getUnitType();
      assertEquals((-837.7632388270055), rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals((-837.7632388270055), rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.0, 2468.7813111, (-1379.44219609873), 0.0);
      double double0 = rectangleInsets0.trimWidth((-613.474563500249));
      assertEquals((-1379.44219609873), rectangleInsets0.getBottom(), 0.01);
      assertEquals(1513921.062641145, double0, 0.01);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.0, 0.0, (-24.98), 0.0);
      double double0 = rectangleInsets0.extendHeight(1730.45);
      assertEquals(66.60700538876063, double0, 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-837.7632388270055), 1.0, (-837.7632388270055), 1.0);
      double double0 = rectangleInsets0.getBottom();
      assertEquals((-837.7632388270055), rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals((-837.7632388270055), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.0, 0.0, 0.0, 0.0);
      double double0 = rectangleInsets0.trimHeight(597.3);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(597.3, double0, 0.01);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      double double0 = rectangleInsets0.extendWidth(1.0);
      assertEquals(3.0, double0, 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.getRight();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-837.7632388270055), 1.0, (-837.7632388270055), 1.0);
      double double0 = rectangleInsets0.getLeft();
      assertEquals(1.0, double0, 0.01);
      assertEquals((-837.7632388270055), rectangleInsets0.getBottom(), 0.01);
      assertEquals((-837.7632388270055), rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      String string0 = rectangleInsets0.toString();
      assertEquals("RectangleInsets[t=1.0,l=1.0,b=1.0,r=1.0]", string0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      // Undeclared exception!
      try { 
        rectangleInsets0.trim((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      double double0 = rectangleInsets0.getTop();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
  }
}
