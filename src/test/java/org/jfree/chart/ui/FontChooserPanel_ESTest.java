/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:02:20 GMT 2019
 */

package org.jfree.chart.ui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.geom.AffineTransform;
import javax.swing.border.TitledBorder;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ui.FontChooserPanel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FontChooserPanel_ESTest extends FontChooserPanel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      assertNotNull(styleContext0);
      
      Font font0 = styleContext0.getFont("", 4267, 2);
      assertEquals(2.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertEquals(2, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("", font0.getName());
      assertNotNull(font0);
      
      FontChooserPanel fontChooserPanel0 = new FontChooserPanel(font0);
      assertEquals(2.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertEquals(2, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("", font0.getName());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicySet());
      assertTrue(fontChooserPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fontChooserPanel0.getIgnoreRepaint());
      assertFalse(fontChooserPanel0.isFocusCycleRoot());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicyProvider());
      assertNotNull(fontChooserPanel0);
      
      String string0 = fontChooserPanel0.getSelectedName();
      assertEquals(2.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertEquals(2, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("", font0.getName());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicySet());
      assertTrue(fontChooserPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fontChooserPanel0.getIgnoreRepaint());
      assertFalse(fontChooserPanel0.isFocusCycleRoot());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicyProvider());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FontChooserPanel fontChooserPanel0 = null;
      try {
        fontChooserPanel0 = new FontChooserPanel((Font) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.FontChooserPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TitledBorder titledBorder0 = new TitledBorder("Y^7");
      assertNotNull(titledBorder0);
      
      Font font0 = titledBorder0.getTitleFont();
      assertEquals("Dialog", font0.getName());
      assertEquals(12, font0.getSize());
      assertTrue(font0.isBold());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertNotNull(font0);
      
      FontChooserPanel fontChooserPanel0 = new FontChooserPanel(font0);
      assertEquals("Dialog", font0.getName());
      assertEquals(12, font0.getSize());
      assertTrue(font0.isBold());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertFalse(fontChooserPanel0.getIgnoreRepaint());
      assertTrue(fontChooserPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicySet());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fontChooserPanel0.isFocusCycleRoot());
      assertNotNull(fontChooserPanel0);
      
      fontChooserPanel0.setSelectedFont(font0);
      assertEquals("Dialog", font0.getName());
      assertEquals(12, font0.getSize());
      assertTrue(font0.isBold());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertFalse(fontChooserPanel0.getIgnoreRepaint());
      assertTrue(fontChooserPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicySet());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fontChooserPanel0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      assertNotNull(styleContext0);
      
      Font font0 = styleContext0.getFont("", 4267, 2);
      assertFalse(font0.isTransformed());
      assertEquals("", font0.getName());
      assertEquals(2.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals(2, font0.getSize());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertNotNull(font0);
      
      FontChooserPanel fontChooserPanel0 = new FontChooserPanel(font0);
      assertFalse(font0.isTransformed());
      assertEquals("", font0.getName());
      assertEquals(2.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals(2, font0.getSize());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicySet());
      assertTrue(fontChooserPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fontChooserPanel0.getIgnoreRepaint());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fontChooserPanel0.isFocusCycleRoot());
      assertNotNull(fontChooserPanel0);
      
      fontChooserPanel0.setSelectedFont(font0);
      assertFalse(font0.isTransformed());
      assertEquals("", font0.getName());
      assertEquals(2.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals(2, font0.getSize());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicySet());
      assertTrue(fontChooserPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fontChooserPanel0.getIgnoreRepaint());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fontChooserPanel0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Font font0 = Font.decode("Dialog.plain");
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals("Dialog.plain", font0.getName());
      assertFalse(font0.isItalic());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertNotNull(font0);
      
      FontChooserPanel fontChooserPanel0 = new FontChooserPanel(font0);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals("Dialog.plain", font0.getName());
      assertFalse(font0.isItalic());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertTrue(fontChooserPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fontChooserPanel0.getIgnoreRepaint());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicySet());
      assertFalse(fontChooserPanel0.isFocusCycleRoot());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicyProvider());
      assertNotNull(fontChooserPanel0);
      
      int int0 = fontChooserPanel0.getSelectedSize();
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals("Dialog.plain", font0.getName());
      assertFalse(font0.isItalic());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertTrue(fontChooserPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fontChooserPanel0.getIgnoreRepaint());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicySet());
      assertFalse(fontChooserPanel0.isFocusCycleRoot());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicyProvider());
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      assertNotNull(styleContext0);
      
      Font font0 = styleContext0.getFont("", 4267, 2);
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(2, font0.getSize());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("", font0.getName());
      assertEquals(2.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertNotNull(font0);
      
      FontChooserPanel fontChooserPanel0 = new FontChooserPanel(font0);
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(2, font0.getSize());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("", font0.getName());
      assertEquals(2.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(fontChooserPanel0.isFocusCycleRoot());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicySet());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fontChooserPanel0.getIgnoreRepaint());
      assertTrue(fontChooserPanel0.getFocusTraversalKeysEnabled());
      assertNotNull(fontChooserPanel0);
      
      int int0 = fontChooserPanel0.getSelectedSize();
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(2, font0.getSize());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("", font0.getName());
      assertEquals(2.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(fontChooserPanel0.isFocusCycleRoot());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicySet());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fontChooserPanel0.getIgnoreRepaint());
      assertTrue(fontChooserPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      assertNotNull(styleContext0);
      
      Font font0 = styleContext0.getFont("", 4267, 2);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(2.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals("", font0.getName());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertEquals(2, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertNotNull(font0);
      
      AffineTransform affineTransform0 = new AffineTransform((float) 4267, (-1028.686F), 1174.62F, (float) 2, (-4149.84F), 2076.1F);
      assertEquals((-4149.83984375), affineTransform0.getTranslateX(), 0.01);
      assertEquals((-1028.68603515625), affineTransform0.getShearY(), 0.01);
      assertEquals(1174.6199951171875, affineTransform0.getShearX(), 0.01);
      assertEquals(2076.10009765625, affineTransform0.getTranslateY(), 0.01);
      assertEquals(2.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(4267.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1216849.1855923533, affineTransform0.getDeterminant(), 0.01);
      assertNotNull(affineTransform0);
      
      Font font1 = font0.deriveFont(2, affineTransform0);
      assertNotSame(font0, font1);
      assertNotSame(font1, font0);
      assertFalse(font1.equals((Object)font0));
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(2.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals("", font0.getName());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertEquals(2, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals((-4149.83984375), affineTransform0.getTranslateX(), 0.01);
      assertEquals((-1028.68603515625), affineTransform0.getShearY(), 0.01);
      assertEquals(1174.6199951171875, affineTransform0.getShearX(), 0.01);
      assertEquals(2076.10009765625, affineTransform0.getTranslateY(), 0.01);
      assertEquals(2.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(4267.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1216849.1855923533, affineTransform0.getDeterminant(), 0.01);
      assertEquals("Default", font1.getName());
      assertEquals(2, font1.getSize());
      assertTrue(font1.isTransformed());
      assertEquals(2, font1.getStyle());
      assertFalse(font1.isPlain());
      assertFalse(font1.hasLayoutAttributes());
      assertFalse(font1.isBold());
      assertTrue(font1.isItalic());
      assertEquals(2.0F, font1.getSize2D(), 0.01F);
      assertFalse(font1.hasUniformLineMetrics());
      assertNotNull(font1);
      
      FontChooserPanel fontChooserPanel0 = new FontChooserPanel(font1);
      assertFalse(font0.equals((Object)font1));
      assertFalse(font1.equals((Object)font0));
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(2.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals("", font0.getName());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertEquals(2, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals((-4149.83984375), affineTransform0.getTranslateX(), 0.01);
      assertEquals((-1028.68603515625), affineTransform0.getShearY(), 0.01);
      assertEquals(1174.6199951171875, affineTransform0.getShearX(), 0.01);
      assertEquals(2076.10009765625, affineTransform0.getTranslateY(), 0.01);
      assertEquals(2.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(4267.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1216849.1855923533, affineTransform0.getDeterminant(), 0.01);
      assertEquals("Default", font1.getName());
      assertEquals(2, font1.getSize());
      assertTrue(font1.isTransformed());
      assertEquals(2, font1.getStyle());
      assertFalse(font1.isPlain());
      assertFalse(font1.hasLayoutAttributes());
      assertFalse(font1.isBold());
      assertTrue(font1.isItalic());
      assertEquals(2.0F, font1.getSize2D(), 0.01F);
      assertFalse(font1.hasUniformLineMetrics());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fontChooserPanel0.isFocusCycleRoot());
      assertTrue(fontChooserPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fontChooserPanel0.getIgnoreRepaint());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicySet());
      assertNotNull(fontChooserPanel0);
      
      int int0 = fontChooserPanel0.getSelectedStyle();
      assertNotSame(font0, font1);
      assertNotSame(font1, font0);
      assertFalse(font0.equals((Object)font1));
      assertFalse(font1.equals((Object)font0));
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(2.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals("", font0.getName());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertEquals(2, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals((-4149.83984375), affineTransform0.getTranslateX(), 0.01);
      assertEquals((-1028.68603515625), affineTransform0.getShearY(), 0.01);
      assertEquals(1174.6199951171875, affineTransform0.getShearX(), 0.01);
      assertEquals(2076.10009765625, affineTransform0.getTranslateY(), 0.01);
      assertEquals(2.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(4267.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1216849.1855923533, affineTransform0.getDeterminant(), 0.01);
      assertEquals("Default", font1.getName());
      assertEquals(2, font1.getSize());
      assertTrue(font1.isTransformed());
      assertEquals(2, font1.getStyle());
      assertFalse(font1.isPlain());
      assertFalse(font1.hasLayoutAttributes());
      assertFalse(font1.isBold());
      assertTrue(font1.isItalic());
      assertEquals(2.0F, font1.getSize2D(), 0.01F);
      assertFalse(font1.hasUniformLineMetrics());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fontChooserPanel0.isFocusCycleRoot());
      assertTrue(fontChooserPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fontChooserPanel0.getIgnoreRepaint());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicySet());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Font font0 = Font.decode("Dialog.plain");
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("Dialog.plain", font0.getName());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertNotNull(font0);
      
      FontChooserPanel fontChooserPanel0 = new FontChooserPanel(font0);
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("Dialog.plain", font0.getName());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertTrue(fontChooserPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fontChooserPanel0.getIgnoreRepaint());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fontChooserPanel0.isFocusCycleRoot());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicySet());
      assertNotNull(fontChooserPanel0);
      
      int int0 = fontChooserPanel0.getSelectedStyle();
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("Dialog.plain", font0.getName());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertTrue(fontChooserPanel0.getFocusTraversalKeysEnabled());
      assertFalse(fontChooserPanel0.getIgnoreRepaint());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fontChooserPanel0.isFocusCycleRoot());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicySet());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TitledBorder titledBorder0 = new TitledBorder("Y^7");
      assertNotNull(titledBorder0);
      
      Font font0 = titledBorder0.getTitleFont();
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12, font0.getSize());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.isItalic());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isBold());
      assertNotNull(font0);
      
      FontChooserPanel fontChooserPanel0 = new FontChooserPanel(font0);
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12, font0.getSize());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.isItalic());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isBold());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fontChooserPanel0.isFocusCycleRoot());
      assertFalse(fontChooserPanel0.getIgnoreRepaint());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicySet());
      assertTrue(fontChooserPanel0.getFocusTraversalKeysEnabled());
      assertNotNull(fontChooserPanel0);
      
      String string0 = fontChooserPanel0.getSelectedName();
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12, font0.getSize());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.isItalic());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isBold());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicyProvider());
      assertFalse(fontChooserPanel0.isFocusCycleRoot());
      assertFalse(fontChooserPanel0.getIgnoreRepaint());
      assertFalse(fontChooserPanel0.isFocusTraversalPolicySet());
      assertTrue(fontChooserPanel0.getFocusTraversalKeysEnabled());
      assertNotNull(string0);
      assertEquals("Dialog", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TitledBorder titledBorder0 = new TitledBorder("org.jfree.data.general.DefaultHeatMapDataset");
      Font font0 = titledBorder0.getTitleFont();
      FontChooserPanel fontChooserPanel0 = new FontChooserPanel(font0);
      // Undeclared exception!
      try { 
        fontChooserPanel0.setSelectedFont((Font) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.FontChooserPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Font font0 = styleContext0.getFont("", 4267, 2);
      AffineTransform affineTransform0 = new AffineTransform((float) 4267, (-1028.686F), 1174.62F, (float) 2, (-4149.84F), 2076.1F);
      Font font1 = font0.deriveFont(2, affineTransform0);
      FontChooserPanel fontChooserPanel0 = new FontChooserPanel(font1);
      Font font2 = fontChooserPanel0.getSelectedFont();
      assertEquals("Default", font2.getName());
      assertEquals(2, font2.getStyle());
      assertEquals(10, font2.getSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TitledBorder titledBorder0 = new TitledBorder("Y^7");
      Font font0 = titledBorder0.getTitleFont();
      FontChooserPanel fontChooserPanel0 = new FontChooserPanel(font0);
      int int0 = fontChooserPanel0.getSelectedStyle();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      Font font0 = styleContext0.getFont((AttributeSet) simpleAttributeSet0);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 13);
      Font font1 = font0.deriveFont(335, affineTransform0);
      FontChooserPanel fontChooserPanel0 = new FontChooserPanel(font1);
      Font font2 = fontChooserPanel0.getSelectedFont();
      assertEquals("Monospaced", font2.getName());
      assertEquals(3, font2.getStyle());
      assertEquals(12.0F, font2.getSize2D(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Font font0 = Font.decode("Dialog.plain");
      FontChooserPanel fontChooserPanel0 = new FontChooserPanel(font0);
      Font font1 = fontChooserPanel0.getSelectedFont();
      assertEquals("Default", font1.getName());
      assertEquals(12, font1.getSize());
      assertTrue(font1.isPlain());
  }
}
