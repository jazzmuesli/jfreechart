/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:31:13 GMT 2019
 */

package org.jfree.chart.ui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Stroke;
import java.io.InputStream;
import java.util.Vector;
import javax.swing.DebugGraphics;
import javax.swing.JList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ui.StrokeSample;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StrokeSample_ESTest extends StrokeSample_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StrokeSample strokeSample0 = new StrokeSample((Stroke) null);
      Stroke stroke0 = strokeSample0.getStroke();
      assertNull(stroke0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BasicStroke basicStroke0 = new BasicStroke();
      StrokeSample strokeSample0 = new StrokeSample(basicStroke0);
      // Undeclared exception!
      try { 
        strokeSample0.paintComponent((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.StrokeSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StrokeSample strokeSample0 = new StrokeSample((Stroke) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      // Undeclared exception!
      try { 
        strokeSample0.paintComponent(debugGraphics0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.DebugGraphics cannot be cast to java.awt.Graphics2D
         //
         verifyException("org.jfree.chart.ui.StrokeSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BasicStroke basicStroke0 = new BasicStroke();
      StrokeSample strokeSample0 = new StrokeSample(basicStroke0);
      strokeSample0.setStroke(basicStroke0);
      assertFalse(strokeSample0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BasicStroke basicStroke0 = new BasicStroke(0.0F);
      StrokeSample strokeSample0 = new StrokeSample(basicStroke0);
      JList<Object> jList0 = (JList<Object>) mock(JList.class, new ViolatedAssumptionAnswer());
      Component component0 = strokeSample0.getListCellRendererComponent(jList0, basicStroke0, 1036, false, false);
      assertFalse(component0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BasicStroke basicStroke0 = new BasicStroke(659.2831F);
      StrokeSample strokeSample0 = new StrokeSample(basicStroke0);
      JList<InputStream> jList0 = new JList<InputStream>((Vector<? extends InputStream>) null);
      StrokeSample strokeSample1 = (StrokeSample)strokeSample0.getListCellRendererComponent(jList0, jList0, 0, false, true);
      assertFalse(strokeSample1.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BasicStroke basicStroke0 = new BasicStroke();
      StrokeSample strokeSample0 = new StrokeSample(basicStroke0);
      BasicStroke basicStroke1 = (BasicStroke)strokeSample0.getStroke();
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BasicStroke basicStroke0 = new BasicStroke();
      StrokeSample strokeSample0 = new StrokeSample(basicStroke0);
      Dimension dimension0 = strokeSample0.getPreferredSize();
      assertEquals(80, dimension0.width);
      assertEquals(18, dimension0.height);
  }
}
