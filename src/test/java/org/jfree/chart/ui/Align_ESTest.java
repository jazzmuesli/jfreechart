/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:16:23 GMT 2019
 */

package org.jfree.chart.ui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ui.Align;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Align_ESTest extends Align_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-2259.59097002803)).when(rectangle2D0).getCenterX();
      doReturn((-2259.59097002803)).when(rectangle2D0).getCenterY();
      doReturn((-4695.821), 1423.132804).when(rectangle2D0).getHeight();
      doReturn(2595.7037).when(rectangle2D0).getMaxY();
      doReturn((-2259.59097002803), (-2259.59097002803)).when(rectangle2D0).getWidth();
      doReturn(1109.9169047).when(rectangle2D0).getX();
      Align.align(rectangle2D0, rectangle2D0, (-58));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0).when(rectangle2D0).getWidth();
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D1).getCenterX();
      doReturn(0.0).when(rectangle2D1).getCenterY();
      doReturn(0.0).when(rectangle2D1).getMaxX();
      doReturn(0.0).when(rectangle2D1).getMinY();
      doReturn(0.0).when(rectangle2D1).getWidth();
      doReturn(0.0).when(rectangle2D1).getX();
      Align.align(rectangle2D0, rectangle2D1, 205);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(1251.370921438553).when(rectangle2D0).getCenterX();
      doReturn((-1.0)).when(rectangle2D0).getCenterY();
      doReturn((-1695.113858), (-1695.113858), (-1.0)).when(rectangle2D0).getHeight();
      doReturn((-1695.113858)).when(rectangle2D0).getMaxX();
      doReturn(1.0).when(rectangle2D0).getMaxY();
      doReturn((-1.0)).when(rectangle2D0).getMinY();
      doReturn((-1695.113858), (-1695.113858), 5025.591).when(rectangle2D0).getWidth();
      doReturn(1251.370921438553).when(rectangle2D0).getX();
      Align.align(rectangle2D0, rectangle2D0, (-1));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0).when(rectangle2D0).getWidth();
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D1).getCenterX();
      doReturn(0.0).when(rectangle2D1).getCenterY();
      doReturn(0.0).when(rectangle2D1).getHeight();
      doReturn(0.0).when(rectangle2D1).getMaxX();
      doReturn(0.0).when(rectangle2D1).getMaxY();
      doReturn(0.0).when(rectangle2D1).getMinY();
      Align.align(rectangle2D0, rectangle2D1, (-69));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Align.align(rectangle2D0, (Rectangle2D) null, 985);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.Align", e);
      }
  }
}
