/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:05:49 GMT 2019
 */

package org.jfree.chart.ui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ui.GradientPaintTransformType;
import org.jfree.chart.ui.StandardGradientPaintTransformer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StandardGradientPaintTransformer_ESTest extends StandardGradientPaintTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.CENTER_VERTICAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      Color color0 = Color.WHITE;
      GradientPaint gradientPaint0 = new GradientPaint((-3674.349F), (-3674.349F), color0, (-1917.0F), (-3674.349F), color0);
      Point point0 = new Point((-15), (-15));
      Rectangle rectangle0 = new Rectangle(point0);
      GradientPaint gradientPaint1 = standardGradientPaintTransformer0.transform(gradientPaint0, rectangle0);
      assertTrue(gradientPaint1.isCyclic());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.CENTER_VERTICAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      standardGradientPaintTransformer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.CENTER_HORIZONTAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer1 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      boolean boolean0 = standardGradientPaintTransformer0.equals(standardGradientPaintTransformer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.HORIZONTAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      Object object0 = standardGradientPaintTransformer0.clone();
      boolean boolean0 = standardGradientPaintTransformer0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.CENTER_VERTICAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      boolean boolean0 = standardGradientPaintTransformer0.equals(standardGradientPaintTransformer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.CENTER_VERTICAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      boolean boolean0 = standardGradientPaintTransformer0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.CENTER_HORIZONTAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Color color0 = Color.green;
      GradientPaint gradientPaint0 = new GradientPaint(point2D_Double0, color0, point2D_Double0, color0, true);
      Rectangle rectangle0 = new Rectangle(877, 877, 877, 877);
      GradientPaint gradientPaint1 = standardGradientPaintTransformer0.transform(gradientPaint0, rectangle0);
      assertNotSame(gradientPaint1, gradientPaint0);
      assertTrue(gradientPaint1.isCyclic());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.HORIZONTAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      Color color0 = Color.CYAN;
      GradientPaint gradientPaint0 = new GradientPaint(0.0F, 0.0F, color0, 0.0F, 0.0F, color0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0F, 1367, 1367, 0.0F);
      GradientPaint gradientPaint1 = standardGradientPaintTransformer0.transform(gradientPaint0, rectangle2D_Double0);
      assertNotSame(gradientPaint1, gradientPaint0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      Point point0 = new Point();
      Color color0 = Color.darkGray;
      GradientPaint gradientPaint0 = new GradientPaint(point0, color0, point0, color0);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      Rectangle2D rectangle2D0 = rectangle0.getFrame();
      GradientPaint gradientPaint1 = standardGradientPaintTransformer0.transform(gradientPaint0, rectangle2D0);
      assertNotSame(gradientPaint1, gradientPaint0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.CENTER_VERTICAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      Point point0 = new Point();
      Rectangle rectangle0 = new Rectangle(point0);
      // Undeclared exception!
      try { 
        standardGradientPaintTransformer0.transform((GradientPaint) null, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.StandardGradientPaintTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = null;
      try {
        standardGradientPaintTransformer0 = new StandardGradientPaintTransformer((GradientPaintTransformType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'type' argument.
         //
         verifyException("org.jfree.chart.ui.StandardGradientPaintTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.CENTER_VERTICAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      GradientPaintTransformType gradientPaintTransformType1 = standardGradientPaintTransformer0.getType();
      assertSame(gradientPaintTransformType1, gradientPaintTransformType0);
  }
}
