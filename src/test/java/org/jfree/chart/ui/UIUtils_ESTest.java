/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:28:44 GMT 2019
 */

package org.jfree.chart.ui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GraphicsConfiguration;
import java.awt.Rectangle;
import java.awt.Window;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.table.TableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ui.UIUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class UIUtils_ESTest extends UIUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      UIUtils.createJButton("", font0);
      TableModel tableModel0 = mock(TableModel.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(tableModel0).getColumnClass(anyInt());
      doReturn(1, 1, 1, 0).when(tableModel0).getColumnCount();
      doReturn("").when(tableModel0).getColumnName(anyInt());
      JPanel jPanel0 = UIUtils.createTablePanel(tableModel0);
      GraphicsConfiguration graphicsConfiguration0 = mock(GraphicsConfiguration.class, new ViolatedAssumptionAnswer());
      Dialog dialog0 = mock(Dialog.class, new ViolatedAssumptionAnswer());
      doReturn(jPanel0).when(dialog0).getParent();
      doReturn((Dimension) null).when(dialog0).getSize();
      // Undeclared exception!
      try { 
        UIUtils.centerDialogInParent(dialog0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.UIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rectangle rectangle0 = mock(Rectangle.class, new ViolatedAssumptionAnswer());
      GraphicsConfiguration graphicsConfiguration0 = mock(GraphicsConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn(rectangle0).when(graphicsConfiguration0).getBounds();
      Dimension dimension0 = mock(Dimension.class, new ViolatedAssumptionAnswer());
      Dialog dialog0 = mock(Dialog.class, new ViolatedAssumptionAnswer());
      doReturn(graphicsConfiguration0).when(dialog0).getGraphicsConfiguration();
      doReturn((Container) null).when(dialog0).getParent();
      doReturn(dimension0).when(dialog0).getSize();
      UIUtils.centerDialogInParent(dialog0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GraphicsConfiguration graphicsConfiguration0 = mock(GraphicsConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle) null).when(graphicsConfiguration0).getBounds();
      Window window0 = mock(Window.class, new ViolatedAssumptionAnswer());
      doReturn(graphicsConfiguration0).when(window0).getGraphicsConfiguration();
      doReturn((Dimension) null).when(window0).getSize();
      // Undeclared exception!
      try { 
        UIUtils.positionFrameRandomly(window0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.UIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Window window0 = mock(Window.class, new ViolatedAssumptionAnswer());
      doReturn((GraphicsConfiguration) null).when(window0).getGraphicsConfiguration();
      // Undeclared exception!
      try { 
        UIUtils.positionFrameOnScreen(window0, 2430.122298, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.UIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "L+.FDsOO";
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      UIUtils.createJLabel("L+.FDsOO", font0);
      Font font1 = mock(Font.class, new ViolatedAssumptionAnswer());
      UIUtils.createJLabel("L+.FDsOO", font1);
      int int0 = 1549;
      TableModel tableModel0 = mock(TableModel.class, new ViolatedAssumptionAnswer());
      doReturn(1549, 1, 0).when(tableModel0).getColumnCount();
      doReturn((String) null).when(tableModel0).getColumnName(anyInt());
      UIUtils.createTablePanel(tableModel0);
      Font font2 = mock(Font.class, new ViolatedAssumptionAnswer());
      int int1 = 0;
      int int2 = 3499;
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int1, int1, int2).when(color0).getRGB();
      UIUtils.createJLabel(string0, font2, color0);
      String string1 = null;
      Font font3 = mock(Font.class, new ViolatedAssumptionAnswer());
      int int3 = 255;
      int int4 = 0;
      Color color1 = mock(Color.class, new ViolatedAssumptionAnswer());
      doReturn(int1, int1, int3, int4).when(color1).getRGB();
      JLabel jLabel0 = UIUtils.createJLabel(string1, font3, color1);
      assertTrue(jLabel0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TableModel tableModel0 = mock(TableModel.class, new ViolatedAssumptionAnswer());
      doReturn((-1208), 3318).when(tableModel0).getColumnCount();
      // Undeclared exception!
      try { 
        UIUtils.createTablePanel(tableModel0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GraphicsConfiguration graphicsConfiguration0 = mock(GraphicsConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle) null).when(graphicsConfiguration0).getBounds();
      Window window0 = mock(Window.class, new ViolatedAssumptionAnswer());
      doReturn(graphicsConfiguration0).when(window0).getGraphicsConfiguration();
      doReturn((Dimension) null).when(window0).getSize();
      // Undeclared exception!
      try { 
        UIUtils.centerFrameOnScreen(window0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.UIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JButton jButton0 = UIUtils.createJButton("", (Font) null);
      Dialog dialog0 = mock(Dialog.class, new ViolatedAssumptionAnswer());
      doReturn(jButton0).when(dialog0).getParent();
      doReturn((Dimension) null).when(dialog0).getSize();
      // Undeclared exception!
      try { 
        UIUtils.positionDialogRelativeToParent(dialog0, 209.644, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.UIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rectangle rectangle0 = mock(Rectangle.class, new ViolatedAssumptionAnswer());
      GraphicsConfiguration graphicsConfiguration0 = mock(GraphicsConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn(rectangle0).when(graphicsConfiguration0).getBounds();
      Dimension dimension0 = mock(Dimension.class, new ViolatedAssumptionAnswer());
      Window window0 = mock(Window.class, new ViolatedAssumptionAnswer());
      doReturn(graphicsConfiguration0).when(window0).getGraphicsConfiguration();
      doReturn(dimension0).when(window0).getSize();
      UIUtils.positionFrameOnScreen(window0, (-3473.609515), 1.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rectangle rectangle0 = mock(Rectangle.class, new ViolatedAssumptionAnswer());
      GraphicsConfiguration graphicsConfiguration0 = mock(GraphicsConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn(rectangle0).when(graphicsConfiguration0).getBounds();
      Dimension dimension0 = mock(Dimension.class, new ViolatedAssumptionAnswer());
      Window window0 = mock(Window.class, new ViolatedAssumptionAnswer());
      doReturn(graphicsConfiguration0).when(window0).getGraphicsConfiguration();
      doReturn(dimension0).when(window0).getSize();
      UIUtils.centerFrameOnScreen(window0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rectangle rectangle0 = mock(Rectangle.class, new ViolatedAssumptionAnswer());
      GraphicsConfiguration graphicsConfiguration0 = mock(GraphicsConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn(rectangle0).when(graphicsConfiguration0).getBounds();
      Dimension dimension0 = mock(Dimension.class, new ViolatedAssumptionAnswer());
      Window window0 = mock(Window.class, new ViolatedAssumptionAnswer());
      doReturn(graphicsConfiguration0).when(window0).getGraphicsConfiguration();
      doReturn(dimension0).when(window0).getSize();
      UIUtils.positionFrameRandomly(window0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Dialog dialog0 = mock(Dialog.class, new ViolatedAssumptionAnswer());
      doReturn((GraphicsConfiguration) null).when(dialog0).getGraphicsConfiguration();
      doReturn((Container) null).when(dialog0).getParent();
      // Undeclared exception!
      try { 
        UIUtils.positionDialogRelativeToParent(dialog0, (-1.0), 2590.112273420496);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.UIUtils", e);
      }
  }
}
