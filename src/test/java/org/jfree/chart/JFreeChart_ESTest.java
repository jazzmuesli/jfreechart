/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 20:51:33 GMT 2019
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.ImageCapabilities;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.geom.AffineTransform;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BandedSampleModel;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.DataBufferUShort;
import java.awt.image.DirectColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.Raster;
import java.awt.image.RescaleOp;
import java.awt.image.SampleModel;
import java.awt.image.WritableRaster;
import java.net.URI;
import java.net.URL;
import java.sql.Connection;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.JApplet;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.JTree;
import javax.swing.border.SoftBevelBorder;
import javax.swing.event.RowSorterEvent;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.multi.MultiTreeUI;
import javax.swing.table.JTableHeader;
import javax.swing.tree.FixedHeightLayoutCache;
import javax.swing.tree.TreePath;
import javax.swing.tree.VariableHeightLayoutCache;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.ChartHints;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.TextAnnotation;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLabelLocation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnitSource;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.BlockResult;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.ChartChangeEvent;
import org.jfree.chart.event.ChartChangeEventType;
import org.jfree.chart.event.ChartChangeListener;
import org.jfree.chart.event.ChartProgressEvent;
import org.jfree.chart.event.ChartProgressListener;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.event.TitleChangeEvent;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CenterTextMode;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.DialShape;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PieLabelLinkStyle;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AreaRendererEndType;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.SamplingXYLineRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.text.TextFragment;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.title.ImageTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.ShortTextTitle;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.chart.ui.Layer;
import org.jfree.chart.ui.LengthAdjustmentType;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.ui.VerticalAlignment;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.util.Rotation;
import org.jfree.chart.util.SortOrder;
import org.jfree.chart.util.TableOrder;
import org.jfree.chart.util.UnitType;
import org.jfree.data.Range;
import org.jfree.data.RangeType;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.DateRange;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;
import sun.awt.image.ToolkitImage;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JFreeChart_ESTest extends JFreeChart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("CUBIC_CURVE");
      assertNotNull(subCategoryAxis0);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals("CUBIC_CURVE", subCategoryAxis0.getLabel());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      Font font0 = subCategoryAxis0.getTickLabelFont((Comparable) "CUBIC_CURVE");
      assertNotNull(font0);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals("CUBIC_CURVE", subCategoryAxis0.getLabel());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart("CUBIC_CURVE", font0, multiplePiePlot0, true);
      assertNotNull(jFreeChart0);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals("CUBIC_CURVE", subCategoryAxis0.getLabel());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      boolean boolean0 = jFreeChart0.equals("CUBIC_CURVE");
      assertFalse(boolean0);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals("CUBIC_CURVE", subCategoryAxis0.getLabel());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      Image image0 = null;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      jFreeChart0.setBackgroundImage((Image) null);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals("CUBIC_CURVE", subCategoryAxis0.getLabel());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setBackgroundImageAlignment(10);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals("CUBIC_CURVE", subCategoryAxis0.getLabel());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        jFreeChart0.addChangeListener((ChartChangeListener) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'listener' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      assertNotNull(meterPlot0);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.isNotify());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer((-3422.4));
      assertNotNull(xYBoxAndWhiskerRenderer0);
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultCreateEntities());
      assertEquals(3, xYBoxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(xYBoxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals((-3422.4), xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01);
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBoxAndWhiskerRenderer0.getPassCount());
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYBoxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBoxAndWhiskerRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBoxAndWhiskerRenderer0.getFillBox());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultSeriesVisible());
      
      Color color0 = (Color)xYBoxAndWhiskerRenderer0.getBoxPaint();
      assertNotNull(color0);
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultCreateEntities());
      assertEquals(3, xYBoxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(xYBoxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals((-3422.4), xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01);
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBoxAndWhiskerRenderer0.getPassCount());
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYBoxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBoxAndWhiskerRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBoxAndWhiskerRenderer0.getFillBox());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultSeriesVisible());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      
      meterPlot0.setNoDataMessagePaint(color0);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.isNotify());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultCreateEntities());
      assertEquals(3, xYBoxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(xYBoxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals((-3422.4), xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01);
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBoxAndWhiskerRenderer0.getPassCount());
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYBoxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBoxAndWhiskerRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBoxAndWhiskerRenderer0.getFillBox());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultSeriesVisible());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.isNotify());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      BasicStroke basicStroke0 = (BasicStroke)jFreeChart0.getBorderStroke();
      assertNotNull(basicStroke0);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.isNotify());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      meterPlot0.setNeedlePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.isNotify());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      boolean boolean0 = jFreeChart0.isNotify();
      assertTrue(boolean0);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.isNotify());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, verticalAlignment0, 270, 2261.35);
      assertNotNull(flowArrangement0);
      
      LegendTitle legendTitle0 = new LegendTitle(meterPlot0, flowArrangement0, flowArrangement0);
      assertNotNull(legendTitle0);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.isNotify());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertTrue(legendTitle0.getNotify());
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertTrue(legendTitle0.isVisible());
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(RectangleEdge.TOP, legendTitle0.getPosition());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertNull(legendTitle0.getID());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertTrue(legendTitle0.visible);
      
      jFreeChart0.addLegend(legendTitle0);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.isNotify());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(2, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertTrue(legendTitle0.getNotify());
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertTrue(legendTitle0.isVisible());
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(RectangleEdge.TOP, legendTitle0.getPosition());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertNull(legendTitle0.getID());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(legendTitle0.visible);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object object0 = jFreeChart0.getTextAntiAlias();
      assertNull(object0);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.isNotify());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(2, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      boolean boolean2 = jFreeChart0.isBorderVisible();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.isNotify());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(2, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      LegendTitle legendTitle1 = new LegendTitle(meterPlot0);
      assertFalse(legendTitle1.equals((Object)legendTitle0));
      assertNotNull(legendTitle1);
      assertEquals(RectangleAnchor.CENTER, legendTitle1.getLegendItemGraphicLocation());
      assertEquals(RectangleAnchor.CENTER, legendTitle1.getLegendItemGraphicAnchor());
      assertEquals(1.0, legendTitle1.getContentYOffset(), 0.01);
      assertNull(legendTitle1.getID());
      assertEquals(0.0, legendTitle1.getWidth(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, legendTitle1.getHorizontalAlignment());
      assertEquals(RectangleEdge.LEFT, legendTitle1.getLegendItemGraphicEdge());
      assertEquals(1.0, legendTitle1.getContentXOffset(), 0.01);
      assertTrue(legendTitle1.getNotify());
      assertEquals(RectangleEdge.TOP, legendTitle1.getPosition());
      assertEquals(0.0, legendTitle1.getHeight(), 0.01);
      assertEquals(SortOrder.ASCENDING, legendTitle1.getSortOrder());
      assertTrue(legendTitle1.isVisible());
      assertEquals(VerticalAlignment.CENTER, legendTitle1.getVerticalAlignment());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.isNotify());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(legendTitle1.visible);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      
      legendTitle1.setHeight(10.0);
      assertNotSame(legendTitle1, legendTitle0);
      assertFalse(legendTitle1.equals((Object)legendTitle0));
      assertEquals(RectangleAnchor.CENTER, legendTitle1.getLegendItemGraphicLocation());
      assertEquals(RectangleAnchor.CENTER, legendTitle1.getLegendItemGraphicAnchor());
      assertEquals(1.0, legendTitle1.getContentYOffset(), 0.01);
      assertNull(legendTitle1.getID());
      assertEquals(0.0, legendTitle1.getWidth(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, legendTitle1.getHorizontalAlignment());
      assertEquals(RectangleEdge.LEFT, legendTitle1.getLegendItemGraphicEdge());
      assertEquals(1.0, legendTitle1.getContentXOffset(), 0.01);
      assertTrue(legendTitle1.getNotify());
      assertEquals(10.0, legendTitle1.getHeight(), 0.01);
      assertEquals(RectangleEdge.TOP, legendTitle1.getPosition());
      assertEquals(SortOrder.ASCENDING, legendTitle1.getSortOrder());
      assertTrue(legendTitle1.isVisible());
      assertEquals(VerticalAlignment.CENTER, legendTitle1.getVerticalAlignment());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.isNotify());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(legendTitle1.visible);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      
      jFreeChart0.setTitle("ref");
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.isNotify());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(2, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      BlockResult blockResult0 = new BlockResult();
      assertNotNull(blockResult0);
      
      EntityCollection entityCollection0 = blockResult0.getEntityCollection();
      assertNull(entityCollection0);
      
      blockResult0.setEntityCollection((EntityCollection) null);
      EntityCollection entityCollection1 = blockResult0.getEntityCollection();
      assertNull(entityCollection1);
      
      blockResult0.setEntityCollection((EntityCollection) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      TextTitle textTitle0 = new TextTitle("q'_7>ziz9W!5P", jFreeChart0.DEFAULT_TITLE_FONT, jFreeChart0.DEFAULT_BACKGROUND_PAINT, rectangleEdge0, horizontalAlignment0, verticalAlignment0, multiplePiePlot0.DEFAULT_INSETS);
      assertNotNull(textTitle0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(HorizontalAlignment.LEFT, textTitle0.getTextAlignment());
      assertNull(textTitle0.getURLText());
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(VerticalAlignment.BOTTOM, textTitle0.getVerticalAlignment());
      assertNull(textTitle0.getToolTipText());
      assertEquals("q'_7>ziz9W!5P", textTitle0.getText());
      assertEquals(4.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(RectangleEdge.BOTTOM, textTitle0.getPosition());
      assertEquals(HorizontalAlignment.LEFT, textTitle0.getHorizontalAlignment());
      assertEquals(8.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(textTitle0.visible);
      
      jFreeChart0.removeSubtitle(textTitle0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(HorizontalAlignment.LEFT, textTitle0.getTextAlignment());
      assertNull(textTitle0.getURLText());
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(VerticalAlignment.BOTTOM, textTitle0.getVerticalAlignment());
      assertNull(textTitle0.getToolTipText());
      assertEquals("q'_7>ziz9W!5P", textTitle0.getText());
      assertEquals(4.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(RectangleEdge.BOTTOM, textTitle0.getPosition());
      assertEquals(HorizontalAlignment.LEFT, textTitle0.getHorizontalAlignment());
      assertEquals(8.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(textTitle0.visible);
      
      jFreeChart0.clearSubtitles();
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      assertNotNull(chartRenderingInfo0);
      
      multiplePiePlot0.removeChangeListener(jFreeChart0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 3, chartRenderingInfo0);
      assertNotNull(bufferedImage0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setBackgroundPaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.clearSubtitles();
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertNotNull(renderingHints0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(2, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      assertNotNull(chartPanel0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      
      chartPanel0.zoomOutRange(52.77004176232, 3);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      
      GraphicsConfiguration graphicsConfiguration0 = chartPanel0.getGraphicsConfiguration();
      assertNull(graphicsConfiguration0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      
      ImageCapabilities imageCapabilities0 = bufferedImage0.getCapabilities((GraphicsConfiguration) null);
      assertNotNull(imageCapabilities0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ImageTitle imageTitle0 = new ImageTitle(bufferedImage0);
      assertNotNull(imageTitle0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(RectangleEdge.TOP, imageTitle0.getPosition());
      assertEquals(10.0, imageTitle0.getWidth(), 0.01);
      assertEquals(10.0, imageTitle0.getHeight(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(VerticalAlignment.CENTER, imageTitle0.getVerticalAlignment());
      assertTrue(imageTitle0.getNotify());
      assertTrue(imageTitle0.isVisible());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, imageTitle0.getHorizontalAlignment());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(imageTitle0.visible);
      
      jFreeChart0.addSubtitle((Title) imageTitle0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(RectangleEdge.TOP, imageTitle0.getPosition());
      assertEquals(10.0, imageTitle0.getWidth(), 0.01);
      assertEquals(10.0, imageTitle0.getHeight(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(VerticalAlignment.CENTER, imageTitle0.getVerticalAlignment());
      assertTrue(imageTitle0.getNotify());
      assertTrue(imageTitle0.isVisible());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, imageTitle0.getHorizontalAlignment());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(imageTitle0.visible);
      
      TextTitle textTitle1 = jFreeChart0.getTitle();
      assertNotSame(textTitle1, textTitle0);
      assertFalse(textTitle1.equals((Object)textTitle0));
      assertNotNull(textTitle1);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(textTitle1.getToolTipText());
      assertEquals(1.0, textTitle1.getContentYOffset(), 0.01);
      assertNull(textTitle1.getID());
      assertEquals(0.0, textTitle1.getWidth(), 0.01);
      assertFalse(textTitle1.getExpandToFitSpace());
      assertEquals(HorizontalAlignment.CENTER, textTitle1.getHorizontalAlignment());
      assertEquals(0.0, textTitle1.getHeight(), 0.01);
      assertTrue(textTitle1.getNotify());
      assertEquals(HorizontalAlignment.CENTER, textTitle1.getTextAlignment());
      assertEquals(RectangleEdge.BOTTOM, textTitle1.getPosition());
      assertEquals(1.0, textTitle1.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle1.getMaximumLinesToDisplay());
      assertNull(textTitle1.getURLText());
      assertEquals("Series Title", textTitle1.getText());
      assertEquals(VerticalAlignment.CENTER, textTitle1.getVerticalAlignment());
      assertTrue(textTitle1.isVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(textTitle1.visible);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      
      multiplePiePlot0.setDataset(defaultBoxAndWhiskerCategoryDataset0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Image image0 = jFreeChart0.getBackgroundImage();
      assertNull(image0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setBorderPaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertNotNull(sunGraphics2D0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals((-1), sunGraphics2D0.pixel);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      
      EntityCollection entityCollection2 = jFreeChart0.drawTitle(textTitle0, sunGraphics2D0, rectangle2D_Double0, true);
      assertNotSame(textTitle0, textTitle1);
      assertFalse(textTitle0.equals((Object)textTitle1));
      assertNull(entityCollection2);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(HorizontalAlignment.LEFT, textTitle0.getTextAlignment());
      assertNull(textTitle0.getURLText());
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(VerticalAlignment.BOTTOM, textTitle0.getVerticalAlignment());
      assertNull(textTitle0.getToolTipText());
      assertEquals("q'_7>ziz9W!5P", textTitle0.getText());
      assertEquals(4.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(RectangleEdge.BOTTOM, textTitle0.getPosition());
      assertEquals(HorizontalAlignment.LEFT, textTitle0.getHorizontalAlignment());
      assertEquals(8.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(textTitle0.visible);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(2726.00275);
          assertNotNull(defaultValueDataset0);
          assertTrue(defaultValueDataset0.getNotify());
          
          MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
          assertNotNull(meterPlot0);
          assertTrue(defaultValueDataset0.getNotify());
          assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
          assertNull(meterPlot0.getNoDataMessage());
          assertEquals(15, meterPlot0.getBackgroundImageAlignment());
          assertFalse(meterPlot0.isSubplot());
          assertTrue(meterPlot0.isOutlineVisible());
          assertEquals(270, meterPlot0.getMeterAngle());
          assertEquals("Units", meterPlot0.getUnits());
          assertTrue(meterPlot0.getTickLabelsVisible());
          assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
          assertFalse(meterPlot0.fetchElementHintingFlag());
          assertTrue(meterPlot0.isNotify());
          assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
          assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
          assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
          assertFalse(meterPlot0.getDrawBorder());
          assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
          assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
          assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
          assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
          assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
          assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
          assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
          
          Font font0 = meterPlot0.getTickLabelFont();
          assertNotNull(font0);
          assertTrue(defaultValueDataset0.getNotify());
          assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
          assertNull(meterPlot0.getNoDataMessage());
          assertEquals(15, meterPlot0.getBackgroundImageAlignment());
          assertFalse(meterPlot0.isSubplot());
          assertTrue(meterPlot0.isOutlineVisible());
          assertEquals(270, meterPlot0.getMeterAngle());
          assertEquals("Units", meterPlot0.getUnits());
          assertTrue(meterPlot0.getTickLabelsVisible());
          assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
          assertFalse(meterPlot0.fetchElementHintingFlag());
          assertTrue(meterPlot0.isNotify());
          assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
          assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
          assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
          assertFalse(meterPlot0.getDrawBorder());
          assertEquals("SansSerif", font0.getName());
          assertFalse(font0.isTransformed());
          assertFalse(font0.hasUniformLineMetrics());
          assertFalse(font0.isPlain());
          assertTrue(font0.isBold());
          assertEquals(1, font0.getStyle());
          assertEquals(10, font0.getSize());
          assertEquals(10.0F, font0.getSize2D(), 0.01F);
          assertFalse(font0.hasLayoutAttributes());
          assertFalse(font0.isItalic());
          assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
          assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
          assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
          assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
          assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
          assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
          assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
          
          boolean boolean0 = true;
          JFreeChart jFreeChart0 = new JFreeChart("", font0, meterPlot0, true);
          assertNotNull(jFreeChart0);
          assertTrue(defaultValueDataset0.getNotify());
          assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
          assertNull(meterPlot0.getNoDataMessage());
          assertEquals(15, meterPlot0.getBackgroundImageAlignment());
          assertFalse(meterPlot0.isSubplot());
          assertTrue(meterPlot0.isOutlineVisible());
          assertEquals(270, meterPlot0.getMeterAngle());
          assertEquals("Units", meterPlot0.getUnits());
          assertTrue(meterPlot0.getTickLabelsVisible());
          assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
          assertFalse(meterPlot0.fetchElementHintingFlag());
          assertTrue(meterPlot0.isNotify());
          assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
          assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
          assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
          assertFalse(meterPlot0.getDrawBorder());
          assertEquals("SansSerif", font0.getName());
          assertFalse(font0.isTransformed());
          assertFalse(font0.hasUniformLineMetrics());
          assertFalse(font0.isPlain());
          assertTrue(font0.isBold());
          assertEquals(1, font0.getStyle());
          assertEquals(10, font0.getSize());
          assertEquals(10.0F, font0.getSize2D(), 0.01F);
          assertFalse(font0.hasLayoutAttributes());
          assertFalse(font0.isItalic());
          assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
          assertTrue(jFreeChart0.getAntiAlias());
          assertNull(jFreeChart0.getID());
          assertFalse(jFreeChart0.isBorderVisible());
          assertEquals(1, jFreeChart0.getSubtitleCount());
          assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
          assertTrue(jFreeChart0.isNotify());
          assertFalse(jFreeChart0.getElementHinting());
          assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
          assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
          assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
          assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
          assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
          assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
          assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
          assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
          assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
          
          LegendTitle legendTitle0 = jFreeChart0.getLegend((-300));
          assertNull(legendTitle0);
          assertTrue(defaultValueDataset0.getNotify());
          assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
          assertNull(meterPlot0.getNoDataMessage());
          assertEquals(15, meterPlot0.getBackgroundImageAlignment());
          assertFalse(meterPlot0.isSubplot());
          assertTrue(meterPlot0.isOutlineVisible());
          assertEquals(270, meterPlot0.getMeterAngle());
          assertEquals("Units", meterPlot0.getUnits());
          assertTrue(meterPlot0.getTickLabelsVisible());
          assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
          assertFalse(meterPlot0.fetchElementHintingFlag());
          assertTrue(meterPlot0.isNotify());
          assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
          assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
          assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
          assertFalse(meterPlot0.getDrawBorder());
          assertEquals("SansSerif", font0.getName());
          assertFalse(font0.isTransformed());
          assertFalse(font0.hasUniformLineMetrics());
          assertFalse(font0.isPlain());
          assertTrue(font0.isBold());
          assertEquals(1, font0.getStyle());
          assertEquals(10, font0.getSize());
          assertEquals(10.0F, font0.getSize2D(), 0.01F);
          assertFalse(font0.hasLayoutAttributes());
          assertFalse(font0.isItalic());
          assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
          assertTrue(jFreeChart0.getAntiAlias());
          assertNull(jFreeChart0.getID());
          assertFalse(jFreeChart0.isBorderVisible());
          assertEquals(1, jFreeChart0.getSubtitleCount());
          assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
          assertTrue(jFreeChart0.isNotify());
          assertFalse(jFreeChart0.getElementHinting());
          assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
          assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
          assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
          assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
          assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
          assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
          assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
          assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
          assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
          
          RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
          assertNotNull(renderingHints0);
          assertTrue(defaultValueDataset0.getNotify());
          assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
          assertNull(meterPlot0.getNoDataMessage());
          assertEquals(15, meterPlot0.getBackgroundImageAlignment());
          assertFalse(meterPlot0.isSubplot());
          assertTrue(meterPlot0.isOutlineVisible());
          assertEquals(270, meterPlot0.getMeterAngle());
          assertEquals("Units", meterPlot0.getUnits());
          assertTrue(meterPlot0.getTickLabelsVisible());
          assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
          assertFalse(meterPlot0.fetchElementHintingFlag());
          assertTrue(meterPlot0.isNotify());
          assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
          assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
          assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
          assertFalse(meterPlot0.getDrawBorder());
          assertEquals("SansSerif", font0.getName());
          assertFalse(font0.isTransformed());
          assertFalse(font0.hasUniformLineMetrics());
          assertFalse(font0.isPlain());
          assertTrue(font0.isBold());
          assertEquals(1, font0.getStyle());
          assertEquals(10, font0.getSize());
          assertEquals(10.0F, font0.getSize2D(), 0.01F);
          assertFalse(font0.hasLayoutAttributes());
          assertFalse(font0.isItalic());
          assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
          assertTrue(jFreeChart0.getAntiAlias());
          assertNull(jFreeChart0.getID());
          assertFalse(jFreeChart0.isBorderVisible());
          assertEquals(1, jFreeChart0.getSubtitleCount());
          assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
          assertTrue(jFreeChart0.isNotify());
          assertFalse(jFreeChart0.getElementHinting());
          assertFalse(renderingHints0.isEmpty());
          assertEquals(2, renderingHints0.size());
          assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
          assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
          assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
          assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
          assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
          assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
          assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
          assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
          assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
          
          ConvolveOp convolveOp0 = new ConvolveOp((Kernel) null, 233, renderingHints0);
          assertNotNull(convolveOp0);
          assertTrue(defaultValueDataset0.getNotify());
          assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
          assertNull(meterPlot0.getNoDataMessage());
          assertEquals(15, meterPlot0.getBackgroundImageAlignment());
          assertFalse(meterPlot0.isSubplot());
          assertTrue(meterPlot0.isOutlineVisible());
          assertEquals(270, meterPlot0.getMeterAngle());
          assertEquals("Units", meterPlot0.getUnits());
          assertTrue(meterPlot0.getTickLabelsVisible());
          assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
          assertFalse(meterPlot0.fetchElementHintingFlag());
          assertTrue(meterPlot0.isNotify());
          assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
          assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
          assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
          assertFalse(meterPlot0.getDrawBorder());
          assertEquals("SansSerif", font0.getName());
          assertFalse(font0.isTransformed());
          assertFalse(font0.hasUniformLineMetrics());
          assertFalse(font0.isPlain());
          assertTrue(font0.isBold());
          assertEquals(1, font0.getStyle());
          assertEquals(10, font0.getSize());
          assertEquals(10.0F, font0.getSize2D(), 0.01F);
          assertFalse(font0.hasLayoutAttributes());
          assertFalse(font0.isItalic());
          assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
          assertTrue(jFreeChart0.getAntiAlias());
          assertNull(jFreeChart0.getID());
          assertFalse(jFreeChart0.isBorderVisible());
          assertEquals(1, jFreeChart0.getSubtitleCount());
          assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
          assertTrue(jFreeChart0.isNotify());
          assertFalse(jFreeChart0.getElementHinting());
          assertFalse(renderingHints0.isEmpty());
          assertEquals(2, renderingHints0.size());
          assertEquals(233, convolveOp0.getEdgeCondition());
          assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
          assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
          assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
          assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
          assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
          assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
          assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
          assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
          assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
          
          BufferedImage bufferedImage0 = null;
          try {
            bufferedImage0 = new BufferedImage(10, 2146268801, 10);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"loadLibrary.javalcms\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkLink(SecurityManager.java:835)
             // java.lang.Runtime.loadLibrary0(Runtime.java:864)
             // java.lang.System.loadLibrary(System.java:1122)
             // sun.java2d.cmm.lcms.LCMS$1.run(LCMS.java:210)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.java2d.cmm.lcms.LCMS.getModule(LCMS.java:203)
             // sun.java2d.cmm.lcms.LcmsServiceProvider.getModule(LcmsServiceProvider.java:34)
             // sun.java2d.cmm.CMMServiceProvider.getColorManagementModule(CMMServiceProvider.java:31)
             // sun.java2d.cmm.CMSManager.getModule(CMSManager.java:76)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:783)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:1017)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:982)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:933)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:929)
             // java.security.AccessController.doPrivileged(Native Method)
             // java.awt.color.ICC_Profile.getStandardProfile(ICC_Profile.java:928)
             // java.awt.color.ICC_Profile.getDeferredInstance(ICC_Profile.java:1075)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:895)
             // java.awt.color.ColorSpace.getInstance(ColorSpace.java:333)
             // java.awt.image.BufferedImage.<init>(BufferedImage.java:415)
             // sun.reflect.GeneratedConstructorAccessor168.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORTED;
      assertEquals(RowSorterEvent.Type.SORTED, rowSorterEvent_Type0);
      
      boolean boolean0 = multiplePiePlot0.equals(rowSorterEvent_Type0);
      assertFalse(boolean0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertNotNull(lookupPaintScale0);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      
      LogAxis logAxis0 = new LogAxis();
      assertNotNull(logAxis0);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      boolean boolean1 = lookupPaintScale0.equals(logAxis0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      multiplePiePlot0.setNoDataMessage("org.jfree.chart.entity.TickLabelEntity");
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 500);
      assertNotNull(bufferedImage0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(15, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      int int0 = jFreeChart0.getBackgroundImageAlignment();
      assertEquals(15, int0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setElementHinting(true);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(500, 15);
      assertNotNull(waferMapRenderer0);
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      
      DrawingSupplier drawingSupplier0 = waferMapRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      
      multiplePiePlot0.setDrawingSupplier((DrawingSupplier) null);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(logAxis0);
      assertNotNull(axisChangeEvent0);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(ChartChangeEventType.GENERAL, axisChangeEvent0.getType());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      jFreeChart0.notifyListeners(axisChangeEvent0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(ChartChangeEventType.GENERAL, axisChangeEvent0.getType());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      RectangleInsets rectangleInsets0 = jFreeChart0.getPadding();
      assertNotNull(rectangleInsets0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertTrue(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      List<Title> list0 = jFreeChart0.getSubtitles();
      assertNotNull(list0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertNotNull(sunGraphics2D0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(15, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, (-1), 2145174525, 10, (-1), 1634, false, true, true, true, true, true, true);
      assertNotNull(chartPanel0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(1634, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(2145174525, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals((-1), chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(10, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      assertNotNull(rectangle0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(1634, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(2145174525, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals((-1), chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(10, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      assertNotNull(gridBagLayout0);
      
      Point point0 = gridBagLayout0.location(10, (-145));
      assertNotNull(point0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertNotNull(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertNotNull(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) rectangle0, (Point2D) point0, chartRenderingInfo0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(1634, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(2145174525, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals((-1), chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(10, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(1, standardEntityCollection0.getEntityCount());
      assertEquals(15, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(15, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-8355712), sunGraphics2D0.eargb);
      assertEquals(2, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(2, sunGraphics2D0.strokeHint);
      assertEquals((-8355712), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORTED;
      assertEquals(RowSorterEvent.Type.SORTED, rowSorterEvent_Type0);
      
      boolean boolean0 = multiplePiePlot0.equals(rowSorterEvent_Type0);
      assertFalse(boolean0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertNotNull(lookupPaintScale0);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      
      LogAxis logAxis0 = new LogAxis();
      assertNotNull(logAxis0);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      boolean boolean1 = lookupPaintScale0.equals(logAxis0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      multiplePiePlot0.setNoDataMessage("org.jfree.chart.entity.TickLabelEntity");
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 500);
      assertNotNull(bufferedImage0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(500, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(15, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(15, bufferedImage0.getWidth());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      int int0 = jFreeChart0.getBackgroundImageAlignment();
      assertEquals(15, int0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setElementHinting(true);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(logAxis0);
      assertNotNull(axisChangeEvent0);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(ChartChangeEventType.GENERAL, axisChangeEvent0.getType());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      jFreeChart0.notifyListeners(axisChangeEvent0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(ChartChangeEventType.GENERAL, axisChangeEvent0.getType());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      RectangleInsets rectangleInsets0 = jFreeChart0.getPadding();
      assertNotNull(rectangleInsets0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      List<Title> list0 = jFreeChart0.getSubtitles();
      assertNotNull(list0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertNotNull(sunGraphics2D0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(500, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(15, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(15, bufferedImage0.getWidth());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.getFrame();
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertNotNull(rectangle2D_Double1);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      
      jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(500, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(15, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(15, bufferedImage0.getWidth());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals((-8355712), sunGraphics2D0.pixel);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals((-8355712), sunGraphics2D0.eargb);
      assertEquals(2, sunGraphics2D0.antialiasHint);
      assertEquals(2, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORTED;
      assertEquals(RowSorterEvent.Type.SORTED, rowSorterEvent_Type0);
      
      boolean boolean0 = multiplePiePlot0.equals(rowSorterEvent_Type0);
      assertFalse(boolean0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertNotNull(lookupPaintScale0);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      
      LogAxis logAxis0 = new LogAxis();
      assertNotNull(logAxis0);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertNull(logAxis0.getBaseSymbol());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      
      boolean boolean1 = lookupPaintScale0.equals(logAxis0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertNull(logAxis0.getBaseSymbol());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      
      LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      multiplePiePlot0.setNoDataMessage("org.jfree.chart.entity.TickLabelEntity");
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 500);
      assertNotNull(bufferedImage0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(15, bufferedImage0.getWidth());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(15, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      int int0 = jFreeChart0.getBackgroundImageAlignment();
      assertEquals(15, int0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setElementHinting(true);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(logAxis0);
      assertNotNull(axisChangeEvent0);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertNull(logAxis0.getBaseSymbol());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(ChartChangeEventType.GENERAL, axisChangeEvent0.getType());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      
      jFreeChart0.notifyListeners(axisChangeEvent0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertNull(logAxis0.getBaseSymbol());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(ChartChangeEventType.GENERAL, axisChangeEvent0.getType());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      
      RectangleInsets rectangleInsets0 = jFreeChart0.getPadding();
      assertNotNull(rectangleInsets0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      List<Title> list0 = jFreeChart0.getSubtitles();
      assertNotNull(list0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.notifyListeners(axisChangeEvent0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertNull(logAxis0.getBaseSymbol());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(ChartChangeEventType.GENERAL, axisChangeEvent0.getType());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      
      boolean boolean2 = jFreeChart0.getElementHinting();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertTrue(defaultMultiValueCategoryDataset1.getNotify());
      
      int int0 = 71;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultMultiValueCategoryDataset0, 71, 71);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertNotNull(slidingCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(71, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(71, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      
      boolean boolean1 = false;
      slidingCategoryDataset0.setNotify(false);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertFalse(slidingCategoryDataset0.getNotify());
      assertEquals(71, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(71, slidingCategoryDataset0.getMaximumCategoryCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(slidingCategoryDataset0, tableOrder0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertNotNull(spiderWebPlot0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertFalse(slidingCategoryDataset0.getNotify());
      assertEquals(71, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(71, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      assertNotNull(font0);
      assertEquals(0, font0.getStyle());
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      
      boolean boolean2 = false;
      JFreeChart jFreeChart0 = new JFreeChart((String) null, font0, spiderWebPlot0, false);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertNotNull(jFreeChart0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertFalse(slidingCategoryDataset0.getNotify());
      assertEquals(71, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(71, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0, font0.getStyle());
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart1, jFreeChart0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      assertNotNull(jFreeChart1);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertFalse(slidingCategoryDataset0.getNotify());
      assertEquals(71, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(71, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0, font0.getStyle());
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart1.getElementHinting());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertFalse(jFreeChart1.isBorderVisible());
      assertTrue(jFreeChart1.isNotify());
      assertTrue(jFreeChart1.getAntiAlias());
      assertEquals(0, jFreeChart1.getSubtitleCount());
      assertNull(jFreeChart1.getID());
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      jFreeChart0.createBufferedImage(2146268801, 2270);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          XYPlot xYPlot0 = new XYPlot();
          assertNotNull(xYPlot0);
          assertEquals(0, xYPlot0.getRangeAxisCount());
          assertTrue(xYPlot0.isOutlineVisible());
          assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
          assertFalse(xYPlot0.fetchElementHintingFlag());
          assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
          assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getDomainAxisLocation());
          assertEquals(SeriesRenderingOrder.REVERSE, xYPlot0.getSeriesRenderingOrder());
          assertFalse(xYPlot0.isDomainZeroBaselineVisible());
          assertTrue(xYPlot0.isDomainZoomable());
          assertEquals(0, xYPlot0.getDomainAxisCount());
          assertFalse(xYPlot0.isSubplot());
          assertEquals(0, xYPlot0.getRendererCount());
          assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
          assertEquals(1, xYPlot0.getWeight());
          assertTrue(xYPlot0.isRangeZoomable());
          assertFalse(xYPlot0.isDomainCrosshairVisible());
          assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
          assertEquals(15, xYPlot0.getBackgroundImageAlignment());
          assertEquals(0, xYPlot0.getDatasetCount());
          assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
          assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
          assertEquals(DatasetRenderingOrder.REVERSE, xYPlot0.getDatasetRenderingOrder());
          assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
          assertTrue(xYPlot0.isDomainGridlinesVisible());
          assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getRangeAxisLocation());
          assertEquals(PlotOrientation.VERTICAL, xYPlot0.getOrientation());
          assertNull(xYPlot0.getNoDataMessage());
          assertTrue(xYPlot0.isRangeGridlinesVisible());
          assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
          assertFalse(xYPlot0.isRangeCrosshairVisible());
          assertTrue(xYPlot0.isNotify());
          assertFalse(xYPlot0.isRangeZeroBaselineVisible());
          assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
          assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
          assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
          assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
          assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
          assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
          
          boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
          assertFalse(boolean0);
          
          JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
          assertNotNull(jFreeChart0);
          assertEquals(0, xYPlot0.getRangeAxisCount());
          assertTrue(xYPlot0.isOutlineVisible());
          assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
          assertFalse(xYPlot0.fetchElementHintingFlag());
          assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
          assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getDomainAxisLocation());
          assertEquals(SeriesRenderingOrder.REVERSE, xYPlot0.getSeriesRenderingOrder());
          assertFalse(xYPlot0.isDomainZeroBaselineVisible());
          assertTrue(xYPlot0.isDomainZoomable());
          assertEquals(0, xYPlot0.getDomainAxisCount());
          assertFalse(xYPlot0.isSubplot());
          assertEquals(0, xYPlot0.getRendererCount());
          assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
          assertEquals(1, xYPlot0.getWeight());
          assertTrue(xYPlot0.isRangeZoomable());
          assertFalse(xYPlot0.isDomainCrosshairVisible());
          assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
          assertEquals(15, xYPlot0.getBackgroundImageAlignment());
          assertEquals(0, xYPlot0.getDatasetCount());
          assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
          assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
          assertEquals(DatasetRenderingOrder.REVERSE, xYPlot0.getDatasetRenderingOrder());
          assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
          assertTrue(xYPlot0.isDomainGridlinesVisible());
          assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getRangeAxisLocation());
          assertEquals(PlotOrientation.VERTICAL, xYPlot0.getOrientation());
          assertNull(xYPlot0.getNoDataMessage());
          assertTrue(xYPlot0.isRangeGridlinesVisible());
          assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
          assertFalse(xYPlot0.isRangeCrosshairVisible());
          assertTrue(xYPlot0.isNotify());
          assertFalse(xYPlot0.isRangeZeroBaselineVisible());
          assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
          assertFalse(jFreeChart0.isBorderVisible());
          assertFalse(jFreeChart0.getElementHinting());
          assertTrue(jFreeChart0.isNotify());
          assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
          assertTrue(jFreeChart0.getAntiAlias());
          assertNull(jFreeChart0.getID());
          assertEquals(1, jFreeChart0.getSubtitleCount());
          assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
          assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
          assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
          assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
          assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
          assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
          assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
          assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
          
          jFreeChart0.setNotify(false);
          assertEquals(0, xYPlot0.getRangeAxisCount());
          assertTrue(xYPlot0.isOutlineVisible());
          assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
          assertFalse(xYPlot0.fetchElementHintingFlag());
          assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
          assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getDomainAxisLocation());
          assertEquals(SeriesRenderingOrder.REVERSE, xYPlot0.getSeriesRenderingOrder());
          assertFalse(xYPlot0.isDomainZeroBaselineVisible());
          assertTrue(xYPlot0.isDomainZoomable());
          assertEquals(0, xYPlot0.getDomainAxisCount());
          assertFalse(xYPlot0.isSubplot());
          assertEquals(0, xYPlot0.getRendererCount());
          assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
          assertEquals(1, xYPlot0.getWeight());
          assertTrue(xYPlot0.isRangeZoomable());
          assertFalse(xYPlot0.isDomainCrosshairVisible());
          assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
          assertEquals(15, xYPlot0.getBackgroundImageAlignment());
          assertEquals(0, xYPlot0.getDatasetCount());
          assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
          assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
          assertEquals(DatasetRenderingOrder.REVERSE, xYPlot0.getDatasetRenderingOrder());
          assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
          assertTrue(xYPlot0.isDomainGridlinesVisible());
          assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getRangeAxisLocation());
          assertEquals(PlotOrientation.VERTICAL, xYPlot0.getOrientation());
          assertNull(xYPlot0.getNoDataMessage());
          assertTrue(xYPlot0.isRangeGridlinesVisible());
          assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
          assertFalse(xYPlot0.isRangeCrosshairVisible());
          assertTrue(xYPlot0.isNotify());
          assertFalse(xYPlot0.isRangeZeroBaselineVisible());
          assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
          assertFalse(jFreeChart0.isBorderVisible());
          assertFalse(jFreeChart0.isNotify());
          assertFalse(jFreeChart0.getElementHinting());
          assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
          assertTrue(jFreeChart0.getAntiAlias());
          assertNull(jFreeChart0.getID());
          assertEquals(1, jFreeChart0.getSubtitleCount());
          assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
          assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
          assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
          assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
          assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
          assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
          assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
          assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
          
          ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
          assertNotNull(chartPanel0);
          assertEquals(0, xYPlot0.getRangeAxisCount());
          assertTrue(xYPlot0.isOutlineVisible());
          assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
          assertFalse(xYPlot0.fetchElementHintingFlag());
          assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
          assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getDomainAxisLocation());
          assertEquals(SeriesRenderingOrder.REVERSE, xYPlot0.getSeriesRenderingOrder());
          assertFalse(xYPlot0.isDomainZeroBaselineVisible());
          assertTrue(xYPlot0.isDomainZoomable());
          assertEquals(0, xYPlot0.getDomainAxisCount());
          assertFalse(xYPlot0.isSubplot());
          assertEquals(0, xYPlot0.getRendererCount());
          assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
          assertEquals(1, xYPlot0.getWeight());
          assertTrue(xYPlot0.isRangeZoomable());
          assertFalse(xYPlot0.isDomainCrosshairVisible());
          assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
          assertEquals(15, xYPlot0.getBackgroundImageAlignment());
          assertEquals(0, xYPlot0.getDatasetCount());
          assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
          assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
          assertEquals(DatasetRenderingOrder.REVERSE, xYPlot0.getDatasetRenderingOrder());
          assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
          assertTrue(xYPlot0.isDomainGridlinesVisible());
          assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getRangeAxisLocation());
          assertEquals(PlotOrientation.VERTICAL, xYPlot0.getOrientation());
          assertNull(xYPlot0.getNoDataMessage());
          assertTrue(xYPlot0.isRangeGridlinesVisible());
          assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
          assertFalse(xYPlot0.isRangeCrosshairVisible());
          assertTrue(xYPlot0.isNotify());
          assertFalse(xYPlot0.isRangeZeroBaselineVisible());
          assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
          assertFalse(jFreeChart0.isBorderVisible());
          assertFalse(jFreeChart0.isNotify());
          assertFalse(jFreeChart0.getElementHinting());
          assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
          assertTrue(jFreeChart0.getAntiAlias());
          assertNull(jFreeChart0.getID());
          assertEquals(1, jFreeChart0.getSubtitleCount());
          assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
          assertFalse(chartPanel0.getRefreshBuffer());
          assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
          assertFalse(chartPanel0.isFocusCycleRoot());
          assertFalse(chartPanel0.isFocusTraversalPolicySet());
          assertTrue(chartPanel0.isRangeZoomable());
          assertFalse(chartPanel0.getIgnoreRepaint());
          assertEquals(750, chartPanel0.getInitialDelay());
          assertEquals(300, chartPanel0.getMinimumDrawWidth());
          assertFalse(chartPanel0.isMouseWheelEnabled());
          assertEquals(10, chartPanel0.getZoomTriggerDistance());
          assertEquals(4000, chartPanel0.getDismissDelay());
          assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
          assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
          assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
          assertTrue(chartPanel0.getFillZoomRectangle());
          assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
          assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
          assertTrue(chartPanel0.isEnforceFileExtensions());
          assertEquals(1024, chartPanel0.getMaximumDrawWidth());
          assertEquals(768, chartPanel0.getMaximumDrawHeight());
          assertTrue(chartPanel0.isDomainZoomable());
          assertEquals(500, chartPanel0.getReshowDelay());
          assertFalse(chartPanel0.getZoomAroundAnchor());
          assertEquals(200, chartPanel0.getMinimumDrawHeight());
          assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
          assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
          assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
          assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
          assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
          assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
          assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
          assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
          assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
          assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
          assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
          assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
          assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
          assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
          assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
          
          chartPanel0.repaint();
          assertEquals(0, xYPlot0.getRangeAxisCount());
          assertTrue(xYPlot0.isOutlineVisible());
          assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
          assertFalse(xYPlot0.fetchElementHintingFlag());
          assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
          assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getDomainAxisLocation());
          assertEquals(SeriesRenderingOrder.REVERSE, xYPlot0.getSeriesRenderingOrder());
          assertFalse(xYPlot0.isDomainZeroBaselineVisible());
          assertTrue(xYPlot0.isDomainZoomable());
          assertEquals(0, xYPlot0.getDomainAxisCount());
          assertFalse(xYPlot0.isSubplot());
          assertEquals(0, xYPlot0.getRendererCount());
          assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
          assertEquals(1, xYPlot0.getWeight());
          assertTrue(xYPlot0.isRangeZoomable());
          assertFalse(xYPlot0.isDomainCrosshairVisible());
          assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
          assertEquals(15, xYPlot0.getBackgroundImageAlignment());
          assertEquals(0, xYPlot0.getDatasetCount());
          assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
          assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
          assertEquals(DatasetRenderingOrder.REVERSE, xYPlot0.getDatasetRenderingOrder());
          assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
          assertTrue(xYPlot0.isDomainGridlinesVisible());
          assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getRangeAxisLocation());
          assertEquals(PlotOrientation.VERTICAL, xYPlot0.getOrientation());
          assertNull(xYPlot0.getNoDataMessage());
          assertTrue(xYPlot0.isRangeGridlinesVisible());
          assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
          assertFalse(xYPlot0.isRangeCrosshairVisible());
          assertTrue(xYPlot0.isNotify());
          assertFalse(xYPlot0.isRangeZeroBaselineVisible());
          assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
          assertFalse(jFreeChart0.isBorderVisible());
          assertFalse(jFreeChart0.isNotify());
          assertFalse(jFreeChart0.getElementHinting());
          assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
          assertTrue(jFreeChart0.getAntiAlias());
          assertNull(jFreeChart0.getID());
          assertEquals(1, jFreeChart0.getSubtitleCount());
          assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
          assertFalse(chartPanel0.getRefreshBuffer());
          assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
          assertFalse(chartPanel0.isFocusCycleRoot());
          assertFalse(chartPanel0.isFocusTraversalPolicySet());
          assertTrue(chartPanel0.isRangeZoomable());
          assertFalse(chartPanel0.getIgnoreRepaint());
          assertEquals(750, chartPanel0.getInitialDelay());
          assertEquals(300, chartPanel0.getMinimumDrawWidth());
          assertFalse(chartPanel0.isMouseWheelEnabled());
          assertEquals(10, chartPanel0.getZoomTriggerDistance());
          assertEquals(4000, chartPanel0.getDismissDelay());
          assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
          assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
          assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
          assertTrue(chartPanel0.getFillZoomRectangle());
          assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
          assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
          assertTrue(chartPanel0.isEnforceFileExtensions());
          assertEquals(1024, chartPanel0.getMaximumDrawWidth());
          assertEquals(768, chartPanel0.getMaximumDrawHeight());
          assertTrue(chartPanel0.isDomainZoomable());
          assertEquals(500, chartPanel0.getReshowDelay());
          assertFalse(chartPanel0.getZoomAroundAnchor());
          assertEquals(200, chartPanel0.getMinimumDrawHeight());
          assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
          assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
          assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
          assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
          assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
          assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
          assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
          assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
          assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
          assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
          assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
          assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
          assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
          assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
          assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
          
          jFreeChart0.removeChangeListener(chartPanel0);
          assertEquals(0, xYPlot0.getRangeAxisCount());
          assertTrue(xYPlot0.isOutlineVisible());
          assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
          assertFalse(xYPlot0.fetchElementHintingFlag());
          assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
          assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getDomainAxisLocation());
          assertEquals(SeriesRenderingOrder.REVERSE, xYPlot0.getSeriesRenderingOrder());
          assertFalse(xYPlot0.isDomainZeroBaselineVisible());
          assertTrue(xYPlot0.isDomainZoomable());
          assertEquals(0, xYPlot0.getDomainAxisCount());
          assertFalse(xYPlot0.isSubplot());
          assertEquals(0, xYPlot0.getRendererCount());
          assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
          assertEquals(1, xYPlot0.getWeight());
          assertTrue(xYPlot0.isRangeZoomable());
          assertFalse(xYPlot0.isDomainCrosshairVisible());
          assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
          assertEquals(15, xYPlot0.getBackgroundImageAlignment());
          assertEquals(0, xYPlot0.getDatasetCount());
          assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
          assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
          assertEquals(DatasetRenderingOrder.REVERSE, xYPlot0.getDatasetRenderingOrder());
          assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
          assertTrue(xYPlot0.isDomainGridlinesVisible());
          assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getRangeAxisLocation());
          assertEquals(PlotOrientation.VERTICAL, xYPlot0.getOrientation());
          assertNull(xYPlot0.getNoDataMessage());
          assertTrue(xYPlot0.isRangeGridlinesVisible());
          assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
          assertFalse(xYPlot0.isRangeCrosshairVisible());
          assertTrue(xYPlot0.isNotify());
          assertFalse(xYPlot0.isRangeZeroBaselineVisible());
          assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
          assertFalse(jFreeChart0.isBorderVisible());
          assertFalse(jFreeChart0.isNotify());
          assertFalse(jFreeChart0.getElementHinting());
          assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
          assertTrue(jFreeChart0.getAntiAlias());
          assertNull(jFreeChart0.getID());
          assertEquals(1, jFreeChart0.getSubtitleCount());
          assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
          assertFalse(chartPanel0.getRefreshBuffer());
          assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
          assertFalse(chartPanel0.isFocusCycleRoot());
          assertFalse(chartPanel0.isFocusTraversalPolicySet());
          assertTrue(chartPanel0.isRangeZoomable());
          assertFalse(chartPanel0.getIgnoreRepaint());
          assertEquals(750, chartPanel0.getInitialDelay());
          assertEquals(300, chartPanel0.getMinimumDrawWidth());
          assertFalse(chartPanel0.isMouseWheelEnabled());
          assertEquals(10, chartPanel0.getZoomTriggerDistance());
          assertEquals(4000, chartPanel0.getDismissDelay());
          assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
          assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
          assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
          assertTrue(chartPanel0.getFillZoomRectangle());
          assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
          assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
          assertTrue(chartPanel0.isEnforceFileExtensions());
          assertEquals(1024, chartPanel0.getMaximumDrawWidth());
          assertEquals(768, chartPanel0.getMaximumDrawHeight());
          assertTrue(chartPanel0.isDomainZoomable());
          assertEquals(500, chartPanel0.getReshowDelay());
          assertFalse(chartPanel0.getZoomAroundAnchor());
          assertEquals(200, chartPanel0.getMinimumDrawHeight());
          assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
          assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
          assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
          assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
          assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
          assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
          assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
          assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
          assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
          assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
          assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
          assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
          assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
          assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
          assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
          
          ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
          assertNotNull(chartRenderingInfo0);
          
          // Undeclared exception!
          try { 
            jFreeChart0.createBufferedImage(1024, 134, 10, chartRenderingInfo0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"loadLibrary.javalcms\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkLink(SecurityManager.java:835)
             // java.lang.Runtime.loadLibrary0(Runtime.java:864)
             // java.lang.System.loadLibrary(System.java:1122)
             // sun.java2d.cmm.lcms.LCMS$1.run(LCMS.java:210)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.java2d.cmm.lcms.LCMS.getModule(LCMS.java:203)
             // sun.java2d.cmm.lcms.LcmsServiceProvider.getModule(LcmsServiceProvider.java:34)
             // sun.java2d.cmm.CMMServiceProvider.getColorManagementModule(CMMServiceProvider.java:31)
             // sun.java2d.cmm.CMSManager.getModule(CMSManager.java:76)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:783)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:1017)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:982)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:933)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:929)
             // java.security.AccessController.doPrivileged(Native Method)
             // java.awt.color.ICC_Profile.getStandardProfile(ICC_Profile.java:928)
             // java.awt.color.ICC_Profile.getDeferredInstance(ICC_Profile.java:1075)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:895)
             // java.awt.color.ColorSpace.getInstance(ColorSpace.java:333)
             // java.awt.image.BufferedImage.<init>(BufferedImage.java:415)
             // org.jfree.chart.JFreeChart.createBufferedImage(JFreeChart.java:1330)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertTrue(defaultMultiValueCategoryDataset1.getNotify());
      
      int int0 = 71;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultMultiValueCategoryDataset0, 71, 71);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertNotNull(slidingCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(71, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(71, slidingCategoryDataset0.getMaximumCategoryCount());
      
      boolean boolean1 = false;
      slidingCategoryDataset0.setNotify(false);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertFalse(slidingCategoryDataset0.getNotify());
      assertEquals(71, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(71, slidingCategoryDataset0.getMaximumCategoryCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(slidingCategoryDataset0, tableOrder0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertNotNull(spiderWebPlot0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertFalse(slidingCategoryDataset0.getNotify());
      assertEquals(71, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(71, slidingCategoryDataset0.getMaximumCategoryCount());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Font font0 = spiderWebPlot0.getLabelFont();
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertNotNull(font0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertFalse(slidingCategoryDataset0.getNotify());
      assertEquals(71, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(71, slidingCategoryDataset0.getMaximumCategoryCount());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      boolean boolean2 = false;
      JFreeChart jFreeChart0 = new JFreeChart((String) null, font0, spiderWebPlot0, false);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertNotNull(jFreeChart0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertFalse(slidingCategoryDataset0.getNotify());
      assertEquals(71, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(71, slidingCategoryDataset0.getMaximumCategoryCount());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart1, jFreeChart0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      assertNotNull(jFreeChart1);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertFalse(slidingCategoryDataset0.getNotify());
      assertEquals(71, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(71, slidingCategoryDataset0.getMaximumCategoryCount());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart1.isBorderVisible());
      assertTrue(jFreeChart1.getAntiAlias());
      assertEquals(0, jFreeChart1.getSubtitleCount());
      assertNull(jFreeChart1.getID());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart1.getElementHinting());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertTrue(jFreeChart1.isNotify());
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(2146268801, 2261);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0, xYPlot0.getDomainAxisCount());
      assertEquals(SeriesRenderingOrder.REVERSE, xYPlot0.getSeriesRenderingOrder());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getDomainAxisLocation());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.fetchElementHintingFlag());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, xYPlot0.getOrientation());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(DatasetRenderingOrder.REVERSE, xYPlot0.getDatasetRenderingOrder());
      assertEquals(0, xYPlot0.getRangeAxisCount());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getRangeAxisLocation());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, xYPlot0.getDatasetCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart((String) null, xYPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0, xYPlot0.getDomainAxisCount());
      assertEquals(SeriesRenderingOrder.REVERSE, xYPlot0.getSeriesRenderingOrder());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getDomainAxisLocation());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.fetchElementHintingFlag());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, xYPlot0.getOrientation());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(DatasetRenderingOrder.REVERSE, xYPlot0.getDatasetRenderingOrder());
      assertEquals(0, xYPlot0.getRangeAxisCount());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getRangeAxisLocation());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, xYPlot0.getDatasetCount());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setBackgroundImageAlignment(34);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0, xYPlot0.getDomainAxisCount());
      assertEquals(SeriesRenderingOrder.REVERSE, xYPlot0.getSeriesRenderingOrder());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getDomainAxisLocation());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.fetchElementHintingFlag());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, xYPlot0.getOrientation());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(DatasetRenderingOrder.REVERSE, xYPlot0.getDatasetRenderingOrder());
      assertEquals(0, xYPlot0.getRangeAxisCount());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getRangeAxisLocation());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, xYPlot0.getDatasetCount());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertEquals(34, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setBackgroundImageAlignment(10);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0, xYPlot0.getDomainAxisCount());
      assertEquals(SeriesRenderingOrder.REVERSE, xYPlot0.getSeriesRenderingOrder());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getDomainAxisLocation());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.fetchElementHintingFlag());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, xYPlot0.getOrientation());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(DatasetRenderingOrder.REVERSE, xYPlot0.getDatasetRenderingOrder());
      assertEquals(0, xYPlot0.getRangeAxisCount());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getRangeAxisLocation());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, xYPlot0.getDatasetCount());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(10, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      int int0 = 0;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(0, 34, 85);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 85
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float float0 = JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA;
      assertEquals(0.5F, float0, 0.01F);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.5F);
      assertNotNull(defaultValueDataset0);
      assertTrue(defaultValueDataset0.getNotify());
      
      JTextPane jTextPane0 = new JTextPane();
      assertNotNull(jTextPane0);
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(jTextPane0.getIgnoreRepaint());
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(2);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01);
      assertEquals(2, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.height, 0.01);
      assertEquals(0.0, arc2D_Double0.extent, 0.01);
      assertEquals(0.0, arc2D_Double0.width, 0.01);
      assertEquals(0.0, arc2D_Double0.x, 0.01);
      assertEquals(0.0, arc2D_Double0.y, 0.01);
      assertEquals(0.0, arc2D_Double0.start, 0.01);
      
      Point2D.Float point2D_Float0 = new Point2D.Float();
      assertNotNull(point2D_Float0);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      
      arc2D_Double0.setArcByTangent(point2D_Float0, point2D_Float0, point2D_Float0, (-37.801));
      assertEquals(Double.NaN, arc2D_Double0.getCenterY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, arc2D_Double0.getCenterX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, arc2D_Double0.getMinX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, arc2D_Double0.getMaxX(), 0.01);
      assertEquals(Double.NaN, arc2D_Double0.getMaxY(), 0.01);
      assertEquals(2, arc2D_Double0.getArcType());
      assertEquals(Double.NaN, arc2D_Double0.getMinY(), 0.01);
      assertEquals(Double.NaN, arc2D_Double0.y, 0.01);
      assertEquals((-75.602), arc2D_Double0.width, 0.01);
      assertEquals((-90.0), arc2D_Double0.start, 0.01);
      assertEquals((-75.602), arc2D_Double0.height, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, arc2D_Double0.x, 0.01);
      assertEquals((-180.0), arc2D_Double0.extent, 0.01);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)arc2D_Double0.getEndPoint();
      assertNotNull(point2D_Double0);
      assertEquals(Double.NaN, arc2D_Double0.getCenterY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, arc2D_Double0.getCenterX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, arc2D_Double0.getMinX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, arc2D_Double0.getMaxX(), 0.01);
      assertEquals(Double.NaN, arc2D_Double0.getMaxY(), 0.01);
      assertEquals(2, arc2D_Double0.getArcType());
      assertEquals(Double.NaN, arc2D_Double0.getMinY(), 0.01);
      assertEquals(Double.NaN, arc2D_Double0.y, 0.01);
      assertEquals((-75.602), arc2D_Double0.width, 0.01);
      assertEquals((-90.0), arc2D_Double0.start, 0.01);
      assertEquals((-75.602), arc2D_Double0.height, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, arc2D_Double0.x, 0.01);
      assertEquals((-180.0), arc2D_Double0.extent, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, point2D_Double0.x, 0.01);
      assertEquals(Double.NaN, point2D_Double0.y, 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      Paint paint0 = jFreeChart0.getBackgroundPaint();
      assertNull(paint0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot((CategoryDataset) null);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertNotNull(multiplePiePlot1);
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot1.isNotify());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot1.getDataExtractOrder());
      assertFalse(multiplePiePlot1.isSubplot());
      assertTrue(multiplePiePlot1.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01);
      assertFalse(multiplePiePlot1.fetchElementHintingFlag());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart1 = multiplePiePlot1.getPieChart();
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotSame(jFreeChart1, jFreeChart0);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      assertNotNull(jFreeChart1);
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot1.isNotify());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot1.getDataExtractOrder());
      assertFalse(multiplePiePlot1.isSubplot());
      assertTrue(multiplePiePlot1.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01);
      assertFalse(multiplePiePlot1.fetchElementHintingFlag());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart1.getElementHinting());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertTrue(jFreeChart1.isNotify());
      assertTrue(jFreeChart1.getAntiAlias());
      assertEquals(0, jFreeChart1.getSubtitleCount());
      assertNull(jFreeChart1.getID());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart1, (-3616), (-1772), 3701, (-1772), 1675, 1675, true, false, false, true, false, false);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      assertNotNull(chartPanel0);
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot1.isNotify());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot1.getDataExtractOrder());
      assertFalse(multiplePiePlot1.isSubplot());
      assertTrue(multiplePiePlot1.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01);
      assertFalse(multiplePiePlot1.fetchElementHintingFlag());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart1.getElementHinting());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertTrue(jFreeChart1.isNotify());
      assertTrue(jFreeChart1.getAntiAlias());
      assertEquals(0, jFreeChart1.getSubtitleCount());
      assertNull(jFreeChart1.getID());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(1675, chartPanel0.getMaximumDrawHeight());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(3701, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals((-1772), chartPanel0.getMinimumDrawHeight());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(1675, chartPanel0.getMaximumDrawWidth());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotSame(jFreeChart1, jFreeChart0);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      assertNotNull(chartRenderingInfo0);
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot1.isNotify());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot1.getDataExtractOrder());
      assertFalse(multiplePiePlot1.isSubplot());
      assertTrue(multiplePiePlot1.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01);
      assertFalse(multiplePiePlot1.fetchElementHintingFlag());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart1.getElementHinting());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertTrue(jFreeChart1.isNotify());
      assertTrue(jFreeChart1.getAntiAlias());
      assertEquals(0, jFreeChart1.getSubtitleCount());
      assertNull(jFreeChart1.getID());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(1675, chartPanel0.getMaximumDrawHeight());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(3701, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals((-1772), chartPanel0.getMinimumDrawHeight());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(1675, chartPanel0.getMaximumDrawWidth());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      
      // Undeclared exception!
      try { 
        jFreeChart1.createBufferedImage(2146955361, 2, (-1.0), (double) (-3616), chartRenderingInfo0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Font font0 = Font.decode("JFREECHART_TOP_LEVEL");
      assertNotNull(font0);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals("JFREECHART_TOP_LEVEL", font0.getName());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      Rectangle rectangle0 = polygon0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      
      Point point1 = new Point(point0);
      assertTrue(point1.equals((Object)point0));
      assertNotNull(point1);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      
      XYPlot xYPlot0 = combinedRangeXYPlot0.findSubplot(plotRenderingInfo0, point1);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertNull(xYPlot0);
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null);
      assertNotNull(legendTitle0);
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertNull(legendTitle0.getID());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertTrue(legendTitle0.isVisible());
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertTrue(legendTitle0.getNotify());
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertEquals(RectangleEdge.TOP, legendTitle0.getPosition());
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertTrue(legendTitle0.visible);
      
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(0, 1738, (double) 1.0F, (double) 1.0F, (ChartRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (1738) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORTED;
      assertEquals(RowSorterEvent.Type.SORTED, rowSorterEvent_Type0);
      
      boolean boolean0 = multiplePiePlot0.equals(rowSorterEvent_Type0);
      assertFalse(boolean0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertNotNull(lookupPaintScale0);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      
      LogAxis logAxis0 = new LogAxis();
      assertNotNull(logAxis0);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      
      boolean boolean1 = lookupPaintScale0.equals(logAxis0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      
      jFreeChart0.setBackgroundImageAlignment((-4207));
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals((-4207), jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      multiplePiePlot0.setNoDataMessage("org.jfree.chart.entity.TickLabelEntity");
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 500);
      assertNotNull(bufferedImage0);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals((-4207), jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(15, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(15, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(500, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      int int0 = jFreeChart0.getBackgroundImageAlignment();
      assertEquals((-4207), int0);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals((-4207), jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setElementHinting(true);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals((-4207), jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(logAxis0);
      assertNotNull(axisChangeEvent0);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(ChartChangeEventType.GENERAL, axisChangeEvent0.getType());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      
      jFreeChart0.notifyListeners(axisChangeEvent0);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals((-4207), jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(ChartChangeEventType.GENERAL, axisChangeEvent0.getType());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      
      RectangleInsets rectangleInsets0 = jFreeChart0.getPadding();
      assertNotNull(rectangleInsets0);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals((-4207), jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      List<Title> list0 = jFreeChart0.getSubtitles();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals((-4207), jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertNotNull(sunGraphics2D0);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals((-4207), jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(15, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(15, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(500, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      JEditorPane jEditorPane0 = new JEditorPane();
      assertNotNull(jEditorPane0);
      assertTrue(jEditorPane0.isFocusTraversalPolicySet());
      assertTrue(jEditorPane0.isFocusCycleRoot());
      assertFalse(jEditorPane0.isFocusTraversalPolicyProvider());
      assertTrue(jEditorPane0.getFocusTraversalKeysEnabled());
      assertFalse(jEditorPane0.getIgnoreRepaint());
      
      Rectangle rectangle0 = jEditorPane0.modelToView(2338);
      assertNull(rectangle0);
      assertTrue(jEditorPane0.isFocusTraversalPolicySet());
      assertTrue(jEditorPane0.isFocusCycleRoot());
      assertFalse(jEditorPane0.isFocusTraversalPolicyProvider());
      assertTrue(jEditorPane0.getFocusTraversalKeysEnabled());
      assertFalse(jEditorPane0.getIgnoreRepaint());
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      assertNotNull(chartPanel0);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals((-4207), jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      
      Point point0 = null;
      try {
        point0 = new Point((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JTextPane jTextPane0 = new JTextPane();
      assertNotNull(jTextPane0);
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      
      NumberAxis numberAxis0 = new NumberAxis("");
      assertNotNull(numberAxis0);
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals("", numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals("", numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot0.getSeriesRenderingOrder());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot0.getOrientation());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getDomainAxisLocation());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getRangeAxisLocation());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0, combinedDomainXYPlot0.getRendererCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot0.getDatasetRenderingOrder());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      assertNotNull(jFreeChart0);
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals("", numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot0.getSeriesRenderingOrder());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot0.getOrientation());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getDomainAxisLocation());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getRangeAxisLocation());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0, combinedDomainXYPlot0.getRendererCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot0.getDatasetRenderingOrder());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)jFreeChart0.getXYPlot();
      assertSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotNull(combinedDomainXYPlot1);
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals("", numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot0.getSeriesRenderingOrder());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot0.getOrientation());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getDomainAxisLocation());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getRangeAxisLocation());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0, combinedDomainXYPlot0.getRendererCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot0.getDatasetRenderingOrder());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(0, combinedDomainXYPlot1.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainXYPlot1.getRendererCount());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot1.getDomainAxisLocation());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot1.getRangeAxisLocation());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot1.getDatasetRenderingOrder());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainXYPlot1.getDatasetCount());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot1.getSeriesRenderingOrder());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot1.getOrientation());
      assertFalse(combinedDomainXYPlot1.fetchElementHintingFlag());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      ColorUIResource colorUIResource0 = (ColorUIResource)jFreeChart0.getBackgroundPaint();
      assertSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotNull(colorUIResource0);
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals("", numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot0.getSeriesRenderingOrder());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot0.getOrientation());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getDomainAxisLocation());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getRangeAxisLocation());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0, combinedDomainXYPlot0.getRendererCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot0.getDatasetRenderingOrder());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(238, colorUIResource0.getRed());
      assertEquals(238, colorUIResource0.getBlue());
      assertEquals(238, colorUIResource0.getGreen());
      assertEquals((-1118482), colorUIResource0.getRGB());
      assertEquals(255, colorUIResource0.getAlpha());
      assertEquals(1, colorUIResource0.getTransparency());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("CUBIC_CURVE");
      assertNotNull(subCategoryAxis0);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals("CUBIC_CURVE", subCategoryAxis0.getLabel());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      SubCategoryAxis subCategoryAxis1 = (SubCategoryAxis)subCategoryAxis0.clone();
      assertNotSame(subCategoryAxis0, subCategoryAxis1);
      assertNotSame(subCategoryAxis1, subCategoryAxis0);
      assertTrue(subCategoryAxis1.equals((Object)subCategoryAxis0));
      assertNotNull(subCategoryAxis1);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals("CUBIC_CURVE", subCategoryAxis0.getLabel());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("CUBIC_CURVE", subCategoryAxis1.getLabel());
      assertEquals(0.0, subCategoryAxis1.getFixedDimension(), 0.01);
      assertEquals(0.2, subCategoryAxis1.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis1.isTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis1.getLabelLocation());
      assertEquals(0.05, subCategoryAxis1.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis1.isVisible());
      assertTrue(subCategoryAxis1.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis1.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis1.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis1.getLabelAngle(), 0.01);
      assertFalse(subCategoryAxis1.isMinorTickMarksVisible());
      assertEquals(1, subCategoryAxis1.getMaximumCategoryLabelLines());
      assertEquals(0.0F, subCategoryAxis1.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, subCategoryAxis1.getUpperMargin(), 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      Font font0 = subCategoryAxis0.getTickLabelFont((Comparable) "CUBIC_CURVE");
      assertNotSame(subCategoryAxis0, subCategoryAxis1);
      assertTrue(subCategoryAxis0.equals((Object)subCategoryAxis1));
      assertNotNull(font0);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals("CUBIC_CURVE", subCategoryAxis0.getLabel());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart("CUBIC_CURVE", font0, multiplePiePlot0, true);
      assertTrue(subCategoryAxis0.equals((Object)subCategoryAxis1));
      assertNotNull(jFreeChart0);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals("CUBIC_CURVE", subCategoryAxis0.getLabel());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (ChartRenderingInfo) null);
      assertNotSame(subCategoryAxis0, subCategoryAxis1);
      assertTrue(subCategoryAxis0.equals((Object)subCategoryAxis1));
      assertNotNull(bufferedImage0);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals("CUBIC_CURVE", subCategoryAxis0.getLabel());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      boolean boolean0 = jFreeChart0.equals((Object) null);
      assertNotSame(subCategoryAxis0, subCategoryAxis1);
      assertTrue(subCategoryAxis0.equals((Object)subCategoryAxis1));
      assertFalse(boolean0);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals("CUBIC_CURVE", subCategoryAxis0.getLabel());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setBackgroundImage(bufferedImage0);
      assertNotSame(subCategoryAxis0, subCategoryAxis1);
      assertTrue(subCategoryAxis0.equals((Object)subCategoryAxis1));
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals("CUBIC_CURVE", subCategoryAxis0.getLabel());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      jFreeChart0.setBackgroundImageAlignment(10);
      assertNotSame(subCategoryAxis0, subCategoryAxis1);
      assertTrue(subCategoryAxis0.equals((Object)subCategoryAxis1));
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals("CUBIC_CURVE", subCategoryAxis0.getLabel());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)jFreeChart0.getBorderStroke();
      assertNotSame(subCategoryAxis0, subCategoryAxis1);
      assertTrue(subCategoryAxis0.equals((Object)subCategoryAxis1));
      assertNotNull(basicStroke0);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals("CUBIC_CURVE", subCategoryAxis0.getLabel());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart("Nb", multiplePiePlot0);
      assertNotNull(jFreeChart0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      multiplePiePlot0.setAggregatedItemsPaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jFreeChart0.setTitle((TextTitle) null);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setBackgroundPaint(multiplePiePlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(481.12276372);
      assertNotNull(defaultValueDataset0);
      assertTrue(defaultValueDataset0.getNotify());
      
      defaultValueDataset0.setNotify(false);
      assertFalse(defaultValueDataset0.getNotify());
      
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      assertNotNull(compassPlot0);
      assertFalse(defaultValueDataset0.getNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(compassPlot0.isSubplot());
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      defaultValueDataset0.removeChangeListener(multiplePiePlot0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(defaultValueDataset0.getNotify());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      compassPlot0.setForegroundAlpha(1220.6F);
      assertFalse(defaultValueDataset0.getNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1220.6F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(compassPlot0.isSubplot());
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      boolean boolean1 = jFreeChart0.equals(compassPlot0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(defaultValueDataset0.getNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1220.6F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(compassPlot0.isSubplot());
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      RectangleInsets rectangleInsets0 = jFreeChart0.getPadding();
      assertNotNull(rectangleInsets0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`nU<8T8#mS8 N");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(929, 10, (ChartRenderingInfo) null);
      assertNotNull(bufferedImage0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(929, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(929, bufferedImage0.getTileWidth());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      boolean boolean3 = jFreeChart0.isNotify();
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setBackgroundPaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      boolean boolean4 = jFreeChart0.getElementHinting();
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      
      combinedRangeCategoryPlot0.setRangeCrosshairValue(Double.NaN, true);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      
      JFreeChart jFreeChart0 = new JFreeChart("G", combinedRangeCategoryPlot0);
      assertNotNull(jFreeChart0);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      LegendTitle legendTitle0 = jFreeChart0.getLegend(15);
      assertNull(legendTitle0);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      LegendItemCollection legendItemCollection0 = combinedRangeCategoryPlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      
      jFreeChart0.removeSubtitle((Title) null);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      LegendTitle legendTitle1 = jFreeChart0.getLegend();
      assertNotNull(legendTitle1);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2.0, legendTitle1.getContentYOffset(), 0.01);
      assertTrue(legendTitle1.isVisible());
      assertEquals(SortOrder.ASCENDING, legendTitle1.getSortOrder());
      assertEquals(2.0, legendTitle1.getContentXOffset(), 0.01);
      assertEquals(0.0, legendTitle1.getHeight(), 0.01);
      assertEquals(VerticalAlignment.CENTER, legendTitle1.getVerticalAlignment());
      assertEquals(RectangleAnchor.CENTER, legendTitle1.getLegendItemGraphicAnchor());
      assertEquals(0.0, legendTitle1.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendTitle1.getLegendItemGraphicLocation());
      assertEquals(RectangleEdge.BOTTOM, legendTitle1.getPosition());
      assertNull(legendTitle1.getID());
      assertEquals(RectangleEdge.LEFT, legendTitle1.getLegendItemGraphicEdge());
      assertEquals(HorizontalAlignment.CENTER, legendTitle1.getHorizontalAlignment());
      assertTrue(legendTitle1.getNotify());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(legendTitle1.visible);
      
      jFreeChart0.setBackgroundImageAlpha(10);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      List list0 = combinedRangeCategoryPlot0.getSubplots();
      assertNotNull(list0);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      
      jFreeChart0.setAntiAlias(false);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getAntiAlias());
      assertEquals(10.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      JFreeChart jFreeChart1 = new JFreeChart(combinedRangeCategoryPlot0);
      assertFalse(jFreeChart1.equals((Object)jFreeChart0));
      assertNotNull(jFreeChart1);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart1.isNotify());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertNull(jFreeChart1.getID());
      assertFalse(jFreeChart1.getElementHinting());
      assertTrue(jFreeChart1.getAntiAlias());
      assertEquals(1, jFreeChart1.getSubtitleCount());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      boolean boolean0 = jFreeChart1.equals(jFreeChart0);
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart1, jFreeChart0);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertFalse(jFreeChart1.equals((Object)jFreeChart0));
      assertFalse(boolean0);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getAntiAlias());
      assertEquals(10.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart1.isNotify());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertNull(jFreeChart1.getID());
      assertFalse(jFreeChart1.getElementHinting());
      assertTrue(jFreeChart1.getAntiAlias());
      assertEquals(1, jFreeChart1.getSubtitleCount());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      RenderingHints renderingHints0 = jFreeChart1.getRenderingHints();
      assertNotSame(jFreeChart1, jFreeChart0);
      assertFalse(jFreeChart1.equals((Object)jFreeChart0));
      assertNotNull(renderingHints0);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart1.isNotify());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertNull(jFreeChart1.getID());
      assertFalse(jFreeChart1.getElementHinting());
      assertTrue(jFreeChart1.getAntiAlias());
      assertEquals(1, jFreeChart1.getSubtitleCount());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(renderingHints0.isEmpty());
      assertEquals(2, renderingHints0.size());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 15);
      assertNotSame(jFreeChart0, jFreeChart1);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertNotNull(bufferedImage0);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getAntiAlias());
      assertEquals(10.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(15, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(15, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      Point2D.Float point2D_Float0 = new Point2D.Float(1767.63F, 15);
      assertNotNull(point2D_Float0);
      assertEquals(1767.63F, point2D_Float0.x, 0.01F);
      assertEquals(15.0F, point2D_Float0.y, 0.01F);
      
      BlockResult blockResult0 = new BlockResult();
      assertNotNull(blockResult0);
      
      EntityCollection entityCollection0 = blockResult0.getEntityCollection();
      assertNull(entityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      assertNotNull(chartRenderingInfo0);
      
      jFreeChart0.setTitle((TextTitle) null);
      assertNotSame(jFreeChart0, jFreeChart1);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getAntiAlias());
      assertEquals(10.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      List<Title> list1 = jFreeChart0.getSubtitles();
      assertNotSame(jFreeChart0, jFreeChart1);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertNotNull(list1);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getAntiAlias());
      assertEquals(10.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getRangeAxisEdge(15);
      assertEquals(RectangleEdge.RIGHT, rectangleEdge0);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      
      combinedRangeCategoryPlot0.setNoDataMessage("G");
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertEquals("G", combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.CombinedRangeCategoryPlot cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORTED;
      assertEquals(RowSorterEvent.Type.SORTED, rowSorterEvent_Type0);
      
      boolean boolean0 = multiplePiePlot0.equals(rowSorterEvent_Type0);
      assertFalse(boolean0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertNotNull(lookupPaintScale0);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      
      LogAxis logAxis0 = new LogAxis();
      assertNotNull(logAxis0);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      boolean boolean1 = lookupPaintScale0.equals(logAxis0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      multiplePiePlot0.setNoDataMessage("org.jfree.chart.entity.TickLabelEntity");
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 500);
      assertNotNull(bufferedImage0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(15, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertEquals(15, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      int int0 = jFreeChart0.getBackgroundImageAlignment();
      assertEquals(15, int0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setElementHinting(true);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(logAxis0);
      assertNotNull(axisChangeEvent0);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(ChartChangeEventType.GENERAL, axisChangeEvent0.getType());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      jFreeChart0.notifyListeners(axisChangeEvent0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(ChartChangeEventType.GENERAL, axisChangeEvent0.getType());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      RectangleInsets rectangleInsets0 = jFreeChart0.getPadding();
      assertNotNull(rectangleInsets0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      List<Title> list0 = jFreeChart0.getSubtitles();
      assertNotNull(list0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      BufferedImage bufferedImage1 = jFreeChart0.createBufferedImage(1619, 2986);
      assertNotSame(bufferedImage1, bufferedImage0);
      assertFalse(bufferedImage1.equals((Object)bufferedImage0));
      assertNotNull(bufferedImage1);
      assertEquals(1, bufferedImage1.getNumXTiles());
      assertEquals(0, bufferedImage1.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage1.hasTileWriters());
      assertEquals(0, bufferedImage1.getMinY());
      assertEquals(0, bufferedImage1.getMinX());
      assertEquals(1619, bufferedImage1.getTileWidth());
      assertEquals(0, bufferedImage1.getTileGridYOffset());
      assertEquals(1, bufferedImage1.getNumYTiles());
      assertFalse(bufferedImage1.isAlphaPremultiplied());
      assertEquals(1619, bufferedImage1.getWidth());
      assertEquals(2986, bufferedImage1.getTileHeight());
      assertEquals(0, bufferedImage1.getMinTileY());
      assertEquals(0, bufferedImage1.getMinTileX());
      assertEquals(2986, bufferedImage1.getHeight());
      assertEquals(2, bufferedImage1.getType());
      assertEquals(3, bufferedImage1.getTransparency());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORTED;
      assertEquals(RowSorterEvent.Type.SORTED, rowSorterEvent_Type0);
      
      boolean boolean0 = multiplePiePlot0.equals(rowSorterEvent_Type0);
      assertFalse(boolean0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertNotNull(lookupPaintScale0);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      
      LogAxis logAxis0 = new LogAxis();
      assertNotNull(logAxis0);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getBaseSymbol());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      jFreeChart0.setBorderVisible(true);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 500);
      assertNotNull(bufferedImage0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(15, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(500, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(15, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setElementHinting(true);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(logAxis0);
      assertNotNull(axisChangeEvent0);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getBaseSymbol());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(ChartChangeEventType.GENERAL, axisChangeEvent0.getType());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      jFreeChart0.notifyListeners(axisChangeEvent0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getBaseSymbol());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(ChartChangeEventType.GENERAL, axisChangeEvent0.getType());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      RectangleInsets rectangleInsets0 = jFreeChart0.getPadding();
      assertNotNull(rectangleInsets0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      List<Title> list0 = jFreeChart0.getSubtitles();
      assertNotNull(list0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      assertNotNull(spiderWebPlot0);
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      BlockResult blockResult0 = new BlockResult();
      assertNotNull(blockResult0);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 2, 10, 2, 10, 2734, 3243, false, false, false, false, true, false);
      assertNotNull(chartPanel0);
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(10, chartPanel0.getMinimumDrawHeight());
      assertEquals(2, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(3243, chartPanel0.getMaximumDrawHeight());
      assertEquals(2734, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(10, chartPanel0.getMinimumDrawHeight());
      assertEquals(2, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(3243, chartPanel0.getMaximumDrawHeight());
      assertEquals(2734, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertNotNull(plotRenderingInfo0);
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(10, chartPanel0.getMinimumDrawHeight());
      assertEquals(2, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(3243, chartPanel0.getMaximumDrawHeight());
      assertEquals(2734, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      
      jFreeChart0.setTitle((TextTitle) null);
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      spiderWebPlot0.handleClick(15, 2734, plotRenderingInfo0);
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(10, chartPanel0.getMinimumDrawHeight());
      assertEquals(2, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(3243, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getRefreshBuffer());
      assertEquals(2734, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      
      spiderWebPlot0.addChangeListener(jFreeChart0);
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(blockResult0, true);
      assertNotNull(rendererChangeEvent0);
      assertTrue(rendererChangeEvent0.getSeriesVisibilityChanged());
      assertEquals(ChartChangeEventType.GENERAL, rendererChangeEvent0.getType());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart1 = multiplePiePlot0.getPieChart();
      assertNotSame(jFreeChart1, jFreeChart0);
      assertFalse(jFreeChart1.equals((Object)jFreeChart0));
      assertNotNull(jFreeChart1);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(jFreeChart1.getElementHinting());
      assertTrue(jFreeChart1.isNotify());
      assertFalse(jFreeChart1.isBorderVisible());
      assertNull(jFreeChart1.getID());
      assertTrue(jFreeChart1.getAntiAlias());
      assertEquals(0, jFreeChart1.getSubtitleCount());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      float[] floatArray0 = new float[0];
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(10, 10, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      
      PiePlot piePlot0 = new PiePlot(defaultKeyedValuesDataset0);
      assertNotNull(piePlot0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertTrue(piePlot0.isNotify());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart(piePlot0);
      assertNotNull(jFreeChart0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertTrue(piePlot0.isNotify());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertNotNull(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertNotNull(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 90.0, (-181.7567226372), chartRenderingInfo0);
      assertNotNull(bufferedImage0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertTrue(piePlot0.isNotify());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, standardEntityCollection0.getEntityCount());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-3538), (-330), chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-3538) and height (-330) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      assertNotNull(spiderWebPlot0);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertTrue(spiderWebPlot0.isNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertTrue(spiderWebPlot0.isNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      LegendTitle legendTitle0 = new LegendTitle(spiderWebPlot0);
      assertNotNull(legendTitle0);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertTrue(spiderWebPlot0.isNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertNull(legendTitle0.getID());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertTrue(legendTitle0.isVisible());
      assertEquals(RectangleEdge.TOP, legendTitle0.getPosition());
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertTrue(legendTitle0.getNotify());
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertTrue(legendTitle0.visible);
      
      jFreeChart0.addLegend(legendTitle0);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertTrue(spiderWebPlot0.isNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(2, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertNull(legendTitle0.getID());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertTrue(legendTitle0.isVisible());
      assertEquals(RectangleEdge.TOP, legendTitle0.getPosition());
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertTrue(legendTitle0.getNotify());
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(legendTitle0.visible);
      
      BlockResult blockResult0 = new BlockResult();
      assertNotNull(blockResult0);
      
      spiderWebPlot0.addChangeListener(jFreeChart0);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertTrue(spiderWebPlot0.isNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(2, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(blockResult0, true);
      assertNotNull(rendererChangeEvent0);
      assertEquals(ChartChangeEventType.GENERAL, rendererChangeEvent0.getType());
      assertTrue(rendererChangeEvent0.getSeriesVisibilityChanged());
      
      float[] floatArray0 = new float[0];
      TextTitle textTitle0 = jFreeChart0.getTitle();
      assertNull(textTitle0);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertTrue(spiderWebPlot0.isNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(2, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      assertNotNull(defaultValueDataset0);
      assertTrue(defaultValueDataset0.getNotify());
      
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      assertNotNull(meterPlot0);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(meterPlot0.isSubplot());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertNull(meterPlot0.getNoDataMessage());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      
      meterPlot0.setBackgroundImageAlignment(9);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(meterPlot0.isSubplot());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(9, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart("", meterPlot0);
      assertNotNull(jFreeChart0);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(meterPlot0.isSubplot());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(9, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      meterPlot0.setTickPaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(meterPlot0.isSubplot());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(9, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.removeProgressListener((ChartProgressListener) null);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(meterPlot0.isSubplot());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(9, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      int int0 = 15;
      jFreeChart0.setTextAntiAlias(true);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(meterPlot0.isSubplot());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(9, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      assertNotNull(chartRenderingInfo0);
      
      chartRenderingInfo0.setEntityCollection((EntityCollection) null);
      boolean boolean0 = chartRenderingInfo0.equals("");
      assertFalse(boolean0);
      
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      assertNotNull(basicTreeUI0);
      
      JTree jTree0 = new JTree();
      assertNotNull(jTree0);
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertFalse(jTree0.isFocusCycleRoot());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertFalse(jTree0.getIgnoreRepaint());
      
      MultiTreeUI multiTreeUI0 = new MultiTreeUI();
      assertNotNull(multiTreeUI0);
      
      // Undeclared exception!
      try { 
        multiTreeUI0.getClosestPathForLocation(jTree0, 10, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float float0 = JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA;
      assertEquals(0.5F, float0, 0.01F);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.5F);
      assertNotNull(defaultValueDataset0);
      assertTrue(defaultValueDataset0.getNotify());
      
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      assertNotNull(compassPlot0);
      assertTrue(defaultValueDataset0.getNotify());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart("The number of series keys does not match the number of series in the data array.", compassPlot0);
      assertNotNull(jFreeChart0);
      assertTrue(defaultValueDataset0.getNotify());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      int int0 = (-1516);
      boolean boolean0 = false;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        jFreeChart0.plotChanged((PlotChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(6228.0);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(6228.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(6228.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(6228.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals((-6227.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(6228.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(6228.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals((-6227.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(6228.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      cyclicNumberAxis0.setAttributedLabel("eUKO09qMt");
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(6228.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals((-6227.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(6228.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)jFreeChart0.getXYPlot();
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotNull(combinedRangeXYPlot1);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(6228.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals((-6227.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(6228.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot1.getDatasetRenderingOrder());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot1.getSeriesRenderingOrder());
      assertEquals(0, combinedRangeXYPlot1.getRendererCount());
      assertEquals(0, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot1.getRangeAxisLocation());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot1.getDomainAxisLocation());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot1.getOrientation());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.fetchElementHintingFlag());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart1 = combinedRangeXYPlot1.getChart();
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertSame(jFreeChart0, jFreeChart1);
      assertSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertSame(jFreeChart1, jFreeChart0);
      assertNotNull(jFreeChart1);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(6228.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals((-6227.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(6228.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot1.getDatasetRenderingOrder());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot1.getSeriesRenderingOrder());
      assertEquals(0, combinedRangeXYPlot1.getRendererCount());
      assertEquals(0, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot1.getRangeAxisLocation());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot1.getDomainAxisLocation());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot1.getOrientation());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.fetchElementHintingFlag());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(1, jFreeChart1.getSubtitleCount());
      assertNull(jFreeChart1.getID());
      assertFalse(jFreeChart1.isBorderVisible());
      assertTrue(jFreeChart1.getAntiAlias());
      assertTrue(jFreeChart1.isNotify());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertFalse(jFreeChart1.getElementHinting());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart1.createBufferedImage(15, 350, (-885.9), (-3464.4635842097), chartRenderingInfo0);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertSame(jFreeChart0, jFreeChart1);
      assertSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertSame(jFreeChart1, jFreeChart0);
      assertNotNull(bufferedImage0);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(6228.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals((-6227.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(6228.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot1.getDatasetRenderingOrder());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot1.getSeriesRenderingOrder());
      assertEquals(0, combinedRangeXYPlot1.getRendererCount());
      assertEquals(0, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot1.getRangeAxisLocation());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot1.getDomainAxisLocation());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot1.getOrientation());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.fetchElementHintingFlag());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(1, jFreeChart1.getSubtitleCount());
      assertNull(jFreeChart1.getID());
      assertFalse(jFreeChart1.isBorderVisible());
      assertTrue(jFreeChart1.getAntiAlias());
      assertTrue(jFreeChart1.isNotify());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertFalse(jFreeChart1.getElementHinting());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(350, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(350, bufferedImage0.getTileHeight());
      assertEquals(15, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(15, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        jFreeChart1.getCategoryPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.CombinedRangeXYPlot cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Font font0 = Font.decode("JFREECHART_TOP_LEVEL");
      assertNotNull(font0);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertEquals(12, font0.getSize());
      assertEquals("JFREECHART_TOP_LEVEL", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.isNotify());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      boolean boolean0 = false;
      JFreeChart jFreeChart0 = new JFreeChart("<GpT3", font0, ringPlot0, false);
      assertNotNull(jFreeChart0);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertEquals(12, font0.getSize());
      assertEquals("JFREECHART_TOP_LEVEL", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.isNotify());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      chartRenderingInfo0.clear();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 2978.38579, 0.4, chartRenderingInfo0);
      assertNotNull(bufferedImage0);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertEquals(12, font0.getSize());
      assertEquals("JFREECHART_TOP_LEVEL", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.isNotify());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(1952257861, 10, chartRenderingInfo0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("CUBIC_CURVE");
      assertNotNull(subCategoryAxis0);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("CUBIC_CURVE", subCategoryAxis0.getLabel());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      SubCategoryAxis subCategoryAxis1 = (SubCategoryAxis)subCategoryAxis0.clone();
      assertNotSame(subCategoryAxis0, subCategoryAxis1);
      assertNotSame(subCategoryAxis1, subCategoryAxis0);
      assertTrue(subCategoryAxis1.equals((Object)subCategoryAxis0));
      assertNotNull(subCategoryAxis1);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("CUBIC_CURVE", subCategoryAxis0.getLabel());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertFalse(subCategoryAxis1.isMinorTickMarksVisible());
      assertEquals(1, subCategoryAxis1.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis1.getLabelAngle(), 0.01);
      assertEquals(4, subCategoryAxis1.getCategoryLabelPositionOffset());
      assertEquals(0.2, subCategoryAxis1.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis1.isAxisLineVisible());
      assertTrue(subCategoryAxis1.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis1.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis1.getLabelLocation());
      assertEquals(0.0F, subCategoryAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis1.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis1.isVisible());
      assertTrue(subCategoryAxis1.isTickMarksVisible());
      assertEquals("CUBIC_CURVE", subCategoryAxis1.getLabel());
      assertEquals(0.0, subCategoryAxis1.getFixedDimension(), 0.01);
      assertEquals(0.0F, subCategoryAxis1.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      Font font0 = subCategoryAxis0.getTickLabelFont((Comparable) "CUBIC_CURVE");
      assertNotSame(subCategoryAxis0, subCategoryAxis1);
      assertTrue(subCategoryAxis0.equals((Object)subCategoryAxis1));
      assertNotNull(font0);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("CUBIC_CURVE", subCategoryAxis0.getLabel());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart("CUBIC_CURVE", font0, multiplePiePlot0, true);
      assertTrue(subCategoryAxis0.equals((Object)subCategoryAxis1));
      assertNotNull(jFreeChart0);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("CUBIC_CURVE", subCategoryAxis0.getLabel());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      boolean boolean0 = jFreeChart0.equals(jFreeChart0);
      assertNotSame(subCategoryAxis0, subCategoryAxis1);
      assertTrue(subCategoryAxis0.equals((Object)subCategoryAxis1));
      assertTrue(boolean0);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("CUBIC_CURVE", subCategoryAxis0.getLabel());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setBackgroundImage((Image) null);
      assertNotSame(subCategoryAxis0, subCategoryAxis1);
      assertTrue(subCategoryAxis0.equals((Object)subCategoryAxis1));
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("CUBIC_CURVE", subCategoryAxis0.getLabel());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        MockURL.toURI((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      assertNotNull(font0);
      assertEquals(12, font0.getSize());
      assertFalse(font0.isItalic());
      assertEquals("Serif", font0.getName());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      
      LogAxis logAxis0 = new LogAxis("");
      assertNotNull(logAxis0);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals("", logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertNull(logAxis0.getBaseSymbol());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 500, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(500, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(500, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(500, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(500, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertNotNull(defaultPolarItemRenderer0);
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      
      PolarPlot polarPlot0 = new PolarPlot(matrixSeriesCollection0, logAxis0, defaultPolarItemRenderer0);
      assertNotNull(polarPlot0);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(6.807780944414029E7, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals("", logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertNull(logAxis0.getBaseSymbol());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(logAxis0.isVisible());
      assertEquals(7.329848067591683E-106, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(500, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(500, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(polarPlot0.isRangeZoomable());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertFalse(polarPlot0.isSubplot());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(polarPlot0.isOutlineVisible());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isNotify());
      assertFalse(polarPlot0.isDomainZoomable());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(20, polarPlot0.getMargin());
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertFalse(polarPlot0.isCounterClockwise());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      
      JFreeChart jFreeChart0 = new JFreeChart("R!kCR]ch!5[Pr>(Y", polarPlot0);
      assertNotNull(jFreeChart0);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(6.807780944414029E7, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals("", logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertNull(logAxis0.getBaseSymbol());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(logAxis0.isVisible());
      assertEquals(7.329848067591683E-106, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(500, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(500, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(polarPlot0.isRangeZoomable());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertFalse(polarPlot0.isSubplot());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(polarPlot0.isOutlineVisible());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isNotify());
      assertFalse(polarPlot0.isDomainZoomable());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(20, polarPlot0.getMargin());
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertFalse(polarPlot0.isCounterClockwise());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      int int0 = jFreeChart0.getBackgroundImageAlignment();
      assertEquals(15, int0);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(6.807780944414029E7, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals("", logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertNull(logAxis0.getBaseSymbol());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(logAxis0.isVisible());
      assertEquals(7.329848067591683E-106, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(500, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(500, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(polarPlot0.isRangeZoomable());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertFalse(polarPlot0.isSubplot());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(polarPlot0.isOutlineVisible());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isNotify());
      assertFalse(polarPlot0.isDomainZoomable());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(20, polarPlot0.getMargin());
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertFalse(polarPlot0.isCounterClockwise());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        logAxis0.setAutoRangeMinimumSize((-268.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Font font0 = Font.decode("JFREECHART_TOP_LEVEL");
      assertNotNull(font0);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals("JFREECHART_TOP_LEVEL", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      JFreeChart jFreeChart0 = new JFreeChart("<GpT3", font0, ringPlot0, false);
      assertNotNull(jFreeChart0);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals("JFREECHART_TOP_LEVEL", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      chartRenderingInfo0.clear();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 2978.38579, 0.4, chartRenderingInfo0);
      assertNotNull(bufferedImage0);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals("JFREECHART_TOP_LEVEL", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      BufferedImage bufferedImage1 = jFreeChart0.createBufferedImage(1963, 10, chartRenderingInfo0);
      assertNotSame(bufferedImage1, bufferedImage0);
      assertFalse(bufferedImage1.equals((Object)bufferedImage0));
      assertNotNull(bufferedImage1);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals("JFREECHART_TOP_LEVEL", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage1.hasTileWriters());
      assertEquals(0, bufferedImage1.getTileGridXOffset());
      assertEquals(1, bufferedImage1.getNumYTiles());
      assertEquals(2, bufferedImage1.getType());
      assertEquals(3, bufferedImage1.getTransparency());
      assertEquals(0, bufferedImage1.getMinTileX());
      assertEquals(0, bufferedImage1.getTileGridYOffset());
      assertEquals(0, bufferedImage1.getMinTileY());
      assertEquals(1963, bufferedImage1.getWidth());
      assertEquals(10, bufferedImage1.getHeight());
      assertEquals(1963, bufferedImage1.getTileWidth());
      assertEquals(10, bufferedImage1.getTileHeight());
      assertFalse(bufferedImage1.isAlphaPremultiplied());
      assertEquals(0, bufferedImage1.getMinX());
      assertEquals(1, bufferedImage1.getNumXTiles());
      assertEquals(0, bufferedImage1.getMinY());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      int int0 = jFreeChart0.getSubtitleCount();
      assertEquals(0, int0);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals("JFREECHART_TOP_LEVEL", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      assertNull(legendTitle0);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals("JFREECHART_TOP_LEVEL", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertNotSame(bufferedImage0, bufferedImage1);
      assertFalse(bufferedImage0.equals((Object)bufferedImage1));
      assertNotNull(sunGraphics2D0);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals("JFREECHART_TOP_LEVEL", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals((-1), sunGraphics2D0.eargb);
      
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      boolean boolean0 = polygon0.contains((double) 0, 152.09411239);
      assertFalse(boolean0);
      assertEquals(0, polygon0.npoints);
      
      float float0 = jFreeChart0.getBackgroundImageAlpha();
      assertEquals(0.5F, float0, 0.01F);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals("JFREECHART_TOP_LEVEL", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Rectangle rectangle0 = polygon0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      
      // Undeclared exception!
      try { 
        jFreeChart0.drawTitle((Title) null, sunGraphics2D0, rectangle0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 't' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float float0 = JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA;
      assertEquals(0.5F, float0, 0.01F);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.5F);
      assertNotNull(defaultValueDataset0);
      assertTrue(defaultValueDataset0.getNotify());
      
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      assertNotNull(compassPlot0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart("The number of series keys does not match the number of series in the data array.", compassPlot0);
      assertNotNull(jFreeChart0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, false, true, true);
      assertNotNull(chartPanel0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      
      compassPlot0.setNoDataMessagePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getRefreshBuffer());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(300, 10);
      assertNotNull(bufferedImage0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(300, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(300, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertNotNull(sunGraphics2D0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(300, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(300, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      
      JTextPane jTextPane0 = new JTextPane();
      assertNotNull(jTextPane0);
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      
      Rectangle rectangle0 = jTextPane0.modelToView(10);
      assertNull(rectangle0);
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      
      compassPlot0.setRosePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      boolean boolean0 = chartPanel0.getVerifyInputWhenFocusTarget();
      assertTrue(boolean0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getRefreshBuffer());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(2);
      assertNotNull(arc2D_Double0);
      assertEquals(2, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, arc2D_Double0.width, 0.01);
      assertEquals(0.0, arc2D_Double0.start, 0.01);
      assertEquals(0.0, arc2D_Double0.height, 0.01);
      assertEquals(0.0, arc2D_Double0.y, 0.01);
      assertEquals(0.0, arc2D_Double0.x, 0.01);
      assertEquals(0.0, arc2D_Double0.extent, 0.01);
      
      ToolkitImage toolkitImage0 = (ToolkitImage)bufferedImage0.getScaledInstance((-1516), 1, (-3616));
      assertNotNull(toolkitImage0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(300, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(300, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, toolkitImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)arc2D_Double0.getEndPoint();
      assertNotNull(point2D_Double0);
      assertEquals(2, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, arc2D_Double0.width, 0.01);
      assertEquals(0.0, arc2D_Double0.start, 0.01);
      assertEquals(0.0, arc2D_Double0.height, 0.01);
      assertEquals(0.0, arc2D_Double0.y, 0.01);
      assertEquals(0.0, arc2D_Double0.x, 0.01);
      assertEquals(0.0, arc2D_Double0.extent, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      // Undeclared exception!
      try { 
        jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) null, (Point2D) point2D_Double0, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      assertNotNull(multiplePiePlot0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      multiplePiePlot0.setNotify(true);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart1, jFreeChart0);
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      assertNotNull(jFreeChart1);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart1.getAntiAlias());
      assertEquals(0, jFreeChart1.getSubtitleCount());
      assertNull(jFreeChart1.getID());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertTrue(jFreeChart1.isNotify());
      assertFalse(jFreeChart1.getElementHinting());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      JFreeChart jFreeChart2 = (JFreeChart)jFreeChart0.clone();
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart0, jFreeChart2);
      assertNotSame(jFreeChart2, jFreeChart1);
      assertNotSame(jFreeChart2, jFreeChart0);
      assertTrue(jFreeChart0.equals((Object)jFreeChart1));
      assertTrue(jFreeChart2.equals((Object)jFreeChart1));
      assertTrue(jFreeChart2.equals((Object)jFreeChart0));
      assertNotNull(jFreeChart2);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart2.getElementHinting());
      assertTrue(jFreeChart2.isNotify());
      assertEquals(15, jFreeChart2.getBackgroundImageAlignment());
      assertNull(jFreeChart2.getID());
      assertFalse(jFreeChart2.isBorderVisible());
      assertTrue(jFreeChart2.getAntiAlias());
      assertEquals(0, jFreeChart2.getSubtitleCount());
      assertEquals(0.5F, jFreeChart2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      boolean boolean0 = multiplePiePlot0.equals(jFreeChart2);
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart0, jFreeChart2);
      assertNotSame(jFreeChart2, jFreeChart1);
      assertNotSame(jFreeChart2, jFreeChart0);
      assertTrue(jFreeChart0.equals((Object)jFreeChart1));
      assertTrue(jFreeChart0.equals((Object)jFreeChart2));
      assertTrue(jFreeChart2.equals((Object)jFreeChart1));
      assertTrue(jFreeChart2.equals((Object)jFreeChart0));
      assertFalse(boolean0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart2.getElementHinting());
      assertTrue(jFreeChart2.isNotify());
      assertEquals(15, jFreeChart2.getBackgroundImageAlignment());
      assertNull(jFreeChart2.getID());
      assertFalse(jFreeChart2.isBorderVisible());
      assertTrue(jFreeChart2.getAntiAlias());
      assertEquals(0, jFreeChart2.getSubtitleCount());
      assertEquals(0.5F, jFreeChart2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      PiePlot piePlot0 = (PiePlot)jFreeChart0.getPlot();
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart0, jFreeChart2);
      assertTrue(jFreeChart0.equals((Object)jFreeChart1));
      assertTrue(jFreeChart0.equals((Object)jFreeChart2));
      assertNotNull(piePlot0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isNotify());
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      jFreeChart0.setBorderStroke(piePlot0.DEFAULT_OUTLINE_STROKE);
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart0, jFreeChart2);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertFalse(jFreeChart0.equals((Object)jFreeChart2));
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isNotify());
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 799, 0, 0, 799, 0, true, true, true, true, false, true);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertFalse(jFreeChart0.equals((Object)jFreeChart2));
      assertNotNull(chartPanel0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(0, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(799, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(0, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      
      jFreeChart0.removeProgressListener(chartPanel0);
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart0, jFreeChart2);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertFalse(jFreeChart0.equals((Object)jFreeChart2));
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(0, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(799, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(0, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      
      jFreeChart0.fireChartChanged();
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart0, jFreeChart2);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertFalse(jFreeChart0.equals((Object)jFreeChart2));
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setBackgroundImageAlpha(1.0F);
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart0, jFreeChart2);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertFalse(jFreeChart0.equals((Object)jFreeChart2));
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(1.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      boolean boolean2 = jFreeChart0.getElementHinting();
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart0, jFreeChart2);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertFalse(jFreeChart0.equals((Object)jFreeChart2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(1.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Locale locale0 = new Locale("ZOOM_DOMAIN_BOTH");
      assertNotNull(locale0);
      assertEquals("zoom_domain_both", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zoom_domain_both", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      boolean boolean3 = locale0.hasExtensions();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals("zoom_domain_both", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zoom_domain_both", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      multiplePiePlot0.setOutlinePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart0, jFreeChart2);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertFalse(jFreeChart0.equals((Object)jFreeChart2));
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(1.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      DateTitle dateTitle0 = null;
      try {
        dateTitle0 = new DateTitle(300, locale0, jFreeChart0.DEFAULT_TITLE_FONT, jFreeChart0.DEFAULT_BACKGROUND_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 300
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(10, 0.0, 2.0, 0.0);
      assertNotNull(xYBoxAnnotation0);
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      
      xYBoxAnnotation0.setURL("t");
      assertEquals("t", xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getToolTipText());
      
      AnnotationChangeEvent annotationChangeEvent0 = new AnnotationChangeEvent(multiplePiePlot0, xYBoxAnnotation0);
      assertNotNull(annotationChangeEvent0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("t", xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertEquals(ChartChangeEventType.GENERAL, annotationChangeEvent0.getType());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      multiplePiePlot0.annotationChanged(annotationChangeEvent0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("t", xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertEquals(ChartChangeEventType.GENERAL, annotationChangeEvent0.getType());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setAntiAlias(true);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      int int0 = 1358;
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      LegendTitle legendTitle0 = jFreeChart0.getLegend(10);
      assertNull(legendTitle0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      boolean boolean0 = jFreeChart0.getElementHinting();
      assertFalse(boolean0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      ImageTitle imageTitle0 = null;
      try {
        imageTitle0 = new ImageTitle((Image) null, 15, 15, rectangleEdge0, horizontalAlignment0, verticalAlignment0, multiplePiePlot0.DEFAULT_INSETS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.title.ImageTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      Color color0 = (Color)jFreeChart0.getBorderPaint();
      assertNotNull(color0);
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart1, jFreeChart0);
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      assertNotNull(jFreeChart1);
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart1.getElementHinting());
      assertTrue(jFreeChart1.isNotify());
      assertEquals(1, jFreeChart1.getSubtitleCount());
      assertFalse(jFreeChart1.isBorderVisible());
      assertTrue(jFreeChart1.getAntiAlias());
      assertNull(jFreeChart1.getID());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Image image0 = jFreeChart0.getBackgroundImage();
      assertNotSame(jFreeChart0, jFreeChart1);
      assertTrue(jFreeChart0.equals((Object)jFreeChart1));
      assertNull(image0);
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      List<Title> list0 = jFreeChart0.getSubtitles();
      assertNotSame(jFreeChart0, jFreeChart1);
      assertTrue(jFreeChart0.equals((Object)jFreeChart1));
      assertNotNull(list0);
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      RectangleInsets rectangleInsets0 = jFreeChart0.getPadding();
      assertNotSame(jFreeChart0, jFreeChart1);
      assertTrue(jFreeChart0.equals((Object)jFreeChart1));
      assertNotNull(rectangleInsets0);
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      assertNotNull(multiplePiePlot0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      MultiplePiePlot multiplePiePlot1 = (MultiplePiePlot)multiplePiePlot0.clone();
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertNotNull(multiplePiePlot1);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot1.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot1.getDataExtractOrder());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot1.fetchElementHintingFlag());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01);
      assertFalse(multiplePiePlot1.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot1.isOutlineVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      jFreeChart0.setBackgroundImageAlignment((-2182));
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals((-2182), jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      boolean boolean0 = jFreeChart0.isBorderVisible();
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertFalse(boolean0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals((-2182), jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      boolean boolean1 = jFreeChart0.isNotify();
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals((-2182), jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      System.setCurrentTimeMillis(2392L);
      Paint paint0 = jFreeChart0.getBackgroundPaint();
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertNull(paint0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals((-2182), jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-1674), (-1674));
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-1674), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1674), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertNotNull(categoryAxis0);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertNull(categoryAxis0.getLabel());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      assertNotNull(dateRange0);
      assertEquals(1.0, dateRange0.getLength(), 0.01);
      assertFalse(dateRange0.isNaNRange());
      assertEquals(0.0, dateRange0.getLowerBound(), 0.01);
      assertEquals(1.0, dateRange0.getUpperBound(), 0.01);
      assertEquals(0.5, dateRange0.getCentralValue(), 0.01);
      assertEquals(1L, dateRange0.getUpperMillis());
      assertEquals(0L, dateRange0.getLowerMillis());
      
      ModuloAxis moduloAxis0 = new ModuloAxis("Unrecognised title position.", dateRange0);
      assertNotNull(moduloAxis0);
      assertEquals(1.0, dateRange0.getLength(), 0.01);
      assertFalse(dateRange0.isNaNRange());
      assertEquals(0.0, dateRange0.getLowerBound(), 0.01);
      assertEquals(1.0, dateRange0.getUpperBound(), 0.01);
      assertEquals(0.5, dateRange0.getCentralValue(), 0.01);
      assertEquals(1L, dateRange0.getUpperMillis());
      assertEquals(0L, dateRange0.getLowerMillis());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("Unrecognised title position.", moduloAxis0.getLabel());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAutoRange());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertNotNull(scatterRenderer0);
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertFalse(scatterRenderer0.getDefaultItemLabelsVisible());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(scatterRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertTrue(scatterRenderer0.getDefaultSeriesVisible());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertTrue(scatterRenderer0.getDefaultCreateEntities());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      
      TickUnitSource tickUnitSource0 = NumberAxis.createStandardTickUnits(locale0);
      assertNotNull(tickUnitSource0);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      
      CategoryPlot categoryPlot0 = new CategoryPlot(slidingCategoryDataset0, categoryAxis0, moduloAxis0, scatterRenderer0);
      assertNotNull(categoryPlot0);
      assertEquals((-1674), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1674), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertNull(categoryAxis0.getLabel());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, dateRange0.getLength(), 0.01);
      assertFalse(dateRange0.isNaNRange());
      assertEquals(0.0, dateRange0.getLowerBound(), 0.01);
      assertEquals(1.0, dateRange0.getUpperBound(), 0.01);
      assertEquals(0.5, dateRange0.getCentralValue(), 0.01);
      assertEquals(1L, dateRange0.getUpperMillis());
      assertEquals(0L, dateRange0.getLowerMillis());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("Unrecognised title position.", moduloAxis0.getLabel());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAutoRange());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertFalse(scatterRenderer0.getDefaultItemLabelsVisible());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(scatterRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertTrue(scatterRenderer0.getDefaultSeriesVisible());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertTrue(scatterRenderer0.getDefaultCreateEntities());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      scatterRenderer0.setAutoPopulateSeriesFillPaint(true);
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertFalse(scatterRenderer0.getDefaultItemLabelsVisible());
      assertTrue(scatterRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertTrue(scatterRenderer0.getDefaultSeriesVisible());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertTrue(scatterRenderer0.getDefaultCreateEntities());
      
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      assertNotNull(jFreeChart0);
      assertEquals((-1674), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1674), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertNull(categoryAxis0.getLabel());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, dateRange0.getLength(), 0.01);
      assertFalse(dateRange0.isNaNRange());
      assertEquals(0.0, dateRange0.getLowerBound(), 0.01);
      assertEquals(1.0, dateRange0.getUpperBound(), 0.01);
      assertEquals(0.5, dateRange0.getCentralValue(), 0.01);
      assertEquals(1L, dateRange0.getUpperMillis());
      assertEquals(0L, dateRange0.getLowerMillis());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("Unrecognised title position.", moduloAxis0.getLabel());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAutoRange());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertFalse(scatterRenderer0.getDefaultItemLabelsVisible());
      assertTrue(scatterRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertTrue(scatterRenderer0.getDefaultSeriesVisible());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertTrue(scatterRenderer0.getDefaultCreateEntities());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      Object object0 = jFreeChart0.getTextAntiAlias();
      assertNull(object0);
      assertEquals((-1674), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1674), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertNull(categoryAxis0.getLabel());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, dateRange0.getLength(), 0.01);
      assertFalse(dateRange0.isNaNRange());
      assertEquals(0.0, dateRange0.getLowerBound(), 0.01);
      assertEquals(1.0, dateRange0.getUpperBound(), 0.01);
      assertEquals(0.5, dateRange0.getCentralValue(), 0.01);
      assertEquals(1L, dateRange0.getUpperMillis());
      assertEquals(0L, dateRange0.getLowerMillis());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("Unrecognised title position.", moduloAxis0.getLabel());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAutoRange());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertFalse(scatterRenderer0.getDefaultItemLabelsVisible());
      assertTrue(scatterRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertTrue(scatterRenderer0.getDefaultSeriesVisible());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertTrue(scatterRenderer0.getDefaultCreateEntities());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      // Undeclared exception!
      try { 
        ColorSpace.getInstance((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setBackgroundImageAlignment(15);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      boolean boolean0 = jFreeChart0.isBorderVisible();
      assertFalse(boolean0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      TextTitle textTitle0 = new TextTitle("N_Bbg~#h-6<,c!s!3");
      assertNotNull(textTitle0);
      assertEquals("N_Bbg~#h-6<,c!s!3", textTitle0.getText());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getID());
      assertTrue(textTitle0.isVisible());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getTextAlignment());
      assertEquals(VerticalAlignment.CENTER, textTitle0.getVerticalAlignment());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(RectangleEdge.TOP, textTitle0.getPosition());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getHorizontalAlignment());
      assertTrue(textTitle0.visible);
      
      jFreeChart0.setTitle(textTitle0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals("N_Bbg~#h-6<,c!s!3", textTitle0.getText());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getID());
      assertTrue(textTitle0.isVisible());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getTextAlignment());
      assertEquals(VerticalAlignment.CENTER, textTitle0.getVerticalAlignment());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(RectangleEdge.TOP, textTitle0.getPosition());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getHorizontalAlignment());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(textTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      assertNotNull(multiplePiePlot0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(multiplePiePlot0);
      assertNotNull(plotChangeEvent0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(ChartChangeEventType.GENERAL, plotChangeEvent0.getType());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      jFreeChart0.plotChanged(plotChangeEvent0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(ChartChangeEventType.GENERAL, plotChangeEvent0.getType());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)jFreeChart0.getBorderStroke();
      assertNotNull(basicStroke0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      TextTitle textTitle0 = jFreeChart0.getTitle();
      assertNotNull(textTitle0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(VerticalAlignment.CENTER, textTitle0.getVerticalAlignment());
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("Series Title", textTitle0.getText());
      assertTrue(textTitle0.getNotify());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getHorizontalAlignment());
      assertNull(textTitle0.getURLText());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(RectangleEdge.BOTTOM, textTitle0.getPosition());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getTextAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(textTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator");
      assertNotNull(numberAxis0);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals("org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator", numberAxis0.getLabel());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals("org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator", numberAxis0.getLabel());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)combinedRangeXYPlot0.getRootPlot();
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotNull(combinedRangeXYPlot1);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals("org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator", numberAxis0.getLabel());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot1.getSeriesRenderingOrder());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot1.getDatasetRenderingOrder());
      assertFalse(combinedRangeXYPlot1.fetchElementHintingFlag());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot1.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(0, combinedRangeXYPlot1.getRendererCount());
      assertEquals(0, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot1.getOrientation());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(0, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot1.getRangeAxisLocation());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot1);
      assertNotNull(jFreeChart0);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals("org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator", numberAxis0.getLabel());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot1.getSeriesRenderingOrder());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot1.getDatasetRenderingOrder());
      assertFalse(combinedRangeXYPlot1.fetchElementHintingFlag());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot1.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(0, combinedRangeXYPlot1.getRendererCount());
      assertEquals(0, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot1.getOrientation());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(0, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot1.getRangeAxisLocation());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Layer layer0 = Layer.FOREGROUND;
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(15, layer0);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNull(collection0);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals("org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator", numberAxis0.getLabel());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      RectangleEdge rectangleEdge0 = combinedRangeXYPlot0.getRangeAxisEdge();
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertEquals(RectangleEdge.LEFT, rectangleEdge0);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals("org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator", numberAxis0.getLabel());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      CombinedRangeXYPlot combinedRangeXYPlot2 = (CombinedRangeXYPlot)jFreeChart0.getXYPlot();
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      assertSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      assertSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      assertNotNull(combinedRangeXYPlot2);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals("org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator", numberAxis0.getLabel());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot1.getSeriesRenderingOrder());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot1.getDatasetRenderingOrder());
      assertFalse(combinedRangeXYPlot1.fetchElementHintingFlag());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot1.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(0, combinedRangeXYPlot1.getRendererCount());
      assertEquals(0, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot1.getOrientation());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(0, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot1.getRangeAxisLocation());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot2.getRangeAxisLocation());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot2.getOrientation());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeXYPlot2.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot2.getDatasetRenderingOrder());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeXYPlot2.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot2.fetchElementHintingFlag());
      assertEquals(0, combinedRangeXYPlot2.getRendererCount());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot2.getSeriesRenderingOrder());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot2.getDomainAxisLocation());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      jFreeChart0.setPadding(combinedRangeXYPlot0.DEFAULT_INSETS);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      assertSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals("org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator", numberAxis0.getLabel());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot1.getSeriesRenderingOrder());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot1.getDatasetRenderingOrder());
      assertFalse(combinedRangeXYPlot1.fetchElementHintingFlag());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot1.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(0, combinedRangeXYPlot1.getRendererCount());
      assertEquals(0, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot1.getOrientation());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(0, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot1.getRangeAxisLocation());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        jFreeChart0.getCategoryPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.CombinedRangeXYPlot cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      
      PiePlot piePlot0 = new PiePlot(defaultKeyedValuesDataset0);
      assertNotNull(piePlot0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(piePlot0.isNotify());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Font font0 = piePlot0.getLabelFont();
      assertNotNull(font0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(piePlot0.isNotify());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart("", font0, piePlot0, true);
      assertNotNull(jFreeChart0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(piePlot0.isNotify());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setBorderVisible(true);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(piePlot0.isNotify());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isBorderVisible());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = null;
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(16777215, 3);
      assertNotNull(waferMapDataset0);
      assertEquals(16777215, waferMapDataset0.getMaxChipX());
      assertEquals(3, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(0, (-725));
      assertNotNull(waferMapRenderer0);
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      assertNotNull(waferMapPlot0);
      assertEquals(16777215, waferMapDataset0.getMaxChipX());
      assertEquals(3, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart((String) null, waferMapPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(16777215, waferMapDataset0.getMaxChipX());
      assertEquals(3, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      waferMapPlot0.setDataset(waferMapDataset0);
      assertEquals(16777215, waferMapDataset0.getMaxChipX());
      assertEquals(3, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      waferMapRenderer0.setItemLabelAnchorOffset(15);
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(15.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      
      waferMapRenderer0.setSeriesItemLabelsVisible(3, (Boolean) false);
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(15.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      
      boolean boolean0 = jFreeChart0.getAntiAlias();
      assertTrue(boolean0);
      assertEquals(16777215, waferMapDataset0.getMaxChipX());
      assertEquals(3, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(15.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setBackgroundImageAlpha(0);
      assertEquals(16777215, waferMapDataset0.getMaxChipX());
      assertEquals(3, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(15.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      waferMapDataset0.addValue(0, 255, 16777215);
      assertEquals(16777215, waferMapDataset0.getMaxChipX());
      assertEquals(3, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      assertNotNull(legendTitle0);
      assertEquals(16777215, waferMapDataset0.getMaxChipX());
      assertEquals(3, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(15.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(2.0, legendTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertTrue(legendTitle0.isVisible());
      assertEquals(2.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertNull(legendTitle0.getID());
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertEquals(RectangleEdge.BOTTOM, legendTitle0.getPosition());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertTrue(legendTitle0.getNotify());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(legendTitle0.visible);
      
      jFreeChart0.addLegend(legendTitle0);
      assertEquals(16777215, waferMapDataset0.getMaxChipX());
      assertEquals(3, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(15.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(2, jFreeChart0.getSubtitleCount());
      assertEquals(2.0, legendTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertTrue(legendTitle0.isVisible());
      assertEquals(2.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertNull(legendTitle0.getID());
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertEquals(RectangleEdge.BOTTOM, legendTitle0.getPosition());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertTrue(legendTitle0.getNotify());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(legendTitle0.visible);
      
      jFreeChart0.addSubtitle((Title) legendTitle0);
      assertEquals(16777215, waferMapDataset0.getMaxChipX());
      assertEquals(3, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(15.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(3, jFreeChart0.getSubtitleCount());
      assertEquals(2.0, legendTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertTrue(legendTitle0.isVisible());
      assertEquals(2.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertNull(legendTitle0.getID());
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertEquals(RectangleEdge.BOTTOM, legendTitle0.getPosition());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertTrue(legendTitle0.getNotify());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(legendTitle0.visible);
      
      legendTitle0.setPadding(0.0, (double) 0, (-2726.194487048), 0.0);
      assertEquals(16777215, waferMapDataset0.getMaxChipX());
      assertEquals(3, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(15.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(3, jFreeChart0.getSubtitleCount());
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertTrue(legendTitle0.isVisible());
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertNull(legendTitle0.getID());
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertEquals(RectangleEdge.BOTTOM, legendTitle0.getPosition());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertTrue(legendTitle0.getNotify());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(legendTitle0.visible);
      
      jFreeChart0.removeLegend();
      assertEquals(16777215, waferMapDataset0.getMaxChipX());
      assertEquals(3, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(15.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(2, jFreeChart0.getSubtitleCount());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.addSubtitle((Title) legendTitle0);
      assertEquals(16777215, waferMapDataset0.getMaxChipX());
      assertEquals(3, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(15.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(3, jFreeChart0.getSubtitleCount());
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertTrue(legendTitle0.isVisible());
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertNull(legendTitle0.getID());
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertEquals(RectangleEdge.BOTTOM, legendTitle0.getPosition());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertTrue(legendTitle0.getNotify());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(legendTitle0.visible);
      
      // Undeclared exception!
      try { 
        jFreeChart0.setTextAntiAlias((Object) waferMapDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.jfree.data.general.WaferMapDataset@2 incompatible with Text-specific antialiasing enable key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      
      defaultBoxAndWhiskerCategoryDataset0.validateObject();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartChangeEventType chartChangeEventType0 = ChartChangeEventType.NEW_DATASET;
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, true, true, true);
      assertNotNull(chartPanel0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      
      jFreeChart0.addProgressListener(chartPanel0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      
      ChartChangeEvent chartChangeEvent0 = new ChartChangeEvent(jFreeChart0, (JFreeChart) null, chartChangeEventType0);
      assertNotNull(chartChangeEvent0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(ChartChangeEventType.NEW_DATASET, chartChangeEvent0.getType());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      chartChangeEvent0.setType(chartChangeEventType0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(ChartChangeEventType.NEW_DATASET, chartChangeEvent0.getType());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.notifyListeners(chartChangeEvent0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(ChartChangeEventType.NEW_DATASET, chartChangeEvent0.getType());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart1, jFreeChart0);
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      assertNotNull(jFreeChart1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart1.getElementHinting());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertTrue(jFreeChart1.isNotify());
      assertTrue(jFreeChart1.getAntiAlias());
      assertEquals(0, jFreeChart1.getSubtitleCount());
      assertNull(jFreeChart1.getID());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertNotSame(jFreeChart0, jFreeChart1);
      assertTrue(jFreeChart0.equals((Object)jFreeChart1));
      assertNotNull(renderingHints0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(renderingHints0.isEmpty());
      assertEquals(2, renderingHints0.size());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Image image0 = jFreeChart0.getBackgroundImage();
      assertNotSame(jFreeChart0, jFreeChart1);
      assertTrue(jFreeChart0.equals((Object)jFreeChart1));
      assertNull(image0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setBackgroundImage((Image) null);
      assertNotSame(jFreeChart0, jFreeChart1);
      assertTrue(jFreeChart0.equals((Object)jFreeChart1));
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setBackgroundImage((Image) null);
      assertNotSame(jFreeChart0, jFreeChart1);
      assertTrue(jFreeChart0.equals((Object)jFreeChart1));
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setBackgroundImage((Image) null);
      assertNotSame(jFreeChart0, jFreeChart1);
      assertTrue(jFreeChart0.equals((Object)jFreeChart1));
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      List<Title> list0 = jFreeChart0.getSubtitles();
      assertNotSame(jFreeChart0, jFreeChart1);
      assertTrue(jFreeChart0.equals((Object)jFreeChart1));
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "";
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      assertNotNull(font0);
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertNotNull(thermometerPlot0);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.fetchElementHintingFlag());
      assertEquals(PlotOrientation.VERTICAL, thermometerPlot0.getOrientation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      boolean boolean0 = true;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 10;
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) 2;
      String string1 = thermometerPlot0.getPlotType();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Thermometer Plot", string1);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.fetchElementHintingFlag());
      assertEquals(PlotOrientation.VERTICAL, thermometerPlot0.getOrientation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      floatArray0[3] = (float) 10;
      floatArray0[4] = (float) 2;
      floatArray0[5] = (-2337.0F);
      floatArray0[6] = (float) 10;
      ChartHints.Key chartHints_Key0 = new ChartHints.Key(3);
      assertNotNull(chartHints_Key0);
      
      RenderingHints renderingHints0 = new RenderingHints(chartHints_Key0, font0);
      assertNotNull(renderingHints0);
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      assertArrayEquals(new float[] {10.0F, 3.0F, 2.0F, 10.0F, 2.0F, (-2337.0F), 10.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertNotNull(rescaleOp0);
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(7, rescaleOp0.getNumFactors());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 2;
      JFreeChart jFreeChart0 = new JFreeChart("", font0, thermometerPlot0, true);
      assertNotNull(jFreeChart0);
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.fetchElementHintingFlag());
      assertEquals(PlotOrientation.VERTICAL, thermometerPlot0.getOrientation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 1);
      assertNotNull(bufferedImage0);
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.fetchElementHintingFlag());
      assertEquals(PlotOrientation.VERTICAL, thermometerPlot0.getOrientation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(2, 0, intArray0, 3, true, 0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Map size (0) must be >= 1
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      assertNotNull(jFreeChart0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      String string0 = jFreeChart0.getID();
      assertNull(string0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      List<Title> list0 = jFreeChart0.getSubtitles();
      assertNotNull(list0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setSubtitles(list0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.removeLegend();
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Image image0 = jFreeChart0.getBackgroundImage();
      assertNull(image0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertNotNull(renderingHints0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(2, renderingHints0.size());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      int int0 = (-1010);
      DateTitle dateTitle0 = null;
      try {
        dateTitle0 = new DateTitle((-1010));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1010
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      ringPlot0.setCenterText("");
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("", ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Font font0 = ringPlot0.getLabelFont();
      assertNotNull(font0);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("", ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      CenterTextMode centerTextMode0 = CenterTextMode.VALUE;
      ringPlot0.setCenterTextMode(centerTextMode0);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("", ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(CenterTextMode.VALUE, ringPlot0.getCenterTextMode());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart("", font0, ringPlot0, false);
      assertNotNull(jFreeChart0);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("", ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(CenterTextMode.VALUE, ringPlot0.getCenterTextMode());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      assertTrue(jDBCPieDataset0.getNotify());
      
      ringPlot0.setDataset(jDBCPieDataset0);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("", ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(CenterTextMode.VALUE, ringPlot0.getCenterTextMode());
      assertTrue(jDBCPieDataset0.getNotify());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      jFreeChart0.setNotify(true);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("", ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(CenterTextMode.VALUE, ringPlot0.getCenterTextMode());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setTitle("',\"B|waI?S_(#8");
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("", ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(CenterTextMode.VALUE, ringPlot0.getCenterTextMode());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartProgressEvent chartProgressEvent0 = new ChartProgressEvent(ringPlot0, jFreeChart0, 10, 15);
      assertNotNull(chartProgressEvent0);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("", ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(CenterTextMode.VALUE, ringPlot0.getCenterTextMode());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(10, chartProgressEvent0.getType());
      assertEquals(15, chartProgressEvent0.getPercent());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(2, ChartProgressEvent.DRAWING_FINISHED);
      assertEquals(1, ChartProgressEvent.DRAWING_STARTED);
      
      chartProgressEvent0.setPercent(10);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("", ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(CenterTextMode.VALUE, ringPlot0.getCenterTextMode());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(10, chartProgressEvent0.getType());
      assertEquals(10, chartProgressEvent0.getPercent());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(2, ChartProgressEvent.DRAWING_FINISHED);
      assertEquals(1, ChartProgressEvent.DRAWING_STARTED);
      
      jFreeChart0.notifyListeners(chartProgressEvent0);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("", ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(CenterTextMode.VALUE, ringPlot0.getCenterTextMode());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(10, chartProgressEvent0.getType());
      assertEquals(10, chartProgressEvent0.getPercent());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(2, ChartProgressEvent.DRAWING_FINISHED);
      assertEquals(1, ChartProgressEvent.DRAWING_STARTED);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      DateTitle dateTitle0 = null;
      try {
        dateTitle0 = new DateTitle(10, locale0, jFreeChart0.DEFAULT_TITLE_FONT, ringPlot0.DEFAULT_BACKGROUND_PAINT, rectangleEdge0, horizontalAlignment0, verticalAlignment0, ringPlot0.DEFAULT_INSETS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 10
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Font font0 = Font.decode("JFREECHART_TOP_LEVEL");
      assertNotNull(font0);
      assertEquals("JFREECHART_TOP_LEVEL", font0.getName());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart("<GpT3", font0, ringPlot0, false);
      assertNotNull(jFreeChart0);
      assertEquals("JFREECHART_TOP_LEVEL", font0.getName());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      chartRenderingInfo0.clear();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 2978.38579, 0.4, chartRenderingInfo0);
      assertNotNull(bufferedImage0);
      assertEquals("JFREECHART_TOP_LEVEL", font0.getName());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      BufferedImage bufferedImage1 = jFreeChart0.createBufferedImage(1963, 10, chartRenderingInfo0);
      assertNotSame(bufferedImage1, bufferedImage0);
      assertFalse(bufferedImage1.equals((Object)bufferedImage0));
      assertNotNull(bufferedImage1);
      assertEquals("JFREECHART_TOP_LEVEL", font0.getName());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1, bufferedImage1.getNumYTiles());
      assertTrue(bufferedImage1.hasTileWriters());
      assertEquals(0, bufferedImage1.getTileGridYOffset());
      assertEquals(2, bufferedImage1.getType());
      assertEquals(3, bufferedImage1.getTransparency());
      assertEquals(0, bufferedImage1.getTileGridXOffset());
      assertEquals(1, bufferedImage1.getNumXTiles());
      assertEquals(1963, bufferedImage1.getTileWidth());
      assertEquals(10, bufferedImage1.getHeight());
      assertEquals(1963, bufferedImage1.getWidth());
      assertEquals(0, bufferedImage1.getMinTileX());
      assertEquals(0, bufferedImage1.getMinTileY());
      assertEquals(0, bufferedImage1.getMinX());
      assertEquals(0, bufferedImage1.getMinY());
      assertEquals(10, bufferedImage1.getTileHeight());
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage1.isAlphaPremultiplied());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      int int0 = jFreeChart0.getSubtitleCount();
      assertEquals(0, int0);
      assertEquals("JFREECHART_TOP_LEVEL", font0.getName());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      assertNull(legendTitle0);
      assertEquals("JFREECHART_TOP_LEVEL", font0.getName());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertNotSame(bufferedImage0, bufferedImage1);
      assertFalse(bufferedImage0.equals((Object)bufferedImage1));
      assertNotNull(sunGraphics2D0);
      assertEquals("JFREECHART_TOP_LEVEL", font0.getName());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.transX);
      
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      Rectangle rectangle0 = polygon0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      
      // Undeclared exception!
      try { 
        jFreeChart0.drawTitle((Title) null, sunGraphics2D0, rectangle0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 't' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      assertNotNull(chartPanel0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      
      chartPanel0.setAlignmentX(1.0F);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(10, 10, 10);
      assertNotNull(waferMapDataset0);
      assertEquals(10, waferMapDataset0.getMaxChipX());
      assertEquals(10, waferMapDataset0.getMaxChipY());
      assertEquals(10.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      
      chartPanel0.setMinimumDrawWidth(2);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(2, chartPanel0.getMinimumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      
      DatasetGroup datasetGroup0 = waferMapDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals(10, waferMapDataset0.getMaxChipX());
      assertEquals(10, waferMapDataset0.getMaxChipY());
      assertEquals(10.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      DatasetGroup datasetGroup1 = (DatasetGroup)datasetGroup0.clone();
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup1, datasetGroup0);
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      assertNotNull(datasetGroup1);
      assertEquals(10, waferMapDataset0.getMaxChipX());
      assertEquals(10, waferMapDataset0.getMaxChipY());
      assertEquals(10.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup1.getID());
      
      DatasetGroup datasetGroup2 = (DatasetGroup)datasetGroup0.clone();
      assertNotSame(datasetGroup0, datasetGroup2);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup2, datasetGroup1);
      assertNotSame(datasetGroup2, datasetGroup0);
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertTrue(datasetGroup2.equals((Object)datasetGroup1));
      assertTrue(datasetGroup2.equals((Object)datasetGroup0));
      assertNotNull(datasetGroup2);
      assertEquals(10, waferMapDataset0.getMaxChipX());
      assertEquals(10, waferMapDataset0.getMaxChipY());
      assertEquals(10.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup2.getID());
      
      jFreeChart0.setNotify(false);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Graphics graphics0 = chartPanel0.getGraphics();
      assertNull(graphics0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(2, chartPanel0.getMinimumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      
      defaultIntervalCategoryDataset0.setGroup(datasetGroup0);
      assertNotSame(datasetGroup0, datasetGroup2);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertTrue(datasetGroup0.equals((Object)datasetGroup2));
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, waferMapDataset0.getMaxChipX());
      assertEquals(10, waferMapDataset0.getMaxChipY());
      assertEquals(10.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(2, chartPanel0.getMinimumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      
      jFreeChart0.addChangeListener(chartPanel0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(2, chartPanel0.getMinimumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset0.getValue(10, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
      assertNotNull(multiplePiePlot0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      assertNotNull(multiplePiePlot0);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      multiplePiePlot0.setNotify(true);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart1, jFreeChart0);
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      assertNotNull(jFreeChart1);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart1.getElementHinting());
      assertTrue(jFreeChart1.isNotify());
      assertFalse(jFreeChart1.isBorderVisible());
      assertNull(jFreeChart1.getID());
      assertTrue(jFreeChart1.getAntiAlias());
      assertEquals(0, jFreeChart1.getSubtitleCount());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      JFreeChart jFreeChart2 = (JFreeChart)jFreeChart0.clone();
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart0, jFreeChart2);
      assertNotSame(jFreeChart2, jFreeChart0);
      assertNotSame(jFreeChart2, jFreeChart1);
      assertTrue(jFreeChart0.equals((Object)jFreeChart1));
      assertTrue(jFreeChart2.equals((Object)jFreeChart1));
      assertTrue(jFreeChart2.equals((Object)jFreeChart0));
      assertNotNull(jFreeChart2);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertNull(jFreeChart2.getID());
      assertTrue(jFreeChart2.getAntiAlias());
      assertEquals(0, jFreeChart2.getSubtitleCount());
      assertEquals(0.5F, jFreeChart2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart2.isNotify());
      assertFalse(jFreeChart2.isBorderVisible());
      assertFalse(jFreeChart2.getElementHinting());
      assertEquals(15, jFreeChart2.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      boolean boolean0 = multiplePiePlot0.equals(jFreeChart2);
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart0, jFreeChart2);
      assertNotSame(jFreeChart2, jFreeChart0);
      assertNotSame(jFreeChart2, jFreeChart1);
      assertTrue(jFreeChart0.equals((Object)jFreeChart2));
      assertTrue(jFreeChart0.equals((Object)jFreeChart1));
      assertTrue(jFreeChart2.equals((Object)jFreeChart1));
      assertTrue(jFreeChart2.equals((Object)jFreeChart0));
      assertFalse(boolean0);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertNull(jFreeChart2.getID());
      assertTrue(jFreeChart2.getAntiAlias());
      assertEquals(0, jFreeChart2.getSubtitleCount());
      assertEquals(0.5F, jFreeChart2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart2.isNotify());
      assertFalse(jFreeChart2.isBorderVisible());
      assertFalse(jFreeChart2.getElementHinting());
      assertEquals(15, jFreeChart2.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      PiePlot piePlot0 = (PiePlot)jFreeChart0.getPlot();
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart0, jFreeChart2);
      assertTrue(jFreeChart0.equals((Object)jFreeChart2));
      assertTrue(jFreeChart0.equals((Object)jFreeChart1));
      assertNotNull(piePlot0);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isNotify());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertTrue(piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      jFreeChart0.setBorderStroke(piePlot0.DEFAULT_OUTLINE_STROKE);
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart0, jFreeChart2);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertFalse(jFreeChart0.equals((Object)jFreeChart2));
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isNotify());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertTrue(piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 799, 0, 0, 799, 0, true, true, true, true, false, true);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertFalse(jFreeChart0.equals((Object)jFreeChart2));
      assertNotNull(chartPanel0);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(799, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      
      jFreeChart0.removeProgressListener(chartPanel0);
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart0, jFreeChart2);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertFalse(jFreeChart0.equals((Object)jFreeChart2));
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(799, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      
      jFreeChart0.fireChartChanged();
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart0, jFreeChart2);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertFalse(jFreeChart0.equals((Object)jFreeChart2));
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setBackgroundImageAlpha(1.0F);
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart0, jFreeChart2);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertFalse(jFreeChart0.equals((Object)jFreeChart2));
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      boolean boolean1 = jFreeChart0.getElementHinting();
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart0, jFreeChart2);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertFalse(jFreeChart0.equals((Object)jFreeChart2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Locale locale0 = new Locale("ZOOM_DOMAIN_BOTH");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("zoom_domain_both", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zoom_domain_both", locale0.getLanguage());
      
      boolean boolean2 = locale0.hasExtensions();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals("", locale0.getCountry());
      assertEquals("zoom_domain_both", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zoom_domain_both", locale0.getLanguage());
      
      multiplePiePlot0.setOutlinePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      assertNotSame(jFreeChart0, jFreeChart1);
      assertNotSame(jFreeChart0, jFreeChart2);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertFalse(jFreeChart0.equals((Object)jFreeChart2));
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      DateTitle dateTitle0 = null;
      try {
        dateTitle0 = new DateTitle(300, locale0, jFreeChart0.DEFAULT_TITLE_FONT, jFreeChart0.DEFAULT_BACKGROUND_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 300
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      assertNotNull(font0);
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals("Serif", font0.getName());
      
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(254, (-1672));
      assertNotNull(waferMapDataset0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(254, waferMapDataset0.getMaxChipX());
      assertEquals((-1672), waferMapDataset0.getMaxChipY());
      
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      assertNotNull(waferMapRenderer0);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      assertNotNull(waferMapPlot0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(254, waferMapDataset0.getMaxChipX());
      assertEquals((-1672), waferMapDataset0.getMaxChipY());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart("outlineStroke", font0, waferMapPlot0, true);
      assertNotNull(jFreeChart0);
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals("Serif", font0.getName());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(254, waferMapDataset0.getMaxChipX());
      assertEquals((-1672), waferMapDataset0.getMaxChipY());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle((-109));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      assertNotNull(compassPlot0);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-4509.564));
      assertNotNull(defaultValueDataset0);
      assertTrue(defaultValueDataset0.getNotify());
      
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      assertNotNull(meterPlot0);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.isNotify());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      
      boolean boolean0 = compassPlot0.equals(meterPlot0);
      assertFalse(boolean0);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.isNotify());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart("", compassPlot0);
      assertNotNull(jFreeChart0);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setID("9)cG");
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals("9)cG", jFreeChart0.getID());
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertTrue(piePlot0.isNotify());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      piePlot0.setPieIndex(990);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertTrue(piePlot0.isNotify());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(990, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart("F]c", piePlot0);
      assertNotNull(jFreeChart0);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertTrue(piePlot0.isNotify());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(990, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-374), 10, 500, 990, 0, 10, true, true, true, true, true, false);
      assertNotNull(chartPanel0);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertTrue(piePlot0.isNotify());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(990, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(10, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(990, chartPanel0.getMinimumDrawHeight());
      assertEquals(500, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertTrue(piePlot0.isNotify());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(990, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(10, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(990, chartPanel0.getMinimumDrawHeight());
      assertEquals(500, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      
      jFreeChart0.handleClick(10, (-374), chartRenderingInfo0);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertTrue(piePlot0.isNotify());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(990, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(10, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(990, chartPanel0.getMinimumDrawHeight());
      assertEquals(500, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.PiePlot cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      assertNotNull(defaultValueDataset0);
      assertTrue(defaultValueDataset0.getNotify());
      
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      assertNotNull(meterPlot0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.isOutlineVisible());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      
      Font font0 = meterPlot0.getTickLabelFont();
      assertNotNull(font0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.isOutlineVisible());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertEquals(1, font0.getStyle());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isBold());
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      
      defaultValueDataset0.validateObject();
      assertTrue(defaultValueDataset0.getNotify());
      
      JFreeChart jFreeChart0 = new JFreeChart((String) null, font0, meterPlot0, false);
      assertNotNull(jFreeChart0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.isOutlineVisible());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertEquals(1, font0.getStyle());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isBold());
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      List<Title> list0 = jFreeChart0.getSubtitles();
      assertNotNull(list0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.isOutlineVisible());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertEquals(1, font0.getStyle());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isBold());
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      int int0 = jFreeChart0.getBackgroundImageAlignment();
      assertEquals(15, int0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.isOutlineVisible());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertEquals(1, font0.getStyle());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isBold());
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      byte[][] byteArray0 = new byte[5][1];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)100;
      byteArray1[2] = (byte)0;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)100;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)118;
      byteArray2[5] = (byte)100;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[2];
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray3[0] = (byte)118;
      byteArray3[1] = (byte)0;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[5];
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)100;
      byteArray4[2] = (byte)118;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)0;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[8];
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray1));
      
      byteArray5[0] = (byte)0;
      byteArray5[1] = (byte)100;
      byteArray5[2] = (byte)0;
      byteArray5[3] = (byte)0;
      byteArray5[4] = (byte)0;
      byteArray5[5] = (byte)0;
      byteArray5[6] = (byte)0;
      byteArray5[7] = (byte)0;
      byteArray0[4] = byteArray5;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(10, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteLookupTable0);
      assertEquals(10, byteLookupTable0.getOffset());
      assertEquals(5, byteLookupTable0.getNumComponents());
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertNotNull(renderingHints0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.isOutlineVisible());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertEquals(1, font0.getStyle());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isBold());
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(renderingHints0.isEmpty());
      assertEquals(2, renderingHints0.size());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      assertEquals(5, byteArray0.length);
      assertNotNull(lookupOp0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.isOutlineVisible());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertEquals(1, font0.getStyle());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isBold());
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, byteLookupTable0.getOffset());
      assertEquals(5, byteLookupTable0.getNumComponents());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(2, renderingHints0.size());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      // Undeclared exception!
      try { 
        lookupOp0.createCompatibleDestImage((BufferedImage) null, (ColorModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.LookupOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      assertNotNull(waferMapPlot0);
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart("", waferMapPlot0);
      assertNotNull(jFreeChart0);
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      LegendTitle legendTitle0 = jFreeChart0.getLegend(0);
      assertNotNull(legendTitle0);
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(legendTitle0.getNotify());
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertTrue(legendTitle0.isVisible());
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(2.0, legendTitle0.getContentYOffset(), 0.01);
      assertNull(legendTitle0.getID());
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(2.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(RectangleEdge.BOTTOM, legendTitle0.getPosition());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(legendTitle0.visible);
      
      RectangleInsets rectangleInsets0 = legendTitle0.getMargin();
      assertNotNull(rectangleInsets0);
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(legendTitle0.getNotify());
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertTrue(legendTitle0.isVisible());
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(2.0, legendTitle0.getContentYOffset(), 0.01);
      assertNull(legendTitle0.getID());
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(2.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(RectangleEdge.BOTTOM, legendTitle0.getPosition());
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(legendTitle0.visible);
      
      FixedHeightLayoutCache fixedHeightLayoutCache0 = new FixedHeightLayoutCache();
      assertNotNull(fixedHeightLayoutCache0);
      
      JTree jTree0 = new JTree();
      assertNotNull(jTree0);
      assertFalse(jTree0.getIgnoreRepaint());
      assertFalse(jTree0.isFocusCycleRoot());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      
      TreePath treePath0 = jTree0.getPathForLocation(1912, (-942));
      assertNull(treePath0);
      assertFalse(jTree0.getIgnoreRepaint());
      assertFalse(jTree0.isFocusCycleRoot());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      
      SystemColor systemColor0 = SystemColor.scrollbar;
      assertNotNull(systemColor0);
      assertEquals(224, systemColor0.getRed());
      assertEquals((-2039584), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(224, systemColor0.getGreen());
      assertEquals(224, systemColor0.getBlue());
      
      Color color0 = Color.blue;
      assertNotNull(color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(34, systemColor0, systemColor0, color0, systemColor0);
      assertNotNull(softBevelBorder0);
      assertEquals(224, systemColor0.getRed());
      assertEquals((-2039584), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(224, systemColor0.getGreen());
      assertEquals(224, systemColor0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      
      Rectangle rectangle0 = softBevelBorder0.getInteriorRectangle((Component) jTree0, 0, 0, 1523, 15);
      assertNotNull(rectangle0);
      assertFalse(jTree0.getIgnoreRepaint());
      assertFalse(jTree0.isFocusCycleRoot());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertEquals(224, systemColor0.getRed());
      assertEquals((-2039584), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(224, systemColor0.getGreen());
      assertEquals(224, systemColor0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(3.0, rectangle0.getX(), 0.01);
      assertEquals(7.5, rectangle0.getCenterY(), 0.01);
      assertEquals(3.0, rectangle0.getY(), 0.01);
      assertEquals(12.0, rectangle0.getMaxY(), 0.01);
      assertEquals(1517.0, rectangle0.getWidth(), 0.01);
      assertEquals(3.0, rectangle0.getMinY(), 0.01);
      assertEquals(3.0, rectangle0.getMinX(), 0.01);
      assertEquals(9.0, rectangle0.getHeight(), 0.01);
      assertEquals(1520.0, rectangle0.getMaxX(), 0.01);
      assertEquals(761.5, rectangle0.getCenterX(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(1517, rectangle0.width);
      assertEquals(9, rectangle0.height);
      assertEquals(3, rectangle0.y);
      assertEquals(3, rectangle0.x);
      
      Rectangle rectangle1 = fixedHeightLayoutCache0.getBounds((TreePath) null, rectangle0);
      assertNull(rectangle1);
      assertFalse(jTree0.getIgnoreRepaint());
      assertFalse(jTree0.isFocusCycleRoot());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertEquals(224, systemColor0.getRed());
      assertEquals((-2039584), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(224, systemColor0.getGreen());
      assertEquals(224, systemColor0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(3.0, rectangle0.getX(), 0.01);
      assertEquals(7.5, rectangle0.getCenterY(), 0.01);
      assertEquals(3.0, rectangle0.getY(), 0.01);
      assertEquals(12.0, rectangle0.getMaxY(), 0.01);
      assertEquals(1517.0, rectangle0.getWidth(), 0.01);
      assertEquals(3.0, rectangle0.getMinY(), 0.01);
      assertEquals(3.0, rectangle0.getMinX(), 0.01);
      assertEquals(9.0, rectangle0.getHeight(), 0.01);
      assertEquals(1520.0, rectangle0.getMaxX(), 0.01);
      assertEquals(761.5, rectangle0.getCenterX(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(1517, rectangle0.width);
      assertEquals(9, rectangle0.height);
      assertEquals(3, rectangle0.y);
      assertEquals(3, rectangle0.x);
      
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      LengthAdjustmentType lengthAdjustmentType1 = LengthAdjustmentType.CONTRACT;
      // Undeclared exception!
      try { 
        rectangleInsets0.createAdjustedRectangle((Rectangle2D) null, lengthAdjustmentType0, lengthAdjustmentType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.ui.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertNotNull(spiderWebPlot0);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart("\"", spiderWebPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setBackgroundImageAlpha(711.174F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(711.174F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setAntiAlias(false);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(711.174F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      List<Title> list0 = jFreeChart0.getSubtitles();
      assertNotNull(list0);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(711.174F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Object object0 = jFreeChart0.getTextAntiAlias();
      assertNull(object0);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(711.174F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setBorderPaint(spiderWebPlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(711.174F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(spiderWebPlot0);
      assertNotNull(rendererChangeEvent0);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(ChartChangeEventType.GENERAL, rendererChangeEvent0.getType());
      assertFalse(rendererChangeEvent0.getSeriesVisibilityChanged());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      jFreeChart0.notifyListeners(rendererChangeEvent0);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(711.174F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(ChartChangeEventType.GENERAL, rendererChangeEvent0.getType());
      assertFalse(rendererChangeEvent0.getSeriesVisibilityChanged());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(spiderWebPlot0);
      assertNotNull(plotChangeEvent0);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(ChartChangeEventType.GENERAL, plotChangeEvent0.getType());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      jFreeChart0.plotChanged(plotChangeEvent0);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(711.174F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(ChartChangeEventType.GENERAL, plotChangeEvent0.getType());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      assertNotNull(chartPanel0);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(711.174F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      
      jFreeChart0.addChangeListener(chartPanel0);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(711.174F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)21;
      byte byte2 = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)100;
      byte byte3 = (byte)18;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)53;
      byte byte4 = (byte)72;
      byteArray0[7] = (byte)72;
      byteArray0[8] = (byte)54;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(1024, 300, byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      combinedRangeCategoryPlot0.setRangeCrosshairValue(Double.NaN, true);
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart("G", combinedRangeCategoryPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      LegendTitle legendTitle0 = jFreeChart0.getLegend(15);
      assertNull(legendTitle0);
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      LegendItemCollection legendItemCollection0 = combinedRangeCategoryPlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      jFreeChart0.removeSubtitle((Title) null);
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      LegendTitle legendTitle1 = jFreeChart0.getLegend();
      assertNotNull(legendTitle1);
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(2.0, legendTitle1.getContentXOffset(), 0.01);
      assertEquals(SortOrder.ASCENDING, legendTitle1.getSortOrder());
      assertEquals(RectangleEdge.BOTTOM, legendTitle1.getPosition());
      assertEquals(RectangleAnchor.CENTER, legendTitle1.getLegendItemGraphicAnchor());
      assertEquals(RectangleAnchor.CENTER, legendTitle1.getLegendItemGraphicLocation());
      assertEquals(0.0, legendTitle1.getHeight(), 0.01);
      assertEquals(RectangleEdge.LEFT, legendTitle1.getLegendItemGraphicEdge());
      assertEquals(HorizontalAlignment.CENTER, legendTitle1.getHorizontalAlignment());
      assertTrue(legendTitle1.isVisible());
      assertTrue(legendTitle1.getNotify());
      assertEquals(VerticalAlignment.CENTER, legendTitle1.getVerticalAlignment());
      assertEquals(0.0, legendTitle1.getWidth(), 0.01);
      assertEquals(2.0, legendTitle1.getContentYOffset(), 0.01);
      assertNull(legendTitle1.getID());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(legendTitle1.visible);
      
      jFreeChart0.setBackgroundImageAlpha(10);
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      List list0 = combinedRangeCategoryPlot0.getSubplots();
      assertNotNull(list0);
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      jFreeChart0.setAntiAlias(false);
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      JFreeChart jFreeChart1 = new JFreeChart(combinedRangeCategoryPlot0);
      assertFalse(jFreeChart1.equals((Object)jFreeChart0));
      assertNotNull(jFreeChart1);
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart1.getElementHinting());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertTrue(jFreeChart1.isNotify());
      assertFalse(jFreeChart1.isBorderVisible());
      assertTrue(jFreeChart1.getAntiAlias());
      assertEquals(1, jFreeChart1.getSubtitleCount());
      assertNull(jFreeChart1.getID());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      RenderingHints renderingHints0 = jFreeChart1.getRenderingHints();
      assertNotSame(jFreeChart1, jFreeChart0);
      assertFalse(jFreeChart1.equals((Object)jFreeChart0));
      assertNotNull(renderingHints0);
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart1.getElementHinting());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertTrue(jFreeChart1.isNotify());
      assertFalse(jFreeChart1.isBorderVisible());
      assertTrue(jFreeChart1.getAntiAlias());
      assertEquals(1, jFreeChart1.getSubtitleCount());
      assertNull(jFreeChart1.getID());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(2, renderingHints0.size());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 15);
      assertNotSame(jFreeChart0, jFreeChart1);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertNotNull(bufferedImage0);
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(15, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(15, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Point2D.Float point2D_Float0 = new Point2D.Float(1767.63F, 15);
      assertNotNull(point2D_Float0);
      assertEquals(1767.63F, point2D_Float0.x, 0.01F);
      assertEquals(15.0F, point2D_Float0.y, 0.01F);
      
      BlockResult blockResult0 = new BlockResult();
      assertNotNull(blockResult0);
      
      EntityCollection entityCollection0 = blockResult0.getEntityCollection();
      assertNull(entityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      assertNotNull(chartRenderingInfo0);
      
      jFreeChart0.setTitle((TextTitle) null);
      assertNotSame(jFreeChart0, jFreeChart1);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      List<Title> list1 = jFreeChart0.getSubtitles();
      assertNotSame(jFreeChart0, jFreeChart1);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertNotNull(list1);
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getRangeAxisEdge(15);
      assertEquals(RectangleEdge.RIGHT, rectangleEdge0);
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      combinedRangeCategoryPlot0.setNoDataMessage("G");
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals("G", combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(Double.NaN, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.CombinedRangeCategoryPlot cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      int int0 = 0;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1307, 100, 3714.7560127144, (double) 10, chartRenderingInfo0);
      assertNotNull(bufferedImage0);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(100, bufferedImage0.getTileHeight());
      assertEquals(100, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1307, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1307, bufferedImage0.getTileWidth());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(multiplePiePlot0);
      assertNotNull(plotChangeEvent0);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(ChartChangeEventType.GENERAL, plotChangeEvent0.getType());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      plotChangeEvent0.setChart(jFreeChart0);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(ChartChangeEventType.GENERAL, plotChangeEvent0.getType());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setElementHinting(true);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      plotChangeEvent0.setChart(jFreeChart0);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(ChartChangeEventType.GENERAL, plotChangeEvent0.getType());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      plotChangeEvent0.setChart(jFreeChart0);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(ChartChangeEventType.GENERAL, plotChangeEvent0.getType());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.plotChanged(plotChangeEvent0);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(ChartChangeEventType.GENERAL, plotChangeEvent0.getType());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      boolean boolean0 = false;
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 0, 1307, 366, 695, 3413, false, false, false, true, false, false);
      assertNotNull(chartPanel0);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(695, chartPanel0.getMaximumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(3413, chartPanel0.getMaximumDrawHeight());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(1307, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(366, chartPanel0.getMinimumDrawHeight());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      
      JLabel jLabel0 = new JLabel();
      assertNotNull(jLabel0);
      assertFalse(jLabel0.getIgnoreRepaint());
      assertFalse(jLabel0.isFocusTraversalPolicyProvider());
      assertFalse(jLabel0.isFocusTraversalPolicySet());
      assertFalse(jLabel0.isFocusCycleRoot());
      assertTrue(jLabel0.getFocusTraversalKeysEnabled());
      
      Locale locale0 = new Locale("PROPERTIES", "gQMU_VNrmS!|vhxGq", "ZOOM_RESET_RANGE");
      assertNotNull(locale0);
      assertEquals("properties_GQMU_VNRMS!|VHXGQ_ZOOM_RESET_RANGE", locale0.toString());
      assertEquals("properties", locale0.getLanguage());
      assertEquals("ZOOM_RESET_RANGE", locale0.getVariant());
      assertEquals("GQMU_VNRMS!|VHXGQ", locale0.getCountry());
      
      DateTitle dateTitle0 = null;
      try {
        dateTitle0 = new DateTitle(1482, locale0, jFreeChart0.DEFAULT_TITLE_FONT, multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1482
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      TextTitle textTitle0 = jFreeChart0.getTitle();
      assertNotNull(textTitle0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(RectangleEdge.BOTTOM, textTitle0.getPosition());
      assertNull(textTitle0.getToolTipText());
      assertEquals(VerticalAlignment.CENTER, textTitle0.getVerticalAlignment());
      assertTrue(textTitle0.isVisible());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getTextAlignment());
      assertEquals("Series Title", textTitle0.getText());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getURLText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getHorizontalAlignment());
      assertTrue(textTitle0.getNotify());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(textTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2132.9691, "");
      assertNotNull(cyclicNumberAxis0);
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(Double.NaN, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(2132.9691, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      RectangleInsets rectangleInsets0 = cyclicNumberAxis0.getLabelInsets();
      assertNotNull(rectangleInsets0);
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(Double.NaN, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(2132.9691, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      multiplePiePlot0.setInsets(rectangleInsets0, true);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(Double.NaN, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(2132.9691, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      assertNull(legendTitle0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle((Title) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subtitle' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Font font0 = TextAnnotation.DEFAULT_FONT;
      assertNotNull(font0);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, (-137), integer0);
      assertNotNull(waferMapDataset0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-137), waferMapDataset0.getMaxChipY());
      
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer((-137), (-137));
      assertNotNull(waferMapRenderer0);
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      assertNotNull(waferMapPlot0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-137), waferMapDataset0.getMaxChipY());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart((String) null, font0, waferMapPlot0, false);
      assertNotNull(jFreeChart0);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-137), waferMapDataset0.getMaxChipY());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertNotNull(renderingHints0);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-137), waferMapDataset0.getMaxChipY());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(2, renderingHints0.size());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setRenderingHints(renderingHints0);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-137), waferMapDataset0.getMaxChipY());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(2, renderingHints0.size());
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      assertTrue(jDBCPieDataset0.getNotify());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(jDBCPieDataset0);
      assertNotNull(defaultPieDataset0);
      assertTrue(jDBCPieDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      
      Number number0 = defaultPieDataset0.getValue(0);
      assertNull(number0);
      assertTrue(jDBCPieDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      
      defaultPieDataset0.setNotify(false);
      assertTrue(jDBCPieDataset0.getNotify());
      assertFalse(defaultPieDataset0.getNotify());
      
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      assertNotNull(piePlot0);
      assertTrue(jDBCPieDataset0.getNotify());
      assertFalse(defaultPieDataset0.getNotify());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isNotify());
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      JFreeChart jFreeChart0 = new JFreeChart("i", piePlot0);
      assertNotNull(jFreeChart0);
      assertTrue(jDBCPieDataset0.getNotify());
      assertFalse(defaultPieDataset0.getNotify());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isNotify());
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      int int0 = 100;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertNotNull(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertNotNull(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(100, 1, 0.0, 1731.72660349081, chartRenderingInfo0);
      assertNotNull(bufferedImage0);
      assertTrue(jDBCPieDataset0.getNotify());
      assertFalse(defaultPieDataset0.getNotify());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isNotify());
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1, standardEntityCollection0.getEntityCount());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(100, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(100, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setTextAntiAlias(false);
      assertTrue(jDBCPieDataset0.getNotify());
      assertFalse(defaultPieDataset0.getNotify());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isNotify());
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        jDBCPieDataset0.getKey(15);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      JFreeChart jFreeChart0 = new JFreeChart("y`\"9", combinedRangeXYPlot0);
      assertNotNull(jFreeChart0);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.fireChartChanged();
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      LegendTitle legendTitle0 = jFreeChart0.getLegend(10);
      assertNull(legendTitle0);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame("y`\"9");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORTED;
      assertEquals(RowSorterEvent.Type.SORTED, rowSorterEvent_Type0);
      
      boolean boolean0 = multiplePiePlot0.equals(rowSorterEvent_Type0);
      assertFalse(boolean0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertNotNull(lookupPaintScale0);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      
      LogAxis logAxis0 = new LogAxis();
      assertNotNull(logAxis0);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      boolean boolean1 = lookupPaintScale0.equals(logAxis0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(lookupPaintScale0, logAxis0);
      assertNotNull(paintScaleLegend0);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isAutoRange());
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(RectangleEdge.TOP, paintScaleLegend0.getPosition());
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(HorizontalAlignment.CENTER, paintScaleLegend0.getHorizontalAlignment());
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, paintScaleLegend0.getAxisLocation());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(VerticalAlignment.CENTER, paintScaleLegend0.getVerticalAlignment());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(paintScaleLegend0.visible);
      
      boolean boolean2 = jFreeChart0.equals(paintScaleLegend0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isAutoRange());
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertEquals(RectangleEdge.TOP, paintScaleLegend0.getPosition());
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(HorizontalAlignment.CENTER, paintScaleLegend0.getHorizontalAlignment());
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, paintScaleLegend0.getAxisLocation());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(VerticalAlignment.CENTER, paintScaleLegend0.getVerticalAlignment());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(paintScaleLegend0.visible);
      
      LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      multiplePiePlot0.setNoDataMessage("org.jfree.chart.entity.TickLabelEntity");
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("org.jfree.chart.entity.TickLabelEntity", multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-4994), (-408));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-4994) and height (-408) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot3D0.getLabelLinkStyle());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertEquals(Rotation.CLOCKWISE, piePlot3D0.getDirection());
      assertTrue(piePlot3D0.getAutoPopulateSectionPaint());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.fetchElementHintingFlag());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertTrue(piePlot3D0.isNotify());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart((String) null, piePlot3D0);
      assertNotNull(jFreeChart0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot3D0.getLabelLinkStyle());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertEquals(Rotation.CLOCKWISE, piePlot3D0.getDirection());
      assertTrue(piePlot3D0.getAutoPopulateSectionPaint());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.fetchElementHintingFlag());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertTrue(piePlot3D0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 15, 15, (-9999), 15, (-9999), false, false, true, true, false, false);
      assertNotNull(chartPanel0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot3D0.getLabelLinkStyle());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertEquals(Rotation.CLOCKWISE, piePlot3D0.getDirection());
      assertTrue(piePlot3D0.getAutoPopulateSectionPaint());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.fetchElementHintingFlag());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertTrue(piePlot3D0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(15, chartPanel0.getMinimumDrawWidth());
      assertEquals(15, chartPanel0.getMaximumDrawWidth());
      assertEquals((-9999), chartPanel0.getMinimumDrawHeight());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals((-9999), chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot3D0.getLabelLinkStyle());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertEquals(Rotation.CLOCKWISE, piePlot3D0.getDirection());
      assertTrue(piePlot3D0.getAutoPopulateSectionPaint());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.fetchElementHintingFlag());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertTrue(piePlot3D0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(15, chartPanel0.getMinimumDrawWidth());
      assertEquals(15, chartPanel0.getMaximumDrawWidth());
      assertEquals((-9999), chartPanel0.getMinimumDrawHeight());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals((-9999), chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      assertNotNull(bufferedImage0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot3D0.getLabelLinkStyle());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertEquals(Rotation.CLOCKWISE, piePlot3D0.getDirection());
      assertTrue(piePlot3D0.getAutoPopulateSectionPaint());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.fetchElementHintingFlag());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertTrue(piePlot3D0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(15, chartPanel0.getMinimumDrawWidth());
      assertEquals(15, chartPanel0.getMaximumDrawWidth());
      assertEquals((-9999), chartPanel0.getMinimumDrawHeight());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals((-9999), chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)jFreeChart0.getBorderStroke();
      assertNotNull(basicStroke0);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Font font0 = XYTextAnnotation.DEFAULT_FONT;
      assertNotNull(font0);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(piePlot0.getSimpleLabels());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot0.isNotify());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart("Unrecognised title position.", font0, piePlot0, true);
      assertNotNull(jFreeChart0);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(piePlot0.getSimpleLabels());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot0.isNotify());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ColorUIResource colorUIResource0 = (ColorUIResource)jFreeChart0.getBackgroundPaint();
      assertNotNull(colorUIResource0);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(piePlot0.getSimpleLabels());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot0.isNotify());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(238, colorUIResource0.getBlue());
      assertEquals(238, colorUIResource0.getRed());
      assertEquals(255, colorUIResource0.getAlpha());
      assertEquals(238, colorUIResource0.getGreen());
      assertEquals((-1118482), colorUIResource0.getRGB());
      assertEquals(1, colorUIResource0.getTransparency());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, false, true, false);
      assertNotNull(chartPanel0);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(piePlot0.getSimpleLabels());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot0.isNotify());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(piePlot0.getSimpleLabels());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot0.isNotify());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      assertNotNull(bufferedImage0);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.fetchElementHintingFlag());
      assertTrue(piePlot0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot0.getDirection());
      assertFalse(piePlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(piePlot0.getSimpleLabels());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot0.isNotify());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot0.getLabelLinkStyle());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getRangeAxisLocation());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot0.getOrientation());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getDomainAxisLocation());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot0.getDatasetRenderingOrder());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot0.getSeriesRenderingOrder());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(0);
      assertEquals(RectangleEdge.BOTTOM, rectangleEdge0);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getRangeAxisLocation());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot0.getOrientation());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getDomainAxisLocation());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot0.getDatasetRenderingOrder());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot0.getSeriesRenderingOrder());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart("5\"vmn':t_", combinedDomainXYPlot0);
      assertNotNull(jFreeChart0);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getRangeAxisLocation());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot0.getOrientation());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getDomainAxisLocation());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot0.getDatasetRenderingOrder());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot0.getSeriesRenderingOrder());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 6428);
      assertNotNull(bufferedImage0);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getRangeAxisLocation());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot0.getOrientation());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getDomainAxisLocation());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot0.getDatasetRenderingOrder());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot0.getSeriesRenderingOrder());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(6428, bufferedImage0.getHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(6428, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
      assertNotNull(multiplePiePlot0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      defaultKeyedValues2DDataset0.setValue((Number) 10, (Comparable) 1.0F, (Comparable) 10);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      List<Title> list0 = jFreeChart0.getSubtitles();
      assertNotNull(list0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle(213);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      assertNotNull(samplingXYLineRenderer0);
      assertTrue(samplingXYLineRenderer0.getDefaultCreateEntities());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer0.getDefaultItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      BasicStroke basicStroke0 = (BasicStroke)samplingXYLineRenderer0.lookupSeriesStroke(1479);
      assertNotNull(basicStroke0);
      assertTrue(samplingXYLineRenderer0.getDefaultCreateEntities());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer0.getDefaultItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, (ValueAxis) null, (ValueAxis) null, samplingXYLineRenderer0);
      assertNotNull(xYPlot0);
      assertTrue(samplingXYLineRenderer0.getDefaultCreateEntities());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer0.getDefaultItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(0, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getDomainAxisLocation());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(PlotOrientation.VERTICAL, xYPlot0.getOrientation());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(SeriesRenderingOrder.REVERSE, xYPlot0.getSeriesRenderingOrder());
      assertEquals(0, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, xYPlot0.getDomainAxisCount());
      assertEquals(DatasetRenderingOrder.REVERSE, xYPlot0.getDatasetRenderingOrder());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getRangeAxisLocation());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      JFreeChart jFreeChart0 = new JFreeChart("padding", xYPlot0);
      assertNotNull(jFreeChart0);
      assertTrue(samplingXYLineRenderer0.getDefaultCreateEntities());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer0.getDefaultItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(0, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getDomainAxisLocation());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(PlotOrientation.VERTICAL, xYPlot0.getOrientation());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(SeriesRenderingOrder.REVERSE, xYPlot0.getSeriesRenderingOrder());
      assertEquals(0, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, xYPlot0.getDomainAxisCount());
      assertEquals(DatasetRenderingOrder.REVERSE, xYPlot0.getDatasetRenderingOrder());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getRangeAxisLocation());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Font font0 = TextTitle.DEFAULT_FONT;
      assertNotNull(font0);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals(1, font0.getStyle());
      assertTrue(font0.isBold());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart("", font0, combinedDomainCategoryPlot0, true);
      assertNotNull(jFreeChart0);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals(1, font0.getStyle());
      assertTrue(font0.isBold());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      TextTitle textTitle0 = jFreeChart0.getTitle();
      assertNotNull(textTitle0);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals(1, font0.getStyle());
      assertTrue(font0.isBold());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertTrue(textTitle0.isVisible());
      assertEquals(VerticalAlignment.CENTER, textTitle0.getVerticalAlignment());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getTextAlignment());
      assertEquals(RectangleEdge.TOP, textTitle0.getPosition());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("", textTitle0.getText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getHorizontalAlignment());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(textTitle0.visible);
      
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-95), (-2866));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-95) and height (-2866) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      assertNotNull(compassPlot0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isNotify());
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart("$`t9#xFA", compassPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.removeLegend();
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      String string0 = jFreeChart0.getID();
      assertNull(string0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 305, chartRenderingInfo0);
      assertNotNull(bufferedImage0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(305, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(305, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getAutoPopulateSectionPaint());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertTrue(piePlot3D0.isNotify());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.fetchElementHintingFlag());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(Rotation.CLOCKWISE, piePlot3D0.getDirection());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot3D0.getLabelLinkStyle());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      RenderingHints renderingHints0 = new RenderingHints((RenderingHints.Key) null, piePlot3D0);
      assertNotNull(renderingHints0);
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getAutoPopulateSectionPaint());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertTrue(piePlot3D0.isNotify());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.fetchElementHintingFlag());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(Rotation.CLOCKWISE, piePlot3D0.getDirection());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot3D0.getLabelLinkStyle());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, renderingHints0.size());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      jFreeChart0.setRenderingHints(renderingHints0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getAutoPopulateSectionPaint());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertTrue(piePlot3D0.isNotify());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.fetchElementHintingFlag());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(Rotation.CLOCKWISE, piePlot3D0.getDirection());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot3D0.getLabelLinkStyle());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, renderingHints0.size());
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      boolean boolean0 = jFreeChart0.getElementHinting();
      assertFalse(boolean0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      boolean boolean1 = jFreeChart0.getAntiAlias();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      boolean boolean2 = jFreeChart0.equals((Object) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.CompassPlot cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float float0 = JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA;
      assertEquals(0.5F, float0, 0.01F);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.5F);
      assertNotNull(defaultValueDataset0);
      assertTrue(defaultValueDataset0.getNotify());
      
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      assertNotNull(compassPlot0);
      assertTrue(defaultValueDataset0.getNotify());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.getDrawBorder());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart("The number of series keys does not match the number of series in the data array.", compassPlot0);
      assertNotNull(jFreeChart0);
      assertTrue(defaultValueDataset0.getNotify());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.getDrawBorder());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(compassPlot0.isSubplot());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      int int0 = (-1516);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, false, true, true);
      assertNotNull(chartPanel0);
      assertTrue(defaultValueDataset0.getNotify());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.getDrawBorder());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(compassPlot0.isSubplot());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      
      compassPlot0.setNoDataMessagePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      assertTrue(defaultValueDataset0.getNotify());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.getDrawBorder());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(compassPlot0.isSubplot());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      assertTrue(defaultValueDataset0.getNotify());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.getDrawBorder());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(compassPlot0.isSubplot());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getRefreshBuffer());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, (-1516), chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (10) and height (-1516) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      assertNotNull(defaultValueDataset0);
      assertTrue(defaultValueDataset0.getNotify());
      
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      assertNotNull(meterPlot0);
      assertTrue(defaultValueDataset0.getNotify());
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      meterPlot0.setBackgroundImageAlignment(9);
      assertTrue(defaultValueDataset0.getNotify());
      assertFalse(meterPlot0.getDrawBorder());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(9, meterPlot0.getBackgroundImageAlignment());
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart("", meterPlot0);
      assertNotNull(jFreeChart0);
      assertTrue(defaultValueDataset0.getNotify());
      assertFalse(meterPlot0.getDrawBorder());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(9, meterPlot0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      meterPlot0.setTickPaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      assertTrue(defaultValueDataset0.getNotify());
      assertFalse(meterPlot0.getDrawBorder());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(9, meterPlot0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.removeProgressListener((ChartProgressListener) null);
      assertTrue(defaultValueDataset0.getNotify());
      assertFalse(meterPlot0.getDrawBorder());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(9, meterPlot0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      assertNotNull(chartRenderingInfo0);
      
      chartRenderingInfo0.setEntityCollection((EntityCollection) null);
      boolean boolean0 = chartRenderingInfo0.equals("");
      assertFalse(boolean0);
      
      defaultValueDataset0.removeChangeListener(meterPlot0);
      assertTrue(defaultValueDataset0.getNotify());
      assertFalse(meterPlot0.getDrawBorder());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(9, meterPlot0.getBackgroundImageAlignment());
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Object object0 = chartRenderingInfo0.clone();
      assertNotSame(chartRenderingInfo0, object0);
      assertNotSame(object0, chartRenderingInfo0);
      assertTrue(object0.equals((Object)chartRenderingInfo0));
      assertNotNull(object0);
      
      Object object1 = chartRenderingInfo0.clone();
      assertNotSame(chartRenderingInfo0, object0);
      assertNotSame(chartRenderingInfo0, object1);
      assertNotSame(object1, chartRenderingInfo0);
      assertNotSame(object1, object0);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      assertTrue(object1.equals((Object)object0));
      assertTrue(object1.equals((Object)chartRenderingInfo0));
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(270, 10, 15, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 15
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setBorderStroke(multiplePiePlot0.DEFAULT_OUTLINE_STROKE);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      multiplePiePlot0.setChart(jFreeChart0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      RectangleInsets rectangleInsets0 = PeriodAxisLabelInfo.DEFAULT_INSETS;
      assertNotNull(rectangleInsets0);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      
      TextTitle textTitle0 = new TextTitle(">q%gk", jFreeChart0.DEFAULT_TITLE_FONT, multiplePiePlot0.DEFAULT_OUTLINE_PAINT, rectangleEdge0, horizontalAlignment0, verticalAlignment0, rectangleInsets0);
      assertNotNull(textTitle0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getHorizontalAlignment());
      assertTrue(textTitle0.isVisible());
      assertEquals(2.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(2.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(VerticalAlignment.CENTER, textTitle0.getVerticalAlignment());
      assertEquals(RectangleEdge.LEFT, textTitle0.getPosition());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getTextAlignment());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(">q%gk", textTitle0.getText());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(textTitle0.visible);
      
      TitleChangeEvent titleChangeEvent0 = new TitleChangeEvent(textTitle0);
      assertNotNull(titleChangeEvent0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getHorizontalAlignment());
      assertTrue(textTitle0.isVisible());
      assertEquals(2.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(2.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(VerticalAlignment.CENTER, textTitle0.getVerticalAlignment());
      assertEquals(RectangleEdge.LEFT, textTitle0.getPosition());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getTextAlignment());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(">q%gk", textTitle0.getText());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals(ChartChangeEventType.GENERAL, titleChangeEvent0.getType());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(textTitle0.visible);
      
      ChartChangeEventType chartChangeEventType0 = ChartChangeEventType.GENERAL;
      textTitle0.setNotify(true);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getHorizontalAlignment());
      assertTrue(textTitle0.isVisible());
      assertEquals(2.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(2.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(VerticalAlignment.CENTER, textTitle0.getVerticalAlignment());
      assertEquals(RectangleEdge.LEFT, textTitle0.getPosition());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getTextAlignment());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(">q%gk", textTitle0.getText());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(textTitle0.visible);
      
      titleChangeEvent0.setType(chartChangeEventType0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getHorizontalAlignment());
      assertTrue(textTitle0.isVisible());
      assertEquals(2.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(2.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(VerticalAlignment.CENTER, textTitle0.getVerticalAlignment());
      assertEquals(RectangleEdge.LEFT, textTitle0.getPosition());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getTextAlignment());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(">q%gk", textTitle0.getText());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals(ChartChangeEventType.GENERAL, titleChangeEvent0.getType());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(textTitle0.visible);
      
      jFreeChart0.titleChanged(titleChangeEvent0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getHorizontalAlignment());
      assertTrue(textTitle0.isVisible());
      assertEquals(2.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(2.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(VerticalAlignment.CENTER, textTitle0.getVerticalAlignment());
      assertEquals(RectangleEdge.LEFT, textTitle0.getPosition());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getTextAlignment());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(">q%gk", textTitle0.getText());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals(ChartChangeEventType.GENERAL, titleChangeEvent0.getType());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(textTitle0.visible);
      
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
      assertNotNull(multiplePiePlot0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Paint paint0 = jFreeChart0.getBackgroundPaint();
      assertNull(paint0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart("M", combinedRangeXYPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setTitle("renderingHints");
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.fetchElementHintingFlag());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedRangeXYPlot0.getSeriesRenderingOrder());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeXYPlot0.getDatasetRenderingOrder());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getRangeAxisLocation());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeXYPlot0.getOrientation());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedRangeXYPlot0.getDomainAxisLocation());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0, combinedRangeXYPlot0.getRendererCount());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      boolean boolean0 = jFreeChart0.isNotify();
      assertTrue(boolean0);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setBorderStroke(multiplePiePlot0.DEFAULT_OUTLINE_STROKE);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Color color0 = (Color)jFreeChart0.getBorderPaint();
      assertNotNull(color0);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      multiplePiePlot0.handleClick(127, 0, plotRenderingInfo0);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      jFreeChart0.setAntiAlias(true);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartProgressEvent chartProgressEvent0 = null;
      try {
        chartProgressEvent0 = new ChartProgressEvent((Object) null, jFreeChart0, 2047, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(multiplePiePlot0);
      assertNotNull(plotChangeEvent0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(ChartChangeEventType.GENERAL, plotChangeEvent0.getType());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      jFreeChart0.plotChanged(plotChangeEvent0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(ChartChangeEventType.GENERAL, plotChangeEvent0.getType());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      assertNotNull(polarPlot0);
      assertFalse(polarPlot0.isCounterClockwise());
      assertFalse(polarPlot0.isDomainZoomable());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(20, polarPlot0.getMargin());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isOutlineVisible());
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot0.isRangeZoomable());
      assertTrue(polarPlot0.isNotify());
      assertFalse(polarPlot0.isSubplot());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      assertNotNull(jFreeChart0);
      assertFalse(polarPlot0.isCounterClockwise());
      assertFalse(polarPlot0.isDomainZoomable());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(20, polarPlot0.getMargin());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isOutlineVisible());
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot0.isRangeZoomable());
      assertTrue(polarPlot0.isNotify());
      assertFalse(polarPlot0.isSubplot());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertNull(polarPlot0.getNoDataMessage());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, false, false);
      assertNotNull(chartPanel0);
      assertFalse(polarPlot0.isCounterClockwise());
      assertFalse(polarPlot0.isDomainZoomable());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(20, polarPlot0.getMargin());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isOutlineVisible());
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot0.isRangeZoomable());
      assertTrue(polarPlot0.isNotify());
      assertFalse(polarPlot0.isSubplot());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertNull(polarPlot0.getNoDataMessage());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      
      jFreeChart0.setBackgroundImageAlignment(768);
      assertFalse(polarPlot0.isCounterClockwise());
      assertFalse(polarPlot0.isDomainZoomable());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(20, polarPlot0.getMargin());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isOutlineVisible());
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot0.isRangeZoomable());
      assertTrue(polarPlot0.isNotify());
      assertFalse(polarPlot0.isSubplot());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertNull(polarPlot0.getNoDataMessage());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(768, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.addChangeListener(chartPanel0);
      assertFalse(polarPlot0.isCounterClockwise());
      assertFalse(polarPlot0.isDomainZoomable());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(20, polarPlot0.getMargin());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isOutlineVisible());
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot0.isRangeZoomable());
      assertTrue(polarPlot0.isNotify());
      assertFalse(polarPlot0.isSubplot());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertNull(polarPlot0.getNoDataMessage());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(768, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      assertFalse(polarPlot0.isCounterClockwise());
      assertFalse(polarPlot0.isDomainZoomable());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(20, polarPlot0.getMargin());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isOutlineVisible());
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot0.isRangeZoomable());
      assertTrue(polarPlot0.isNotify());
      assertFalse(polarPlot0.isSubplot());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertNull(polarPlot0.getNoDataMessage());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(768, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      
      try { 
        chartPanel0.getMousePosition();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      assertNotNull(numberAxis0);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isVisible());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeCategoryPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setBackgroundPaint(numberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      CompositeTitle compositeTitle0 = new CompositeTitle();
      assertNotNull(compositeTitle0);
      assertTrue(compositeTitle0.isVisible());
      assertEquals(VerticalAlignment.CENTER, compositeTitle0.getVerticalAlignment());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertTrue(compositeTitle0.getNotify());
      assertEquals(HorizontalAlignment.CENTER, compositeTitle0.getHorizontalAlignment());
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
      assertEquals(RectangleEdge.TOP, compositeTitle0.getPosition());
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01);
      assertNull(compositeTitle0.getID());
      assertTrue(compositeTitle0.visible);
      
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle(2931, (Title) compositeTitle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'index' argument is out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertNotNull(categoryPlot0);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      int int0 = 5156;
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      categoryPlot0.setDomainAxisLocation(5156, axisLocation0);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.fireChartChanged();
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      assertNotNull(chartRenderingInfo0);
      
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 0, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (10) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart((Plot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      List<Title> list0 = jFreeChart0.getSubtitles();
      assertNotNull(list0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setSubtitles(list0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertNotNull(categoryPlot0);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isNotify());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartChangeEvent chartChangeEvent0 = new ChartChangeEvent(jFreeChart0);
      assertNotNull(chartChangeEvent0);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(ChartChangeEventType.GENERAL, chartChangeEvent0.getType());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.notifyListeners(chartChangeEvent0);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(ChartChangeEventType.GENERAL, chartChangeEvent0.getType());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.removeProgressListener((ChartProgressListener) null);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertNotNull(renderingHints0);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(2, renderingHints0.size());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setRenderingHints(renderingHints0);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(2, renderingHints0.size());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.clearSubtitles();
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      assertNotNull(multiplePiePlot0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setBackgroundImageAlignment((-2182));
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals((-2182), jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      boolean boolean0 = jFreeChart0.isBorderVisible();
      assertFalse(boolean0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals((-2182), jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      TextTitle textTitle0 = new TextTitle("N_Bbg~#h-6<,c!s!3");
      assertNotNull(textTitle0);
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getHorizontalAlignment());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.isVisible());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals("N_Bbg~#h-6<,c!s!3", textTitle0.getText());
      assertEquals(RectangleEdge.TOP, textTitle0.getPosition());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getTextAlignment());
      assertEquals(VerticalAlignment.CENTER, textTitle0.getVerticalAlignment());
      assertTrue(textTitle0.visible);
      
      jFreeChart0.setTitle(textTitle0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals((-2182), jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getHorizontalAlignment());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.isVisible());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals("N_Bbg~#h-6<,c!s!3", textTitle0.getText());
      assertEquals(RectangleEdge.TOP, textTitle0.getPosition());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getTextAlignment());
      assertEquals(VerticalAlignment.CENTER, textTitle0.getVerticalAlignment());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(textTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertTrue(piePlot3D0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot3D0.getDirection());
      assertFalse(piePlot3D0.fetchElementHintingFlag());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isNotify());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot3D0.getLabelLinkStyle());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart(piePlot3D0);
      assertNotNull(jFreeChart0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertTrue(piePlot3D0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot3D0.getDirection());
      assertFalse(piePlot3D0.fetchElementHintingFlag());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isNotify());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot3D0.getLabelLinkStyle());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      int int0 = jFreeChart0.getSubtitleCount();
      assertEquals(1, int0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertTrue(piePlot3D0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot3D0.getDirection());
      assertFalse(piePlot3D0.fetchElementHintingFlag());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isNotify());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot3D0.getLabelLinkStyle());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.notifyListeners((ChartChangeEvent) null);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertTrue(piePlot3D0.getAutoPopulateSectionPaint());
      assertEquals(Rotation.CLOCKWISE, piePlot3D0.getDirection());
      assertFalse(piePlot3D0.fetchElementHintingFlag());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isNotify());
      assertEquals(PieLabelLinkStyle.STANDARD, piePlot3D0.getLabelLinkStyle());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      assertNotNull(defaultValueDataset0);
      assertTrue(defaultValueDataset0.getNotify());
      
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      assertNotNull(meterPlot0);
      assertTrue(defaultValueDataset0.getNotify());
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.isSubplot());
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      int int0 = 1670;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertNotNull(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      List list0 = meterPlot0.getIntervals();
      assertNotNull(list0);
      assertTrue(defaultValueDataset0.getNotify());
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.isSubplot());
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertNotNull(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      meterPlot0.handleClick(1670, 1670, plotRenderingInfo0);
      assertTrue(defaultValueDataset0.getNotify());
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.isSubplot());
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart((String) null, meterPlot0);
      assertNotNull(jFreeChart0);
      assertTrue(defaultValueDataset0.getNotify());
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.isSubplot());
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.MeterPlot cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart("alignment", multiplePiePlot0);
      assertNotNull(jFreeChart0);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        jFreeChart0.setTextAntiAlias((Object) multiplePiePlot0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.jfree.chart.plot.MultiplePiePlot@2 incompatible with Text-specific antialiasing enable key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      assertNotNull(font0);
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(18.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isPlain());
      assertEquals(1, font0.getStyle());
      assertTrue(font0.isBold());
      assertEquals(18, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(Double.NaN, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      
      Plot plot0 = cyclicNumberAxis0.getPlot();
      assertNull(plot0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(Double.NaN, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      
      boolean boolean0 = false;
      cyclicNumberAxis0.setAutoRangeStickyZero(false);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(Double.NaN, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      
      Range range0 = cyclicNumberAxis0.getRange();
      assertNotNull(range0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(Double.NaN, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      
      Range range1 = Range.expand(cyclicNumberAxis0.DEFAULT_RANGE, (-2811.1098218), 0.0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(Double.NaN, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1406.0549109, range1.getLowerBound(), 0.01);
      assertEquals(1406.0549109, range1.getUpperBound(), 0.01);
      assertEquals(1406.0549109, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      
      cyclicNumberAxis0.setRange(range0, false, false);
      assertNotSame(range0, range1);
      assertFalse(range0.equals((Object)range1));
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("end", font0, (Plot) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, (-45.0), 15);
      assertNotNull(columnArrangement0);
      
      LegendTitle legendTitle0 = new LegendTitle(multiplePiePlot0, columnArrangement0, columnArrangement0);
      assertNotNull(legendTitle0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(legendTitle0.getNotify());
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertTrue(legendTitle0.isVisible());
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(RectangleEdge.TOP, legendTitle0.getPosition());
      assertNull(legendTitle0.getID());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(legendTitle0.visible);
      
      jFreeChart0.addSubtitle(0, (Title) legendTitle0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(legendTitle0.getNotify());
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertTrue(legendTitle0.isVisible());
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(RectangleEdge.TOP, legendTitle0.getPosition());
      assertNull(legendTitle0.getID());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(legendTitle0.visible);
      
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.PiePlot cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart("Panel.background", multiplePiePlot0);
      assertNotNull(jFreeChart0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setTextAntiAlias(false);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      assertNotNull(polarPlot0);
      assertFalse(polarPlot0.isDomainZoomable());
      assertFalse(polarPlot0.isCounterClockwise());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(polarPlot0.getNoDataMessage());
      assertTrue(polarPlot0.isNotify());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertTrue(polarPlot0.isOutlineVisible());
      assertFalse(polarPlot0.isSubplot());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(20, polarPlot0.getMargin());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.5, 0.0);
      assertNotNull(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.5, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.5, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertEquals(0.5, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.5, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.5, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(0, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot0.getSeriesRenderingOrder());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getRangeAxisLocation());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot0.getOrientation());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getDomainAxisLocation());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)combinedDomainXYPlot0.getNoDataMessagePaint();
      assertNotNull(color0);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertEquals(0.5, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.5, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.5, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(0, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot0.getSeriesRenderingOrder());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getRangeAxisLocation());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot0.getOrientation());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getDomainAxisLocation());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      polarPlot0.setNoDataMessagePaint(color0);
      assertFalse(polarPlot0.isDomainZoomable());
      assertFalse(polarPlot0.isCounterClockwise());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(polarPlot0.getNoDataMessage());
      assertTrue(polarPlot0.isNotify());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertTrue(polarPlot0.isOutlineVisible());
      assertFalse(polarPlot0.isSubplot());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(20, polarPlot0.getMargin());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertEquals(0.5, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.5, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.5, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(0, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot0.getSeriesRenderingOrder());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getRangeAxisLocation());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot0.getOrientation());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getDomainAxisLocation());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      polarPlot0.setRadiusGridlinesVisible(false);
      assertFalse(polarPlot0.isDomainZoomable());
      assertFalse(polarPlot0.isCounterClockwise());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(polarPlot0.getNoDataMessage());
      assertTrue(polarPlot0.isNotify());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertTrue(polarPlot0.isOutlineVisible());
      assertFalse(polarPlot0.isSubplot());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertFalse(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(20, polarPlot0.getMargin());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart("", (Font) null, polarPlot0, false);
      assertNotNull(jFreeChart0);
      assertFalse(polarPlot0.isDomainZoomable());
      assertFalse(polarPlot0.isCounterClockwise());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(polarPlot0.getNoDataMessage());
      assertTrue(polarPlot0.isNotify());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertTrue(polarPlot0.isOutlineVisible());
      assertFalse(polarPlot0.isSubplot());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertFalse(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(20, polarPlot0.getMargin());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setBorderPaint(polarPlot0.DEFAULT_OUTLINE_PAINT);
      assertFalse(polarPlot0.isDomainZoomable());
      assertFalse(polarPlot0.isCounterClockwise());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(polarPlot0.getNoDataMessage());
      assertTrue(polarPlot0.isNotify());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertTrue(polarPlot0.isOutlineVisible());
      assertFalse(polarPlot0.isSubplot());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertFalse(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(20, polarPlot0.getMargin());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      RectangleInsets rectangleInsets0 = jFreeChart0.getPadding();
      assertNotNull(rectangleInsets0);
      assertFalse(polarPlot0.isDomainZoomable());
      assertFalse(polarPlot0.isCounterClockwise());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(polarPlot0.getNoDataMessage());
      assertTrue(polarPlot0.isNotify());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertTrue(polarPlot0.isOutlineVisible());
      assertFalse(polarPlot0.isSubplot());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertFalse(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(20, polarPlot0.getMargin());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(15, 0.0, (-312.65193067));
      assertNotNull(affineTransform0);
      assertEquals((-312.65193067), affineTransform0.getTranslateY(), 0.01);
      assertEquals((-1.0), affineTransform0.getShearY(), 0.01);
      assertEquals(312.65193067, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(1.0, affineTransform0.getShearX(), 0.01);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertNotNull(renderingHints0);
      assertFalse(polarPlot0.isDomainZoomable());
      assertFalse(polarPlot0.isCounterClockwise());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(polarPlot0.getNoDataMessage());
      assertTrue(polarPlot0.isNotify());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertTrue(polarPlot0.isOutlineVisible());
      assertFalse(polarPlot0.isSubplot());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertFalse(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(20, polarPlot0.getMargin());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(2, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      assertNotNull(affineTransformOp0);
      assertFalse(polarPlot0.isDomainZoomable());
      assertFalse(polarPlot0.isCounterClockwise());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(polarPlot0.getNoDataMessage());
      assertTrue(polarPlot0.isNotify());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertTrue(polarPlot0.isOutlineVisible());
      assertFalse(polarPlot0.isSubplot());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot0.isRangeZoomable());
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertFalse(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(20, polarPlot0.getMargin());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals((-312.65193067), affineTransform0.getTranslateY(), 0.01);
      assertEquals((-1.0), affineTransform0.getShearY(), 0.01);
      assertEquals(312.65193067, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(1.0, affineTransform0.getShearX(), 0.01);
      assertEquals(2, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, affineTransformOp0.getInterpolationType());
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      BufferedImage bufferedImage0 = null;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-105);
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)0;
      byte byte1 = (byte) (-6);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)83;
      int int0 = 0;
      boolean boolean0 = true;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(10, 379, byteArray0, 0, true, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      CategoryAxis categoryAxis0 = new CategoryAxis("hhPt=eI");
      assertNotNull(categoryAxis0);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("hhPt=eI", categoryAxis0.getLabel());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "hhPt=eI";
      stringArray0[1] = "hhPt=eI";
      stringArray0[2] = "hhPt=eI";
      stringArray0[3] = "P_Au3bik@Xx";
      stringArray0[4] = "hhPt=eI";
      stringArray0[5] = "P_Au3bik@Xx";
      SymbolAxis symbolAxis0 = new SymbolAxis("hhPt=eI", stringArray0);
      assertEquals(6, stringArray0.length);
      assertNotNull(symbolAxis0);
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, symbolAxis0.getRangeType());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(symbolAxis0.isInverted());
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertEquals("hhPt=eI", symbolAxis0.getLabel());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, symbolAxis0.getLabelLocation());
      assertTrue(symbolAxis0.isAutoRange());
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      assertNotNull(categoryStepRenderer0);
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(categoryStepRenderer0.getDefaultItemLabelsVisible());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisible());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(categoryStepRenderer0.getStagger());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertTrue(categoryStepRenderer0.getDefaultCreateEntities());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, categoryAxis0, symbolAxis0, categoryStepRenderer0);
      assertEquals(6, stringArray0.length);
      assertNotNull(categoryPlot0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("hhPt=eI", categoryAxis0.getLabel());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals((-0.5), symbolAxis0.getLowerBound(), 0.01);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, symbolAxis0.getRangeType());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(symbolAxis0.isInverted());
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("hhPt=eI", symbolAxis0.getLabel());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(5.5, symbolAxis0.getUpperBound(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, symbolAxis0.getLabelLocation());
      assertTrue(symbolAxis0.isAutoRange());
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(categoryStepRenderer0.getDefaultItemLabelsVisible());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisible());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(categoryStepRenderer0.getStagger());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertTrue(categoryStepRenderer0.getDefaultCreateEntities());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("P_Au3bik@Xx", "hhPt=eI", 5, Double.NaN);
      assertNotNull(categoryPointerAnnotation0);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(Double.NaN, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals("P_Au3bik@Xx", categoryPointerAnnotation0.getText());
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(5.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      
      CategoryAnchor categoryAnchor0 = CategoryAnchor.END;
      categoryPointerAnnotation0.setCategoryAnchor(categoryAnchor0);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(Double.NaN, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals("P_Au3bik@Xx", categoryPointerAnnotation0.getText());
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(5.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(CategoryAnchor.END, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      
      categoryPlot0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, true);
      assertEquals(6, stringArray0.length);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("hhPt=eI", categoryAxis0.getLabel());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals((-0.5), symbolAxis0.getLowerBound(), 0.01);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, symbolAxis0.getRangeType());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(symbolAxis0.isInverted());
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("hhPt=eI", symbolAxis0.getLabel());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(5.5, symbolAxis0.getUpperBound(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, symbolAxis0.getLabelLocation());
      assertTrue(symbolAxis0.isAutoRange());
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(categoryStepRenderer0.getDefaultItemLabelsVisible());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisible());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(categoryStepRenderer0.getStagger());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertTrue(categoryStepRenderer0.getDefaultCreateEntities());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(Double.NaN, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals("P_Au3bik@Xx", categoryPointerAnnotation0.getText());
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(5.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(CategoryAnchor.END, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      
      JFreeChart jFreeChart0 = new JFreeChart("P_Au3bik@Xx", (Font) null, categoryPlot0, false);
      assertEquals(6, stringArray0.length);
      assertNotNull(jFreeChart0);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("hhPt=eI", categoryAxis0.getLabel());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals((-0.5), symbolAxis0.getLowerBound(), 0.01);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, symbolAxis0.getRangeType());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(symbolAxis0.isInverted());
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("hhPt=eI", symbolAxis0.getLabel());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(5.5, symbolAxis0.getUpperBound(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, symbolAxis0.getLabelLocation());
      assertTrue(symbolAxis0.isAutoRange());
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(categoryStepRenderer0.getDefaultItemLabelsVisible());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisible());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(categoryStepRenderer0.getStagger());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertTrue(categoryStepRenderer0.getDefaultCreateEntities());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertEquals(6, stringArray0.length);
      assertNotNull(renderingHints0);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(2, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("hhPt=eI", categoryAxis0.getLabel());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals((-0.5), symbolAxis0.getLowerBound(), 0.01);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, symbolAxis0.getRangeType());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(symbolAxis0.isInverted());
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("hhPt=eI", symbolAxis0.getLabel());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(5.5, symbolAxis0.getUpperBound(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, symbolAxis0.getLabelLocation());
      assertTrue(symbolAxis0.isAutoRange());
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(categoryStepRenderer0.getDefaultItemLabelsVisible());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisible());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(categoryStepRenderer0.getStagger());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertTrue(categoryStepRenderer0.getDefaultCreateEntities());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      
      jFreeChart0.setRenderingHints(renderingHints0);
      assertEquals(6, stringArray0.length);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(2, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("hhPt=eI", categoryAxis0.getLabel());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals((-0.5), symbolAxis0.getLowerBound(), 0.01);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, symbolAxis0.getRangeType());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(symbolAxis0.isInverted());
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("hhPt=eI", symbolAxis0.getLabel());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(5.5, symbolAxis0.getUpperBound(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, symbolAxis0.getLabelLocation());
      assertTrue(symbolAxis0.isAutoRange());
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(categoryStepRenderer0.getDefaultItemLabelsVisible());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisible());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(categoryStepRenderer0.getStagger());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertTrue(categoryStepRenderer0.getDefaultCreateEntities());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Font font0 = SpiderWebPlot.DEFAULT_LABEL_FONT;
      assertNotNull(font0);
      assertFalse(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) null);
      assertNotNull(combinedRangeCategoryPlot0);
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      
      JFreeChart jFreeChart0 = new JFreeChart("96@L1[_#[$8(k B`)", font0, combinedRangeCategoryPlot0, false);
      assertNotNull(jFreeChart0);
      assertFalse(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = (CombinedRangeCategoryPlot)jFreeChart0.getCategoryPlot();
      assertSame(combinedRangeCategoryPlot0, combinedRangeCategoryPlot1);
      assertSame(combinedRangeCategoryPlot1, combinedRangeCategoryPlot0);
      assertNotNull(combinedRangeCategoryPlot1);
      assertFalse(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot1.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot1.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot1.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot1.getRangeAxisCount());
      assertEquals(15, combinedRangeCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot1.getRowRenderingOrder());
      assertTrue(combinedRangeCategoryPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot1.isOutlineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot1.getDomainGridlinePosition());
      assertEquals(5.0, combinedRangeCategoryPlot1.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot1.getRendererCount());
      assertFalse(combinedRangeCategoryPlot1.isSubplot());
      assertEquals(1, combinedRangeCategoryPlot1.getDatasetCount());
      assertEquals(1.0F, combinedRangeCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot1.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot1.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot1.getOrientation());
      assertEquals(0.0, combinedRangeCategoryPlot1.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot1.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot1.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot1.getColumnRenderingOrder());
      assertFalse(combinedRangeCategoryPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot1.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot1.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot1.fetchElementHintingFlag());
      assertNull(combinedRangeCategoryPlot1.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot1.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart1 = new JFreeChart("", combinedRangeCategoryPlot1);
      assertFalse(jFreeChart1.equals((Object)jFreeChart0));
      assertNotNull(jFreeChart1);
      assertFalse(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot1.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot1.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot1.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot1.getRangeAxisCount());
      assertEquals(15, combinedRangeCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot1.getRowRenderingOrder());
      assertTrue(combinedRangeCategoryPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot1.isOutlineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot1.getDomainGridlinePosition());
      assertEquals(5.0, combinedRangeCategoryPlot1.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot1.getRendererCount());
      assertFalse(combinedRangeCategoryPlot1.isSubplot());
      assertEquals(1, combinedRangeCategoryPlot1.getDatasetCount());
      assertEquals(1.0F, combinedRangeCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot1.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot1.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot1.getOrientation());
      assertEquals(0.0, combinedRangeCategoryPlot1.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot1.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot1.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot1.getColumnRenderingOrder());
      assertFalse(combinedRangeCategoryPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot1.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot1.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot1.fetchElementHintingFlag());
      assertNull(combinedRangeCategoryPlot1.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot1.isNotify());
      assertFalse(jFreeChart1.getElementHinting());
      assertTrue(jFreeChart1.isNotify());
      assertNull(jFreeChart1.getID());
      assertTrue(jFreeChart1.getAntiAlias());
      assertEquals(1, jFreeChart1.getSubtitleCount());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      List<Title> list0 = jFreeChart1.getSubtitles();
      assertSame(combinedRangeCategoryPlot0, combinedRangeCategoryPlot1);
      assertNotSame(jFreeChart0, jFreeChart1);
      assertSame(combinedRangeCategoryPlot1, combinedRangeCategoryPlot0);
      assertNotSame(jFreeChart1, jFreeChart0);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
      assertFalse(jFreeChart1.equals((Object)jFreeChart0));
      assertNotNull(list0);
      assertFalse(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot1.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot1.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot1.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot1.getRangeAxisCount());
      assertEquals(15, combinedRangeCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot1.getRowRenderingOrder());
      assertTrue(combinedRangeCategoryPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot1.isOutlineVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot1.getDomainGridlinePosition());
      assertEquals(5.0, combinedRangeCategoryPlot1.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot1.getRendererCount());
      assertFalse(combinedRangeCategoryPlot1.isSubplot());
      assertEquals(1, combinedRangeCategoryPlot1.getDatasetCount());
      assertEquals(1.0F, combinedRangeCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot1.getDatasetRenderingOrder());
      assertEquals(0, combinedRangeCategoryPlot1.getCrosshairDatasetIndex());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot1.getOrientation());
      assertEquals(0.0, combinedRangeCategoryPlot1.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot1.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot1.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot1.getColumnRenderingOrder());
      assertFalse(combinedRangeCategoryPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot1.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot1.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot1.fetchElementHintingFlag());
      assertNull(combinedRangeCategoryPlot1.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot1.isNotify());
      assertFalse(jFreeChart1.getElementHinting());
      assertTrue(jFreeChart1.isNotify());
      assertNull(jFreeChart1.getID());
      assertTrue(jFreeChart1.getAntiAlias());
      assertEquals(1, jFreeChart1.getSubtitleCount());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Font font0 = PeriodAxisLabelInfo.DEFAULT_FONT;
      assertNotNull(font0);
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("X~%", font0, (Plot) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      assertNotNull(stackedAreaRenderer0);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getDefaultCreateEntities());
      assertEquals(AreaRendererEndType.TAPER, stackedAreaRenderer0.getEndType());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      
      CategoryPlot categoryPlot0 = stackedAreaRenderer0.getPlot();
      assertNull(categoryPlot0);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getDefaultCreateEntities());
      assertEquals(AreaRendererEndType.TAPER, stackedAreaRenderer0.getEndType());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      assertNotNull(customCategoryURLGenerator0);
      assertEquals(0, customCategoryURLGenerator0.getListCount());
      
      stackedAreaRenderer0.setDefaultItemURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0, true);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getDefaultCreateEntities());
      assertEquals(AreaRendererEndType.TAPER, stackedAreaRenderer0.getEndType());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(0, customCategoryURLGenerator0.getListCount());
      
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("", (Plot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot0.getOrientation());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getRangeAxisLocation());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot0.getSeriesRenderingOrder());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getDomainAxisLocation());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertNotNull(defaultPolarItemRenderer0);
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      Color color0 = (Color)defaultPolarItemRenderer0.getItemLabelPaint(3792, 3792);
      assertNotNull(color0);
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      
      PolarPlot polarPlot0 = defaultPolarItemRenderer0.getPlot();
      assertNull(polarPlot0);
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      boolean boolean0 = defaultTableXYDataset0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      combinedDomainXYPlot0.setDataset(613566757, (XYDataset) defaultTableXYDataset0);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot0.getOrientation());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getRangeAxisLocation());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot0.getSeriesRenderingOrder());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getDomainAxisLocation());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainXYPlot0.getRendererCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart("tQy.T\"", combinedDomainXYPlot0);
      assertNotNull(jFreeChart0);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot0.getOrientation());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getRangeAxisLocation());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot0.getSeriesRenderingOrder());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getDomainAxisLocation());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainXYPlot0.getRendererCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      jFreeChart0.setTitle("y?");
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot0.getOrientation());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getRangeAxisLocation());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot0.getSeriesRenderingOrder());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getDomainAxisLocation());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainXYPlot0.getRendererCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.removeLegend();
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot0.getOrientation());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getRangeAxisLocation());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot0.getSeriesRenderingOrder());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getDomainAxisLocation());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainXYPlot0.getRendererCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      float float0 = jFreeChart0.getBackgroundImageAlpha();
      assertEquals(0.5F, float0, 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot0.getOrientation());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getRangeAxisLocation());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot0.getSeriesRenderingOrder());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getDomainAxisLocation());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainXYPlot0.getRendererCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      LinkedList<Title> linkedList0 = new LinkedList<Title>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      jFreeChart0.setSubtitles(linkedList0);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot0.getOrientation());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getRangeAxisLocation());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot0.getSeriesRenderingOrder());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getDomainAxisLocation());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainXYPlot0.getRendererCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, linkedList0.size());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      assertNotNull(meterPlot0);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer((-3422.4));
      assertNotNull(xYBoxAndWhiskerRenderer0);
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-3422.4), xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01);
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYBoxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBoxAndWhiskerRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultCreateEntities());
      assertTrue(xYBoxAndWhiskerRenderer0.getFillBox());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYBoxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(xYBoxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYBoxAndWhiskerRenderer0.getPassCount());
      
      Color color0 = (Color)xYBoxAndWhiskerRenderer0.getBoxPaint();
      assertNotNull(color0);
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-3422.4), xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01);
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYBoxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBoxAndWhiskerRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultCreateEntities());
      assertTrue(xYBoxAndWhiskerRenderer0.getFillBox());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYBoxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(xYBoxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYBoxAndWhiskerRenderer0.getPassCount());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      
      meterPlot0.setNoDataMessagePaint(color0);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-3422.4), xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01);
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYBoxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBoxAndWhiskerRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultCreateEntities());
      assertTrue(xYBoxAndWhiskerRenderer0.getFillBox());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYBoxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(xYBoxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYBoxAndWhiskerRenderer0.getPassCount());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      assertNotNull(jFreeChart0);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)jFreeChart0.getBorderStroke();
      assertNotNull(basicStroke0);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      meterPlot0.setNeedlePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      boolean boolean0 = jFreeChart0.isNotify();
      assertTrue(boolean0);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, verticalAlignment0, 270, 2261.35);
      assertNotNull(flowArrangement0);
      
      LegendTitle legendTitle0 = new LegendTitle(meterPlot0, flowArrangement0, flowArrangement0);
      assertNotNull(legendTitle0);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(RectangleEdge.TOP, legendTitle0.getPosition());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertNull(legendTitle0.getID());
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertTrue(legendTitle0.getNotify());
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertTrue(legendTitle0.isVisible());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertTrue(legendTitle0.visible);
      
      jFreeChart0.addLegend(legendTitle0);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(2, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(RectangleEdge.TOP, legendTitle0.getPosition());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertNull(legendTitle0.getID());
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertTrue(legendTitle0.getNotify());
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertTrue(legendTitle0.isVisible());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(legendTitle0.visible);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object object0 = jFreeChart0.getTextAntiAlias();
      assertNull(object0);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(2, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      boolean boolean2 = jFreeChart0.isBorderVisible();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(2, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      LegendTitle legendTitle1 = new LegendTitle(meterPlot0);
      assertFalse(legendTitle1.equals((Object)legendTitle0));
      assertNotNull(legendTitle1);
      assertEquals(VerticalAlignment.CENTER, legendTitle1.getVerticalAlignment());
      assertEquals(RectangleEdge.TOP, legendTitle1.getPosition());
      assertTrue(legendTitle1.isVisible());
      assertEquals(1.0, legendTitle1.getContentYOffset(), 0.01);
      assertEquals(0.0, legendTitle1.getHeight(), 0.01);
      assertEquals(SortOrder.ASCENDING, legendTitle1.getSortOrder());
      assertEquals(RectangleAnchor.CENTER, legendTitle1.getLegendItemGraphicAnchor());
      assertEquals(RectangleAnchor.CENTER, legendTitle1.getLegendItemGraphicLocation());
      assertEquals(0.0, legendTitle1.getWidth(), 0.01);
      assertEquals(RectangleEdge.LEFT, legendTitle1.getLegendItemGraphicEdge());
      assertEquals(1.0, legendTitle1.getContentXOffset(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, legendTitle1.getHorizontalAlignment());
      assertTrue(legendTitle1.getNotify());
      assertNull(legendTitle1.getID());
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertTrue(legendTitle1.visible);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      
      legendTitle1.setHeight(10.0);
      assertNotSame(legendTitle1, legendTitle0);
      assertFalse(legendTitle1.equals((Object)legendTitle0));
      assertEquals(10.0, legendTitle1.getHeight(), 0.01);
      assertEquals(VerticalAlignment.CENTER, legendTitle1.getVerticalAlignment());
      assertEquals(RectangleEdge.TOP, legendTitle1.getPosition());
      assertTrue(legendTitle1.isVisible());
      assertEquals(1.0, legendTitle1.getContentYOffset(), 0.01);
      assertEquals(SortOrder.ASCENDING, legendTitle1.getSortOrder());
      assertEquals(RectangleAnchor.CENTER, legendTitle1.getLegendItemGraphicAnchor());
      assertEquals(RectangleAnchor.CENTER, legendTitle1.getLegendItemGraphicLocation());
      assertEquals(0.0, legendTitle1.getWidth(), 0.01);
      assertEquals(RectangleEdge.LEFT, legendTitle1.getLegendItemGraphicEdge());
      assertEquals(1.0, legendTitle1.getContentXOffset(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, legendTitle1.getHorizontalAlignment());
      assertTrue(legendTitle1.getNotify());
      assertNull(legendTitle1.getID());
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertTrue(legendTitle1.visible);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle(610, (Title) legendTitle1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'index' argument is out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(2726.00275);
      assertNotNull(defaultValueDataset0);
      assertTrue(defaultValueDataset0.getNotify());
      
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      assertNotNull(meterPlot0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.isOutlineVisible());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      
      Font font0 = meterPlot0.getTickLabelFont();
      assertNotNull(font0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.isOutlineVisible());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertTrue(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      
      boolean boolean0 = true;
      JFreeChart jFreeChart0 = new JFreeChart("", font0, meterPlot0, true);
      assertNotNull(jFreeChart0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.isOutlineVisible());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertTrue(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Vector<Title> vector0 = new Vector<Title>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      jFreeChart0.setSubtitles(vector0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.isOutlineVisible());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertTrue(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      LegendTitle legendTitle0 = jFreeChart0.getLegend((-300));
      assertNull(legendTitle0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.isOutlineVisible());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertTrue(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertNotNull(renderingHints0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.isOutlineVisible());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertTrue(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(renderingHints0.isEmpty());
      assertEquals(2, renderingHints0.size());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ConvolveOp convolveOp0 = new ConvolveOp((Kernel) null, 233, renderingHints0);
      assertNotNull(convolveOp0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.isOutlineVisible());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertNull(meterPlot0.getNoDataMessage());
      assertTrue(meterPlot0.isNotify());
      assertTrue(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(renderingHints0.isEmpty());
      assertEquals(2, renderingHints0.size());
      assertEquals(233, convolveOp0.getEdgeCondition());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(10, 2146268801, 2146751218);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 2146751218
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      BlockResult blockResult0 = new BlockResult();
      assertNotNull(blockResult0);
      
      EntityCollection entityCollection0 = blockResult0.getEntityCollection();
      assertNull(entityCollection0);
      
      blockResult0.setEntityCollection((EntityCollection) null);
      EntityCollection entityCollection1 = blockResult0.getEntityCollection();
      assertNull(entityCollection1);
      
      blockResult0.setEntityCollection((EntityCollection) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      TextTitle textTitle0 = new TextTitle("q'_7>ziz9W!5P", jFreeChart0.DEFAULT_TITLE_FONT, jFreeChart0.DEFAULT_BACKGROUND_PAINT, rectangleEdge0, horizontalAlignment0, verticalAlignment0, multiplePiePlot0.DEFAULT_INSETS);
      assertNotNull(textTitle0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals("q'_7>ziz9W!5P", textTitle0.getText());
      assertEquals(4.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getID());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.isVisible());
      assertEquals(VerticalAlignment.BOTTOM, textTitle0.getVerticalAlignment());
      assertTrue(textTitle0.getNotify());
      assertEquals(HorizontalAlignment.RIGHT, textTitle0.getTextAlignment());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getURLText());
      assertEquals(8.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(RectangleEdge.BOTTOM, textTitle0.getPosition());
      assertEquals(HorizontalAlignment.RIGHT, textTitle0.getHorizontalAlignment());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(textTitle0.visible);
      
      jFreeChart0.removeSubtitle(textTitle0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals("q'_7>ziz9W!5P", textTitle0.getText());
      assertEquals(4.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getID());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.isVisible());
      assertEquals(VerticalAlignment.BOTTOM, textTitle0.getVerticalAlignment());
      assertTrue(textTitle0.getNotify());
      assertEquals(HorizontalAlignment.RIGHT, textTitle0.getTextAlignment());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getURLText());
      assertEquals(8.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(RectangleEdge.BOTTOM, textTitle0.getPosition());
      assertEquals(HorizontalAlignment.RIGHT, textTitle0.getHorizontalAlignment());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(textTitle0.visible);
      
      jFreeChart0.clearSubtitles();
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      assertNotNull(chartRenderingInfo0);
      
      multiplePiePlot0.removeChangeListener(jFreeChart0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 3, chartRenderingInfo0);
      assertNotNull(bufferedImage0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setBackgroundPaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.clearSubtitles();
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertNotNull(renderingHints0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(2, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      assertNotNull(chartPanel0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      
      chartPanel0.zoomOutRange(52.77004176232, 3);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      
      GraphicsConfiguration graphicsConfiguration0 = chartPanel0.getGraphicsConfiguration();
      assertNull(graphicsConfiguration0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      
      ImageCapabilities imageCapabilities0 = bufferedImage0.getCapabilities((GraphicsConfiguration) null);
      assertNotNull(imageCapabilities0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ImageTitle imageTitle0 = new ImageTitle(bufferedImage0);
      assertNotNull(imageTitle0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(VerticalAlignment.CENTER, imageTitle0.getVerticalAlignment());
      assertTrue(imageTitle0.getNotify());
      assertEquals(10.0, imageTitle0.getHeight(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(RectangleEdge.TOP, imageTitle0.getPosition());
      assertEquals(10.0, imageTitle0.getWidth(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, imageTitle0.getHorizontalAlignment());
      assertTrue(imageTitle0.isVisible());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(imageTitle0.visible);
      
      jFreeChart0.addSubtitle((Title) imageTitle0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(VerticalAlignment.CENTER, imageTitle0.getVerticalAlignment());
      assertTrue(imageTitle0.getNotify());
      assertEquals(10.0, imageTitle0.getHeight(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(RectangleEdge.TOP, imageTitle0.getPosition());
      assertEquals(10.0, imageTitle0.getWidth(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, imageTitle0.getHorizontalAlignment());
      assertTrue(imageTitle0.isVisible());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(imageTitle0.visible);
      
      TextTitle textTitle1 = jFreeChart0.getTitle();
      assertNotSame(textTitle1, textTitle0);
      assertFalse(textTitle1.equals((Object)textTitle0));
      assertNotNull(textTitle1);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(1.0, textTitle1.getContentYOffset(), 0.01);
      assertNull(textTitle1.getToolTipText());
      assertNull(textTitle1.getID());
      assertEquals(0.0, textTitle1.getWidth(), 0.01);
      assertEquals(1.0, textTitle1.getContentXOffset(), 0.01);
      assertTrue(textTitle1.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle1.getMaximumLinesToDisplay());
      assertTrue(textTitle1.getNotify());
      assertFalse(textTitle1.getExpandToFitSpace());
      assertNull(textTitle1.getURLText());
      assertEquals("Series Title", textTitle1.getText());
      assertEquals(HorizontalAlignment.CENTER, textTitle1.getHorizontalAlignment());
      assertEquals(VerticalAlignment.CENTER, textTitle1.getVerticalAlignment());
      assertEquals(0.0, textTitle1.getHeight(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, textTitle1.getTextAlignment());
      assertEquals(RectangleEdge.BOTTOM, textTitle1.getPosition());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(textTitle1.visible);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      
      multiplePiePlot0.setDataset(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Image image0 = jFreeChart0.getBackgroundImage();
      assertNull(image0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setBorderPaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      CategoryDataset categoryDataset0 = null;
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      assertNotNull(multiplePiePlot0);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setBorderPaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      assertNotNull(chartPanel0);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      
      jFreeChart0.addChangeListener(chartPanel0);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      
      Image image0 = jFreeChart0.getBackgroundImage();
      assertNull(image0);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.setBackgroundPaint(multiplePiePlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2931, 300);
      assertNotNull(bufferedImage0);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(300, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2931, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2931, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(300, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertNotNull(sunGraphics2D0);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(300, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2931, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2931, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(300, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(365);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      assertNotNull(font0);
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = font0.canDisplay('l');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultKeyedValues2DDataset0, tableOrder0);
      assertNotNull(spiderWebPlot0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isNotify());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      
      boolean boolean2 = defaultKeyedValues2DDataset0.hasListener(spiderWebPlot0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isNotify());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset", font0, spiderWebPlot0, false);
      assertNotNull(jFreeChart0);
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isNotify());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      assertNull(legendTitle0);
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isNotify());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      float float0 = jFreeChart0.getBackgroundImageAlpha();
      assertEquals(0.5F, float0, 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isNotify());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ColorUIResource colorUIResource0 = (ColorUIResource)jFreeChart0.getBackgroundPaint();
      assertNotNull(colorUIResource0);
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isNotify());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals((-1118482), colorUIResource0.getRGB());
      assertEquals(1, colorUIResource0.getTransparency());
      assertEquals(238, colorUIResource0.getGreen());
      assertEquals(238, colorUIResource0.getRed());
      assertEquals(255, colorUIResource0.getAlpha());
      assertEquals(238, colorUIResource0.getBlue());
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertNotNull(renderingHints0);
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isNotify());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(2, renderingHints0.size());
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, (-1851), (-1851), chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -1851
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      multiplePiePlot0.setNotify(true);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      Object object0 = jFreeChart0.clone();
      Object object1 = jFreeChart0.clone();
      object1.equals(object0);
      multiplePiePlot0.equals(object1);
      Plot plot0 = jFreeChart0.getPlot();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      jFreeChart0.setBorderStroke(plot0.DEFAULT_OUTLINE_STROKE);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 799, 0, 10, 799, 0, true, true, true, true, true, true);
      jFreeChart0.removeProgressListener(chartPanel0);
      jFreeChart0.fireChartChanged();
      jFreeChart0.setBackgroundImageAlpha(1.0F);
      jFreeChart0.getElementHinting();
      Locale locale0 = new Locale("ZOOM_DOMAIN_BOTH");
      locale0.hasExtensions();
      jFreeChart0.setPadding(multiplePiePlot0.DEFAULT_INSETS);
      multiplePiePlot0.setOutlinePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      object0.equals(locale0);
      DateTitle dateTitle0 = null;
      try {
        dateTitle0 = new DateTitle(300, locale0, jFreeChart0.DEFAULT_TITLE_FONT, jFreeChart0.DEFAULT_BACKGROUND_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 300
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot piePlot0 = new PiePlot(defaultKeyedValuesDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(piePlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      jFreeChart0.createBufferedImage(10, 10, 90.0, 1847.4706337002049, chartRenderingInfo0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-3538), (-330), chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-3538) and height (-330) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORTED;
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      LogAxis logAxis0 = new LogAxis();
      lookupPaintScale0.equals(logAxis0);
      multiplePiePlot0.getLegendItems();
      jFreeChart0.createBufferedImage(15, 500);
      jFreeChart0.getBackgroundImageAlignment();
      jFreeChart0.setElementHinting(true);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(logAxis0);
      jFreeChart0.notifyListeners(axisChangeEvent0);
      jFreeChart0.getPadding();
      jFreeChart0.getSubtitles();
      assertTrue(jFreeChart0.getElementHinting());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float float0 = JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.5F);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("The number of series keys does not match the number of series in the data array.", compassPlot0);
      int int0 = (-1516);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, false, false, false);
      compassPlot0.setNoDataMessagePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      jFreeChart0.getBorderStroke();
      jFreeChart0.getBackgroundImageAlpha();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, (-1516), chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (10) and height (-1516) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "G";
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setRangeCrosshairValue(Double.NaN, true);
      JFreeChart jFreeChart0 = new JFreeChart("G", combinedRangeCategoryPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      combinedRangeCategoryPlot0.getLegendItems();
      jFreeChart0.removeSubtitle(legendTitle0);
      jFreeChart0.getLegend();
      jFreeChart0.setBackgroundImageAlpha(10);
      combinedRangeCategoryPlot0.getSubplots();
      jFreeChart0.setAntiAlias(true);
      TextTitle textTitle0 = null;
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance(Double.NaN, 0.0);
      JFreeChart jFreeChart1 = new JFreeChart(combinedRangeCategoryPlot0);
      RenderingHints renderingHints0 = jFreeChart1.getRenderingHints();
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(18, 10, 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 15
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("CUBIC_CURVE");
      subCategoryAxis0.clone();
      Font font0 = subCategoryAxis0.getTickLabelFont((Comparable) "CUBIC_CURVE");
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("CUBIC_CURVE", font0, multiplePiePlot0, true);
      jFreeChart0.createBufferedImage(10, 10, (ChartRenderingInfo) null);
      jFreeChart0.equals((Object) null);
      jFreeChart0.setBackgroundImage((Image) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jFreeChart0.setBackgroundImageAlignment(10);
      jFreeChart0.getBorderStroke();
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("CUBIC_CURVE");
      subCategoryAxis0.clone();
      Font font0 = subCategoryAxis0.getTickLabelFont((Comparable) "CUBIC_CURVE");
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("CUBIC_CURVE", font0, multiplePiePlot0, true);
      jFreeChart0.equals("CUBIC_CURVE");
      jFreeChart0.setBackgroundImage((Image) null);
      jFreeChart0.setBackgroundImageAlignment(10);
      // Undeclared exception!
      try { 
        MockURL.toURI((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Font font0 = Font.decode("JFREECHART_TOP_LEVEL");
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart("<GpT3", font0, ringPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.clear();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 2978.38579, 0.4, chartRenderingInfo0);
      jFreeChart0.createBufferedImage(1963, 10, chartRenderingInfo0);
      jFreeChart0.getSubtitleCount();
      jFreeChart0.getLegend();
      bufferedImage0.createGraphics();
      Polygon polygon0 = new Polygon();
      polygon0.invalidate();
      polygon0.getBounds();
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle((-2135733143), (Title) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'index' argument is out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }
}
