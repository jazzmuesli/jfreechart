/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 20:36:07 GMT 2019
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.BarPainter;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StandardBarPainter;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.ui.GradientPaintTransformer;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BarRenderer_ESTest extends BarRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis("j#9J5");
      double double0 = statisticalBarRenderer0.calculateSeriesWidth(2.133787961E9, categoryAxis0, 2, 2);
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(2.6672349512499997E8, double0, 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      double[] doubleArray0 = barRenderer0.calculateBarL0L1((-4.0));
      assertNotNull(doubleArray0);
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(barRenderer0.isDrawBarOutline());
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertTrue(barRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, barRenderer0.getUpperClip(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0, false, (XYToolTipGenerator) null);
      Paint paint0 = candlestickRenderer0.getItemPaint(0, 3418);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(paint0, candlestickRenderer0.DEFAULT_OUTLINE_PAINT, candlestickRenderer0.DEFAULT_PAINT, paint0);
      waterfallBarRenderer0.setShadowPaint(candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      Color color0 = (Color)waterfallBarRenderer0.getShadowPaint();
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      barRenderer0.setMinimumBarLength(0.0);
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
      assertFalse(barRenderer0.isDrawBarOutline());
      assertTrue(barRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setItemMargin(731.2385455328854);
      // Undeclared exception!
      try { 
        ganttRenderer0.calculateSeriesWidth(731.2385455328854, (CategoryAxis) null, 1128, 1128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01);
      
      layeredBarRenderer0.setShadowYOffset(0.0);
      double double0 = layeredBarRenderer0.getShadowYOffset();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      stackedBarRenderer0.setShadowYOffset((-762.15501704856));
      double double0 = stackedBarRenderer0.getShadowYOffset();
      assertEquals((-762.15501704856), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0, false, (XYToolTipGenerator) null);
      Paint paint0 = candlestickRenderer0.getItemPaint(0, 3418);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(paint0, candlestickRenderer0.DEFAULT_OUTLINE_PAINT, candlestickRenderer0.DEFAULT_PAINT, paint0);
      ItemLabelPosition itemLabelPosition0 = candlestickRenderer0.getDefaultPositiveItemLabelPosition();
      waterfallBarRenderer0.setPositiveItemLabelPositionFallback(itemLabelPosition0);
      waterfallBarRenderer0.getPositiveItemLabelPositionFallback();
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      ItemLabelPosition itemLabelPosition0 = defaultPolarItemRenderer0.getSeriesNegativeItemLabelPosition(1401);
      stackedBarRenderer0.setNegativeItemLabelPositionFallback(itemLabelPosition0);
      stackedBarRenderer0.getNegativeItemLabelPositionFallback();
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      double double0 = stackedBarRenderer0.getMinimumBarLength();
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      
      statisticalBarRenderer0.setIncludeBaseInRange(false);
      boolean boolean0 = statisticalBarRenderer0.getIncludeBaseInRange();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0, false, (XYToolTipGenerator) null);
      Paint paint0 = candlestickRenderer0.getItemPaint(0, 3418);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(paint0, candlestickRenderer0.DEFAULT_OUTLINE_PAINT, candlestickRenderer0.DEFAULT_PAINT, paint0);
      waterfallBarRenderer0.setGradientPaintTransformer((GradientPaintTransformer) null);
      waterfallBarRenderer0.getGradientPaintTransformer();
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BarRenderer.setDefaultShadowsVisible(false);
      boolean boolean0 = BarRenderer.getDefaultShadowsVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      barRenderer0.setBase(477.360185709943);
      double double0 = barRenderer0.getBase();
      assertEquals(477.360185709943, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = ",8fWvOzJua_w6pV9";
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) 3.0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      Range range0 = groupedStackedBarRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      double double0 = ganttRenderer0.calculateSeriesWidth((-869.68105791), categoryAxis0, 0, 2166);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      // Undeclared exception!
      try { 
        barRenderer0.setShadowPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.setBarPainter((BarPainter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'painter' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        stackedBarRenderer0.initialise(graphics2D0, (Rectangle2D) null, combinedRangeCategoryPlot0, (-1), plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Require 'index' (-1) to be non-negative.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      String[] stringArray0 = new String[2];
      Number[][] numberArray0 = new Number[2][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, intervalBarRenderer0.DEFAULT_VALUE_LABEL_FONT, thermometerPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(21475, 20, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        intervalBarRenderer0.drawItemLabel(graphics2D0, defaultMultiValueCategoryDataset0, 812, 1, combinedDomainCategoryPlot0, (CategoryItemLabelGenerator) null, (Rectangle2D) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Rectangle rectangle0 = new Rectangle((-2125722127), (-290));
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = stackedAreaRenderer0.initialise((Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, 0, plotRenderingInfo0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("K$r>=q,+TY9*#b'");
      ValueAxis valueAxis0 = stackedBarRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 0);
      // Undeclared exception!
      try { 
        stackedBarRenderer0.drawItem((Graphics2D) null, categoryItemRendererState0, defaultCaret0, combinedRangeCategoryPlot0, subCategoryAxis0, valueAxis0, (CategoryDataset) null, 0, 23, 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.StackedBarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      RectangleInsets rectangleInsets0 = Plot.DEFAULT_INSETS;
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle2D rectangle2D0 = rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle0, false, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        stackedBarRenderer0.calculateBarWidth((CategoryPlot) null, rectangle2D0, 0, categoryItemRendererState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.StackedBarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      boolean boolean0 = barRenderer0.equals("");
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
      assertFalse(boolean0);
      assertFalse(barRenderer0.isDrawBarOutline());
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertTrue(barRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      double double0 = barRenderer0.getLowerClip();
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
      assertFalse(barRenderer0.isDrawBarOutline());
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertTrue(barRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = StandardXYToolTipGenerator.getTimeSeriesInstance();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1065.765), false, standardXYToolTipGenerator0);
      Paint paint0 = candlestickRenderer0.getItemPaint((-454), (-454));
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(paint0, paint0, candlestickRenderer0.DEFAULT_PAINT, candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      double double0 = waterfallBarRenderer0.getUpperClip();
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BarPainter barPainter0 = BarRenderer.getDefaultBarPainter();
      BarRenderer.setDefaultBarPainter(barPainter0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = BarRenderer.getDefaultShadowsVisible();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      IntervalBarRenderer intervalBarRenderer1 = (IntervalBarRenderer)intervalBarRenderer0.clone();
      assertTrue(intervalBarRenderer1.equals((Object)intervalBarRenderer0));
      
      ItemLabelPosition itemLabelPosition0 = new ItemLabelPosition();
      intervalBarRenderer1.setNegativeItemLabelPositionFallback(itemLabelPosition0);
      boolean boolean0 = intervalBarRenderer0.equals(intervalBarRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      Color color0 = (Color)WaferMapPlot.DEFAULT_GRIDLINE_PAINT;
      WaterfallBarRenderer waterfallBarRenderer1 = new WaterfallBarRenderer(color0, waterfallBarRenderer0.DEFAULT_VALUE_LABEL_PAINT, waterfallBarRenderer0.DEFAULT_VALUE_LABEL_PAINT, waterfallBarRenderer0.DEFAULT_PAINT);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      
      waterfallBarRenderer0.setMaximumBarWidth(0.0);
      waterfallBarRenderer1.equals(waterfallBarRenderer0);
      assertEquals(0.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      Object object0 = intervalBarRenderer0.clone();
      intervalBarRenderer0.setItemMargin(0.0);
      boolean boolean0 = intervalBarRenderer0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0.0, intervalBarRenderer0.getItemMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      IntervalBarRenderer intervalBarRenderer1 = (IntervalBarRenderer)intervalBarRenderer0.clone();
      boolean boolean0 = intervalBarRenderer0.equals(intervalBarRenderer1);
      assertEquals(1.0, intervalBarRenderer1.getMaximumBarWidth(), 0.01);
      assertFalse(intervalBarRenderer1.isDrawBarOutline());
      assertTrue(intervalBarRenderer1.getIncludeBaseInRange());
      assertTrue(boolean0);
      assertEquals(4.0, intervalBarRenderer1.getShadowXOffset(), 0.01);
      assertEquals(0.2, intervalBarRenderer1.getItemMargin(), 0.01);
      assertEquals(4.0, intervalBarRenderer1.getShadowYOffset(), 0.01);
      assertEquals(0.0, intervalBarRenderer1.getBase(), 0.01);
      assertEquals(0.0, intervalBarRenderer1.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      double double0 = groupedStackedBarRenderer0.calculateSeriesWidth((double) defaultPolarItemRenderer0.ZERO, categoryAxis0, 447, 1073741824);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(-0.0, double0, 0.01);
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      intervalBarRenderer0.getLegendItem((-4131), (-4131));
      assertFalse(intervalBarRenderer0.isDrawBarOutline());
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01);
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = ",8fWvOzJua_w6pV9";
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      numberArray2[0] = (Number) groupedStackedBarRenderer0.ZERO;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      Range range0 = groupedStackedBarRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertNotNull(range0);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      intervalBarRenderer0.findRangeBounds((CategoryDataset) null, true);
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01);
      assertTrue(intervalBarRenderer0.getIncludeBaseInRange());
      assertFalse(intervalBarRenderer0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = barRenderer0.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(barRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
      assertNull(range0);
      assertFalse(barRenderer0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      barRenderer0.setBase(477.360185709943);
      barRenderer0.calculateBarL0L1(1.0F);
      assertEquals(477.360185709943, barRenderer0.getBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryItemRendererState categoryItemRendererState0 = stackedBarRenderer0.initialise(graphics2D0, (Rectangle2D) null, combinedRangeCategoryPlot0, 1431655765, plotRenderingInfo0);
      // Undeclared exception!
      try { 
        stackedBarRenderer0.calculateBarW0(combinedRangeCategoryPlot0, plotOrientation0, (Rectangle2D) null, (CategoryAxis) null, categoryItemRendererState0, 1431655765, 1431655765);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1386.42144935, 1.0F, 0.2, 1509.717215);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("$`Nu|bNMbN,`F-@>j|9");
      CategoryItemRendererState categoryItemRendererState0 = waterfallBarRenderer0.createState((PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.calculateBarW0(categoryPlot0, plotOrientation0, rectangle2D_Double0, subCategoryAxis0, categoryItemRendererState0, (-466), (-597));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -597
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = barRenderer0.createState(plotRenderingInfo0);
      barRenderer0.calculateBarWidth(combinedDomainCategoryPlot0, (Rectangle2D) null, 10, categoryItemRendererState0);
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(barRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
      assertFalse(barRenderer0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      assertTrue(barRenderer0.getIncludeBaseInRange());
      
      barRenderer0.setIncludeBaseInRange(true);
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertFalse(barRenderer0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      // Undeclared exception!
      try { 
        barRenderer0.setMinimumBarLength((-5240.0313919));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'min' >= 0.0
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      double double0 = statisticalBarRenderer0.getMaximumBarWidth();
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0, false, (XYToolTipGenerator) null);
      Paint paint0 = candlestickRenderer0.getItemPaint(0, 3418);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(paint0, candlestickRenderer0.DEFAULT_OUTLINE_PAINT, candlestickRenderer0.DEFAULT_PAINT, paint0);
      waterfallBarRenderer0.setShadowVisible(false);
      assertFalse(waterfallBarRenderer0.getShadowsVisible());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      double double0 = groupedStackedBarRenderer0.getItemMargin();
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.2, double0, 0.01);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      
      waterfallBarRenderer0.setDrawBarOutline(true);
      boolean boolean0 = waterfallBarRenderer0.isDrawBarOutline();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.setShadowPaint(waterfallBarRenderer0.DEFAULT_PAINT);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.getShadowsVisible();
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      double double0 = groupedStackedBarRenderer0.getBase();
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        BarRenderer.setDefaultBarPainter((BarPainter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'painter' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      stackedBarRenderer0.getPositiveItemLabelPositionFallback();
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.getGradientPaintTransformer();
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      boolean boolean0 = waterfallBarRenderer0.isDrawBarOutline();
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      barRenderer0.getNegativeItemLabelPositionFallback();
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
      assertTrue(barRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(barRenderer0.isDrawBarOutline());
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Color color0 = (Color)statisticalBarRenderer0.getShadowPaint();
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(128, color0.getBlue());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      boolean boolean0 = groupedStackedBarRenderer0.getIncludeBaseInRange();
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(boolean0);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StandardBarPainter standardBarPainter0 = new StandardBarPainter();
      groupedStackedBarRenderer0.setBarPainter(standardBarPainter0);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      double double0 = layeredBarRenderer0.getShadowYOffset();
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getIncludeBaseInRange());
      assertFalse(layeredBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, double0, 0.01);
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      groupedStackedBarRenderer0.getBarPainter();
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01);
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0, false, (XYToolTipGenerator) null);
      Paint paint0 = candlestickRenderer0.getItemPaint(0, 3418);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(paint0, candlestickRenderer0.DEFAULT_OUTLINE_PAINT, candlestickRenderer0.DEFAULT_PAINT, paint0);
      double double0 = waterfallBarRenderer0.getMinimumBarLength();
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      double[] doubleArray0 = ganttRenderer0.calculateBarL0L1((byte)66);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertNotNull(doubleArray0);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      groupedStackedBarRenderer0.setShadowXOffset((double) defaultPolarItemRenderer0.ZERO);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      double double0 = groupedStackedBarRenderer0.getShadowXOffset();
      assertEquals(4.0, double0, 0.01);
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
  }
}
