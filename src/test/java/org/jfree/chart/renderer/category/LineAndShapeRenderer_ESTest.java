/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:05:10 GMT 2019
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.SystemColor;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLabelLocation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickMarkPosition;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.ChartProgressEvent;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CenterTextMode;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.DialShape;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PieLabelLinkStyle;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarAxisLocation;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.chart.ui.LengthAdjustmentType;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.ui.VerticalAlignment;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.DefaultShadowGenerator;
import org.jfree.chart.util.Rotation;
import org.jfree.chart.util.SortOrder;
import org.jfree.chart.util.TableOrder;
import org.jfree.chart.util.UnitType;
import org.jfree.data.Range;
import org.jfree.data.RangeType;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Week;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LineAndShapeRenderer_ESTest extends LineAndShapeRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      int int0 = 2144517510;
      int int1 = 2147058656;
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      int int2 = 1073741824;
      defaultPolarItemRenderer0.getSeriesCreateEntities(1073741824);
      // Undeclared exception!
      statisticalLineAndShapeRenderer0.setSeriesShapesFilled(2147058656, (Boolean) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.setUseSeriesOffset(true);
      statisticalLineAndShapeRenderer0.setDefaultLinesVisible(true);
      statisticalLineAndShapeRenderer0.getItemLineVisible(0, 0);
      statisticalLineAndShapeRenderer0.getItemLineVisible(0, 0);
      statisticalLineAndShapeRenderer0.lookupLegendTextPaint(1532);
      statisticalLineAndShapeRenderer0.setDrawOutlines(true);
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      defaultXYItemRenderer0.getSeriesShapesVisible(486);
      defaultXYItemRenderer0.setAutoPopulateSeriesOutlinePaint(true);
      Boolean.logicalOr(true, true);
      statisticalLineAndShapeRenderer0.setSeriesLinesVisible(486, (Boolean) null);
      statisticalLineAndShapeRenderer0.setDrawOutlines(true);
      statisticalLineAndShapeRenderer0.getLegendItem(0, 486);
      Object object0 = statisticalLineAndShapeRenderer0.clone();
      statisticalLineAndShapeRenderer0.getUseFillPaint();
      statisticalLineAndShapeRenderer0.getItemLineVisible(1532, 1423);
      statisticalLineAndShapeRenderer0.getDrawOutlines();
      Object object1 = statisticalLineAndShapeRenderer0.clone();
      statisticalLineAndShapeRenderer0.equals(object1);
      statisticalLineAndShapeRenderer0.getUseFillPaint();
      statisticalLineAndShapeRenderer0.getDrawOutlines();
      statisticalLineAndShapeRenderer0.clone();
      statisticalLineAndShapeRenderer0.getSeriesShapesVisible(0);
      statisticalLineAndShapeRenderer0.equals((Object) null);
      statisticalLineAndShapeRenderer0.equals(object0);
      System.setCurrentTimeMillis(1532);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer1 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.equals(statisticalLineAndShapeRenderer1);
      statisticalLineAndShapeRenderer1.getItemLineVisible((-2416), 464);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      lineAndShapeRenderer0.setAutoPopulateSeriesShape(true);
      lineAndShapeRenderer0.getSeriesToolTipGenerator((-1913));
      lineAndShapeRenderer0.clone();
      lineAndShapeRenderer0.setDefaultToolTipGenerator((CategoryToolTipGenerator) null, false);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.equals(statisticalLineAndShapeRenderer0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer1 = new StatisticalLineAndShapeRenderer();
      lineAndShapeRenderer0.equals(statisticalLineAndShapeRenderer1);
      lineAndShapeRenderer0.getSeriesLinesVisible((-1913));
      lineAndShapeRenderer0.setSeriesShapesVisible(1367, true);
      lineAndShapeRenderer0.getItemShapeFilled(9, 1367);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getDrawOutlines();
      defaultCategoryItemRenderer0.lookupSeriesOutlinePaint(366);
      Boolean boolean0 = Boolean.valueOf((String) null);
      Boolean.logicalOr(true, true);
      defaultCategoryItemRenderer0.lookupSeriesFillPaint(2145989226);
      defaultCategoryItemRenderer0.setSeriesShapesVisible(366, boolean0);
      defaultCategoryItemRenderer0.getDrawOutlines();
      defaultCategoryItemRenderer0.getUseFillPaint();
      defaultCategoryItemRenderer0.getItemShapeVisible(366, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      lineAndShapeRenderer0.getSeriesShapesVisible((-682));
      Boolean.logicalAnd(true, true);
      lineAndShapeRenderer0.equals((Object) null);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      plotRenderingInfo0.getPlotArea();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.drawItem((Graphics2D) null, categoryItemRendererState0, (Rectangle2D) null, categoryPlot0, categoryAxis0, numberAxis0, defaultStatisticalCategoryDataset0, (-682), 127, (-5775));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      int int0 = 675;
      statisticalLineAndShapeRenderer0.setSeriesLinesVisible(675, false);
      statisticalLineAndShapeRenderer0.getItemMargin();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getItemURLGenerator(232, 232);
      statisticalLineAndShapeRenderer0.setDefaultItemURLGenerator((CategoryURLGenerator) null);
      statisticalLineAndShapeRenderer0.getDrawOutlines();
      statisticalLineAndShapeRenderer0.getSeriesLinesVisible(675);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(675, 675, (-39));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -39
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("dataset (type ");
      lineAndShapeRenderer0.setDefaultShapesFilled(false);
      lineAndShapeRenderer0.setLegendItemURLGenerator(standardCategorySeriesLabelGenerator0);
      lineAndShapeRenderer0.lookupSeriesShape(2);
      lineAndShapeRenderer0.getItemLineVisible((-1), (-1));
      lineAndShapeRenderer0.getUseFillPaint();
      lineAndShapeRenderer0.setSeriesToolTipGenerator((-1), (CategoryToolTipGenerator) null, true);
      System.setCurrentTimeMillis((-1));
      lineAndShapeRenderer0.setUseFillPaint(false);
      lineAndShapeRenderer0.getUseFillPaint();
      lineAndShapeRenderer0.getDrawOutlines();
      lineAndShapeRenderer0.getDefaultShapesFilled();
      lineAndShapeRenderer0.getSeriesLinesVisible(3085);
      lineAndShapeRenderer0.getSeriesLinesVisible(3085);
      lineAndShapeRenderer0.getSeriesLinesVisible(3085);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      boolean boolean0 = statisticalLineAndShapeRenderer0.getUseSeriesOffset();
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(boolean0);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      
      statisticalLineAndShapeRenderer0.setDefaultShapesFilled(false);
      statisticalLineAndShapeRenderer0.getItemShapeFilled(91, 91);
      statisticalLineAndShapeRenderer0.getItemShapeVisible(91, (-4752));
      statisticalLineAndShapeRenderer0.getPassCount();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = false;
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertNotNull(lineAndShapeRenderer0);
      
      int int0 = 2145762297;
      // Undeclared exception!
      lineAndShapeRenderer0.setSeriesShapesFilled(2145762297, false);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertNotNull(lineAndShapeRenderer0);
      
      lineAndShapeRenderer0.setAutoPopulateSeriesShape(true);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = lineAndShapeRenderer0.getSeriesToolTipGenerator((-1913));
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertNull(categoryToolTipGenerator0);
      
      LineAndShapeRenderer lineAndShapeRenderer1 = (LineAndShapeRenderer)lineAndShapeRenderer0.clone();
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer1.getDrawOutlines());
      assertFalse(lineAndShapeRenderer1.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(0.0, lineAndShapeRenderer1.getItemMargin(), 0.01);
      assertTrue(lineAndShapeRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer1.getColumnCount());
      assertEquals(3, lineAndShapeRenderer1.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer1.getDefaultShapesVisible());
      assertEquals(0, lineAndShapeRenderer1.getRowCount());
      assertTrue(lineAndShapeRenderer1.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer1.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer1.getUseFillPaint());
      assertFalse(lineAndShapeRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer1.getDefaultItemLabelsVisible());
      assertEquals(2, lineAndShapeRenderer1.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer1.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer1.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer1.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer1.getDefaultSeriesVisible());
      assertNotNull(lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer1, lineAndShapeRenderer0);
      assertTrue(lineAndShapeRenderer1.equals((Object)lineAndShapeRenderer0));
      
      lineAndShapeRenderer0.setDefaultToolTipGenerator((CategoryToolTipGenerator) null, false);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
      
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      boolean boolean0 = lineAndShapeRenderer0.equals(statisticalLineAndShapeRenderer0);
      assertFalse(boolean0);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
      
      LineAndShapeRenderer lineAndShapeRenderer2 = (LineAndShapeRenderer)lineAndShapeRenderer0.clone();
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer2.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer2.getDefaultSeriesVisibleInLegend());
      assertEquals(0, lineAndShapeRenderer2.getColumnCount());
      assertFalse(lineAndShapeRenderer2.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer2.getDrawOutlines());
      assertFalse(lineAndShapeRenderer2.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer2.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer2.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer2.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer2.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer2.getUseFillPaint());
      assertFalse(lineAndShapeRenderer2.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer2.getDefaultCreateEntities());
      assertEquals(2, lineAndShapeRenderer2.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer2.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer2.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer2.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer2.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer2.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer2.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer2.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer2.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer2.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer2.getAutoPopulateSeriesStroke());
      assertNotNull(lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer2, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer2, lineAndShapeRenderer0);
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
      assertTrue(lineAndShapeRenderer2.equals((Object)lineAndShapeRenderer1));
      assertTrue(lineAndShapeRenderer2.equals((Object)lineAndShapeRenderer0));
      
      boolean boolean1 = lineAndShapeRenderer0.equals(lineAndShapeRenderer2);
      assertTrue(boolean1);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer2.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer2.getDefaultSeriesVisibleInLegend());
      assertEquals(0, lineAndShapeRenderer2.getColumnCount());
      assertFalse(lineAndShapeRenderer2.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer2.getDrawOutlines());
      assertFalse(lineAndShapeRenderer2.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer2.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer2.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer2.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer2.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer2.getUseFillPaint());
      assertFalse(lineAndShapeRenderer2.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer2.getDefaultCreateEntities());
      assertEquals(2, lineAndShapeRenderer2.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer2.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer2.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer2.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer2.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer2.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer2.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer2.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer2.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer2.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer2.getAutoPopulateSeriesStroke());
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer2, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer2, lineAndShapeRenderer0);
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer2));
      assertTrue(lineAndShapeRenderer2.equals((Object)lineAndShapeRenderer1));
      assertTrue(lineAndShapeRenderer2.equals((Object)lineAndShapeRenderer0));
      assertFalse(boolean1 == boolean0);
      
      Boolean boolean2 = lineAndShapeRenderer0.getSeriesLinesVisible((-1913));
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertNull(boolean2);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer2));
      
      lineAndShapeRenderer0.setSeriesShapesVisible(1367, true);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertFalse(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertNotNull(lineAndShapeRenderer0);
      
      lineAndShapeRenderer0.setAutoPopulateSeriesShape(true);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = lineAndShapeRenderer0.getSeriesToolTipGenerator((-1913));
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertNull(categoryToolTipGenerator0);
      
      LineAndShapeRenderer lineAndShapeRenderer1 = (LineAndShapeRenderer)lineAndShapeRenderer0.clone();
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer1.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer1.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer1.getColumnCount());
      assertFalse(lineAndShapeRenderer1.getDefaultItemLabelsVisible());
      assertEquals(3, lineAndShapeRenderer1.getDefaultEntityRadius());
      assertEquals(0.0, lineAndShapeRenderer1.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer1.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer1.getRowCount());
      assertTrue(lineAndShapeRenderer1.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(2.0, lineAndShapeRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer1.getPassCount());
      assertFalse(lineAndShapeRenderer1.getUseFillPaint());
      assertFalse(lineAndShapeRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer1.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer1.getDefaultShapesVisible());
      assertFalse(lineAndShapeRenderer1.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer1.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer1.getDrawOutlines());
      assertFalse(lineAndShapeRenderer1.getUseOutlinePaint());
      assertNotNull(lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer1, lineAndShapeRenderer0);
      assertTrue(lineAndShapeRenderer1.equals((Object)lineAndShapeRenderer0));
      
      lineAndShapeRenderer0.setDefaultToolTipGenerator((CategoryToolTipGenerator) null, false);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
      
      LineAndShapeRenderer lineAndShapeRenderer2 = (LineAndShapeRenderer)lineAndShapeRenderer0.clone();
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, lineAndShapeRenderer2.getRowCount());
      assertTrue(lineAndShapeRenderer2.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer2.getDefaultSeriesVisible());
      assertFalse(lineAndShapeRenderer2.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer2.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer2.getAutoPopulateSeriesPaint());
      assertEquals(3, lineAndShapeRenderer2.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer2.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer2.getColumnCount());
      assertTrue(lineAndShapeRenderer2.getDrawOutlines());
      assertFalse(lineAndShapeRenderer2.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer2.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer2.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer2.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer2.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer2.getUseFillPaint());
      assertTrue(lineAndShapeRenderer2.getAutoPopulateSeriesStroke());
      assertEquals(2.0, lineAndShapeRenderer2.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer2.getAutoPopulateSeriesShape());
      assertEquals(2, lineAndShapeRenderer2.getPassCount());
      assertFalse(lineAndShapeRenderer2.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer2.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer2.getDefaultItemLabelsVisible());
      assertEquals(0.0, lineAndShapeRenderer2.getItemMargin(), 0.01);
      assertNotNull(lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer2, lineAndShapeRenderer0);
      assertNotSame(lineAndShapeRenderer2, lineAndShapeRenderer1);
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
      assertTrue(lineAndShapeRenderer2.equals((Object)lineAndShapeRenderer0));
      assertTrue(lineAndShapeRenderer2.equals((Object)lineAndShapeRenderer1));
      
      Week week0 = new Week();
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(week0, oHLCDataItemArray0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      boolean boolean0 = lineAndShapeRenderer2.hasListener(defaultOHLCDataset0);
      assertFalse(boolean0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, lineAndShapeRenderer2.getRowCount());
      assertTrue(lineAndShapeRenderer2.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer2.getDefaultSeriesVisible());
      assertFalse(lineAndShapeRenderer2.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer2.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer2.getAutoPopulateSeriesPaint());
      assertEquals(3, lineAndShapeRenderer2.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer2.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer2.getColumnCount());
      assertTrue(lineAndShapeRenderer2.getDrawOutlines());
      assertFalse(lineAndShapeRenderer2.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer2.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer2.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer2.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer2.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer2.getUseFillPaint());
      assertTrue(lineAndShapeRenderer2.getAutoPopulateSeriesStroke());
      assertEquals(2.0, lineAndShapeRenderer2.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer2.getAutoPopulateSeriesShape());
      assertEquals(2, lineAndShapeRenderer2.getPassCount());
      assertFalse(lineAndShapeRenderer2.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer2.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer2.getDefaultItemLabelsVisible());
      assertEquals(0.0, lineAndShapeRenderer2.getItemMargin(), 0.01);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer2, lineAndShapeRenderer0);
      assertNotSame(lineAndShapeRenderer2, lineAndShapeRenderer1);
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer2));
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
      assertTrue(lineAndShapeRenderer2.equals((Object)lineAndShapeRenderer0));
      assertTrue(lineAndShapeRenderer2.equals((Object)lineAndShapeRenderer1));
      
      boolean boolean1 = lineAndShapeRenderer0.equals(lineAndShapeRenderer2);
      assertTrue(boolean1);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, lineAndShapeRenderer2.getRowCount());
      assertTrue(lineAndShapeRenderer2.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer2.getDefaultSeriesVisible());
      assertFalse(lineAndShapeRenderer2.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer2.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer2.getAutoPopulateSeriesPaint());
      assertEquals(3, lineAndShapeRenderer2.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer2.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer2.getColumnCount());
      assertTrue(lineAndShapeRenderer2.getDrawOutlines());
      assertFalse(lineAndShapeRenderer2.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer2.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer2.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer2.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer2.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer2.getUseFillPaint());
      assertTrue(lineAndShapeRenderer2.getAutoPopulateSeriesStroke());
      assertEquals(2.0, lineAndShapeRenderer2.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer2.getAutoPopulateSeriesShape());
      assertEquals(2, lineAndShapeRenderer2.getPassCount());
      assertFalse(lineAndShapeRenderer2.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer2.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer2.getDefaultItemLabelsVisible());
      assertEquals(0.0, lineAndShapeRenderer2.getItemMargin(), 0.01);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer2, lineAndShapeRenderer0);
      assertNotSame(lineAndShapeRenderer2, lineAndShapeRenderer1);
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer2));
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
      assertFalse(boolean1 == boolean0);
      assertTrue(lineAndShapeRenderer2.equals((Object)lineAndShapeRenderer0));
      assertTrue(lineAndShapeRenderer2.equals((Object)lineAndShapeRenderer1));
      
      LineAndShapeRenderer lineAndShapeRenderer3 = (LineAndShapeRenderer)lineAndShapeRenderer0.clone();
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer3.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer3.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer3.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer3.getDefaultSeriesVisibleInLegend());
      assertEquals(0, lineAndShapeRenderer3.getColumnCount());
      assertFalse(lineAndShapeRenderer3.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer3.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer3.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer3.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer3.getDrawOutlines());
      assertFalse(lineAndShapeRenderer3.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer3.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer3.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer3.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer3.getRowCount());
      assertTrue(lineAndShapeRenderer3.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer3.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer3.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer3.getDefaultEntityRadius());
      assertEquals(2, lineAndShapeRenderer3.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer3.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer3.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer3.getUseFillPaint());
      assertFalse(lineAndShapeRenderer3.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(lineAndShapeRenderer3);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer3);
      assertNotSame(lineAndShapeRenderer3, lineAndShapeRenderer0);
      assertNotSame(lineAndShapeRenderer3, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer3, lineAndShapeRenderer1);
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer2));
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
      assertTrue(lineAndShapeRenderer3.equals((Object)lineAndShapeRenderer1));
      assertTrue(lineAndShapeRenderer3.equals((Object)lineAndShapeRenderer0));
      assertTrue(lineAndShapeRenderer3.equals((Object)lineAndShapeRenderer2));
      
      lineAndShapeRenderer3.setUseOutlinePaint(true);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer3.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer3.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer3.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer3.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer3.getDefaultSeriesVisibleInLegend());
      assertEquals(0, lineAndShapeRenderer3.getColumnCount());
      assertFalse(lineAndShapeRenderer3.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer3.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer3.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer3.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer3.getDrawOutlines());
      assertFalse(lineAndShapeRenderer3.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer3.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer3.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer3.getRowCount());
      assertTrue(lineAndShapeRenderer3.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer3.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer3.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer3.getDefaultEntityRadius());
      assertEquals(2, lineAndShapeRenderer3.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer3.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer3.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer3.getUseFillPaint());
      assertFalse(lineAndShapeRenderer3.getAutoPopulateSeriesOutlineStroke());
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer3);
      assertNotSame(lineAndShapeRenderer3, lineAndShapeRenderer0);
      assertNotSame(lineAndShapeRenderer3, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer3, lineAndShapeRenderer1);
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer2));
      assertFalse(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer3));
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
      assertFalse(lineAndShapeRenderer3.equals((Object)lineAndShapeRenderer0));
      assertFalse(lineAndShapeRenderer3.equals((Object)lineAndShapeRenderer2));
      assertFalse(lineAndShapeRenderer3.equals((Object)lineAndShapeRenderer1));
      
      boolean boolean2 = lineAndShapeRenderer0.equals(lineAndShapeRenderer3);
      assertFalse(boolean2);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer3.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer3.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer3.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer3.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer3.getDefaultSeriesVisibleInLegend());
      assertEquals(0, lineAndShapeRenderer3.getColumnCount());
      assertFalse(lineAndShapeRenderer3.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer3.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer3.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer3.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer3.getDrawOutlines());
      assertFalse(lineAndShapeRenderer3.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer3.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer3.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer3.getRowCount());
      assertTrue(lineAndShapeRenderer3.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer3.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer3.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer3.getDefaultEntityRadius());
      assertEquals(2, lineAndShapeRenderer3.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer3.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer3.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer3.getUseFillPaint());
      assertFalse(lineAndShapeRenderer3.getAutoPopulateSeriesOutlineStroke());
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer3);
      assertNotSame(lineAndShapeRenderer3, lineAndShapeRenderer0);
      assertNotSame(lineAndShapeRenderer3, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer3, lineAndShapeRenderer1);
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer2));
      assertFalse(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer3));
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
      assertFalse(lineAndShapeRenderer3.equals((Object)lineAndShapeRenderer0));
      assertFalse(lineAndShapeRenderer3.equals((Object)lineAndShapeRenderer2));
      assertFalse(lineAndShapeRenderer3.equals((Object)lineAndShapeRenderer1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Boolean boolean3 = lineAndShapeRenderer0.getSeriesLinesVisible((-1913));
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertNull(boolean3);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer3);
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer2));
      assertFalse(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer3));
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
      
      lineAndShapeRenderer0.setSeriesShapesVisible(1367, true);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer3);
      assertFalse(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer2));
      
      boolean boolean4 = lineAndShapeRenderer0.getDefaultShapesFilled();
      assertTrue(boolean4);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer3);
      assertFalse(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer2));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertNotNull(lineAndShapeRenderer0);
      
      lineAndShapeRenderer0.setAutoPopulateSeriesShape(true);
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = lineAndShapeRenderer0.getSeriesToolTipGenerator((-1913));
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertNull(categoryToolTipGenerator0);
      
      lineAndShapeRenderer0.setDefaultToolTipGenerator((CategoryToolTipGenerator) null, false);
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      
      LineAndShapeRenderer lineAndShapeRenderer1 = (LineAndShapeRenderer)lineAndShapeRenderer0.clone();
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0, lineAndShapeRenderer1.getColumnCount());
      assertFalse(lineAndShapeRenderer1.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer1.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer1.getAutoPopulateSeriesShape());
      assertEquals(3, lineAndShapeRenderer1.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer1.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer1.getRowCount());
      assertTrue(lineAndShapeRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(0.0, lineAndShapeRenderer1.getItemMargin(), 0.01);
      assertEquals(2.0, lineAndShapeRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer1.getPassCount());
      assertFalse(lineAndShapeRenderer1.getUseFillPaint());
      assertTrue(lineAndShapeRenderer1.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer1.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer1.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer1.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer1.getDrawOutlines());
      assertFalse(lineAndShapeRenderer1.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer1, lineAndShapeRenderer0);
      assertTrue(lineAndShapeRenderer1.equals((Object)lineAndShapeRenderer0));
      
      boolean boolean0 = lineAndShapeRenderer0.equals(lineAndShapeRenderer1);
      assertTrue(boolean0);
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0, lineAndShapeRenderer1.getColumnCount());
      assertFalse(lineAndShapeRenderer1.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer1.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer1.getAutoPopulateSeriesShape());
      assertEquals(3, lineAndShapeRenderer1.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer1.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer1.getRowCount());
      assertTrue(lineAndShapeRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(0.0, lineAndShapeRenderer1.getItemMargin(), 0.01);
      assertEquals(2.0, lineAndShapeRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer1.getPassCount());
      assertFalse(lineAndShapeRenderer1.getUseFillPaint());
      assertTrue(lineAndShapeRenderer1.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer1.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer1.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer1.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer1.getDrawOutlines());
      assertFalse(lineAndShapeRenderer1.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer1, lineAndShapeRenderer0);
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
      assertTrue(lineAndShapeRenderer1.equals((Object)lineAndShapeRenderer0));
      
      boolean boolean1 = lineAndShapeRenderer0.equals(lineAndShapeRenderer0);
      assertTrue(boolean1);
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
      assertTrue(boolean1 == boolean0);
      
      lineAndShapeRenderer0.setSeriesShapesVisible(1367, true);
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      
      boolean boolean2 = lineAndShapeRenderer0.getDefaultShapesFilled();
      assertTrue(boolean2);
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Boolean boolean3 = lineAndShapeRenderer0.getSeriesLinesVisible(840319688);
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertNull(boolean3);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      
      boolean boolean4 = lineAndShapeRenderer0.equals((Object) null);
      assertFalse(boolean4);
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      
      boolean boolean5 = lineAndShapeRenderer0.getItemLineVisible((-1913), 1367);
      assertFalse(boolean5);
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertNotNull(lineAndShapeRenderer0);
      
      lineAndShapeRenderer0.setDefaultShapesVisible(true);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertNotNull(categoryAxis0);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isVisible());
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertNull(subCategoryAxis0.getLabel());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertNotNull(subCategoryAxis0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      String string0 = subCategoryAxis0.getCategoryLabelToolTip(0.05);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isVisible());
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertNull(subCategoryAxis0.getLabel());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertNull(string0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      RectangleInsets rectangleInsets0 = subCategoryAxis0.getLabelInsets();
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isVisible());
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertNull(subCategoryAxis0.getLabel());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01);
      assertNotNull(rectangleInsets0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      categoryAxis0.setTickLabelInsets(rectangleInsets0);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isVisible());
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertNull(subCategoryAxis0.getLabel());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      lineAndShapeRenderer0.setPlot(combinedDomainCategoryPlot0);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      int int0 = lineAndShapeRenderer0.getPassCount();
      assertEquals(2, int0);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      
      boolean boolean0 = lineAndShapeRenderer0.getDefaultShapesVisible();
      assertTrue(boolean0);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.getLegendItem(1636, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      statisticalLineAndShapeRenderer0.setAutoPopulateSeriesPaint(true);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      
      Boolean boolean0 = statisticalLineAndShapeRenderer0.getSeriesShapesVisible(40);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertNull(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("t");
      assertFalse(boolean1);
      
      boolean boolean2 = Boolean.logicalXor(false, true);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      
      statisticalLineAndShapeRenderer0.setSeriesShapesVisible(2, (Boolean) null);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      
      statisticalLineAndShapeRenderer0.setUseOutlinePaint(true);
      assertTrue(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      
      statisticalLineAndShapeRenderer0.setSeriesShapesFilled(40, true);
      assertTrue(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      
      Boolean boolean3 = statisticalLineAndShapeRenderer0.getSeriesLinesVisible(40);
      assertTrue(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertNull(boolean3);
      
      statisticalLineAndShapeRenderer0.setUseFillPaint(false);
      assertTrue(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      
      statisticalLineAndShapeRenderer0.setDefaultLinesVisible(true);
      assertTrue(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      
      boolean boolean4 = statisticalLineAndShapeRenderer0.getUseOutlinePaint();
      assertTrue(boolean4);
      assertTrue(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      
      MeterPlot meterPlot0 = new MeterPlot();
      assertTrue(meterPlot0.isNotify());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertNull(meterPlot0.getNoDataMessage());
      assertFalse(meterPlot0.isSubplot());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals("Units", meterPlot0.getUnits());
      assertNotNull(meterPlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart("Requires 0.0 <= margin < 1.0.", meterPlot0);
      assertTrue(meterPlot0.isNotify());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertNull(meterPlot0.getNoDataMessage());
      assertFalse(meterPlot0.isSubplot());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 234, 881, 234, 15, (-565127276), (-2005), true, false, true, true, false, true, false);
      assertTrue(meterPlot0.isNotify());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertNull(meterPlot0.getNoDataMessage());
      assertFalse(meterPlot0.isSubplot());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals((-2005), chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals((-565127276), chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(15, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(234, chartPanel0.getMinimumDrawWidth());
      assertNotNull(chartPanel0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertTrue(meterPlot0.isNotify());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertNull(meterPlot0.getNoDataMessage());
      assertFalse(meterPlot0.isSubplot());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals((-2005), chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals((-565127276), chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(15, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(234, chartPanel0.getMinimumDrawWidth());
      assertNotNull(chartRenderingInfo0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 40, (double) 10.0F, 5041.0, chartRenderingInfo0);
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(40, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(40, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertTrue(meterPlot0.isNotify());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertNull(meterPlot0.getNoDataMessage());
      assertFalse(meterPlot0.isSubplot());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals((-2005), chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals((-565127276), chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(15, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(234, chartPanel0.getMinimumDrawWidth());
      assertNotNull(bufferedImage0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(40, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(40, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertTrue(meterPlot0.isNotify());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertNull(meterPlot0.getNoDataMessage());
      assertFalse(meterPlot0.isSubplot());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals((-2005), chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals((-565127276), chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(15, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(234, chartPanel0.getMinimumDrawWidth());
      assertNotNull(sunGraphics2D0);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertFalse(boxAndWhiskerRenderer0.getUseOutlinePaintForWhiskers());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.getDefaultCreateEntities());
      assertEquals(1.0, boxAndWhiskerRenderer0.getWhiskerWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertTrue(boxAndWhiskerRenderer0.getDefaultSeriesVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(boxAndWhiskerRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertNotNull(boxAndWhiskerRenderer0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isDomainPannable());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertNull(categoryPlot0.getNoDataMessage());
      assertNotNull(categoryPlot0);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertTrue(meterPlot0.isNotify());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertNull(meterPlot0.getNoDataMessage());
      assertFalse(meterPlot0.isSubplot());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals((-2005), chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals((-565127276), chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(15, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(234, chartPanel0.getMinimumDrawWidth());
      assertNotNull(plotRenderingInfo0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      
      CategoryItemRendererState categoryItemRendererState0 = boxAndWhiskerRenderer0.initialise(sunGraphics2D0, (Rectangle2D) null, categoryPlot0, 1116296780, plotRenderingInfo0);
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(40, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(40, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(boxAndWhiskerRenderer0.getUseOutlinePaintForWhiskers());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.getDefaultCreateEntities());
      assertEquals(1.0, boxAndWhiskerRenderer0.getWhiskerWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertTrue(boxAndWhiskerRenderer0.getDefaultSeriesVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(boxAndWhiskerRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isDomainPannable());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertFalse(categoryItemRendererState0.getElementHinting());
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertTrue(meterPlot0.isNotify());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertNull(meterPlot0.getNoDataMessage());
      assertFalse(meterPlot0.isSubplot());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals((-2005), chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals((-565127276), chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(15, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(234, chartPanel0.getMinimumDrawWidth());
      assertNotNull(categoryItemRendererState0);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertNotNull(categoryAxis0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 3160.6497934);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(Double.NaN, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(3160.6497934, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawItem(sunGraphics2D0, categoryItemRendererState0, (Rectangle2D) null, categoryPlot0, categoryAxis0, cyclicNumberAxis0, defaultCategoryDataset0, 1257, (-300), (-565127276));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1257, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = false;
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertNotNull(lineAndShapeRenderer0);
      
      // Undeclared exception!
      lineAndShapeRenderer0.setSeriesLinesVisible(840319688, (Boolean) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertNotNull(lineAndShapeRenderer0);
      
      boolean boolean0 = lineAndShapeRenderer0.getUseFillPaint();
      assertFalse(boolean0);
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      
      lineAndShapeRenderer0.setDefaultShapesFilled(false);
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      
      Boolean boolean1 = lineAndShapeRenderer0.getSeriesShapesVisible(0);
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertNull(boolean1);
      
      System.setCurrentTimeMillis((-2315L));
      int int0 = lineAndShapeRenderer0.getPassCount();
      assertEquals(2, int0);
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      
      boolean boolean2 = lineAndShapeRenderer0.getSeriesShapesFilled(2);
      assertFalse(boolean2);
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertNotNull(lineAndShapeRenderer0);
      
      lineAndShapeRenderer0.setUseOutlinePaint(false);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValuesDataset0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertTrue(ringPlot0.isNotify());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertNull(ringPlot0.getCenterText());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertNotNull(ringPlot0);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)ringPlot0.getLegendItemShape();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertTrue(ringPlot0.isNotify());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertNull(ringPlot0.getCenterText());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals(4.0, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals((-4.0), ellipse2D_Double0.getMinX(), 0.01);
      assertEquals(4.0, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals((-4.0), ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertNotNull(ellipse2D_Double0);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(8.0, ellipse2D_Double0.height, 0.01);
      assertEquals((-4.0), ellipse2D_Double0.x, 0.01);
      assertEquals((-4.0), ellipse2D_Double0.y, 0.01);
      assertEquals(8.0, ellipse2D_Double0.width, 0.01);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultKeyedValuesDataset0.sortByValues(sortOrder0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = (DefaultKeyedValuesDataset)defaultKeyedValuesDataset0.clone();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertNotNull(defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      
      defaultKeyedValuesDataset0.setValue((Comparable) 0.08, 1.0E-5);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertFalse(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      
      lineAndShapeRenderer0.setSeriesShapesVisible(1728, false);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      
      lineAndShapeRenderer0.setDefaultLegendShape(ellipse2D_Double0);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertTrue(ringPlot0.isNotify());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertNull(ringPlot0.getCenterText());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals(4.0, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals((-4.0), ellipse2D_Double0.getMinX(), 0.01);
      assertEquals(4.0, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals((-4.0), ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(8.0, ellipse2D_Double0.height, 0.01);
      assertEquals((-4.0), ellipse2D_Double0.x, 0.01);
      assertEquals((-4.0), ellipse2D_Double0.y, 0.01);
      assertEquals(8.0, ellipse2D_Double0.width, 0.01);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertFalse(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      
      defaultKeyedValuesDataset0.clear();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      
      Boolean boolean0 = lineAndShapeRenderer0.getSeriesShapesVisible((-371));
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertNull(boolean0);
      
      boolean boolean1 = Boolean.logicalOr(true, true);
      assertTrue(boolean1);
      
      Paint paint0 = lineAndShapeRenderer0.lookupLegendTextPaint(360);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertNull(paint0);
      
      lineAndShapeRenderer0.setItemMargin(0.4);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0.4, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      
      boolean boolean2 = lineAndShapeRenderer0.getDefaultShapesFilled();
      assertTrue(boolean2);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0.4, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(boolean2 == boolean1);
      
      lineAndShapeRenderer0.setSeriesLinesVisible(10, (Boolean) null);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0.4, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      
      boolean boolean3 = lineAndShapeRenderer0.getDefaultShapesVisible();
      assertFalse(boolean3);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0.4, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      lineAndShapeRenderer0.setItemMargin(0.0);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      
      boolean boolean4 = lineAndShapeRenderer0.getDefaultShapesVisible();
      assertFalse(boolean4);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      
      lineAndShapeRenderer0.setUseSeriesOffset(true);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      
      lineAndShapeRenderer0.setSeriesShapesFilled(0, (Boolean) null);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      
      boolean boolean5 = lineAndShapeRenderer0.getUseSeriesOffset();
      assertTrue(boolean5);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertNotNull(lineAndShapeRenderer0);
      
      Boolean boolean0 = lineAndShapeRenderer0.getSeriesShapesVisible((-682));
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertNull(boolean0);
      
      boolean boolean1 = Boolean.logicalAnd(true, true);
      assertTrue(boolean1);
      
      boolean boolean2 = lineAndShapeRenderer0.equals((Object) null);
      assertFalse(boolean2);
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(boolean2 == boolean1);
      
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(categoryStepRenderer0.getStagger());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertTrue(categoryStepRenderer0.getDefaultCreateEntities());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisible());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(categoryStepRenderer0.getDefaultItemLabelsVisible());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(categoryStepRenderer0);
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(categoryStepRenderer0.getStagger());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertTrue(categoryStepRenderer0.getDefaultCreateEntities());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisible());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(categoryStepRenderer0.getDefaultItemLabelsVisible());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-1), categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertFalse(categoryItemRendererState0.getElementHinting());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertNotNull(categoryItemRendererState0);
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getPlotArea();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNull(rectangle2D0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangePannable());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertTrue(categoryPlot0.isNotify());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertNull(categoryPlot0.getNoDataMessage());
      assertNotNull(categoryPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      assertEquals("", categoryAxis0.getLabel());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertNotNull(categoryAxis0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      NumberAxis numberAxis0 = new NumberAxis();
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertNull(numberAxis0.getLabel());
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNotNull(numberAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.drawItem((Graphics2D) null, categoryItemRendererState0, (Rectangle2D) null, categoryPlot0, categoryAxis0, numberAxis0, defaultStatisticalCategoryDataset0, 0, 127, (-5775));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, false);
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertNotNull(lineAndShapeRenderer0);
      
      PolarPlot polarPlot0 = new PolarPlot();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertFalse(polarPlot0.isCounterClockwise());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertNull(polarPlot0.getNoDataMessage());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, polarPlot0.getAxisCount());
      assertEquals(20, polarPlot0.getMargin());
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isOutlineVisible());
      assertTrue(polarPlot0.isNotify());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertFalse(polarPlot0.isSubplot());
      assertEquals(1, polarPlot0.getDatasetCount());
      assertEquals(PolarAxisLocation.EAST_ABOVE, polarPlot0.getAxisLocation());
      assertFalse(polarPlot0.isDomainZoomable());
      assertTrue(polarPlot0.isRangeZoomable());
      assertNotNull(polarPlot0);
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)polarPlot0.getAngleGridlinePaint();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertFalse(polarPlot0.isCounterClockwise());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertNull(polarPlot0.getNoDataMessage());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, polarPlot0.getAxisCount());
      assertEquals(20, polarPlot0.getMargin());
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isOutlineVisible());
      assertTrue(polarPlot0.isNotify());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertFalse(polarPlot0.isSubplot());
      assertEquals(1, polarPlot0.getDatasetCount());
      assertEquals(PolarAxisLocation.EAST_ABOVE, polarPlot0.getAxisLocation());
      assertFalse(polarPlot0.isDomainZoomable());
      assertTrue(polarPlot0.isRangeZoomable());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertNotNull(color0);
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      lineAndShapeRenderer0.setDefaultLegendTextPaint(color0);
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertFalse(polarPlot0.isCounterClockwise());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertNull(polarPlot0.getNoDataMessage());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, polarPlot0.getAxisCount());
      assertEquals(20, polarPlot0.getMargin());
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isOutlineVisible());
      assertTrue(polarPlot0.isNotify());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertFalse(polarPlot0.isSubplot());
      assertEquals(1, polarPlot0.getDatasetCount());
      assertEquals(PolarAxisLocation.EAST_ABOVE, polarPlot0.getAxisLocation());
      assertFalse(polarPlot0.isDomainZoomable());
      assertTrue(polarPlot0.isRangeZoomable());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      boolean boolean0 = lineAndShapeRenderer0.getDrawOutlines();
      assertTrue(boolean0);
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      
      LegendItem legendItem0 = lineAndShapeRenderer0.getLegendItem(10, 943);
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertNull(legendItem0);
      
      lineAndShapeRenderer0.setAutoPopulateSeriesOutlinePaint(true);
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      
      boolean boolean1 = lineAndShapeRenderer0.getUseSeriesOffset();
      assertFalse(boolean1);
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = lineAndShapeRenderer0.getItemLineVisible(10, (-341));
      assertTrue(boolean2);
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      lineAndShapeRenderer0.setUseFillPaint(true);
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      
      lineAndShapeRenderer0.setDefaultLinesVisible(true);
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      
      boolean boolean3 = lineAndShapeRenderer0.getItemShapeFilled((-2674), (-360));
      assertTrue(boolean3);
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      lineAndShapeRenderer0.setDrawOutlines(false);
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      
      lineAndShapeRenderer0.setSeriesShapesFilled(10, false);
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setItemMargin(1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 0.0 <= margin < 1.0.
         //
         verifyException("org.jfree.chart.renderer.category.LineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, false);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertNotNull(lineAndShapeRenderer0);
      
      boolean boolean0 = lineAndShapeRenderer0.getDrawOutlines();
      assertTrue(boolean0);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("org.jfree.chart.renderer.category.LineAndShapeRenderer");
      assertEquals("org.jfree.chart.renderer.category.LineAndShapeRenderer", subCategoryAxis0.getLabel());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertNotNull(subCategoryAxis0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      Color color0 = (Color)subCategoryAxis0.getLabelPaint();
      assertEquals("org.jfree.chart.renderer.category.LineAndShapeRenderer", subCategoryAxis0.getLabel());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      statisticalLineAndShapeRenderer0.setLegendTextPaint(213, color0);
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals("org.jfree.chart.renderer.category.LineAndShapeRenderer", subCategoryAxis0.getLabel());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setSeriesLinesVisible((-753), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(lineAndShapeRenderer0);
      
      int int0 = 985;
      boolean boolean0 = false;
      int int1 = (-71);
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      assertTrue(defaultXYItemRenderer0.getDefaultShapesFilled());
      assertFalse(defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(defaultXYItemRenderer0.getDrawOutlines());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultXYItemRenderer0.getUseOutlinePaint());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultXYItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultXYItemRenderer0.getUseFillPaint());
      assertTrue(defaultXYItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultXYItemRenderer0.getDefaultShapesVisible());
      assertTrue(defaultXYItemRenderer0.getDefaultLinesVisible());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultXYItemRenderer0.getDefaultCreateEntities());
      assertNotNull(defaultXYItemRenderer0);
      
      Boolean boolean1 = defaultXYItemRenderer0.getSeriesShapesVisible((-71));
      assertTrue(defaultXYItemRenderer0.getDefaultShapesFilled());
      assertFalse(defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(defaultXYItemRenderer0.getDrawOutlines());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultXYItemRenderer0.getUseOutlinePaint());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultXYItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultXYItemRenderer0.getUseFillPaint());
      assertTrue(defaultXYItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultXYItemRenderer0.getDefaultShapesVisible());
      assertTrue(defaultXYItemRenderer0.getDefaultLinesVisible());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultXYItemRenderer0.getDefaultCreateEntities());
      assertNull(boolean1);
      
      boolean boolean2 = Boolean.logicalXor(false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesShapesVisible((-71), (Boolean) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      int int0 = 1437;
      statisticalLineAndShapeRenderer0.setSeriesLinesVisible(1437, true);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      
      Boolean boolean0 = statisticalLineAndShapeRenderer0.getSeriesLinesVisible(1437);
      assertTrue(boolean0);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertNotNull(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("8xv7~Sv");
      assertFalse(boolean1);
      
      boolean boolean2 = Boolean.getBoolean("d~mfM%;!><");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = false;
      boolean boolean4 = Boolean.logicalXor(true, false);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      
      int int1 = Boolean.compare(true, false);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setItemMargin(1437);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 0.0 <= margin < 1.0.
         //
         verifyException("org.jfree.chart.renderer.category.LineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      boolean boolean0 = statisticalLineAndShapeRenderer0.getUseOutlinePaint();
      assertFalse(boolean0);
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDrawOutlines());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer0.getUseOutlinePaint());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertNotNull(xYBlockRenderer0);
      
      PaintScale paintScale0 = xYBlockRenderer0.getPaintScale();
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDrawOutlines());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer0.getUseOutlinePaint());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertNotNull(paintScale0);
      
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertNotNull(dateAxis0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, dateAxis0);
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDrawOutlines());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer0.getUseOutlinePaint());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(VerticalAlignment.CENTER, paintScaleLegend0.getVerticalAlignment());
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, paintScaleLegend0.getHorizontalAlignment());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, paintScaleLegend0.getAxisLocation());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(RectangleEdge.TOP, paintScaleLegend0.getPosition());
      assertNotNull(paintScaleLegend0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(paintScaleLegend0.visible);
      
      BasicStroke basicStroke0 = (BasicStroke)paintScaleLegend0.getStripOutlineStroke();
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDrawOutlines());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer0.getUseOutlinePaint());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(VerticalAlignment.CENTER, paintScaleLegend0.getVerticalAlignment());
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, paintScaleLegend0.getHorizontalAlignment());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, paintScaleLegend0.getAxisLocation());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(RectangleEdge.TOP, paintScaleLegend0.getPosition());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(paintScaleLegend0.visible);
      
      statisticalLineAndShapeRenderer0.setErrorIndicatorStroke(basicStroke0);
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDrawOutlines());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer0.getUseOutlinePaint());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(VerticalAlignment.CENTER, paintScaleLegend0.getVerticalAlignment());
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, paintScaleLegend0.getHorizontalAlignment());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, paintScaleLegend0.getAxisLocation());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(RectangleEdge.TOP, paintScaleLegend0.getPosition());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(paintScaleLegend0.visible);
      
      boolean boolean1 = statisticalLineAndShapeRenderer0.getSeriesShapesFilled(2069);
      assertTrue(boolean1);
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = statisticalLineAndShapeRenderer0.getUseSeriesOffset();
      assertFalse(boolean2);
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalLineAndShapeRenderer0.getDefaultToolTipGenerator();
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertNull(categoryToolTipGenerator0);
      
      statisticalLineAndShapeRenderer0.setDefaultToolTipGenerator((CategoryToolTipGenerator) null);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      
      Shape shape0 = statisticalLineAndShapeRenderer0.getLegendShape(0);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertNull(shape0);
      
      boolean boolean0 = statisticalLineAndShapeRenderer0.getUseFillPaint();
      assertFalse(boolean0);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      
      boolean boolean1 = statisticalLineAndShapeRenderer0.getItemLineVisible(0, 0);
      assertFalse(boolean1);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(boolean1 == boolean0);
      
      Color color0 = (Color)statisticalLineAndShapeRenderer0.lookupSeriesPaint((-1));
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16776961), color0.getRGB());
      assertNotNull(color0);
      
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer1 = (StatisticalLineAndShapeRenderer)statisticalLineAndShapeRenderer0.clone();
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(statisticalLineAndShapeRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer1.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer1.getUseSeriesOffset());
      assertFalse(statisticalLineAndShapeRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalLineAndShapeRenderer1.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer1.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer1.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer1.getUseFillPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer1.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, statisticalLineAndShapeRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer1.getDefaultItemLabelsVisible());
      assertTrue(statisticalLineAndShapeRenderer1.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer1.getRowCount());
      assertEquals(2, statisticalLineAndShapeRenderer1.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer1.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer1.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, statisticalLineAndShapeRenderer1.getDefaultEntityRadius());
      assertFalse(statisticalLineAndShapeRenderer1.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer1.getDefaultLinesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer1.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer1.getDefaultShapesVisible());
      assertNotNull(statisticalLineAndShapeRenderer1);
      assertNotSame(statisticalLineAndShapeRenderer0, statisticalLineAndShapeRenderer1);
      assertNotSame(statisticalLineAndShapeRenderer1, statisticalLineAndShapeRenderer0);
      assertTrue(statisticalLineAndShapeRenderer1.equals((Object)statisticalLineAndShapeRenderer0));
      
      statisticalLineAndShapeRenderer0.setUseSeriesOffset(false);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertNotSame(statisticalLineAndShapeRenderer0, statisticalLineAndShapeRenderer1);
      assertTrue(statisticalLineAndShapeRenderer0.equals((Object)statisticalLineAndShapeRenderer1));
      
      boolean boolean2 = statisticalLineAndShapeRenderer0.getItemShapeVisible(0, 0);
      assertFalse(boolean2);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertNotSame(statisticalLineAndShapeRenderer0, statisticalLineAndShapeRenderer1);
      assertTrue(statisticalLineAndShapeRenderer0.equals((Object)statisticalLineAndShapeRenderer1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Boolean boolean3 = statisticalLineAndShapeRenderer0.getSeriesCreateEntities((-2417));
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertNull(boolean3);
      assertNotSame(statisticalLineAndShapeRenderer0, statisticalLineAndShapeRenderer1);
      assertTrue(statisticalLineAndShapeRenderer0.equals((Object)statisticalLineAndShapeRenderer1));
      
      boolean boolean4 = Boolean.getBoolean("N-';\"G\")V:Yo;naX,HL");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      
      boolean boolean5 = Boolean.logicalAnd(true, false);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      
      statisticalLineAndShapeRenderer0.setSeriesLinesVisible(335, (Boolean) null);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertNotSame(statisticalLineAndShapeRenderer0, statisticalLineAndShapeRenderer1);
      assertTrue(statisticalLineAndShapeRenderer0.equals((Object)statisticalLineAndShapeRenderer1));
      
      statisticalLineAndShapeRenderer0.setUseFillPaint(true);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertNotSame(statisticalLineAndShapeRenderer0, statisticalLineAndShapeRenderer1);
      assertTrue(statisticalLineAndShapeRenderer0.equals((Object)statisticalLineAndShapeRenderer1));
      
      boolean boolean6 = statisticalLineAndShapeRenderer0.getUseOutlinePaint();
      assertFalse(boolean6);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertNotSame(statisticalLineAndShapeRenderer0, statisticalLineAndShapeRenderer1);
      assertTrue(statisticalLineAndShapeRenderer0.equals((Object)statisticalLineAndShapeRenderer1));
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      
      boolean boolean7 = statisticalLineAndShapeRenderer0.getDefaultLinesVisible();
      assertFalse(boolean7);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertNotSame(statisticalLineAndShapeRenderer0, statisticalLineAndShapeRenderer1);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean6);
      
      statisticalLineAndShapeRenderer0.setItemMargin(0.0);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertNotSame(statisticalLineAndShapeRenderer0, statisticalLineAndShapeRenderer1);
      assertTrue(statisticalLineAndShapeRenderer0.equals((Object)statisticalLineAndShapeRenderer1));
      
      Boolean boolean8 = statisticalLineAndShapeRenderer0.getSeriesLinesVisible(45);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertNull(boolean8);
      assertNotSame(statisticalLineAndShapeRenderer0, statisticalLineAndShapeRenderer1);
      assertTrue(statisticalLineAndShapeRenderer0.equals((Object)statisticalLineAndShapeRenderer1));
      
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setItemMargin((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 0.0 <= margin < 1.0.
         //
         verifyException("org.jfree.chart.renderer.category.LineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      boolean boolean0 = statisticalLineAndShapeRenderer0.getUseOutlinePaint();
      assertFalse(boolean0);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertNotNull(lineAndShapeRenderer0);
      
      Shape shape0 = lineAndShapeRenderer0.getLegendShape(0);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertNull(shape0);
      
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      assertNotNull(standardCategorySeriesLabelGenerator0);
      
      lineAndShapeRenderer0.setLegendItemLabelGenerator(standardCategorySeriesLabelGenerator0);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      
      Boolean boolean0 = lineAndShapeRenderer0.getSeriesShapesVisible(365);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertNull(boolean0);
      
      Boolean boolean1 = lineAndShapeRenderer0.getSeriesLinesVisible(365);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertNull(boolean1);
      
      lineAndShapeRenderer0.setDefaultShapesVisible(true);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertNotNull(defaultPolarItemRenderer0);
      
      Boolean boolean2 = defaultPolarItemRenderer0.getSeriesVisibleInLegend(365);
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertNull(boolean2);
      
      defaultPolarItemRenderer0.setLegendShape(411, lineAndShapeRenderer0.DEFAULT_SHAPE);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      
      boolean boolean3 = Boolean.logicalAnd(false, false);
      assertFalse(boolean3);
      
      lineAndShapeRenderer0.setSeriesShapesFilled(3603, (Boolean) null);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      
      boolean boolean4 = lineAndShapeRenderer0.getUseSeriesOffset();
      assertFalse(boolean4);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(boolean4 == boolean3);
      
      boolean boolean5 = lineAndShapeRenderer0.getItemLineVisible(3603, 365);
      assertFalse(boolean5);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer1 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer1.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer1.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer1.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer1.getDrawOutlineWhenFilled());
      assertFalse(defaultPolarItemRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer1.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer1.getShapesVisible());
      assertFalse(defaultPolarItemRenderer1.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer1.getConnectFirstAndLastPoint());
      assertEquals(2.0, defaultPolarItemRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer1.getDefaultCreateEntities());
      assertEquals(3, defaultPolarItemRenderer1.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertNotNull(defaultPolarItemRenderer1);
      assertTrue(defaultPolarItemRenderer1.equals((Object)defaultPolarItemRenderer0));
      
      Boolean boolean6 = defaultPolarItemRenderer1.getSeriesVisibleInLegend(0);
      assertTrue(defaultPolarItemRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer1.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer1.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer1.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer1.getDrawOutlineWhenFilled());
      assertFalse(defaultPolarItemRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer1.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer1.getShapesVisible());
      assertFalse(defaultPolarItemRenderer1.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer1.getConnectFirstAndLastPoint());
      assertEquals(2.0, defaultPolarItemRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer1.getDefaultCreateEntities());
      assertEquals(3, defaultPolarItemRenderer1.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertNull(boolean6);
      assertNotSame(defaultPolarItemRenderer1, defaultPolarItemRenderer0);
      assertTrue(defaultPolarItemRenderer1.equals((Object)defaultPolarItemRenderer0));
      
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesLinesVisible((-6), (Boolean) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      Boolean boolean0 = statisticalLineAndShapeRenderer0.getSeriesCreateEntities((-787));
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertNull(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("Requires 0.0 <= margin < 1.0.");
      assertFalse(boolean1);
      
      boolean boolean2 = Boolean.logicalAnd(true, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = Boolean.logicalAnd(false, true);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = Boolean.logicalOr(true, true);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      
      statisticalLineAndShapeRenderer0.setSeriesShapesFilled(5041, (Boolean) null);
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      
      boolean boolean5 = statisticalLineAndShapeRenderer0.getItemShapeVisible(0, 5041);
      assertTrue(boolean5);
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setItemMargin(5041);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 0.0 <= margin < 1.0.
         //
         verifyException("org.jfree.chart.renderer.category.LineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertNotNull(lineAndShapeRenderer0);
      
      int int0 = (-2913);
      lineAndShapeRenderer0.setItemLabelAnchorOffset((-2913));
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals((-2913.0), lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesShapesVisible((-2913), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertNotNull(lineAndShapeRenderer0);
      
      int int0 = lineAndShapeRenderer0.getPassCount();
      assertEquals(2, int0);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertNotNull(lineAndShapeRenderer0);
      
      lineAndShapeRenderer0.setAutoPopulateSeriesShape(true);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = lineAndShapeRenderer0.getSeriesToolTipGenerator((-1913));
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertNull(categoryToolTipGenerator0);
      
      LineAndShapeRenderer lineAndShapeRenderer1 = (LineAndShapeRenderer)lineAndShapeRenderer0.clone();
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer1.getColumnCount());
      assertFalse(lineAndShapeRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer1.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer1.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer1.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer1.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer1.getAutoPopulateSeriesShape());
      assertEquals(3, lineAndShapeRenderer1.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer1.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer1.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer1.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer1.getUseFillPaint());
      assertFalse(lineAndShapeRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, lineAndShapeRenderer1.getPassCount());
      assertTrue(lineAndShapeRenderer1.getDefaultCreateEntities());
      assertEquals(2.0, lineAndShapeRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer1.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer1.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer1.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer1.getDrawOutlines());
      assertFalse(lineAndShapeRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer1.getAutoPopulateSeriesStroke());
      assertNotNull(lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer1, lineAndShapeRenderer0);
      assertTrue(lineAndShapeRenderer1.equals((Object)lineAndShapeRenderer0));
      
      lineAndShapeRenderer0.setDefaultToolTipGenerator((CategoryToolTipGenerator) null, false);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
      
      LineAndShapeRenderer lineAndShapeRenderer2 = (LineAndShapeRenderer)lineAndShapeRenderer0.clone();
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer2.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer2.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer2.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer2.getDefaultItemLabelsVisible());
      assertEquals(0, lineAndShapeRenderer2.getColumnCount());
      assertTrue(lineAndShapeRenderer2.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer2.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer2.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer2.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer2.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer2.getDefaultSeriesVisible());
      assertFalse(lineAndShapeRenderer2.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer2.getDrawOutlines());
      assertFalse(lineAndShapeRenderer2.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer2.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer2.getAutoPopulateSeriesPaint());
      assertEquals(2, lineAndShapeRenderer2.getPassCount());
      assertTrue(lineAndShapeRenderer2.getDefaultCreateEntities());
      assertEquals(2.0, lineAndShapeRenderer2.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer2.getUseFillPaint());
      assertEquals(3, lineAndShapeRenderer2.getDefaultEntityRadius());
      assertEquals(0.0, lineAndShapeRenderer2.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer2.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineAndShapeRenderer2.getRowCount());
      assertNotNull(lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer2, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer2, lineAndShapeRenderer0);
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
      assertTrue(lineAndShapeRenderer2.equals((Object)lineAndShapeRenderer0));
      assertTrue(lineAndShapeRenderer2.equals((Object)lineAndShapeRenderer1));
      
      boolean boolean0 = lineAndShapeRenderer0.equals(lineAndShapeRenderer2);
      assertTrue(boolean0);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer2.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer2.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer2.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer2.getDefaultItemLabelsVisible());
      assertEquals(0, lineAndShapeRenderer2.getColumnCount());
      assertTrue(lineAndShapeRenderer2.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer2.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer2.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer2.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer2.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer2.getDefaultSeriesVisible());
      assertFalse(lineAndShapeRenderer2.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer2.getDrawOutlines());
      assertFalse(lineAndShapeRenderer2.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer2.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer2.getAutoPopulateSeriesPaint());
      assertEquals(2, lineAndShapeRenderer2.getPassCount());
      assertTrue(lineAndShapeRenderer2.getDefaultCreateEntities());
      assertEquals(2.0, lineAndShapeRenderer2.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer2.getUseFillPaint());
      assertEquals(3, lineAndShapeRenderer2.getDefaultEntityRadius());
      assertEquals(0.0, lineAndShapeRenderer2.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer2.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineAndShapeRenderer2.getRowCount());
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer2, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer2, lineAndShapeRenderer0);
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer2));
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
      assertTrue(lineAndShapeRenderer2.equals((Object)lineAndShapeRenderer0));
      assertTrue(lineAndShapeRenderer2.equals((Object)lineAndShapeRenderer1));
      
      LineAndShapeRenderer lineAndShapeRenderer3 = (LineAndShapeRenderer)lineAndShapeRenderer0.clone();
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer3.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer3.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer3.getRowCount());
      assertTrue(lineAndShapeRenderer3.getDefaultSeriesVisible());
      assertFalse(lineAndShapeRenderer3.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer3.getDefaultLinesVisible());
      assertEquals(0.0, lineAndShapeRenderer3.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer3.getUseFillPaint());
      assertFalse(lineAndShapeRenderer3.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, lineAndShapeRenderer3.getPassCount());
      assertFalse(lineAndShapeRenderer3.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer3.getDefaultItemLabelsVisible());
      assertEquals(2.0, lineAndShapeRenderer3.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer3.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer3.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer3.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer3.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer3.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer3.getDrawOutlines());
      assertEquals(0, lineAndShapeRenderer3.getColumnCount());
      assertTrue(lineAndShapeRenderer3.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer3.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer3.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer3.getDefaultEntityRadius());
      assertNotNull(lineAndShapeRenderer3);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer3);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer3, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer3, lineAndShapeRenderer0);
      assertNotSame(lineAndShapeRenderer3, lineAndShapeRenderer1);
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer2));
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
      assertTrue(lineAndShapeRenderer3.equals((Object)lineAndShapeRenderer0));
      assertTrue(lineAndShapeRenderer3.equals((Object)lineAndShapeRenderer1));
      assertTrue(lineAndShapeRenderer3.equals((Object)lineAndShapeRenderer2));
      
      boolean boolean1 = lineAndShapeRenderer0.equals(lineAndShapeRenderer3);
      assertTrue(boolean1);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer3.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer3.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer3.getRowCount());
      assertTrue(lineAndShapeRenderer3.getDefaultSeriesVisible());
      assertFalse(lineAndShapeRenderer3.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer3.getDefaultLinesVisible());
      assertEquals(0.0, lineAndShapeRenderer3.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer3.getUseFillPaint());
      assertFalse(lineAndShapeRenderer3.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, lineAndShapeRenderer3.getPassCount());
      assertFalse(lineAndShapeRenderer3.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer3.getDefaultItemLabelsVisible());
      assertEquals(2.0, lineAndShapeRenderer3.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer3.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer3.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer3.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer3.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer3.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer3.getDrawOutlines());
      assertEquals(0, lineAndShapeRenderer3.getColumnCount());
      assertTrue(lineAndShapeRenderer3.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer3.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer3.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer3.getDefaultEntityRadius());
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer3);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer3, lineAndShapeRenderer2);
      assertNotSame(lineAndShapeRenderer3, lineAndShapeRenderer0);
      assertNotSame(lineAndShapeRenderer3, lineAndShapeRenderer1);
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer2));
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer3));
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
      assertTrue(lineAndShapeRenderer3.equals((Object)lineAndShapeRenderer0));
      assertTrue(lineAndShapeRenderer3.equals((Object)lineAndShapeRenderer1));
      assertTrue(lineAndShapeRenderer3.equals((Object)lineAndShapeRenderer2));
      assertTrue(boolean1 == boolean0);
      
      Boolean boolean2 = lineAndShapeRenderer0.getSeriesLinesVisible((-1913));
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertNull(boolean2);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer3);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer2);
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer2));
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer3));
      assertTrue(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer1));
      
      lineAndShapeRenderer0.setSeriesShapesVisible(1367, true);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer1);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer3);
      assertNotSame(lineAndShapeRenderer0, lineAndShapeRenderer2);
      assertFalse(lineAndShapeRenderer0.equals((Object)lineAndShapeRenderer2));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesFilled());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getDefaultLinesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(defaultCategoryItemRenderer0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultCategoryItemRenderer0.lookupLegendShape(2);
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesFilled());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getDefaultLinesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      
      defaultCategoryItemRenderer0.setSeriesShapesVisible(1388, true);
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesFilled());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getDefaultLinesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.setItemMargin(1246.5574286854);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 0.0 <= margin < 1.0.
         //
         verifyException("org.jfree.chart.renderer.category.LineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      statisticalLineAndShapeRenderer0.setUseSeriesOffset(false);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      
      statisticalLineAndShapeRenderer0.setUseFillPaint(false);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      Boolean boolean0 = new Boolean("9");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      statisticalLineAndShapeRenderer0.setSeriesShapesVisible(913, boolean0);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setSeriesShapesVisible((-1288), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("Requires 0.0 <= margin < 1.0.");
      assertNotNull(standardCategoryURLGenerator0);
      
      statisticalLineAndShapeRenderer0.setDefaultItemURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, false);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      
      boolean boolean0 = statisticalLineAndShapeRenderer0.getDefaultShapesVisible();
      assertTrue(boolean0);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      
      boolean boolean1 = statisticalLineAndShapeRenderer0.getItemLineVisible((-409), (-409));
      assertTrue(boolean1);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = false;
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      int int0 = (-2294);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setSeriesShapesFilled((-2294), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertFalse(defaultCategoryItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultCategoryItemRenderer0.getDefaultLinesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesFilled());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertNotNull(defaultCategoryItemRenderer0);
      
      DefaultCategoryItemRenderer defaultCategoryItemRenderer1 = (DefaultCategoryItemRenderer)defaultCategoryItemRenderer0.clone();
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertFalse(defaultCategoryItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultCategoryItemRenderer0.getDefaultLinesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesFilled());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertTrue(defaultCategoryItemRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultCategoryItemRenderer1.getUseOutlinePaint());
      assertEquals(3, defaultCategoryItemRenderer1.getDefaultEntityRadius());
      assertEquals(0, defaultCategoryItemRenderer1.getRowCount());
      assertTrue(defaultCategoryItemRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer1.getDefaultSeriesVisible());
      assertTrue(defaultCategoryItemRenderer1.getDefaultShapesVisible());
      assertTrue(defaultCategoryItemRenderer1.getDefaultCreateEntities());
      assertTrue(defaultCategoryItemRenderer1.getDrawOutlines());
      assertTrue(defaultCategoryItemRenderer1.getDefaultSeriesVisibleInLegend());
      assertEquals(0, defaultCategoryItemRenderer1.getColumnCount());
      assertTrue(defaultCategoryItemRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(0.0, defaultCategoryItemRenderer1.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultCategoryItemRenderer1.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer1.getDefaultShapesFilled());
      assertTrue(defaultCategoryItemRenderer1.getAutoPopulateSeriesShape());
      assertTrue(defaultCategoryItemRenderer1.getDefaultLinesVisible());
      assertEquals(2.0, defaultCategoryItemRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, defaultCategoryItemRenderer1.getPassCount());
      assertFalse(defaultCategoryItemRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultCategoryItemRenderer1.getDefaultItemLabelsVisible());
      assertFalse(defaultCategoryItemRenderer1.getUseFillPaint());
      assertFalse(defaultCategoryItemRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(defaultCategoryItemRenderer1);
      assertNotSame(defaultCategoryItemRenderer0, defaultCategoryItemRenderer1);
      assertNotSame(defaultCategoryItemRenderer1, defaultCategoryItemRenderer0);
      assertTrue(defaultCategoryItemRenderer1.equals((Object)defaultCategoryItemRenderer0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      statisticalLineAndShapeRenderer0.setDefaultLinesVisible(true);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertNotNull(lineAndShapeRenderer0);
      
      boolean boolean0 = lineAndShapeRenderer0.getUseFillPaint();
      assertFalse(boolean0);
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      
      Boolean boolean1 = lineAndShapeRenderer0.getSeriesShapesVisible(0);
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(lineAndShapeRenderer0);
      
      lineAndShapeRenderer0.setUseOutlinePaint(false);
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      
      int int0 = 0;
      boolean boolean0 = lineAndShapeRenderer0.getSeriesShapesFilled(0);
      assertTrue(boolean0);
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      
      BasicStroke basicStroke0 = (BasicStroke)lineAndShapeRenderer0.lookupSeriesStroke(0);
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      lineAndShapeRenderer0.setAutoPopulateSeriesShape(true);
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      
      boolean boolean1 = lineAndShapeRenderer0.getItemShapeVisible(3836, 366);
      assertTrue(boolean1);
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(boolean1 == boolean0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(3836, 366, 0, 3836);
      assertEquals(3836.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(4202.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3836.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3836.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(2284.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(366.0, rectangle2D_Double0.getMinY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(366.0, rectangle2D_Double0.y, 0.01);
      assertEquals(3836.0, rectangle2D_Double0.x, 0.01);
      assertEquals(3836.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertEquals(3836.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(4202.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3836.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3836.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(2284.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(366.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(2284.0, rectangle0.getCenterY(), 0.01);
      assertEquals(3836.0, rectangle0.getHeight(), 0.01);
      assertEquals(3836.0, rectangle0.getX(), 0.01);
      assertEquals(3836.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(4202.0, rectangle0.getMaxY(), 0.01);
      assertEquals(3836.0, rectangle0.getCenterX(), 0.01);
      assertEquals(3836.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(366.0, rectangle0.getY(), 0.01);
      assertEquals(366.0, rectangle0.getMinY(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(366.0, rectangle2D_Double0.y, 0.01);
      assertEquals(3836.0, rectangle2D_Double0.x, 0.01);
      assertEquals(3836.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(3836, rectangle0.x);
      assertEquals(366, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(3836, rectangle0.height);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle0.createIntersection(rectangle2D_Double0);
      assertEquals(3836.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(4202.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3836.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3836.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(2284.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(366.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(2284.0, rectangle0.getCenterY(), 0.01);
      assertEquals(3836.0, rectangle0.getHeight(), 0.01);
      assertEquals(3836.0, rectangle0.getX(), 0.01);
      assertEquals(3836.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(4202.0, rectangle0.getMaxY(), 0.01);
      assertEquals(3836.0, rectangle0.getCenterX(), 0.01);
      assertEquals(3836.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(366.0, rectangle0.getY(), 0.01);
      assertEquals(366.0, rectangle0.getMinY(), 0.01);
      assertEquals(4202.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(3836.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(3836.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(3836.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(2284.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(366.0, rectangle2D_Double1.getMinY(), 0.01);
      assertNotNull(rectangle2D_Double1);
      assertEquals(366.0, rectangle2D_Double0.y, 0.01);
      assertEquals(3836.0, rectangle2D_Double0.x, 0.01);
      assertEquals(3836.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(3836, rectangle0.x);
      assertEquals(366, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(3836, rectangle0.height);
      assertEquals(3836.0, rectangle2D_Double1.x, 0.01);
      assertEquals(366.0, rectangle2D_Double1.y, 0.01);
      assertEquals(3836.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      chartRenderingInfo0.setChartArea(rectangle2D_Double1);
      assertEquals(3836.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(4202.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3836.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3836.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(2284.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(366.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(2284.0, rectangle0.getCenterY(), 0.01);
      assertEquals(3836.0, rectangle0.getHeight(), 0.01);
      assertEquals(3836.0, rectangle0.getX(), 0.01);
      assertEquals(3836.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(4202.0, rectangle0.getMaxY(), 0.01);
      assertEquals(3836.0, rectangle0.getCenterX(), 0.01);
      assertEquals(3836.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(366.0, rectangle0.getY(), 0.01);
      assertEquals(366.0, rectangle0.getMinY(), 0.01);
      assertEquals(4202.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(3836.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(3836.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(3836.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(2284.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(366.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(366.0, rectangle2D_Double0.y, 0.01);
      assertEquals(3836.0, rectangle2D_Double0.x, 0.01);
      assertEquals(3836.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(3836, rectangle0.x);
      assertEquals(366, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(3836, rectangle0.height);
      assertEquals(3836.0, rectangle2D_Double1.x, 0.01);
      assertEquals(366.0, rectangle2D_Double1.y, 0.01);
      assertEquals(3836.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      boolean boolean2 = chartRenderingInfo0.equals(lineAndShapeRenderer0);
      assertFalse(boolean2);
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      CategoryItemRendererState categoryItemRendererState0 = lineAndShapeRenderer0.createState(plotRenderingInfo0);
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertFalse(categoryItemRendererState0.getElementHinting());
      assertEquals((-1), categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertNotNull(categoryItemRendererState0);
      
      Boolean boolean3 = Boolean.valueOf(true);
      assertTrue(boolean3);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      
      boolean boolean4 = Boolean.getBoolean("Requires 0.0 <= margin < 1.0.");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesShapesFilled((-1156), boolean3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      statisticalLineAndShapeRenderer0.setSeriesShapesFilled(234, false);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      
      boolean boolean0 = statisticalLineAndShapeRenderer0.getSeriesShapesFilled(234);
      assertFalse(boolean0);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      
      boolean boolean1 = statisticalLineAndShapeRenderer0.getUseFillPaint();
      assertFalse(boolean1);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertNotNull(lineAndShapeRenderer0);
      
      boolean boolean0 = lineAndShapeRenderer0.getUseFillPaint();
      assertFalse(boolean0);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      
      boolean boolean1 = lineAndShapeRenderer0.getItemShapeFilled(0, (-1983));
      assertTrue(boolean1);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      statisticalLineAndShapeRenderer0.setDrawOutlines(false);
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultCategoryItemRenderer0.getDefaultLinesVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertNotNull(defaultCategoryItemRenderer0);
      
      defaultCategoryItemRenderer0.setAutoPopulateSeriesFillPaint(false);
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultCategoryItemRenderer0.getDefaultLinesVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      
      boolean boolean0 = defaultCategoryItemRenderer0.getDefaultShapesFilled();
      assertTrue(boolean0);
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultCategoryItemRenderer0.getDefaultLinesVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      
      defaultCategoryItemRenderer0.setDefaultShapesVisible(true);
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultCategoryItemRenderer0.getDefaultLinesVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertNotNull(lineAndShapeRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)lineAndShapeRenderer0.lookupSeriesOutlineStroke(0);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotNull(basicStroke0);
      
      Paint paint0 = lineAndShapeRenderer0.lookupLegendTextPaint((-1292));
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertNull(paint0);
      
      CategoryItemRendererState categoryItemRendererState0 = lineAndShapeRenderer0.createState((PlotRenderingInfo) null);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertEquals((-1), categoryItemRendererState0.getVisibleSeriesCount());
      assertFalse(categoryItemRendererState0.getElementHinting());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertNotNull(categoryItemRendererState0);
      
      double double0 = lineAndShapeRenderer0.getItemMargin();
      assertEquals(0.0, double0, 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      
      boolean boolean0 = lineAndShapeRenderer0.getDefaultLinesVisible();
      assertTrue(boolean0);
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertFalse(defaultCategoryItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getDefaultLinesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getDefaultCreateEntities());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(defaultCategoryItemRenderer0);
      
      defaultCategoryItemRenderer0.setSeriesLinesVisible(377, true);
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertFalse(defaultCategoryItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getDefaultLinesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getDefaultCreateEntities());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      assertFalse(defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultXYItemRenderer0.getDefaultShapesFilled());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultXYItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultXYItemRenderer0.getDrawOutlines());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultXYItemRenderer0.getDefaultShapesVisible());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertTrue(defaultXYItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultXYItemRenderer0.getUseFillPaint());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultXYItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultXYItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getDefaultLinesVisible());
      assertNotNull(defaultXYItemRenderer0);
      
      Boolean boolean0 = defaultXYItemRenderer0.getSeriesShapesFilled((-3562));
      assertFalse(defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultXYItemRenderer0.getDefaultShapesFilled());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultXYItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultXYItemRenderer0.getDrawOutlines());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultXYItemRenderer0.getDefaultShapesVisible());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertTrue(defaultXYItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultXYItemRenderer0.getUseFillPaint());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultXYItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultXYItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getDefaultLinesVisible());
      assertNull(boolean0);
      
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setSeriesShapesFilled((-1669), (Boolean) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      boolean boolean0 = statisticalLineAndShapeRenderer0.getSeriesShapesFilled(192);
      assertTrue(boolean0);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      
      boolean boolean1 = statisticalLineAndShapeRenderer0.getItemLineVisible((-1156), 192);
      assertTrue(boolean1);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      boolean boolean0 = statisticalLineAndShapeRenderer0.getItemShapeVisible((-1592), (-1592));
      assertFalse(boolean0);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertFalse(defaultCategoryItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesFilled());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDefaultLinesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisible());
      assertNotNull(defaultCategoryItemRenderer0);
      
      Boolean boolean0 = defaultCategoryItemRenderer0.getSeriesShapesVisible((-421));
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertFalse(defaultCategoryItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesFilled());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDefaultLinesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDefaultSeriesVisible());
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(lineAndShapeRenderer0);
      
      boolean boolean0 = lineAndShapeRenderer0.getDefaultShapesVisible();
      assertFalse(boolean0);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertNotNull(lineAndShapeRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)lineAndShapeRenderer0.lookupSeriesOutlineStroke(0);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotNull(basicStroke0);
      
      Paint paint0 = lineAndShapeRenderer0.lookupLegendTextPaint((-1292));
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertNull(paint0);
      
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState((PlotRenderingInfo) null);
      assertFalse(categoryItemRendererState0.getElementHinting());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertEquals((-1), categoryItemRendererState0.getVisibleSeriesCount());
      assertNotNull(categoryItemRendererState0);
      
      double double0 = lineAndShapeRenderer0.getItemMargin();
      assertEquals(0.0, double0, 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      
      boolean boolean0 = lineAndShapeRenderer0.getDefaultLinesVisible();
      assertTrue(boolean0);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(lineAndShapeRenderer0);
      
      Boolean boolean0 = lineAndShapeRenderer0.getSeriesShapesVisible((-682));
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNull(boolean0);
      
      boolean boolean1 = Boolean.logicalAnd(false, false);
      assertFalse(boolean1);
      
      boolean boolean2 = lineAndShapeRenderer0.equals((Object) null);
      assertFalse(boolean2);
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boolean2 == boolean1);
      
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      assertTrue(categoryStepRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisible());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(categoryStepRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(categoryStepRenderer0.getStagger());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(categoryStepRenderer0);
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      assertTrue(categoryStepRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisible());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(categoryStepRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(categoryStepRenderer0.getStagger());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-1), categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertFalse(categoryItemRendererState0.getElementHinting());
      assertNotNull(categoryItemRendererState0);
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getPlotArea();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNull(rectangle2D0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertTrue(categoryPlot0.isNotify());
      assertNotNull(categoryPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals("", categoryAxis0.getLabel());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertNotNull(categoryAxis0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      NumberAxis numberAxis0 = new NumberAxis();
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNotNull(numberAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      lineAndShapeRenderer0.drawItem((Graphics2D) null, categoryItemRendererState0, (Rectangle2D) null, categoryPlot0, categoryAxis0, numberAxis0, defaultStatisticalCategoryDataset0, 0, 135, (-5759));
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(categoryStepRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisible());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(categoryStepRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertTrue(categoryStepRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(categoryStepRenderer0.getStagger());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-1), categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertFalse(categoryItemRendererState0.getElementHinting());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals("", categoryAxis0.getLabel());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      Color color0 = (Color)statisticalLineAndShapeRenderer0.lookupSeriesOutlinePaint(1073);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertNotNull(color0);
      
      statisticalLineAndShapeRenderer0.setDefaultShapesFilled(true);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      
      Boolean boolean0 = statisticalLineAndShapeRenderer0.getSeriesCreateEntities((-787));
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertNull(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("Requires0.0 <= margin < 1.0.");
      assertFalse(boolean1);
      
      boolean boolean2 = Boolean.logicalAnd(true, true);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = Boolean.logicalAnd(false, true);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      statisticalLineAndShapeRenderer0.setSeriesShapesFilled(5041, (Boolean) null);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)statisticalLineAndShapeRenderer0.lookupLegendShape(0);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      
      boolean boolean4 = statisticalLineAndShapeRenderer0.getItemShapeVisible(0, 5041);
      assertTrue(boolean4);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setItemMargin(5041);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 0.0 <= margin < 1.0.
         //
         verifyException("org.jfree.chart.renderer.category.LineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      double double0 = statisticalLineAndShapeRenderer0.getItemMargin();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      
      statisticalLineAndShapeRenderer0.setDrawOutlines(true);
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.0, (double) statisticalLineAndShapeRenderer0.ZERO, (double) statisticalLineAndShapeRenderer0.ZERO);
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(-0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertNotNull(affineTransform0);
      
      affineTransform0.setToShear(0.0, 402.0);
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultCreateEntities());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(402.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 90, 2145990265);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(90, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2145990265, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertNotNull(slidingGanttCategoryDataset0);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(90, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2145990265, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(spiderWebPlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      
      int int0 = 582;
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getPercentComplete(2145990265, 582, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2145990265, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertNotNull(lineAndShapeRenderer0);
      
      Paint paint0 = lineAndShapeRenderer0.lookupLegendTextPaint(840319688);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertNull(paint0);
      
      lineAndShapeRenderer0.setDefaultLegendTextPaint((Paint) null);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      
      int int0 = lineAndShapeRenderer0.getPassCount();
      assertEquals(2, int0);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      
      boolean boolean0 = lineAndShapeRenderer0.getUseOutlinePaint();
      assertFalse(boolean0);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)lineAndShapeRenderer0.lookupSeriesShape(1073741824);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      
      boolean boolean1 = lineAndShapeRenderer0.getItemShapeVisible(840319688, 840319688);
      assertTrue(boolean1);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(boolean1 == boolean0);
      
      Boolean boolean2 = lineAndShapeRenderer0.getSeriesShapesVisible(840319688);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertNull(boolean2);
      
      int int1 = lineAndShapeRenderer0.getPassCount();
      assertEquals(2, int1);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(int1 == int0);
      
      double double0 = lineAndShapeRenderer0.getItemMargin();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNotNull(defaultKeyedValues2DDataset0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertNotNull(jFreeChart0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2, chartRenderingInfo0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertNotNull(bufferedImage0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertNotNull(sunGraphics2D0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals((-1), sunGraphics2D0.eargb);
      
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double(1.0F, 10, 2, 1.0);
      assertEquals(1.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(11.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(10.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(10.5, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(3.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertNotNull(rectangle2D_Double1);
      assertEquals(1.0, rectangle2D_Double1.x, 0.01);
      assertEquals(2.0, rectangle2D_Double1.width, 0.01);
      assertEquals(1.0, rectangle2D_Double1.height, 0.01);
      assertEquals(10.0, rectangle2D_Double1.y, 0.01);
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertNotNull(point0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      
      Dimension dimension0 = new Dimension();
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)rectangle2D_Double1.createUnion(rectangle0);
      assertEquals(1.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(11.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(10.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(10.5, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(3.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(3.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals(11.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(5.5, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(1.5, rectangle2D_Double2.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double2);
      assertEquals(1.0, rectangle2D_Double1.x, 0.01);
      assertEquals(2.0, rectangle2D_Double1.width, 0.01);
      assertEquals(1.0, rectangle2D_Double1.height, 0.01);
      assertEquals(10.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.y, 0.01);
      assertEquals(3.0, rectangle2D_Double2.width, 0.01);
      assertEquals(11.0, rectangle2D_Double2.height, 0.01);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Requires 0.0 <= margin < 1.0.");
      assertEquals("Requires 0.0 <= margin < 1.0.", subCategoryAxis0.getLabel());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNotNull(subCategoryAxis0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      
      Range range0 = ValueAxis.DEFAULT_RANGE;
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, (double) 0);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.5, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      ModuloAxis moduloAxis0 = new ModuloAxis("#]{-^]n~R\"GFo!UE^", range1);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.5, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAutoRange());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals("#]{-^]n~R\"GFo!UE^", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNotNull(moduloAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, subCategoryAxis0, moduloAxis0, lineAndShapeRenderer0);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals("Requires 0.0 <= margin < 1.0.", subCategoryAxis0.getLabel());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.5, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAutoRange());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals("#]{-^]n~R\"GFo!UE^", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isNotify());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNotNull(categoryPlot0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      CategoryItemRendererState categoryItemRendererState0 = lineAndShapeRenderer0.initialise(sunGraphics2D0, rectangle2D_Double2, categoryPlot0, (-1973), plotRenderingInfo0);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(11.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(10.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(10.5, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(3.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(3.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals(11.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(5.5, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(1.5, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals("Requires 0.0 <= margin < 1.0.", subCategoryAxis0.getLabel());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.5, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAutoRange());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals("#]{-^]n~R\"GFo!UE^", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isNotify());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertFalse(categoryItemRendererState0.getElementHinting());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertNotNull(categoryItemRendererState0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(1.0, rectangle2D_Double1.x, 0.01);
      assertEquals(2.0, rectangle2D_Double1.width, 0.01);
      assertEquals(1.0, rectangle2D_Double1.height, 0.01);
      assertEquals(10.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.y, 0.01);
      assertEquals(3.0, rectangle2D_Double2.width, 0.01);
      assertEquals(11.0, rectangle2D_Double2.height, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.drawItem(sunGraphics2D0, categoryItemRendererState0, rectangle2D_Double1, categoryPlot0, subCategoryAxis0, moduloAxis0, defaultKeyedValues2DDataset0, 0, 1073741824, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(1429L);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getSeriesLinesVisible(2043);
      defaultCategoryItemRenderer0.setSeriesShapesFilled(2043, false);
      Boolean.logicalOr(false, false);
      Boolean.logicalOr(true, true);
      Boolean.logicalOr(true, true);
      Boolean.getBoolean("kT__S%GNB");
      defaultCategoryItemRenderer0.equals((Object) null);
      defaultCategoryItemRenderer0.setSeriesShapesVisible(880, (Boolean) null);
      defaultCategoryItemRenderer0.getItemShapeFilled(2043, 2043);
      defaultCategoryItemRenderer0.clone();
      defaultCategoryItemRenderer0.getItemShapeVisible(37, 244);
      System.setCurrentTimeMillis(1429L);
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      defaultCategoryItemRenderer0.equals(lineAndShapeRenderer0);
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      Color.RGBtoHSB(880, (-809), 2649, (float[]) null);
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(305, systemColor0, 0.75F, 2043, (-2532.83655));
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("", defaultCategoryItemRenderer0.DEFAULT_VALUE_LABEL_FONT, (Plot) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.getSeriesShapesVisible((-682));
      Boolean.logicalAnd(false, false);
      boolean boolean0 = lineAndShapeRenderer0.equals((Object) null);
      assertFalse(boolean0);
      
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      plotRenderingInfo0.getPlotArea();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      NumberAxis numberAxis0 = new NumberAxis();
      lineAndShapeRenderer0.lookupSeriesShape(10);
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      lineAndShapeRenderer0.drawItem((Graphics2D) null, categoryItemRendererState0, (Rectangle2D) null, categoryPlot0, categoryAxis0, numberAxis0, defaultStatisticalCategoryDataset0, 0, 135, (-5759));
      int int0 = lineAndShapeRenderer0.getPassCount();
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, int0);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getItemLineVisible((-1), 2000);
      boolean boolean0 = defaultCategoryItemRenderer0.getItemLineVisible((-939), (-1));
      assertTrue(boolean0);
      
      defaultCategoryItemRenderer0.getSeriesShapesVisible((-1));
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesFilled());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertTrue(defaultCategoryItemRenderer0.getDefaultShapesVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      lineAndShapeRenderer0.setItemMargin(0.0);
      lineAndShapeRenderer0.setDefaultShapesFilled(true);
      lineAndShapeRenderer0.getSeriesVisibleInLegend(2377);
      lineAndShapeRenderer0.setSeriesLinesVisible(2377, (Boolean) null);
      lineAndShapeRenderer0.getLegendItem(2377, 0);
      boolean boolean0 = lineAndShapeRenderer0.equals((Object) null);
      lineAndShapeRenderer0.getSeriesLinesVisible(2377);
      boolean boolean1 = lineAndShapeRenderer0.getUseFillPaint();
      assertTrue(boolean1 == boolean0);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.setSeriesLinesVisible(193, false);
      lineAndShapeRenderer0.lookupLegendShape(193);
      lineAndShapeRenderer0.setUseSeriesOffset(false);
      lineAndShapeRenderer0.setUseFillPaint(false);
      lineAndShapeRenderer0.getDrawOutlines();
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      
      lineAndShapeRenderer0.setUseOutlinePaint(true);
      assertTrue(lineAndShapeRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.setDefaultShapesVisible(false);
      lineAndShapeRenderer0.getItemShapeVisible(2477, 2477);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      lineAndShapeRenderer0.setPlot(combinedDomainCategoryPlot0);
      Integer integer0 = new Integer(2477);
      lineAndShapeRenderer0.getDefaultShapesVisible();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.getLegendItem((-1126), 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      lineAndShapeRenderer0.setDefaultShapesVisible(true);
      lineAndShapeRenderer0.getItemShapeVisible(2477, 2477);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      RectangleInsets rectangleInsets0 = subCategoryAxis0.getLabelInsets();
      categoryAxis0.setTickLabelInsets(rectangleInsets0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      lineAndShapeRenderer0.setPlot(combinedDomainCategoryPlot0);
      lineAndShapeRenderer0.getPassCount();
      lineAndShapeRenderer0.getDefaultShapesVisible();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.getLegendItem((-1126), 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      lineAndShapeRenderer0.getSeriesToolTipGenerator((-1913));
      lineAndShapeRenderer0.clone();
      lineAndShapeRenderer0.setDefaultToolTipGenerator((CategoryToolTipGenerator) null, true);
      Object object0 = lineAndShapeRenderer0.clone();
      lineAndShapeRenderer0.equals(object0);
      Object object1 = lineAndShapeRenderer0.clone();
      lineAndShapeRenderer0.equals(object1);
      lineAndShapeRenderer0.getSeriesLinesVisible((-1913));
      lineAndShapeRenderer0.setAutoPopulateSeriesStroke(true);
      assertTrue(lineAndShapeRenderer0.equals((Object)object1));
      
      lineAndShapeRenderer0.setSeriesShapesVisible(1367, true);
      boolean boolean0 = lineAndShapeRenderer0.getItemShapeFilled(9, 1367);
      assertFalse(lineAndShapeRenderer0.equals((Object)object0));
      assertNotSame(lineAndShapeRenderer0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      statisticalLineAndShapeRenderer0.setAutoPopulateSeriesPaint(true);
      statisticalLineAndShapeRenderer0.getSeriesShapesVisible(40);
      Boolean.getBoolean("t");
      Boolean.getBoolean("t");
      Boolean.logicalXor(false, true);
      statisticalLineAndShapeRenderer0.setSeriesShapesVisible(2, (Boolean) null);
      statisticalLineAndShapeRenderer0.getLegendItemToolTipGenerator();
      statisticalLineAndShapeRenderer0.setLegendItemURLGenerator((CategorySeriesLabelGenerator) null);
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      
      statisticalLineAndShapeRenderer0.setUseOutlinePaint(true);
      statisticalLineAndShapeRenderer0.setSeriesShapesFilled(40, true);
      statisticalLineAndShapeRenderer0.getItemMargin();
      statisticalLineAndShapeRenderer0.getSeriesLinesVisible(40);
      statisticalLineAndShapeRenderer0.setUseFillPaint(false);
      statisticalLineAndShapeRenderer0.setDefaultLinesVisible(true);
      statisticalLineAndShapeRenderer0.getSeriesShapesVisible(254);
      boolean boolean0 = statisticalLineAndShapeRenderer0.getDefaultShapesFilled();
      assertTrue(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      lineAndShapeRenderer0.setAutoPopulateSeriesOutlinePaint(false);
      lineAndShapeRenderer0.setSeriesShapesFilled(360, false);
      lineAndShapeRenderer0.getUseSeriesOffset();
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      
      lineAndShapeRenderer0.setDefaultShapesFilled(false);
      assertFalse(lineAndShapeRenderer0.getDefaultShapesFilled());
  }
}
