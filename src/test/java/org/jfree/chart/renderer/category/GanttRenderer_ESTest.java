/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:13:30 GMT 2019
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.sql.Connection;
import java.util.Vector;
import javax.swing.JInternalFrame;
import javax.swing.JTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnitSource;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnit;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GanttRenderer_ESTest extends GanttRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Object object0 = ganttRenderer0.clone();
      ganttRenderer0.setEndPercent(0.35);
      boolean boolean0 = ganttRenderer0.equals(object0);
      assertEquals(0.35, ganttRenderer0.getEndPercent(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-2266.05), 2.5, (double) ganttRenderer0.ZERO, 0.0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        ganttRenderer0.getItemMiddle((Comparable) null, "-gPcKBk", jDBCCategoryDataset0, categoryAxis0, rectangle2D_Double0, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("]kk[u@)");
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance(0.8, 587.665008677);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, false);
      Rectangle2D rectangle2D0 = extendedCategoryAxis0.DEFAULT_TICK_LABEL_FONT.getStringBounds("org.jfree.chart.renderer.category.GanttRenderer", fontRenderContext0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = ganttRenderer0.createState(plotRenderingInfo0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      NumberAxis numberAxis0 = new NumberAxis("k");
      ganttRenderer0.drawItem((Graphics2D) null, categoryItemRendererState0, rectangle2D0, categoryPlot0, (CategoryAxis) null, numberAxis0, defaultStatisticalCategoryDataset0, (-501), 47, 1372);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      
      ganttRenderer0.setStartPercent(0.0);
      double double0 = ganttRenderer0.getStartPercent();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setStartPercent((-1919.8651));
      double double0 = ganttRenderer0.getStartPercent();
      assertEquals((-1919.8651), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      NumberTickUnitSource numberTickUnitSource0 = new NumberTickUnitSource(false);
      TickUnit tickUnit0 = numberTickUnitSource0.getCeilingTickUnit((-1919.8651));
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("|%@wX)JV}7+Wrmg");
      Hour hour0 = new Hour();
      jDBCCategoryDataset0.addValue(1360.5959268, (Comparable) hour0, (Comparable) 0.2);
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      ganttRenderer0.getItemMiddle(tickUnit0, tickUnit0, jDBCCategoryDataset0, extendedCategoryAxis0, rectangle0, rectangleEdge0);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Minute minute0 = new Minute();
      String[] stringArray0 = new String[2];
      Number[][] numberArray0 = new Number[2][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 2);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(3429.15F, 2, 2, 0.0F, 0.0F, 0.8F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      ganttRenderer0.getItemMiddle(minute0, minute0, slidingCategoryDataset0, categoryAxis0, rectangle2D0, rectangleEdge0);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Number[][] numberArray0 = new Number[3][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      CategoryAxis categoryAxis0 = new CategoryAxis(":+E^}O>XQ(]I57;h");
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)AbstractRenderer.DEFAULT_SHAPE;
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      ganttRenderer0.getItemMiddle("", "", defaultIntervalCategoryDataset0, categoryAxis0, rectangle0, rectangleEdge0);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setEndPercent((-751.519508386));
      double double0 = ganttRenderer0.getEndPercent();
      assertEquals((-751.519508386), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      // Undeclared exception!
      try { 
        ganttRenderer0.setIncompletePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      // Undeclared exception!
      try { 
        ganttRenderer0.setCompletePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Minute minute0 = new Minute();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      Rectangle rectangle0 = new Rectangle(0, 0);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      // Undeclared exception!
      try { 
        ganttRenderer0.getItemMiddle(minute0, minute0, jDBCCategoryDataset0, (CategoryAxis) null, rectangle0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.GanttRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      Vector<String> vector0 = new Vector<String>();
      JTable jTable0 = new JTable(vector0, vector0);
      Rectangle rectangle0 = jTable0.getVisibleRect();
      String[] stringArray0 = new String[3];
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(symbolAxis0);
      CategoryAxis categoryAxis0 = new CategoryAxis(stringArray0[0]);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, 10);
      // Undeclared exception!
      try { 
        ganttRenderer0.drawTasks((Graphics2D) null, categoryItemRendererState0, rectangle0, combinedRangeCategoryPlot0, categoryAxis0, symbolAxis0, slidingGanttCategoryDataset0, 0, 2246);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      Vector<String> vector0 = new Vector<String>();
      JTable jTable0 = new JTable(vector0, vector0);
      Rectangle rectangle0 = jTable0.getVisibleRect();
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      PeriodAxis periodAxis0 = new PeriodAxis("vJg!_oz0b");
      // Undeclared exception!
      try { 
        ganttRenderer0.drawTask((Graphics2D) null, categoryItemRendererState0, rectangle0, (CategoryPlot) null, categoryAxis0, periodAxis0, (GanttCategoryDataset) null, 10, (-1399));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.GanttRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      PaintScale paintScale0 = xYShapeRenderer0.getPaintScale();
      NumberAxis numberAxis0 = new NumberAxis("");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, numberAxis0);
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis("GENERAL");
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 5, 10);
      // Undeclared exception!
      try { 
        ganttRenderer0.drawTask((Graphics2D) null, categoryStepRenderer_State0, rectangle2D0, categoryPlot0, categoryAxis0, numberAxis0, slidingGanttCategoryDataset0, 976, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 976, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("]kk[u@)");
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance(0.8, 587.665008677);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, false);
      Rectangle2D rectangle2D0 = extendedCategoryAxis0.DEFAULT_TICK_LABEL_FONT.getStringBounds("org.jfree.chart.renderer.category.GanttRenderer", fontRenderContext0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = ganttRenderer0.createState(plotRenderingInfo0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      NumberAxis numberAxis0 = new NumberAxis("k");
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 1077);
      // Undeclared exception!
      try { 
        ganttRenderer0.drawTask((Graphics2D) null, categoryItemRendererState0, rectangle2D0, categoryPlot0, (CategoryAxis) null, numberAxis0, slidingGanttCategoryDataset0, (-1558), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      GanttRenderer ganttRenderer1 = (GanttRenderer)ganttRenderer0.clone();
      boolean boolean0 = ganttRenderer0.equals(ganttRenderer1);
      assertFalse(ganttRenderer1.getIncludeBaseInRange());
      assertEquals(0.35, ganttRenderer1.getStartPercent(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.65, ganttRenderer1.getEndPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      boolean boolean0 = ganttRenderer0.equals(ganttRenderer0);
      assertTrue(boolean0);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Object object0 = ganttRenderer0.clone();
      ganttRenderer0.setEndPercent(0.35);
      boolean boolean0 = object0.equals(ganttRenderer0);
      assertEquals(0.35, ganttRenderer0.getEndPercent(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("]kk[u@)");
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance(0.8, 587.665008677);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, false);
      Rectangle2D rectangle2D0 = extendedCategoryAxis0.DEFAULT_TICK_LABEL_FONT.getStringBounds("org.jfree.chart.renderer.category.GanttRenderer", fontRenderContext0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      NumberAxis numberAxis0 = new NumberAxis("k");
      // Undeclared exception!
      try { 
        ganttRenderer0.drawItem((Graphics2D) null, categoryStepRenderer_State0, rectangle2D0, categoryPlot0, (CategoryAxis) null, numberAxis0, defaultStatisticalCategoryDataset0, 0, 47, 1372);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Color color0 = (Color)ganttRenderer0.getCompletePaint();
      assertEquals(255, color0.getGreen());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CompassPlot compassPlot0 = new CompassPlot();
      Paint paint0 = compassPlot0.getRosePaint();
      ganttRenderer0.setCompletePaint(paint0);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      double double0 = ganttRenderer0.getStartPercent();
      assertEquals(0.35, double0, 0.01);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Color color0 = (Color)ganttRenderer0.getIncompletePaint();
      boolean boolean0 = ganttRenderer0.equals(color0);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertFalse(boolean0);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals((-65536), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CompassPlot compassPlot0 = new CompassPlot();
      Paint paint0 = compassPlot0.getRosePaint();
      ganttRenderer0.setIncompletePaint(paint0);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      double double0 = ganttRenderer0.getEndPercent();
      assertEquals(0.65, double0, 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
  }
}
