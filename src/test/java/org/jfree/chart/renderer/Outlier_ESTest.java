/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:58:15 GMT 2019
 */

package org.jfree.chart.renderer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.renderer.Outlier;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Outlier_ESTest extends Outlier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Outlier outlier0 = new Outlier(1562.33041, 1562.33041, 1562.33041);
      Outlier outlier1 = new Outlier(0.0, 0.0, 0.0);
      boolean boolean0 = outlier0.equals(outlier1);
      assertEquals(0.0, outlier1.getX(), 0.01);
      assertEquals(0.0, outlier1.getY(), 0.01);
      assertEquals(0.0, outlier0.getX(), 0.01);
      assertFalse(outlier1.equals((Object)outlier0));
      assertEquals(0.0, outlier1.getRadius(), 0.01);
      assertEquals(0.0, outlier0.getY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Outlier outlier0 = new Outlier(0.0, 0.0, 0.0);
      boolean boolean0 = outlier0.overlaps(outlier0);
      assertTrue(boolean0);
      assertEquals(0.0, outlier0.getX(), 0.01);
      assertEquals(0.0, outlier0.getY(), 0.01);
      assertEquals(0.0, outlier0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Outlier outlier0 = new Outlier(2186.4834386852, 2186.4834386852, 2567.186061272709);
      assertEquals((-380.70262258750927), outlier0.getX(), 0.01);
      
      Point2D.Double point2D_Double0 = new Point2D.Double(155.76, 2567.186061272709);
      Point2D.Double point2D_Double1 = new Point2D.Double();
      point2D_Double1.x = 0.0;
      point2D_Double1.x = 3337.77;
      point2D_Double0.setLocation((Point2D) point2D_Double1);
      outlier0.setPoint(point2D_Double0);
      Outlier outlier1 = new Outlier(3337.77, 2567.186061272709, 2567.186061272709);
      int int0 = outlier0.compareTo(outlier1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Outlier outlier0 = new Outlier(926.046976118, 926.046976118, (-576.0469915611));
      double double0 = outlier0.getY();
      assertEquals((-576.0469915611), outlier0.getRadius(), 0.01);
      assertEquals(1502.0939676791, double0, 0.01);
      assertEquals(1502.0939676791, outlier0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Outlier outlier0 = new Outlier(0.0, 0.0, 926.046976118);
      double double0 = outlier0.getY();
      assertEquals((-926.046976118), outlier0.getX(), 0.01);
      assertEquals((-926.046976118), double0, 0.01);
      assertEquals(926.046976118, outlier0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Outlier outlier0 = new Outlier(0.0, (-1999.6282695454192), (-1805.66));
      double double0 = outlier0.getX();
      assertEquals((-193.96826954541916), outlier0.getY(), 0.01);
      assertEquals(1805.66, double0, 0.01);
      assertEquals((-1805.66), outlier0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Outlier outlier0 = new Outlier(0.0, 0.0, 1.0);
      double double0 = outlier0.getX();
      assertEquals(1.0, outlier0.getRadius(), 0.01);
      assertEquals((-1.0), outlier0.getY(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Outlier outlier0 = new Outlier(0.0, 0.0, 0.0);
      double double0 = outlier0.getRadius();
      assertEquals(0.0, outlier0.getX(), 0.01);
      assertEquals(0.0, outlier0.getY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Outlier outlier0 = new Outlier((-1554.98411507785), (-1554.98411507785), (-1554.98411507785));
      outlier0.setRadius(1.0);
      double double0 = outlier0.getRadius();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Outlier outlier0 = new Outlier(0.0, 0.0, (-630.815263098));
      assertEquals(630.815263098, outlier0.getY(), 0.01);
      assertEquals(630.815263098, outlier0.getX(), 0.01);
      
      outlier0.setPoint((Point2D) null);
      outlier0.getPoint();
      assertEquals((-630.815263098), outlier0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Outlier outlier0 = new Outlier(0.0, 0.0, (-630.815263098));
      outlier0.setPoint((Point2D) null);
      // Undeclared exception!
      try { 
        outlier0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.Outlier", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Outlier outlier0 = new Outlier(0.0, 0.0, (-1337.0));
      // Undeclared exception!
      try { 
        outlier0.overlaps((Outlier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.Outlier", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Outlier outlier0 = new Outlier((-1609.47079131), 0.0, (-2536.84024));
      outlier0.setPoint((Point2D) null);
      // Undeclared exception!
      try { 
        outlier0.getY();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.Outlier", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Outlier outlier0 = new Outlier((-1554.98411507785), (-1554.98411507785), (-1554.98411507785));
      outlier0.setPoint((Point2D) null);
      // Undeclared exception!
      try { 
        outlier0.getX();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.Outlier", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Outlier outlier0 = new Outlier((-277.4439756481), (-277.4439756481), (-277.4439756481));
      // Undeclared exception!
      try { 
        outlier0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.Outlier", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Outlier outlier0 = new Outlier((-3386.88666864516), 371.0, 371.0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        outlier0.compareTo(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.jfree.chart.renderer.Outlier
         //
         verifyException("org.jfree.chart.renderer.Outlier", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Outlier outlier0 = new Outlier((-1554.98411507785), (-1554.98411507785), (-1554.98411507785));
      double double0 = outlier0.getX();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1554.98411507785), outlier0.getRadius(), 0.01);
      assertEquals(0.0, outlier0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Outlier outlier0 = new Outlier((-1554.98411507785), (-1554.98411507785), (-1554.98411507785));
      double double0 = outlier0.getY();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, outlier0.getX(), 0.01);
      assertEquals((-1554.98411507785), outlier0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Outlier outlier0 = new Outlier(1666.6887027267135, 1463.0, (-2242.66));
      outlier0.setRadius(1666.6887027267135);
      Point2D point2D0 = outlier0.getPoint();
      Outlier outlier1 = new Outlier(1666.6887027267135, 1666.6887027267135, 1666.6887027267135);
      outlier1.setPoint(point2D0);
      boolean boolean0 = outlier0.equals(outlier1);
      assertEquals(3909.3487027267133, outlier1.getX(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Outlier outlier0 = new Outlier(1666.6887027267135, 1463.0, (-2242.66));
      Point2D point2D0 = outlier0.getPoint();
      Outlier outlier1 = new Outlier(1666.6887027267135, 1666.6887027267135, 1666.6887027267135);
      outlier1.setPoint(point2D0);
      boolean boolean0 = outlier0.equals(outlier1);
      assertEquals(3909.3487027267133, outlier1.getX(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Outlier outlier0 = new Outlier(1666.6887027267135, 1463.0, (-2242.66));
      Outlier outlier1 = new Outlier(1666.6887027267135, 1666.6887027267135, 1666.6887027267135);
      boolean boolean0 = outlier0.equals(outlier1);
      assertEquals(3909.3487027267133, outlier0.getX(), 0.01);
      assertEquals((-2242.66), outlier0.getRadius(), 0.01);
      assertFalse(boolean0);
      assertEquals(3705.66, outlier0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Outlier outlier0 = new Outlier(0.0, 0.0, 0.0);
      boolean boolean0 = outlier0.equals(outlier0);
      assertEquals(0.0, outlier0.getY(), 0.01);
      assertEquals(0.0, outlier0.getX(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, outlier0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Outlier outlier0 = new Outlier((-1554.98411507785), (-1554.98411507785), (-1554.98411507785));
      boolean boolean0 = outlier0.equals((Object) null);
      assertEquals(0.0, outlier0.getX(), 0.01);
      assertEquals(0.0, outlier0.getY(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1554.98411507785), outlier0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Outlier outlier0 = new Outlier((-1554.98411507785), (-1554.98411507785), (-1554.98411507785));
      Outlier outlier1 = new Outlier(0.0, 1.0, (-1554.98411507785));
      outlier0.setRadius(1.0);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      point2D_Float0.y = 537.5F;
      outlier1.setPoint(point2D_Float0);
      boolean boolean0 = outlier0.overlaps(outlier1);
      assertEquals(1.0, outlier0.getRadius(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Outlier outlier0 = new Outlier(2584.8131217123314, 2584.8131217123314, 0.0);
      Outlier outlier1 = new Outlier(2584.8131217123314, 0.0, 0.0);
      boolean boolean0 = outlier0.overlaps(outlier1);
      assertEquals(2584.8131217123314, outlier0.getX(), 0.01);
      assertEquals(2584.8131217123314, outlier1.getX(), 0.01);
      assertEquals(0.0, outlier1.getY(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, outlier1.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Outlier outlier0 = new Outlier(0.0, 0.0, 926.046976118);
      Outlier outlier1 = new Outlier(926.046976118, 926.046976118, (-576.0469915611));
      boolean boolean0 = outlier0.overlaps(outlier1);
      assertEquals(1502.0939676791, outlier1.getX(), 0.01);
      assertEquals((-576.0469915611), outlier1.getRadius(), 0.01);
      assertEquals(1502.0939676791, outlier1.getY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Outlier outlier0 = new Outlier(0.0, 0.0, 926.046976118);
      Outlier outlier1 = new Outlier((-22.19636331879052), (-1119.2), (-22.19636331879052));
      boolean boolean0 = outlier1.overlaps(outlier0);
      assertEquals((-926.046976118), outlier0.getX(), 0.01);
      assertFalse(boolean0);
      assertEquals((-926.046976118), outlier0.getY(), 0.01);
      assertEquals(926.046976118, outlier0.getRadius(), 0.01);
      assertEquals((-1097.0036366812096), outlier1.getY(), 0.01);
      assertEquals(0.0, outlier1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Outlier outlier0 = new Outlier(2186.4834386852, 2186.4834386852, 2567.186061272709);
      assertEquals((-380.70262258750927), outlier0.getX(), 0.01);
      
      Point2D.Double point2D_Double0 = new Point2D.Double(2567.186061272709, 2567.186061272709);
      outlier0.setPoint(point2D_Double0);
      Outlier outlier1 = new Outlier(2567.186061272709, 2567.186061272709, 2567.186061272709);
      int int0 = outlier0.compareTo(outlier1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Outlier outlier0 = new Outlier((-1554.98411507785), (-1554.98411507785), (-1554.98411507785));
      Outlier outlier1 = new Outlier(0.0, 1.0, (-1554.98411507785));
      assertEquals(1555.98411507785, outlier1.getY(), 0.01);
      
      Point2D.Float point2D_Float0 = new Point2D.Float();
      point2D_Float0.y = 537.5F;
      outlier1.setPoint(point2D_Float0);
      int int0 = outlier0.compareTo(outlier1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Outlier outlier0 = new Outlier(0.0, 0.0, 0.0);
      int int0 = outlier0.compareTo(outlier0);
      assertEquals(0, int0);
      assertEquals(0.0, outlier0.getX(), 0.01);
      assertEquals(0.0, outlier0.getY(), 0.01);
      assertEquals(0.0, outlier0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Outlier outlier0 = new Outlier((-1554.98411507785), (-1554.98411507785), (-1554.98411507785));
      Outlier outlier1 = new Outlier(0.0, 1.0, (-1554.98411507785));
      int int0 = outlier0.compareTo(outlier1);
      assertEquals(1554.98411507785, outlier1.getX(), 0.01);
      assertEquals((-1), int0);
      assertEquals((-1554.98411507785), outlier1.getRadius(), 0.01);
      assertEquals(1555.98411507785, outlier1.getY(), 0.01);
      assertEquals(0.0, outlier0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Outlier outlier0 = new Outlier((-1554.98411507785), (-1554.98411507785), (-1554.98411507785));
      outlier0.setRadius(1.0);
      boolean boolean0 = outlier0.overlaps(outlier0);
      assertEquals(1.0, outlier0.getRadius(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Outlier outlier0 = new Outlier((-1554.98411507785), (-1554.98411507785), (-1554.98411507785));
      double double0 = outlier0.getRadius();
      assertEquals((-1554.98411507785), double0, 0.01);
      assertEquals(0.0, outlier0.getY(), 0.01);
      assertEquals(0.0, outlier0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Outlier outlier0 = new Outlier((-1554.98411507785), (-1554.98411507785), (-1554.98411507785));
      String string0 = outlier0.toString();
      assertEquals((-1554.98411507785), outlier0.getRadius(), 0.01);
      assertEquals("{0.0,0.0}", string0);
  }
}
