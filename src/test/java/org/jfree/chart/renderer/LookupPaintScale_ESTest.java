/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:47:03 GMT 2019
 */

package org.jfree.chart.renderer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Paint;
import java.awt.SystemColor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.renderer.LookupPaintScale;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LookupPaintScale_ESTest extends LookupPaintScale_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Color color0 = Color.magenta;
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-65281), color0.getRGB());
      assertNotNull(color0);
      
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale(0.0, 692.3787509602, color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-65281), color0.getRGB());
      assertEquals(692.3787509602, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      LookupPaintScale lookupPaintScale1 = new LookupPaintScale();
      assertEquals(0.0, lookupPaintScale1.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale1.getUpperBound(), 0.01);
      assertFalse(lookupPaintScale1.equals((Object)lookupPaintScale0));
      assertNotNull(lookupPaintScale1);
      
      boolean boolean0 = lookupPaintScale0.equals(lookupPaintScale1);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-65281), color0.getRGB());
      assertEquals(692.3787509602, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(0.0, lookupPaintScale1.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale1.getUpperBound(), 0.01);
      assertFalse(lookupPaintScale0.equals((Object)lookupPaintScale1));
      assertFalse(lookupPaintScale1.equals((Object)lookupPaintScale0));
      assertNotSame(lookupPaintScale0, lookupPaintScale1);
      assertNotSame(lookupPaintScale1, lookupPaintScale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      SystemColor systemColor0 = SystemColor.textHighlightText;
      assertEquals(255, systemColor0.getRed());
      assertEquals(255, systemColor0.getBlue());
      assertEquals(255, systemColor0.getGreen());
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertNotNull(systemColor0);
      
      lookupPaintScale0.add(0.0F, systemColor0);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(255, systemColor0.getRed());
      assertEquals(255, systemColor0.getBlue());
      assertEquals(255, systemColor0.getGreen());
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      
      lookupPaintScale0.add(0.5019608F, systemColor0);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(255, systemColor0.getRed());
      assertEquals(255, systemColor0.getBlue());
      assertEquals(255, systemColor0.getGreen());
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      
      lookupPaintScale0.add(1.5, systemColor0);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(255, systemColor0.getRed());
      assertEquals(255, systemColor0.getBlue());
      assertEquals(255, systemColor0.getGreen());
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      
      SystemColor systemColor1 = (SystemColor)lookupPaintScale0.getPaint(1.0F);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(255, systemColor1.getRed());
      assertEquals(255, systemColor1.getAlpha());
      assertEquals(1, systemColor1.getTransparency());
      assertEquals((-1), systemColor1.getRGB());
      assertEquals(255, systemColor1.getGreen());
      assertEquals(255, systemColor1.getBlue());
      assertNotNull(systemColor1);
      assertSame(systemColor1, systemColor0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      lookupPaintScale0.add(967.7041561499386, (Paint) null);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      
      lookupPaintScale0.add(0.0, (Paint) null);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      assertEquals((-2039584), systemColor0.getRGB());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(224, systemColor0.getBlue());
      assertEquals(224, systemColor0.getRed());
      assertEquals(224, systemColor0.getGreen());
      assertNotNull(systemColor0);
      
      lookupPaintScale0.add(967.7041561499386, systemColor0);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals((-2039584), systemColor0.getRGB());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(224, systemColor0.getBlue());
      assertEquals(224, systemColor0.getRed());
      assertEquals(224, systemColor0.getGreen());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      lookupPaintScale0.add(Double.NaN, (Paint) null);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      
      lookupPaintScale0.add(4928.6902040342, (Paint) null);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Color color0 = Color.cyan;
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals((-16711681), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertNotNull(color0);
      
      LookupPaintScale.PaintItem lookupPaintScale_PaintItem0 = new LookupPaintScale.PaintItem(2150.57, color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals((-16711681), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertNotNull(lookupPaintScale_PaintItem0);
      
      int int0 = lookupPaintScale_PaintItem0.compareTo(lookupPaintScale_PaintItem0);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals((-16711681), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Color color0 = Color.cyan;
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals((-16711681), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale(0.0, 2150.57, color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals((-16711681), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(2150.57, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      boolean boolean0 = lookupPaintScale0.equals(lookupPaintScale0);
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals((-16711681), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(2150.57, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      lookupPaintScale0.add((-2745.0), (Paint) null);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      
      Paint paint0 = lookupPaintScale0.getPaint(1.0);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Color color0 = Color.blue;
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale(1215.0, 1266.4, color0);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(1266.4, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(1215.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      double double0 = lookupPaintScale0.getLowerBound();
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(1266.4, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(1215.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1215.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.textText;
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getRed());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getGreen());
      assertNotNull(systemColor0);
      
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale((-736.93), 147.981297146, systemColor0);
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getRed());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(147.981297146, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals((-736.93), lookupPaintScale0.getLowerBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      double double0 = lookupPaintScale0.getLowerBound();
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getRed());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(147.981297146, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals((-736.93), lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals((-736.93), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      Color color0 = Color.YELLOW;
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertNotNull(color0);
      
      LookupPaintScale lookupPaintScale1 = new LookupPaintScale(0.0, 218.296334, color0);
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(0.0, lookupPaintScale1.getLowerBound(), 0.01);
      assertEquals(218.296334, lookupPaintScale1.getUpperBound(), 0.01);
      assertFalse(lookupPaintScale1.equals((Object)lookupPaintScale0));
      assertNotNull(lookupPaintScale1);
      
      boolean boolean0 = lookupPaintScale0.equals(lookupPaintScale1);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(0.0, lookupPaintScale1.getLowerBound(), 0.01);
      assertEquals(218.296334, lookupPaintScale1.getUpperBound(), 0.01);
      assertFalse(lookupPaintScale0.equals((Object)lookupPaintScale1));
      assertFalse(lookupPaintScale1.equals((Object)lookupPaintScale0));
      assertNotSame(lookupPaintScale0, lookupPaintScale1);
      assertNotSame(lookupPaintScale1, lookupPaintScale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      Color color0 = Color.YELLOW;
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertNotNull(color0);
      
      LookupPaintScale lookupPaintScale1 = new LookupPaintScale(0.6712133482313615, 218.296334, color0);
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(218.296334, lookupPaintScale1.getUpperBound(), 0.01);
      assertEquals(0.6712133482313615, lookupPaintScale1.getLowerBound(), 0.01);
      assertFalse(lookupPaintScale1.equals((Object)lookupPaintScale0));
      assertNotNull(lookupPaintScale1);
      
      boolean boolean0 = lookupPaintScale0.equals(lookupPaintScale1);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(218.296334, lookupPaintScale1.getUpperBound(), 0.01);
      assertEquals(0.6712133482313615, lookupPaintScale1.getLowerBound(), 0.01);
      assertFalse(lookupPaintScale0.equals((Object)lookupPaintScale1));
      assertFalse(lookupPaintScale1.equals((Object)lookupPaintScale0));
      assertNotSame(lookupPaintScale0, lookupPaintScale1);
      assertNotSame(lookupPaintScale1, lookupPaintScale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      Color color0 = (Color)lookupPaintScale0.getPaint((-1.0));
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(192, color0.getGreen());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getBlue());
      assertEquals(192, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      boolean boolean0 = lookupPaintScale0.equals(color0);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(192, color0.getGreen());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getBlue());
      assertEquals(192, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      lookupPaintScale0.add(218.296334, (Paint) null);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      
      Color color0 = Color.YELLOW;
      assertEquals(255, color0.getAlpha());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertNotNull(color0);
      
      lookupPaintScale0.add(188.257492902, color0);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(255, color0.getAlpha());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getGreen());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor0.getRed());
      assertNotNull(systemColor0);
      
      lookupPaintScale0.add(0.0, systemColor0);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getGreen());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor0.getRed());
      
      SystemColor systemColor1 = (SystemColor)lookupPaintScale0.getPaint(0.0);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(255, systemColor1.getAlpha());
      assertEquals(192, systemColor1.getRed());
      assertEquals(192, systemColor1.getGreen());
      assertEquals(192, systemColor1.getBlue());
      assertEquals(1, systemColor1.getTransparency());
      assertEquals((-4144960), systemColor1.getRGB());
      assertNotNull(systemColor1);
      assertSame(systemColor1, systemColor0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      Color color0 = Color.YELLOW;
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertNotNull(color0);
      
      lookupPaintScale0.add(188.257492902, color0);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      
      Color color1 = (Color)lookupPaintScale0.getPaint(0.0);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(192, color1.getGreen());
      assertEquals((-4144960), color1.getRGB());
      assertEquals(192, color1.getBlue());
      assertEquals(192, color1.getRed());
      assertFalse(color1.equals((Object)color0));
      assertNotNull(color1);
      assertNotSame(color1, color0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      Color color0 = (Color)lookupPaintScale0.getPaint(32.5551125);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getRed());
      assertEquals(192, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      Color color0 = (Color)lookupPaintScale0.getPaint(0.0);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getBlue());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getRed());
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Color color0 = Color.GRAY;
      assertEquals(128, color0.getBlue());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      assertNotNull(color0);
      
      LookupPaintScale lookupPaintScale0 = null;
      try {
        lookupPaintScale0 = new LookupPaintScale(1.0, (-1.0F), color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires lowerBound < upperBound.
         //
         verifyException("org.jfree.chart.renderer.LookupPaintScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      Color color0 = (Color)lookupPaintScale0.getPaint((-1.0));
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getRed());
      assertEquals(192, color0.getBlue());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      LookupPaintScale.PaintItem lookupPaintScale_PaintItem0 = new LookupPaintScale.PaintItem((-1.0), color0);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getRed());
      assertEquals(192, color0.getBlue());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertNotNull(lookupPaintScale_PaintItem0);
      
      lookupPaintScale_PaintItem0.value = 0.0;
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getRed());
      assertEquals(192, color0.getBlue());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      
      LookupPaintScale.PaintItem lookupPaintScale_PaintItem1 = new LookupPaintScale.PaintItem((-1.0), color0);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getRed());
      assertEquals(192, color0.getBlue());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertFalse(lookupPaintScale_PaintItem1.equals((Object)lookupPaintScale_PaintItem0));
      assertNotNull(lookupPaintScale_PaintItem1);
      
      boolean boolean0 = lookupPaintScale_PaintItem0.equals(lookupPaintScale_PaintItem1);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getRed());
      assertEquals(192, color0.getBlue());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertFalse(lookupPaintScale_PaintItem0.equals((Object)lookupPaintScale_PaintItem1));
      assertFalse(lookupPaintScale_PaintItem1.equals((Object)lookupPaintScale_PaintItem0));
      assertNotSame(lookupPaintScale_PaintItem0, lookupPaintScale_PaintItem1);
      assertNotSame(lookupPaintScale_PaintItem1, lookupPaintScale_PaintItem0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      Color color0 = (Color)lookupPaintScale0.getPaint((-1.0));
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(192, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getRed());
      assertEquals(192, color0.getGreen());
      assertEquals((-4144960), color0.getRGB());
      assertNotNull(color0);
      
      LookupPaintScale lookupPaintScale1 = (LookupPaintScale)lookupPaintScale0.clone();
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale1.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale1.getUpperBound(), 0.01);
      assertTrue(lookupPaintScale1.equals((Object)lookupPaintScale0));
      assertNotNull(lookupPaintScale1);
      assertNotSame(lookupPaintScale0, lookupPaintScale1);
      assertNotSame(lookupPaintScale1, lookupPaintScale0);
      
      lookupPaintScale1.add((-1.7976931348623157E308), color0);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(192, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getRed());
      assertEquals(192, color0.getGreen());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(0.0, lookupPaintScale1.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale1.getUpperBound(), 0.01);
      assertFalse(lookupPaintScale0.equals((Object)lookupPaintScale1));
      assertFalse(lookupPaintScale1.equals((Object)lookupPaintScale0));
      assertNotSame(lookupPaintScale0, lookupPaintScale1);
      assertNotSame(lookupPaintScale1, lookupPaintScale0);
      
      lookupPaintScale0.add((-1.7976931348623157E308), color0);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(192, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getRed());
      assertEquals(192, color0.getGreen());
      assertEquals((-4144960), color0.getRGB());
      assertTrue(lookupPaintScale0.equals((Object)lookupPaintScale1));
      assertNotSame(lookupPaintScale0, lookupPaintScale1);
      
      boolean boolean0 = lookupPaintScale0.equals(lookupPaintScale1);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale1.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale1.getUpperBound(), 0.01);
      assertTrue(lookupPaintScale0.equals((Object)lookupPaintScale1));
      assertTrue(lookupPaintScale1.equals((Object)lookupPaintScale0));
      assertNotSame(lookupPaintScale0, lookupPaintScale1);
      assertNotSame(lookupPaintScale1, lookupPaintScale0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      Color color0 = (Color)lookupPaintScale0.getPaint((-1.0));
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(192, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getGreen());
      assertEquals(192, color0.getBlue());
      assertEquals((-4144960), color0.getRGB());
      assertNotNull(color0);
      
      lookupPaintScale0.add((-1.7976931348623157E308), color0);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(192, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getGreen());
      assertEquals(192, color0.getBlue());
      assertEquals((-4144960), color0.getRGB());
      
      LookupPaintScale lookupPaintScale1 = (LookupPaintScale)lookupPaintScale0.clone();
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(0.0, lookupPaintScale1.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale1.getUpperBound(), 0.01);
      assertTrue(lookupPaintScale1.equals((Object)lookupPaintScale0));
      assertNotNull(lookupPaintScale1);
      assertNotSame(lookupPaintScale0, lookupPaintScale1);
      assertNotSame(lookupPaintScale1, lookupPaintScale0);
      
      boolean boolean0 = lookupPaintScale0.equals(lookupPaintScale1);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(0.0, lookupPaintScale1.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale1.getUpperBound(), 0.01);
      assertTrue(lookupPaintScale0.equals((Object)lookupPaintScale1));
      assertTrue(lookupPaintScale1.equals((Object)lookupPaintScale0));
      assertNotSame(lookupPaintScale0, lookupPaintScale1);
      assertNotSame(lookupPaintScale1, lookupPaintScale0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      Color color0 = (Color)lookupPaintScale0.getPaint((-1.0));
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getGreen());
      assertEquals(192, color0.getBlue());
      assertNotNull(color0);
      
      LookupPaintScale.PaintItem lookupPaintScale_PaintItem0 = new LookupPaintScale.PaintItem((-1.0), color0);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getGreen());
      assertEquals(192, color0.getBlue());
      assertNotNull(lookupPaintScale_PaintItem0);
      
      boolean boolean0 = lookupPaintScale_PaintItem0.equals(color0);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getGreen());
      assertEquals(192, color0.getBlue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      lookupPaintScale0.add(218.296334, (Paint) null);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      
      Color color0 = Color.YELLOW;
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertNotNull(color0);
      
      lookupPaintScale0.add((-167.59710105), color0);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getRed());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getGreen());
      assertNotNull(systemColor0);
      
      lookupPaintScale0.add(0.0, systemColor0);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getRed());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getGreen());
      
      SystemColor systemColor1 = (SystemColor)lookupPaintScale0.getPaint(0.0);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(192, systemColor1.getGreen());
      assertEquals(1, systemColor1.getTransparency());
      assertEquals(255, systemColor1.getAlpha());
      assertEquals(192, systemColor1.getBlue());
      assertEquals(192, systemColor1.getRed());
      assertEquals((-4144960), systemColor1.getRGB());
      assertNotNull(systemColor1);
      assertSame(systemColor1, systemColor0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      Paint paint0 = lookupPaintScale0.getPaint((-1.0));
      lookupPaintScale0.add((-1.7976931348623157E308), paint0);
      lookupPaintScale0.add((-1.0), paint0);
      Paint paint1 = lookupPaintScale0.getPaint(0.0);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertNotNull(paint1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      LookupPaintScale lookupPaintScale1 = (LookupPaintScale)lookupPaintScale0.clone();
      Color color0 = (Color)lookupPaintScale0.getPaint((-1.0));
      assertTrue(lookupPaintScale0.equals((Object)lookupPaintScale1));
      
      lookupPaintScale0.add((-1.7976931348623157E308), color0);
      lookupPaintScale1.add(Double.NaN, color0);
      boolean boolean0 = lookupPaintScale0.equals(lookupPaintScale1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      Paint paint0 = lookupPaintScale0.getDefaultPaint();
      lookupPaintScale0.add((-1873.006554204052), paint0);
      LookupPaintScale lookupPaintScale1 = new LookupPaintScale();
      lookupPaintScale1.add((-1873.006554204052), (Paint) null);
      boolean boolean0 = lookupPaintScale0.equals(lookupPaintScale1);
      assertEquals(0.0, lookupPaintScale1.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale1.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      double double0 = lookupPaintScale0.getUpperBound();
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      double double0 = lookupPaintScale0.getLowerBound();
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }
}
