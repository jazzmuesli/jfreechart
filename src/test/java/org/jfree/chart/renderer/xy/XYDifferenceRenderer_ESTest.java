/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 20:32:40 GMT 2019
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.text.DateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.ui.LengthAdjustmentType;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class XYDifferenceRenderer_ESTest extends XYDifferenceRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Color color0 = Color.blue;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(color0, color0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2, 2);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 0.0, 1177.556265, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<Integer> vector0 = new Vector<Integer>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(729);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      Rectangle2D rectangle2D0 = multiplePiePlot0.DEFAULT_INSETS.createAdjustedRectangle(rectangle0, lengthAdjustmentType0, lengthAdjustmentType0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      CrosshairState crosshairState0 = new CrosshairState(false);
      xYDifferenceRenderer0.drawItemPass0(graphics2D0, rectangle2D0, plotRenderingInfo0, combinedRangeXYPlot0, (ValueAxis) null, (ValueAxis) null, defaultXYDataset0, 0, (-33), crosshairState0);
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Paint paint0 = candlestickRenderer0.getDownPaint();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(paint0, paint0, false);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, (double) candlestickRenderer0.ZERO, (-37.846), 2);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("eloam4cCib", candlestickRenderer0.DEFAULT_VALUE_LABEL_FONT, piePlot3D0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, 2949, 2949, (-357), (-1), 0, false, false, false, true, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      LogAxis logAxis0 = new LogAxis();
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      CrosshairState crosshairState0 = new CrosshairState();
      xYDifferenceRenderer0.drawItemPass0((Graphics2D) null, rectangle2D_Double0, plotRenderingInfo0, (XYPlot) null, logAxis0, logAxis0, defaultHighLowDataset0, (-3382), 120, crosshairState0);
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false);
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.5707963267948966), 6462.11244, "ZOOM_IN_DOMAIN");
      XYPlot xYPlot0 = new XYPlot(xYTaskDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYDifferenceRenderer0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYItemRendererState xYItemRendererState0 = defaultXYItemRenderer0.initialise((Graphics2D) null, rectangle0, xYPlot0, xYTaskDataset0, plotRenderingInfo0);
      CrosshairState crosshairState0 = new CrosshairState();
      xYDifferenceRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, rectangle0, plotRenderingInfo0, xYPlot0, cyclicNumberAxis0, cyclicNumberAxis0, xYTaskDataset0, 10, 838, crosshairState0, (-261));
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) xYDifferenceRenderer0.ZERO);
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      Rectangle2D rectangle2D1 = cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS.createAdjustedRectangle(rectangle2D0, lengthAdjustmentType0, lengthAdjustmentType0);
      xYDifferenceRenderer0.setLegendLine(rectangle2D1);
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) null);
      Paint paint0 = combinedRangeCategoryPlot0.getRangeGridlinePaint();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(paint0, combinedRangeCategoryPlot0.DEFAULT_BACKGROUND_PAINT, false);
      xYDifferenceRenderer0.setNegativePaint(paint0);
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      Color color0 = (Color)xYDifferenceRenderer0.getPositivePaint();
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertEquals((-16711936), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      Paint paint0 = combinedDomainXYPlot0.getRangeCrosshairPaint();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(paint0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, true);
      boolean boolean0 = xYDifferenceRenderer0.getShapesVisible();
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      
      xYDifferenceRenderer0.setRoundXCoordinates(true);
      boolean boolean0 = xYDifferenceRenderer0.getRoundXCoordinates();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      // Undeclared exception!
      try { 
        xYDifferenceRenderer0.setPositivePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JList<String> jList0 = new JList<String>();
      Color color0 = jList0.getSelectionBackground();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(color0, color0, false);
      // Undeclared exception!
      try { 
        xYDifferenceRenderer0.setNegativePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      // Undeclared exception!
      try { 
        xYDifferenceRenderer0.setLegendLine((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'line' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Color color0 = Color.blue;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(color0, color0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2, 2);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      Vector<Integer> vector0 = new Vector<Integer>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(729);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      CrosshairState crosshairState0 = new CrosshairState(false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 2961, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        xYDifferenceRenderer0.drawItemPass1(graphics2D0, rectangle0, plotRenderingInfo0, combinedRangeXYPlot0, (ValueAxis) null, (ValueAxis) null, defaultXYDataset0, (-11), 120, crosshairState0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = null;
      try {
        xYDifferenceRenderer0 = new XYDifferenceRenderer((Paint) null, (Paint) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'positivePaint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      Object object0 = xYDifferenceRenderer0.clone();
      xYDifferenceRenderer0.setRoundXCoordinates(true);
      boolean boolean0 = xYDifferenceRenderer0.equals(object0);
      assertFalse(boolean0);
      assertTrue(xYDifferenceRenderer0.getRoundXCoordinates());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Color color0 = Color.magenta;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(color0, color0, false);
      XYDifferenceRenderer xYDifferenceRenderer1 = new XYDifferenceRenderer();
      boolean boolean0 = xYDifferenceRenderer0.equals(xYDifferenceRenderer1);
      assertFalse(xYDifferenceRenderer1.getShapesVisible());
      assertFalse(xYDifferenceRenderer1.getRoundXCoordinates());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      Object object0 = xYDifferenceRenderer0.clone();
      assertTrue(object0.equals((Object)xYDifferenceRenderer0));
      
      xYDifferenceRenderer0.setDefaultLegendShape(((AbstractRenderer) object0).DEFAULT_SHAPE);
      boolean boolean0 = xYDifferenceRenderer0.equals(object0);
      assertFalse(object0.equals((Object)xYDifferenceRenderer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      boolean boolean0 = xYDifferenceRenderer0.equals(xYDifferenceRenderer0);
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertTrue(boolean0);
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Paint paint0 = candlestickRenderer0.getDownPaint();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(paint0, paint0, false);
      boolean boolean0 = xYDifferenceRenderer0.equals(candlestickRenderer0);
      assertFalse(boolean0);
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      TimeSeries timeSeries0 = new TimeSeries(10, "|&bV=9vrxBu", "|&bV=9vrxBu");
      TimeZone timeZone0 = TimeZone.getTimeZone("|&bV=9vrxBu");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0, "|o}orwL*;\u0002");
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, xYDifferenceRenderer0);
      xYDifferenceRenderer0.getLegendItem(10, (-1));
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      Paint paint0 = combinedDomainXYPlot0.getRangeCrosshairPaint();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(paint0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, true);
      xYDifferenceRenderer0.getLegendItem(10, 10);
      assertTrue(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      Paint paint0 = combinedDomainXYPlot0.getRangeCrosshairPaint();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(paint0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, true);
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      CrosshairState crosshairState0 = new CrosshairState();
      // Undeclared exception!
      try { 
        xYDifferenceRenderer0.drawItemPass1((Graphics2D) null, rectangle2D0, plotRenderingInfo0, combinedDomainXYPlot0, (ValueAxis) null, (ValueAxis) null, xIntervalSeriesCollection0, (-3127), 10, crosshairState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYDifferenceRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 40, 40);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(40, 971);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      TimeSeries timeSeries0 = new TimeSeries(10, "|&bV=9vrxBu", "|&bV=9vrxBu");
      TimeZone timeZone0 = TimeZone.getTimeZone("|&bV=9vrxBu");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0, "|o}orwL*;\u0002");
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, xYDifferenceRenderer0);
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        xYDifferenceRenderer0.drawItemPass1(graphics2D0, (Rectangle2D) null, (PlotRenderingInfo) null, xYPlot0, cyclicNumberAxis0, cyclicNumberAxis0, timeSeriesCollection0, 1, 960, categoryCrosshairState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Paint paint0 = candlestickRenderer0.getDownPaint();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(paint0, paint0, false);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, (double) candlestickRenderer0.ZERO, (-37.846), 2);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("eloam4cCib", candlestickRenderer0.DEFAULT_VALUE_LABEL_FONT, piePlot3D0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, 2949, 2949, (-357), (-1), 0, false, false, false, true, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      LogAxis logAxis0 = new LogAxis();
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      CrosshairState crosshairState0 = new CrosshairState();
      xYDifferenceRenderer0.drawItemPass0((Graphics2D) null, rectangle2D_Double0, plotRenderingInfo0, (XYPlot) null, logAxis0, logAxis0, defaultHighLowDataset0, 0, 120, crosshairState0);
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Color color0 = Color.blue;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(color0, color0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2, 2);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 0.0, 1177.556265, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      Rectangle2D rectangle2D0 = multiplePiePlot0.DEFAULT_INSETS.createAdjustedRectangle(rectangle0, lengthAdjustmentType0, lengthAdjustmentType0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      CrosshairState crosshairState0 = new CrosshairState(false);
      // Undeclared exception!
      try { 
        xYDifferenceRenderer0.drawItemPass0(graphics2D0, rectangle2D0, plotRenderingInfo0, combinedRangeXYPlot0, (ValueAxis) null, (ValueAxis) null, defaultXYDataset0, 0, 0, crosshairState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Color color0 = Color.blue;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(color0, color0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2, 2);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 0.0, 1177.556265, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      CrosshairState crosshairState0 = new CrosshairState(false);
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("|z&_EtvU", dateFormat0, dateFormat0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(1, standardXYToolTipGenerator0, (XYURLGenerator) null);
      TimeSeries timeSeries0 = new TimeSeries(1, "{0}: ({1}, {2})", "2C7>oY");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      XYItemRendererState xYItemRendererState0 = stackedXYAreaRenderer0.initialise(graphics2D0, rectangle0, combinedRangeXYPlot0, timeSeriesCollection0, plotRenderingInfo0);
      xYDifferenceRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle0, plotRenderingInfo0, combinedRangeXYPlot0, (ValueAxis) null, (ValueAxis) null, timeSeriesCollection0, 15, 0, crosshairState0, 0);
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer((-1411));
      XYPlot xYPlot0 = new XYPlot();
      XYItemRendererState xYItemRendererState0 = stackedXYAreaRenderer0.initialise((Graphics2D) null, rectangle0, xYPlot0, (XYDataset) null, (PlotRenderingInfo) null);
      xYDifferenceRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, rectangle0, (PlotRenderingInfo) null, xYPlot0, (ValueAxis) null, (ValueAxis) null, (XYDataset) null, 532, 102, (CrosshairState) null, 5);
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Paint paint0 = candlestickRenderer0.getDownPaint();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(paint0, paint0, false);
      Line2D.Double line2D_Double0 = (Line2D.Double)xYDifferenceRenderer0.getLegendLine();
      assertEquals((-7.0), line2D_Double0.x1, 0.01);
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(7.0, line2D_Double0.x2, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Paint paint0 = candlestickRenderer0.getDownPaint();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(paint0, paint0, false);
      boolean boolean0 = xYDifferenceRenderer0.getShapesVisible();
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Paint paint0 = candlestickRenderer0.getDownPaint();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(paint0, paint0, false);
      xYDifferenceRenderer0.setPositivePaint(paint0);
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      XYDifferenceRenderer xYDifferenceRenderer1 = (XYDifferenceRenderer)xYDifferenceRenderer0.clone();
      boolean boolean0 = xYDifferenceRenderer0.equals(xYDifferenceRenderer1);
      assertFalse(xYDifferenceRenderer1.getShapesVisible());
      assertNotSame(xYDifferenceRenderer1, xYDifferenceRenderer0);
      assertTrue(boolean0);
      assertFalse(xYDifferenceRenderer1.getRoundXCoordinates());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      Paint paint0 = combinedDomainXYPlot0.getRangeCrosshairPaint();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(paint0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, true);
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      XYItemRendererState xYItemRendererState0 = xYDifferenceRenderer0.initialise((Graphics2D) null, rectangle2D0, combinedDomainXYPlot0, xIntervalSeriesCollection0, plotRenderingInfo0);
      assertTrue(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertFalse(xYItemRendererState0.getProcessVisibleItemsOnly());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(color0, color0, false);
      xYDifferenceRenderer0.setShapesVisible(false);
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      int int0 = xYDifferenceRenderer0.getPassCount();
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertEquals(2, int0);
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      Paint paint0 = combinedDomainXYPlot0.getRangeCrosshairPaint();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(paint0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, true);
      xYDifferenceRenderer0.setNegativePaint(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      Color color0 = (Color)xYDifferenceRenderer0.getNegativePaint();
      assertEquals(255, color0.getBlue());
      assertTrue(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      boolean boolean0 = xYDifferenceRenderer0.getRoundXCoordinates();
      assertFalse(boolean0);
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      Paint paint0 = combinedDomainXYPlot0.getRangeCrosshairPaint();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(paint0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, true);
      Color color0 = (Color)xYDifferenceRenderer0.getNegativePaint();
      assertTrue(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertEquals(128, color0.getRed());
  }
}
