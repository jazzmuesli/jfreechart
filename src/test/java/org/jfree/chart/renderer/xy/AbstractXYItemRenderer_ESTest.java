/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 20:37:26 GMT 2019
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYDrawableAnnotation;
import org.jfree.chart.annotations.XYPolygonAnnotation;
import org.jfree.chart.annotations.XYShapeAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.date.SpreadsheetDate;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.labels.IntervalXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYSeriesLabelGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYZToolTipGenerator;
import org.jfree.chart.labels.XYItemLabelGenerator;
import org.jfree.chart.labels.XYSeriesLabelGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.xy.AbstractXYItemRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.HighLowRenderer;
import org.jfree.chart.renderer.xy.SamplingXYLineRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer2;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.VectorRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer2;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.renderer.xy.XYDotRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.ui.Layer;
import org.jfree.chart.ui.LengthAdjustmentType;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.urls.StandardXYZURLGenerator;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.data.Range;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.DateRange;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AbstractXYItemRenderer_ESTest extends AbstractXYItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(0.0);
      xYDotRenderer0.addEntity(standardEntityCollection0, ellipse2D_Double0, simpleHistogramDataset0, (-2398), (-2398), 0.0, (-2398));
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-64.64788468037757), "}#!N>E=LT.;AmtW");
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBorderPaint(cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT);
      Paint paint0 = jFreeChart0.getBorderPaint();
      // Undeclared exception!
      try { 
        xYShapeRenderer0.drawDomainLine((Graphics2D) null, xYPlot0, cyclicNumberAxis0, rectangle2D_Float0, 0.0, paint0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.AbstractXYItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYItemLabelGenerator xYItemLabelGenerator0 = candlestickRenderer0.getItemLabelGenerator(1, (-2322));
      assertNull(xYItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-2.243680258882312));
      StandardXYSeriesLabelGenerator standardXYSeriesLabelGenerator0 = new StandardXYSeriesLabelGenerator();
      candlestickRenderer0.setLegendItemLabelGenerator(standardXYSeriesLabelGenerator0);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      xYSplineRenderer0.setSeriesItemLabelGenerator(1818, (XYItemLabelGenerator) null);
      assertEquals(5, xYSplineRenderer0.getPrecision());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(307, (XYToolTipGenerator) null, timeSeriesURLGenerator0);
      TimeZone timeZone0 = TimeZone.getTimeZone("D");
      Locale locale0 = Locale.UK;
      DateAxis dateAxis0 = new DateAxis("D", timeZone0, locale0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      standardXYItemRenderer0.setPlot(combinedRangeXYPlot0);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("A~3V?deEg0>,DaD");
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("", choiceFormat0, choiceFormat0, choiceFormat0);
      xYStepRenderer0.setDefaultToolTipGenerator(standardXYZToolTipGenerator0);
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0);
      GeneralPath generalPath0 = new GeneralPath(candlestickRenderer0.DEFAULT_SHAPE);
      AbstractXYItemRenderer.lineTo(generalPath0, (-66), 0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultBoxAndWhiskerCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 193, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LogAxis logAxis0 = new LogAxis();
      // Undeclared exception!
      try { 
        xYBlockRenderer0.fillDomainGridBand(graphics2D0, combinedDomainXYPlot0, logAxis0, (Rectangle2D) null, 1.0F, 0.05);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.LogAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      double[] doubleArray0 = new double[2];
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, xYBlockRenderer0.DEFAULT_STROKE, xYBlockRenderer0.DEFAULT_OUTLINE_PAINT, (Paint) null);
      boolean boolean0 = xYBlockRenderer0.removeAnnotation(xYPolygonAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(3, 1264, 2);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle(1, (-1));
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      XYItemRendererState xYItemRendererState0 = vectorRenderer0.initialise(graphics2D0, rectangle0, (XYPlot) null, categoryTableXYDataset0, plotRenderingInfo0);
      assertFalse(xYItemRendererState0.getElementHinting());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      XYURLGenerator xYURLGenerator0 = stackedXYAreaRenderer2_0.getURLGenerator();
      assertNull(xYURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      XYItemLabelGenerator xYItemLabelGenerator0 = xYErrorRenderer0.getDefaultItemLabelGenerator();
      assertNull(xYItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(937);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.add((double) 1, (Number) 1, true);
      Range range0 = xYSplineRenderer0.findRangeBounds(xYSeriesCollection0);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      boolean boolean0 = xYBarRenderer0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      Object object0 = deviationRenderer0.clone();
      assertNotSame(object0, deviationRenderer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1.0));
      // Undeclared exception!
      try { 
        candlestickRenderer0.setLegendItemLabelGenerator((XYSeriesLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer2_0.findRangeBounds(defaultXYDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultXYDataset cannot be cast to org.jfree.data.xy.TableXYDataset
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer2", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        xYBoxAndWhiskerRenderer0.addAnnotation((XYAnnotation) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      DrawingSupplier drawingSupplier0 = xYShapeRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      Range range0 = xYShapeRenderer0.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer((-2395.628691410625));
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range0 = stackedXYBarRenderer0.findDomainBounds((XYDataset) jDBCXYDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(0);
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(cyclicXYItemRenderer0.DEFAULT_SHAPE);
      Layer layer0 = Layer.FOREGROUND;
      cyclicXYItemRenderer0.addAnnotation((XYAnnotation) xYShapeAnnotation0, layer0);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Range range0 = cyclicXYItemRenderer0.findDomainBounds(defaultIntervalXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      XYPlot xYPlot0 = xYShapeRenderer0.getPlot();
      assertNull(xYPlot0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      xYShapeRenderer0.setURLGenerator((XYURLGenerator) null);
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      Collection<XYAnnotation> collection0 = stackedXYAreaRenderer0.getAnnotations();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StandardXYZURLGenerator standardXYZURLGenerator0 = new StandardXYZURLGenerator();
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2((XYToolTipGenerator) null, standardXYZURLGenerator0);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer((-2794), (XYToolTipGenerator) null);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
      xYAreaRenderer2_0.addEntity(standardEntityCollection0, cyclicXYItemRenderer0.DEFAULT_SHAPE, xYSeriesCollection0, 3151, 4, 0.0, 1617);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer((-1.0));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("g", xYBoxAndWhiskerRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedDomainXYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 2665.0, (-1.0), (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      xYBoxAndWhiskerRenderer0.drawItemLabel(graphics2D0, plotOrientation0, (XYDataset) null, 10, 10, 0.0, 1030.0, false);
      assertEquals((-1.0), xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(8000000.0);
      CrosshairState crosshairState0 = new CrosshairState();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      // Undeclared exception!
      try { 
        stackedXYBarRenderer0.updateCrosshairValues(crosshairState0, (-1.0), 270.0, 2494, 2252.9342, 270.0, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.AbstractXYItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      xYBlockRenderer0.updateCrosshairValues((CrosshairState) null, Double.POSITIVE_INFINITY, 1.25, (-1020), 1.25, (-1020), plotOrientation0);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("Unknown layer.", numberFormat0, numberFormat0, numberFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1, false, standardXYZToolTipGenerator0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      PolarPlot polarPlot0 = new PolarPlot();
      Point point0 = new Point(1, 2197);
      Rectangle rectangle0 = new Rectangle(point0);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      Point2D.Double point2D_Double0 = (Point2D.Double)candlestickRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle0, rectangle0, polarPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(9.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XYSplineRenderer.FillType xYSplineRenderer_FillType0 = XYSplineRenderer.FillType.TO_UPPER_BOUND;
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(1, xYSplineRenderer_FillType0);
      NumberAxis numberAxis0 = new NumberAxis();
      XYDotRenderer[] xYDotRendererArray0 = new XYDotRenderer[8];
      xYSplineRenderer0.drawRangeLine((Graphics2D) null, (XYPlot) null, numberAxis0, (Rectangle2D) null, 9.0, ((AbstractRenderer) xYDotRendererArray0[2]).DEFAULT_OUTLINE_PAINT, ((AbstractRenderer) xYDotRendererArray0[2]).DEFAULT_STROKE);
      assertTrue(xYSplineRenderer0.getDefaultCreateEntities());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-64.64788468037757), "}#!N>E=LT.;AmtW");
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      Paint paint0 = jFreeChart0.getBorderPaint();
      xYShapeRenderer0.drawDomainLine((Graphics2D) null, xYPlot0, cyclicNumberAxis0, rectangle2D_Float0, 1817.587, paint0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-64.64788468037757), "");
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      Paint paint0 = jFreeChart0.getBorderPaint();
      // Undeclared exception!
      try { 
        xYShapeRenderer0.drawDomainLine((Graphics2D) null, xYPlot0, cyclicNumberAxis0, rectangle2D_Float0, 0.0, paint0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.AbstractXYItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0);
      LegendItem legendItem0 = candlestickRenderer0.getLegendItem(1, (-66));
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      LegendItemCollection legendItemCollection0 = deviationRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(937);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false);
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(moduloAxis0);
      xYSplineRenderer0.setPlot(combinedRangeXYPlot0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      Range range0 = xYSplineRenderer0.findRangeBounds(xYSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer((-1573.9413), false);
      Range range0 = clusteredXYBarRenderer0.findRangeBounds((XYDataset) null, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      TimeSeries timeSeries0 = new TimeSeries(stackedXYBarRenderer0.ZERO);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      Range range0 = stackedXYBarRenderer0.findDomainBounds(timeSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      clusteredXYBarRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Range range0 = clusteredXYBarRenderer0.findDomainBounds(timeTableXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      Range range0 = stackedXYAreaRenderer0.findDomainBounds((XYDataset) null, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(1544);
      stackedXYAreaRenderer0.removeAnnotations();
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      TextTitle textTitle0 = new TextTitle();
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.6428571428571429, 1.0, textTitle0);
      Layer layer0 = Layer.BACKGROUND;
      vectorRenderer0.addAnnotation((XYAnnotation) xYDrawableAnnotation0, layer0);
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      XYItemLabelGenerator xYItemLabelGenerator0 = highLowRenderer0.getItemLabelGenerator(1, 1);
      assertNull(xYItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      XYToolTipGenerator xYToolTipGenerator0 = xYDotRenderer0.getSeriesToolTipGenerator((-2225));
      assertNull(xYToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(2181.4856, true);
      clusteredXYBarRenderer0.setDefaultItemLabelGenerator((XYItemLabelGenerator) null);
      assertEquals(2181.4856, clusteredXYBarRenderer0.getMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(1196);
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(deviationRenderer0.DEFAULT_SHAPE);
      AnnotationChangeEvent annotationChangeEvent0 = new AnnotationChangeEvent(defaultXYItemRenderer0, xYShapeAnnotation0);
      xYSplineRenderer0.annotationChanged(annotationChangeEvent0);
      assertTrue(xYSplineRenderer0.getDefaultSeriesVisible());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1.0));
      XYSeriesLabelGenerator xYSeriesLabelGenerator0 = xYSplineRenderer0.getLegendItemLabelGenerator();
      candlestickRenderer0.setLegendItemToolTipGenerator(xYSeriesLabelGenerator0);
      assertEquals(1, candlestickRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      XYSeriesLabelGenerator xYSeriesLabelGenerator0 = xYShapeRenderer0.getLegendItemToolTipGenerator();
      assertNull(xYSeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(8000000.0);
      GeneralPath generalPath0 = new GeneralPath(stackedXYBarRenderer0.DEFAULT_SHAPE);
      AbstractXYItemRenderer.moveTo(generalPath0, (double) stackedXYBarRenderer0.ZERO, 270.0);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      XYToolTipGenerator xYToolTipGenerator0 = clusteredXYBarRenderer0.getDefaultToolTipGenerator();
      assertNull(xYToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      candlestickRenderer0.setSeriesToolTipGenerator((-1726), standardXYToolTipGenerator0);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(413.237);
      MockDate mockDate0 = (MockDate)DateAxis.DEFAULT_ANCHOR_DATE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1024, "", 0, 0, (-110), (-110), 2434, 2852, 0, 989, 0, 0, 2852);
      Locale locale0 = Locale.PRC;
      Year year0 = new Year(mockDate0, simpleTimeZone0, locale0);
      Week week0 = new Week(0, year0);
      // Undeclared exception!
      try { 
        stackedXYBarRenderer0.beginElementGroup((Graphics2D) null, week0, 1024);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.AbstractRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      XYItemLabelGenerator xYItemLabelGenerator0 = highLowRenderer0.getSeriesItemLabelGenerator(3);
      assertNull(xYItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      // Undeclared exception!
      try { 
        AbstractXYItemRenderer.lineTo((GeneralPath) null, (double) samplingXYLineRenderer0.ZERO, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.AbstractXYItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      StandardXYSeriesLabelGenerator standardXYSeriesLabelGenerator0 = new StandardXYSeriesLabelGenerator("");
      xYDotRenderer0.setLegendItemURLGenerator(standardXYSeriesLabelGenerator0);
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      int int0 = highLowRenderer0.getPassCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      Locale locale0 = Locale.JAPANESE;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("Ga", numberFormat0, numberFormat0);
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "{0}: ({1} - {2}), ({5} - {6})", "{0}: ({1} - {2}), ({5} - {6})", "? /?ez<lGhZ]");
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(575, intervalXYToolTipGenerator0, timeSeriesURLGenerator0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("? /?ez<lGhZ]");
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, logarithmicAxis0, logarithmicAxis0, xYStepAreaRenderer0);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, xYPlot0.getDomainAxisLocation());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(0);
      XYSeriesLabelGenerator xYSeriesLabelGenerator0 = cyclicXYItemRenderer0.getLegendItemURLGenerator();
      assertNull(xYSeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Stroke stroke0 = areaRenderer0.getItemStroke((-2009), (-2009));
      TextBox textBox0 = new TextBox();
      Paint paint0 = textBox0.getBackgroundPaint();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(827.77929932, (-3162.3105436476976), 0.0, 827.77929932, stroke0, areaRenderer0.DEFAULT_OUTLINE_PAINT, paint0);
      xYShapeRenderer0.addAnnotation((XYAnnotation) xYBoxAnnotation0);
      assertTrue(xYShapeRenderer0.getDefaultSeriesVisibleInLegend());
  }
}
