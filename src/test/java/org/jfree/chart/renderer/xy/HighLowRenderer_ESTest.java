/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:19:44 GMT 2019
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.HighLowRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.data.Range;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class HighLowRenderer_ESTest extends HighLowRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setTickLength(0.1);
      HighLowRenderer highLowRenderer1 = new HighLowRenderer();
      boolean boolean0 = highLowRenderer0.equals(highLowRenderer1);
      assertEquals(0.1, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      
      highLowRenderer0.setTickLength(0);
      double double0 = highLowRenderer0.getTickLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setTickLength((-3141.9241017747395));
      double double0 = highLowRenderer0.getTickLength();
      assertEquals((-3141.9241017747395), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      Paint paint0 = highLowRenderer0.lookupSeriesPaint(2518);
      highLowRenderer0.setOpenTickPaint(paint0);
      Color color0 = (Color)highLowRenderer0.getOpenTickPaint();
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertEquals(255, color0.getBlue());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      
      highLowRenderer0.setDrawOpenTicks(false);
      boolean boolean0 = highLowRenderer0.getDrawOpenTicks();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      
      highLowRenderer0.setDrawCloseTicks(false);
      boolean boolean0 = highLowRenderer0.getDrawCloseTicks();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      Color color0 = (Color)Plot.DEFAULT_BACKGROUND_PAINT;
      highLowRenderer0.setCloseTickPaint(color0);
      Color color1 = (Color)highLowRenderer0.getCloseTickPaint();
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertEquals(255, color1.getGreen());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate(466L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, (double) highLowRenderer0.ZERO, 466L, 0.0, (-2214.99401));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItemArray0[0];
      oHLCDataItemArray0[2] = oHLCDataItemArray0[0];
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-1.0), 941.353911339329, (-1.0), (-2214.99401), 2.0);
      oHLCDataItemArray0[3] = oHLCDataItem1;
      oHLCDataItemArray0[4] = oHLCDataItem1;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItemArray0[2];
      oHLCDataItemArray0[7] = oHLCDataItemArray0[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(highLowRenderer0.ZERO, oHLCDataItemArray0);
      Range range0 = highLowRenderer0.findRangeBounds(defaultOHLCDataset0);
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertEquals(470.1769556696645, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      highLowRenderer0.findRangeBounds(jDBCXYDataset0);
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate(466L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, (double) highLowRenderer0.ZERO, 466L, 0.0, (-2214.99401));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItemArray0[0];
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 2.0, 1.0, 1.0, 0.0, (-2214.99401));
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItemArray0[0];
      oHLCDataItemArray0[4] = oHLCDataItemArray0[0];
      oHLCDataItemArray0[5] = oHLCDataItemArray0[2];
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItemArray0[4];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(highLowRenderer0.ZERO, oHLCDataItemArray0);
      Range range0 = highLowRenderer0.findRangeBounds(defaultOHLCDataset0);
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)highLowRenderer0.lookupSeriesShape(0);
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYItemRendererState xYItemRendererState0 = xYDifferenceRenderer0.initialise((Graphics2D) null, rectangle2D_Double0, combinedDomainXYPlot0, (XYDataset) null, plotRenderingInfo0);
      DateAxis dateAxis0 = new DateAxis();
      CrosshairState crosshairState0 = new CrosshairState(true);
      // Undeclared exception!
      try { 
        highLowRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, rectangle2D_Double0, plotRenderingInfo0, combinedDomainXYPlot0, dateAxis0, dateAxis0, (XYDataset) null, (-2068), 1, crosshairState0, (-2068));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.HighLowRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = stackedXYAreaRenderer0.initialise(graphics2D0, rectangle2D_Float0, (XYPlot) null, matrixSeriesCollection0, plotRenderingInfo0);
      NumberAxis numberAxis0 = new NumberAxis(":");
      CrosshairState crosshairState0 = new CrosshairState(true);
      // Undeclared exception!
      try { 
        highLowRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D_Float0, plotRenderingInfo0, (XYPlot) null, numberAxis0, numberAxis0, matrixSeriesCollection0, 10, (-1766), crosshairState0, 2490);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      HighLowRenderer highLowRenderer1 = new HighLowRenderer();
      highLowRenderer0.setDrawCloseTicks(false);
      boolean boolean0 = highLowRenderer0.equals(highLowRenderer1);
      assertFalse(boolean0);
      assertFalse(highLowRenderer0.getDrawCloseTicks());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      HighLowRenderer highLowRenderer1 = new HighLowRenderer();
      boolean boolean0 = highLowRenderer0.equals(highLowRenderer1);
      assertTrue(boolean0);
      assertEquals(2.0, highLowRenderer1.getTickLength(), 0.01);
      assertTrue(highLowRenderer1.getDrawOpenTicks());
      assertTrue(highLowRenderer1.getDrawCloseTicks());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      boolean boolean0 = highLowRenderer0.equals((Object) null);
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertFalse(boolean0);
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertTrue(highLowRenderer0.getDrawCloseTicks());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      boolean boolean0 = highLowRenderer0.equals(highLowRenderer0);
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertTrue(boolean0);
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      highLowRenderer0.findRangeBounds(xYSeriesCollection0);
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertTrue(highLowRenderer0.getDrawCloseTicks());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.findRangeBounds((XYDataset) null);
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      boolean boolean0 = highLowRenderer0.getDrawCloseTicks();
      assertTrue(boolean0);
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertTrue(highLowRenderer0.getDrawOpenTicks());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      Color color0 = (Color)Plot.DEFAULT_BACKGROUND_PAINT;
      highLowRenderer0.setCloseTickPaint(color0);
      HighLowRenderer highLowRenderer1 = new HighLowRenderer();
      boolean boolean0 = highLowRenderer0.equals(highLowRenderer1);
      assertEquals(2.0, highLowRenderer1.getTickLength(), 0.01);
      assertFalse(boolean0);
      assertTrue(highLowRenderer1.getDrawOpenTicks());
      assertTrue(highLowRenderer1.getDrawCloseTicks());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      Paint paint0 = highLowRenderer0.getCloseTickPaint();
      assertNull(paint0);
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertTrue(highLowRenderer0.getDrawCloseTicks());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      Color color0 = (Color)Plot.DEFAULT_BACKGROUND_PAINT;
      highLowRenderer0.setOpenTickPaint(color0);
      HighLowRenderer highLowRenderer1 = new HighLowRenderer();
      boolean boolean0 = highLowRenderer0.equals(highLowRenderer1);
      assertTrue(highLowRenderer1.getDrawOpenTicks());
      assertFalse(boolean0);
      assertTrue(highLowRenderer1.getDrawCloseTicks());
      assertEquals(2.0, highLowRenderer1.getTickLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      HighLowRenderer highLowRenderer1 = (HighLowRenderer)highLowRenderer0.clone();
      assertTrue(highLowRenderer1.equals((Object)highLowRenderer0));
      
      highLowRenderer1.setDefaultEntityRadius(2146624620);
      boolean boolean0 = highLowRenderer0.equals(highLowRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      boolean boolean0 = highLowRenderer0.getDrawOpenTicks();
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertTrue(boolean0);
      assertTrue(highLowRenderer0.getDrawCloseTicks());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      double double0 = highLowRenderer0.getTickLength();
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setTickLength(2500.9);
      HighLowRenderer highLowRenderer1 = new HighLowRenderer();
      boolean boolean0 = highLowRenderer0.equals(highLowRenderer1);
      assertEquals(2500.9, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setDrawOpenTicks(false);
      HighLowRenderer highLowRenderer1 = new HighLowRenderer();
      boolean boolean0 = highLowRenderer0.equals(highLowRenderer1);
      assertFalse(highLowRenderer0.getDrawOpenTicks());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      Paint paint0 = highLowRenderer0.getOpenTickPaint();
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertNull(paint0);
      assertTrue(highLowRenderer0.getDrawOpenTicks());
  }
}
