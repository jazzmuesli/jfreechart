/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:01:10 GMT 2019
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.util.Locale;
import java.util.SimpleTimeZone;
import javax.swing.JTable;
import javax.swing.table.TableModel;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.HighLowRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.urls.StandardXYURLGenerator;
import org.jfree.data.DomainOrder;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.PieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.Week;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CyclicXYItemRenderer_ESTest extends CyclicXYItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, defaultTableXYDataset0);
      cyclicXYItemRenderer_OverwriteDataSet0.getXValue(10, 3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, (XYDataset) null);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      cyclicXYItemRenderer_OverwriteDataSet0.delegateSet = (XYDataset) jDBCXYDataset0;
      cyclicXYItemRenderer_OverwriteDataSet0.getSeriesKey(10);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeSeriesCollection0, (-1.0));
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, xYBarDataset0);
      cyclicXYItemRenderer_OverwriteDataSet0.getGroup();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, xIntervalSeriesCollection0);
      cyclicXYItemRenderer_OverwriteDataSet0.getY(4, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      double[] doubleArray0 = new double[3];
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, defaultIntervalXYDataset0);
      cyclicXYItemRenderer_OverwriteDataSet0.getX(1795, 0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeSeriesCollection0, (-1.0));
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, xYBarDataset0);
      cyclicXYItemRenderer_OverwriteDataSet0.addChangeListener(xYBarDataset0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer((-307));
      double[] doubleArray0 = new double[7];
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, defaultTableXYDataset0);
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("jdbc:hsqldb:", cyclicXYItemRenderer0.DEFAULT_VALUE_LABEL_FONT, xYPlot0, false);
      cyclicXYItemRenderer0.setPlot(xYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 6, 8.0, (-4256.12), chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Rectangle2D rectangle2D0 = defaultCaret0.getFrame();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = highLowRenderer0.initialise(graphics2D0, rectangle2D0, xYPlot0, defaultTableXYDataset0, plotRenderingInfo0);
      NumberAxis numberAxis0 = new NumberAxis();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      cyclicXYItemRenderer0.drawItem(graphics2D0, xYItemRendererState0, defaultCaret0, plotRenderingInfo0, xYPlot0, numberAxis0, numberAxis0, cyclicXYItemRenderer_OverwriteDataSet0, 6, 6, categoryCrosshairState0, (-307));
      assertEquals(2, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[9];
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray1, matrixSeriesCollection0);
      double double0 = cyclicXYItemRenderer_OverwriteDataSet0.getYValue(6, 6);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(11, (XYToolTipGenerator) null);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3182, 4384, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JTable jTable0 = new JTable((TableModel) null);
      Rectangle rectangle0 = jTable0.getCellRect(45, 979, true);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "");
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      Week week0 = new Week();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4384, "org.jfree.chart.renderer.xy.CyclicXYItemRenderer", 1346, 0, 2, 5, 0, 0, 2, 979, 5);
      Locale locale0 = Locale.JAPAN;
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.renderer.xy.CyclicXYItemRenderer", week0, week0, simpleTimeZone0, locale0);
      CrosshairState crosshairState0 = new CrosshairState(true);
      // Undeclared exception!
      try { 
        cyclicXYItemRenderer0.drawItem(graphics2D0, (XYItemRendererState) null, rectangle0, plotRenderingInfo0, combinedDomainXYPlot0, cyclicNumberAxis0, periodAxis0, vectorSeriesCollection0, 10, 1, crosshairState0, 24);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer((-4532));
      double[] doubleArray0 = new double[6];
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, timePeriodValuesCollection0);
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(3, (XYToolTipGenerator) null, standardXYURLGenerator0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DateAxis dateAxis0 = new DateAxis("");
      XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, dateAxis0, dateAxis0, stackedXYAreaRenderer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = stackedXYAreaRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, xYPlot0, cyclicXYItemRenderer_OverwriteDataSet0, plotRenderingInfo0);
      // Undeclared exception!
      try { 
        cyclicXYItemRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, (Rectangle2D) null, plotRenderingInfo0, xYPlot0, dateAxis0, dateAxis0, timePeriodValuesCollection0, 2988, (-1765), (CrosshairState) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.StandardXYItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(11, (XYToolTipGenerator) null);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3182, 4384, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JTable jTable0 = new JTable((TableModel) null);
      Rectangle rectangle0 = jTable0.getCellRect(45, 979, true);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "");
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      CrosshairState crosshairState0 = new CrosshairState();
      // Undeclared exception!
      try { 
        cyclicXYItemRenderer0.drawItem(graphics2D0, (XYItemRendererState) null, rectangle0, plotRenderingInfo0, (XYPlot) null, cyclicNumberAxis0, cyclicNumberAxis0, vectorSeriesCollection0, 4384, (-5707), crosshairState0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.StandardXYItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("");
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(2314, (XYToolTipGenerator) null, standardXYURLGenerator0);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 7, 4, (-339), 10, 18, 25, false, false, false, false, true, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3, 7, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(4);
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(((SunGraphics2D) graphics2D0).transform, ((SunGraphics2D) graphics2D0).hints);
      Rectangle2D rectangle2D0 = affineTransformOp0.getBounds2D(bufferedImage0);
      MatrixSeries matrixSeries0 = new MatrixSeries("ZOOM_IN_RANGE", 2, 2);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = xYStepAreaRenderer0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, matrixSeriesCollection0, plotRenderingInfo0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CrosshairState crosshairState0 = new CrosshairState(false);
      // Undeclared exception!
      try { 
        cyclicXYItemRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D0, plotRenderingInfo0, (XYPlot) null, valueAxis0, valueAxis0, matrixSeriesCollection0, 0, 14, crosshairState0, 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.StandardXYItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, matrixSeriesCollection0);
      DomainOrder domainOrder0 = cyclicXYItemRenderer_OverwriteDataSet0.getDomainOrder();
      assertEquals(DomainOrder.NONE, domainOrder0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, defaultXYDataset0);
      int int0 = cyclicXYItemRenderer_OverwriteDataSet0.indexOf(0.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, matrixSeriesCollection0);
      int int0 = cyclicXYItemRenderer_OverwriteDataSet0.getSeriesCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, matrixSeriesCollection0);
      double double0 = cyclicXYItemRenderer_OverwriteDataSet0.getYValue(80, 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, matrixSeriesCollection0);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      cyclicXYItemRenderer_OverwriteDataSet0.setGroup(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, (XYDataset) null);
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      cyclicXYItemRenderer_OverwriteDataSet0.removeChangeListener(ringPlot0);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, matrixSeriesCollection0);
      int int0 = cyclicXYItemRenderer_OverwriteDataSet0.getItemCount(0);
      assertEquals(19, int0);
  }
}
