/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:08:28 GMT 2019
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator;
import org.jfree.chart.labels.CustomXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.ui.GradientPaintTransformType;
import org.jfree.chart.ui.GradientPaintTransformer;
import org.jfree.chart.ui.StandardGradientPaintTransformer;
import org.jfree.chart.urls.CustomXYURLGenerator;
import org.jfree.chart.urls.StandardXYURLGenerator;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.data.Range;
import org.jfree.data.xy.DefaultWindDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class XYAreaRenderer_ESTest extends XYAreaRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("", "", "area");
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(0, customXYToolTipGenerator0, standardXYURLGenerator0);
      PolarPlot polarPlot0 = new PolarPlot();
      xYAreaRenderer0.setLegendArea(polarPlot0.DEFAULT_LEGEND_ITEM_BOX);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.CENTER_HORIZONTAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      stackedXYAreaRenderer0.setGradientTransformer(standardGradientPaintTransformer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      xYAreaRenderer0.setOutline(true);
      boolean boolean0 = xYAreaRenderer0.isOutline();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("", "", "");
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(3, standardXYToolTipGenerator0, standardXYURLGenerator0);
      boolean boolean0 = stackedXYAreaRenderer0.getPlotShapes();
      assertTrue(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(boolean0);
      assertFalse(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.isOutline());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("", "", "");
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(3, standardXYToolTipGenerator0, standardXYURLGenerator0);
      boolean boolean0 = stackedXYAreaRenderer0.getPlotLines();
      assertFalse(stackedXYAreaRenderer0.getPlotArea());
      assertTrue(boolean0);
      assertTrue(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(stackedXYAreaRenderer0.isOutline());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      boolean boolean0 = stackedXYAreaRenderer0.getPlotArea();
      assertTrue(boolean0);
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = xYDifferenceRenderer0.initialise((Graphics2D) null, rectangle0, (XYPlot) null, defaultWindDataset0, plotRenderingInfo0);
      LogAxis logAxis0 = new LogAxis("");
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      CrosshairState crosshairState0 = new CrosshairState();
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle0, plotRenderingInfo0, (XYPlot) null, moduloAxis0, logAxis0, defaultWindDataset0, 500, 0, crosshairState0, 3657);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYAreaRenderer.XYAreaRendererState xYAreaRenderer_XYAreaRendererState0 = new XYAreaRenderer.XYAreaRendererState(plotRenderingInfo0);
      LogAxis logAxis0 = new LogAxis("");
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      CrosshairState crosshairState0 = new CrosshairState();
      // Undeclared exception!
      try { 
        xYAreaRenderer0.drawItem(graphics2D0, xYAreaRenderer_XYAreaRendererState0, rectangle0, plotRenderingInfo0, (XYPlot) null, moduloAxis0, logAxis0, defaultWindDataset0, 500, 0, crosshairState0, 3657);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 500, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      CrosshairState crosshairState0 = new CrosshairState();
      XYItemRendererState xYItemRendererState0 = xYAreaRenderer0.initialise(graphics2D0, rectangle2D_Double0, (XYPlot) null, defaultWindDataset0, plotRenderingInfo0);
      // Undeclared exception!
      try { 
        xYAreaRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, rectangle2D_Double0, plotRenderingInfo0, (XYPlot) null, moduloAxis0, moduloAxis0, defaultWindDataset0, (-1421), 4, crosshairState0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      boolean boolean0 = xYAreaRenderer0.equals(stackedXYAreaRenderer0);
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(205);
      boolean boolean0 = xYAreaRenderer0.equals(xYAreaRenderer0);
      assertTrue(boolean0);
      assertFalse(xYAreaRenderer0.getPlotLines());
      assertFalse(xYAreaRenderer0.isOutline());
      assertFalse(xYAreaRenderer0.getPlotShapes());
      assertFalse(xYAreaRenderer0.getPlotArea());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(4, boxAndWhiskerXYToolTipGenerator0, customXYURLGenerator0);
      assertFalse(xYAreaRenderer0.getPlotShapes());
      assertTrue(xYAreaRenderer0.getPlotArea());
      assertFalse(xYAreaRenderer0.isOutline());
      assertFalse(xYAreaRenderer0.getPlotLines());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer((-7));
      XYAreaRenderer xYAreaRenderer1 = (XYAreaRenderer)xYAreaRenderer0.clone();
      assertTrue(xYAreaRenderer1.equals((Object)xYAreaRenderer0));
      assertFalse(xYAreaRenderer1.getPlotShapes());
      assertFalse(xYAreaRenderer1.getPlotLines());
      assertNotSame(xYAreaRenderer1, xYAreaRenderer0);
      assertFalse(xYAreaRenderer1.getPlotArea());
      assertFalse(xYAreaRenderer1.isOutline());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      xYAreaRenderer0.setLegendArea(groupedStackedBarRenderer0.DEFAULT_SHAPE);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      boolean boolean0 = xYAreaRenderer0.equals(stackedXYAreaRenderer0);
      assertFalse(boolean0);
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.isOutline());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(5);
      boolean boolean0 = xYAreaRenderer0.equals(stackedXYAreaRenderer0);
      assertTrue(xYAreaRenderer0.getPlotArea());
      assertFalse(boolean0);
      assertTrue(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(xYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.isOutline());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("", "", "");
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(3, standardXYToolTipGenerator0, standardXYURLGenerator0);
      StackedXYAreaRenderer stackedXYAreaRenderer1 = new StackedXYAreaRenderer(1);
      boolean boolean0 = stackedXYAreaRenderer0.equals(stackedXYAreaRenderer1);
      assertFalse(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer1.isOutline());
      assertTrue(stackedXYAreaRenderer1.getPlotShapes());
      assertTrue(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(boolean0);
      assertFalse(stackedXYAreaRenderer1.getPlotArea());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      XYAreaRenderer xYAreaRenderer1 = new XYAreaRenderer(350);
      boolean boolean0 = xYAreaRenderer0.equals(xYAreaRenderer1);
      assertFalse(xYAreaRenderer0.getPlotShapes());
      assertFalse(xYAreaRenderer1.getPlotLines());
      assertFalse(boolean0);
      assertFalse(xYAreaRenderer1.isOutline());
      assertFalse(xYAreaRenderer1.getPlotArea());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(0);
      boolean boolean0 = xYAreaRenderer0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(xYAreaRenderer0.getPlotArea());
      assertFalse(xYAreaRenderer0.isOutline());
      assertFalse(xYAreaRenderer0.getPlotShapes());
      assertFalse(xYAreaRenderer0.getPlotLines());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = xYDifferenceRenderer0.initialise((Graphics2D) null, rectangle0, (XYPlot) null, defaultWindDataset0, plotRenderingInfo0);
      LogAxis logAxis0 = new LogAxis("");
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      CrosshairState crosshairState0 = new CrosshairState();
      // Undeclared exception!
      try { 
        xYAreaRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle0, plotRenderingInfo0, (XYPlot) null, moduloAxis0, logAxis0, defaultWindDataset0, 500, 0, crosshairState0, 3657);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.renderer.xy.XYItemRendererState cannot be cast to org.jfree.chart.renderer.xy.XYAreaRenderer$XYAreaRendererState
         //
         verifyException("org.jfree.chart.renderer.xy.XYAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      stackedXYAreaRenderer0.setPlot(combinedDomainXYPlot0);
      stackedXYAreaRenderer0.getLegendItem(10, 2465);
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("", "", "");
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(3, standardXYToolTipGenerator0, standardXYURLGenerator0);
      stackedXYAreaRenderer0.getLegendItem(3, 3);
      assertFalse(stackedXYAreaRenderer0.getPlotArea());
      assertTrue(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(stackedXYAreaRenderer0.isOutline());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("", "", "area");
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(2, customXYToolTipGenerator0, standardXYURLGenerator0);
      assertFalse(xYAreaRenderer0.getPlotShapes());
      assertTrue(xYAreaRenderer0.getPlotLines());
      assertFalse(xYAreaRenderer0.getPlotArea());
      assertFalse(xYAreaRenderer0.isOutline());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(0);
      xYAreaRenderer0.getGradientTransformer();
      assertFalse(xYAreaRenderer0.getPlotLines());
      assertFalse(xYAreaRenderer0.isOutline());
      assertFalse(xYAreaRenderer0.getPlotArea());
      assertFalse(xYAreaRenderer0.getPlotShapes());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(0);
      boolean boolean0 = xYAreaRenderer0.getPlotArea();
      assertFalse(boolean0);
      assertFalse(xYAreaRenderer0.getPlotLines());
      assertFalse(xYAreaRenderer0.getPlotShapes());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(0);
      boolean boolean0 = xYAreaRenderer0.getPlotShapes();
      assertFalse(boolean0);
      assertFalse(xYAreaRenderer0.getPlotLines());
      assertFalse(xYAreaRenderer0.getPlotArea());
      assertFalse(xYAreaRenderer0.isOutline());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer0.setGradientTransformer((GradientPaintTransformer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'transformer' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("", "", "area");
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(0, customXYToolTipGenerator0, standardXYURLGenerator0);
      xYAreaRenderer0.hashCode();
      assertFalse(xYAreaRenderer0.getPlotLines());
      assertFalse(xYAreaRenderer0.isOutline());
      assertFalse(xYAreaRenderer0.getPlotShapes());
      assertFalse(xYAreaRenderer0.getPlotArea());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(0);
      xYAreaRenderer0.setUseFillPaint(true);
      xYAreaRenderer0.getUseFillPaint();
      assertFalse(xYAreaRenderer0.getPlotShapes());
      assertFalse(xYAreaRenderer0.getPlotLines());
      assertFalse(xYAreaRenderer0.isOutline());
      assertFalse(xYAreaRenderer0.getPlotArea());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer((-286));
      xYAreaRenderer0.getLegendArea();
      assertFalse(xYAreaRenderer0.getPlotShapes());
      assertFalse(xYAreaRenderer0.getPlotLines());
      assertFalse(xYAreaRenderer0.getPlotArea());
      assertFalse(xYAreaRenderer0.isOutline());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      boolean boolean0 = stackedXYAreaRenderer0.isOutline();
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("", "", "");
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(3, standardXYToolTipGenerator0, standardXYURLGenerator0);
      stackedXYAreaRenderer0.getUseFillPaint();
      assertTrue(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getPlotLines());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(1122, customXYToolTipGenerator0, customXYURLGenerator0);
      // Undeclared exception!
      try { 
        xYAreaRenderer0.setLegendArea((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'area' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(4, boxAndWhiskerXYToolTipGenerator0, timeSeriesURLGenerator0);
      boolean boolean0 = stackedXYAreaRenderer0.getPlotLines();
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(boolean0);
  }
}
