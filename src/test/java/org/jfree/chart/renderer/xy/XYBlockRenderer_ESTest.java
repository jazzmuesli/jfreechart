/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:22:09 GMT 2019
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.font.FontRenderContext;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.text.DecimalFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.StandardXYZToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.data.Range;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYBlockRenderer_ESTest extends XYBlockRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      // Undeclared exception!
      try { 
        xYBlockRenderer0.setBlockHeight((-411.7));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'height' argument must be > 0.0
         //
         verifyException("org.jfree.chart.renderer.xy.XYBlockRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      // Undeclared exception!
      try { 
        xYBlockRenderer0.setBlockWidth((-3005.810812731982));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'width' argument must be > 0.0
         //
         verifyException("org.jfree.chart.renderer.xy.XYBlockRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      xYBlockRenderer0.setUseOutlinePaint(true);
      xYBlockRenderer0.getUseOutlinePaint();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      xYBlockRenderer0.findRangeBounds(jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      MockDate mockDate0 = new MockDate((-1512L));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-4553.90384993), (-1.0), 0.5235987755982988, (-1.0), (-1512L));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItemArray0[0];
      oHLCDataItemArray0[3] = oHLCDataItemArray0[0];
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItemArray0[3];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(xYBlockRenderer0.ZERO, oHLCDataItemArray0);
      xYBlockRenderer0.findDomainBounds(defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      // Undeclared exception!
      try { 
        xYBlockRenderer0.setPaintScale((PaintScale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'scale' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(xYBlockRenderer0.ZERO, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        xYBlockRenderer0.findRangeBounds(defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 1);
      // Undeclared exception!
      try { 
        xYBlockRenderer0.findDomainBounds(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      // Undeclared exception!
      try { 
        xYBlockRenderer0.findDomainBounds(dynamicTimeSeriesCollection0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      xYBlockRenderer0.setLegendShape(4339, defaultPolarItemRenderer0.DEFAULT_SHAPE);
      Object object0 = xYBlockRenderer0.clone();
      // Undeclared exception!
      xYBlockRenderer0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1098, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("", decimalFormat0, decimalFormat0, decimalFormat0);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(0, standardXYZToolTipGenerator0);
      FontRenderContext fontRenderContext0 = new FontRenderContext(((SunGraphics2D) graphics2D0).transform, false, true);
      Rectangle2D rectangle2D0 = jFreeChart0.DEFAULT_TITLE_FONT.getStringBounds("5KKlF", fontRenderContext0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) cyclicXYItemRenderer0.ZERO, 10, "OOK)Ct1`+rDf/R-SG(P");
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, cyclicXYItemRenderer0);
      XYItemRendererState xYItemRendererState0 = cyclicXYItemRenderer0.initialise(graphics2D0, rectangle2D0, xYPlot0, (XYDataset) null, (PlotRenderingInfo) null);
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        xYBlockRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D0, (PlotRenderingInfo) null, xYPlot0, cyclicNumberAxis0, cyclicNumberAxis0, (XYDataset) null, 0, 995, categoryCrosshairState0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYBlockRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, false);
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      XYPlot xYPlot0 = new XYPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      XYItemRendererState xYItemRendererState0 = deviationRenderer0.initialise((Graphics2D) null, rectangle2D0, xYPlot0, defaultXYZDataset0, plotRenderingInfo0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 1.0F);
      CrosshairState crosshairState0 = new CrosshairState();
      // Undeclared exception!
      try { 
        xYBlockRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, rectangle2D0, plotRenderingInfo0, xYPlot0, cyclicNumberAxis0, cyclicNumberAxis0, defaultXYZDataset0, 500, (-254), crosshairState0, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 500, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      Object object0 = xYBlockRenderer0.clone();
      xYBlockRenderer0.setBlockHeight(599.522629262497);
      boolean boolean0 = xYBlockRenderer0.equals(object0);
      assertEquals(599.522629262497, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      XYBlockRenderer xYBlockRenderer1 = (XYBlockRenderer)xYBlockRenderer0.clone();
      boolean boolean0 = xYBlockRenderer0.equals(xYBlockRenderer1);
      assertNotSame(xYBlockRenderer1, xYBlockRenderer0);
      assertTrue(xYBlockRenderer1.getDrawOutlines());
      assertFalse(xYBlockRenderer1.getUseOutlinePaint());
      assertTrue(boolean0);
      assertEquals(1.0, xYBlockRenderer1.getBlockWidth(), 0.01);
      assertEquals(1.0, xYBlockRenderer1.getBlockHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      boolean boolean0 = xYBlockRenderer0.equals(xYBlockRenderer0);
      assertTrue(boolean0);
      assertFalse(xYBlockRenderer0.getUseOutlinePaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      boolean boolean0 = xYBlockRenderer0.equals(defaultXYZDataset0);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(boolean0);
      assertFalse(xYBlockRenderer0.getUseOutlinePaint());
      assertTrue(xYBlockRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(1141.0, (-7.0), "");
      XYBarDataset xYBarDataset0 = new XYBarDataset(categoryTableXYDataset0, (double) xYBlockRenderer0.ZERO);
      Range range0 = xYBlockRenderer0.findRangeBounds(xYBarDataset0);
      assertTrue(xYBlockRenderer0.getDrawOutlines());
      assertFalse(xYBlockRenderer0.getUseOutlinePaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals((-7.0), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      XYBarDataset xYBarDataset0 = new XYBarDataset(categoryTableXYDataset0, (double) xYBlockRenderer0.ZERO);
      xYBlockRenderer0.findRangeBounds(xYBarDataset0);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDrawOutlines());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertFalse(xYBlockRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      xYBlockRenderer0.findRangeBounds((XYDataset) null);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertFalse(xYBlockRenderer0.getUseOutlinePaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(1141.0, (-7.0), "");
      XYBarDataset xYBarDataset0 = new XYBarDataset(categoryTableXYDataset0, (double) xYBlockRenderer0.ZERO);
      Range range0 = xYBlockRenderer0.findDomainBounds(xYBarDataset0);
      assertTrue(xYBlockRenderer0.getDrawOutlines());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer0.getUseOutlinePaint());
      assertEquals(1141.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      xYBlockRenderer0.findDomainBounds((XYDataset) null);
      assertFalse(xYBlockRenderer0.getUseOutlinePaint());
      assertTrue(xYBlockRenderer0.getDrawOutlines());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      xYBlockRenderer0.findDomainBounds(categoryTableXYDataset0);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer0.getUseOutlinePaint());
      assertTrue(xYBlockRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertEquals(RectangleAnchor.TOP, xYBlockRenderer0.getBlockAnchor());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      XYBlockRenderer xYBlockRenderer1 = new XYBlockRenderer();
      boolean boolean0 = xYBlockRenderer0.equals(xYBlockRenderer1);
      assertEquals(RectangleAnchor.TOP_LEFT, xYBlockRenderer0.getBlockAnchor());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertEquals(RectangleAnchor.RIGHT, xYBlockRenderer0.getBlockAnchor());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertEquals(RectangleAnchor.LEFT, xYBlockRenderer0.getBlockAnchor());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((Number) xYBlockRenderer0.ZERO, (Number) xYBlockRenderer0.ZERO, "Null 'text' argument.", true);
      xYBlockRenderer0.findDomainBounds(categoryTableXYDataset0);
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, xYBlockRenderer0.getBlockAnchor());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertEquals(RectangleAnchor.BOTTOM, xYBlockRenderer0.getBlockAnchor());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, xYBlockRenderer0.getBlockAnchor());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertEquals(RectangleAnchor.TOP_RIGHT, xYBlockRenderer0.getBlockAnchor());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      // Undeclared exception!
      try { 
        xYBlockRenderer0.setBlockHeight(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'height' argument must be > 0.0
         //
         verifyException("org.jfree.chart.renderer.xy.XYBlockRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      // Undeclared exception!
      try { 
        xYBlockRenderer0.setBlockWidth(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'width' argument must be > 0.0
         //
         verifyException("org.jfree.chart.renderer.xy.XYBlockRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      xYBlockRenderer0.setBlockWidth(2595.0);
      assertEquals(2595.0, xYBlockRenderer0.getBlockWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      xYBlockRenderer0.setUseOutlinePaint(true);
      XYBlockRenderer xYBlockRenderer1 = new XYBlockRenderer();
      boolean boolean0 = xYBlockRenderer0.equals(xYBlockRenderer1);
      assertFalse(boolean0);
      assertTrue(xYBlockRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      boolean boolean0 = xYBlockRenderer0.getUseOutlinePaint();
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      double double0 = xYBlockRenderer0.getBlockWidth();
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertTrue(xYBlockRenderer0.getDrawOutlines());
      assertFalse(xYBlockRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = xYBlockRenderer0.getBlockAnchor();
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDrawOutlines());
      assertFalse(xYBlockRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertTrue(xYBlockRenderer0.getDrawOutlines());
      
      xYBlockRenderer0.setDrawOutlines(false);
      boolean boolean0 = xYBlockRenderer0.getDrawOutlines();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      double double0 = xYBlockRenderer0.getBlockHeight();
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer0.getUseOutlinePaint());
      assertEquals(1.0, double0, 0.01);
      assertTrue(xYBlockRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      boolean boolean0 = xYBlockRenderer0.getDrawOutlines();
      assertFalse(xYBlockRenderer0.getUseOutlinePaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      PaintScale paintScale0 = xYBlockRenderer0.getPaintScale();
      xYBlockRenderer0.setPaintScale(paintScale0);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDrawOutlines());
      assertFalse(xYBlockRenderer0.getUseOutlinePaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
  }
}
