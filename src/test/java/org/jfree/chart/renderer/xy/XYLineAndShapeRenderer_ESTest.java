/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 20:57:33 GMT 2019
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator;
import org.jfree.chart.labels.IntervalXYToolTipGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.urls.CustomXYURLGenerator;
import org.jfree.chart.urls.StandardXYZURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.data.Range;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYLineAndShapeRenderer_ESTest extends XYLineAndShapeRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      boolean boolean0 = xYSplineRenderer0.isLinePass(3842);
      assertTrue(xYSplineRenderer0.getDefaultShapesFilled());
      assertTrue(xYSplineRenderer0.getDrawOutlines());
      assertTrue(xYSplineRenderer0.getDefaultLinesVisible());
      assertTrue(xYSplineRenderer0.getDefaultShapesVisible());
      assertFalse(xYSplineRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYSplineRenderer0.getUseOutlinePaint());
      assertFalse(xYSplineRenderer0.getUseFillPaint());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      XYLineAndShapeRenderer.State xYLineAndShapeRenderer_State0 = new XYLineAndShapeRenderer.State(plotRenderingInfo0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      TimeSeries timeSeries0 = new TimeSeries(integer0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      xYLineAndShapeRenderer_State0.startSeriesPass(timeSeriesCollection0, (-328), (-328), (-328), (-328), 1807);
      assertEquals((-328), xYLineAndShapeRenderer_State0.getLastItemIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYLineAndShapeRenderer.State xYLineAndShapeRenderer_State0 = new XYLineAndShapeRenderer.State(plotRenderingInfo0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYLineAndShapeRenderer_State0.startSeriesPass(xYTaskDataset0, 0, 0, (-1), (-1), (-1));
      assertEquals((-1), xYLineAndShapeRenderer_State0.getLastItemIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      boolean boolean0 = deviationRenderer0.getItemShapeFilled((-2127), (-899));
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertTrue(boolean0);
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertTrue(deviationRenderer0.getDefaultShapesVisible());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertTrue(deviationRenderer0.getDefaultLinesVisible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(0);
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYItemRendererState xYItemRendererState0 = xYAreaRenderer0.initialise((Graphics2D) null, rectangle0, xYPlot0, (XYDataset) null, plotRenderingInfo0);
      deviationRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, rectangle0, plotRenderingInfo0, xYPlot0, (ValueAxis) null, (ValueAxis) null, (XYDataset) null, 3, 90, (CrosshairState) null, 10);
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertTrue(deviationRenderer0.getDefaultShapesFilled());
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertTrue(deviationRenderer0.getDefaultLinesVisible());
      assertTrue(deviationRenderer0.getDefaultShapesVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(true, true);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart(multiplePiePlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1860);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Object[] objectArray0 = new Object[7];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 120);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0, (ListSelectionModel) null);
      Rectangle rectangle0 = jTable0.getCellRect(10, 2, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      deviationRenderer0.initialise(graphics2D0, rectangle0, (XYPlot) null, (XYDataset) null, plotRenderingInfo0);
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertTrue(deviationRenderer0.getDefaultLinesVisible());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertTrue(deviationRenderer0.getDefaultShapesFilled());
      assertTrue(deviationRenderer0.getDefaultShapesVisible());
      assertFalse(deviationRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, false);
      xYLineAndShapeRenderer0.setSeriesShapesVisible(0, true);
      Boolean boolean0 = xYLineAndShapeRenderer0.getSeriesShapesVisible(0);
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getDefaultShapesVisible());
      assertNotNull(boolean0);
      assertTrue(boolean0);
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(false, false);
      xYLineAndShapeRenderer0.setSeriesShapesVisible(0, false);
      Boolean boolean0 = xYLineAndShapeRenderer0.getSeriesShapesVisible(0);
      assertTrue(xYLineAndShapeRenderer0.getDefaultShapesFilled());
      assertNotNull(boolean0);
      assertFalse(boolean0);
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      boolean boolean0 = xYErrorRenderer0.getItemLineVisible(305, 305);
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertFalse(boolean0);
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertTrue(xYErrorRenderer0.getDefaultShapesFilled());
      assertTrue(xYErrorRenderer0.getDefaultShapesVisible());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer(boxAndWhiskerXYToolTipGenerator0, (XYURLGenerator) null);
      boolean boolean0 = xYStepRenderer0.getDrawSeriesLineAsPath();
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertFalse(xYStepRenderer0.getDefaultShapesVisible());
      assertFalse(boolean0);
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getDefaultShapesFilled());
      assertTrue(xYStepRenderer0.getDefaultLinesVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(false, false);
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      
      xYLineAndShapeRenderer0.setDrawOutlines(false);
      boolean boolean0 = xYLineAndShapeRenderer0.getDrawOutlines();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      boolean boolean0 = xYStepRenderer0.getDefaultShapesVisible();
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertTrue(xYStepRenderer0.getDefaultLinesVisible());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertFalse(boolean0);
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getDefaultShapesFilled());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, false);
      boolean boolean0 = deviationRenderer0.getDefaultLinesVisible();
      assertTrue(deviationRenderer0.getDefaultShapesFilled());
      assertFalse(deviationRenderer0.getDefaultShapesVisible());
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      // Undeclared exception!
      try { 
        xYSplineRenderer0.setSeriesShapesVisible((-159), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      // Undeclared exception!
      try { 
        deviationRenderer0.setSeriesShapesVisible((-2127), (Boolean) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      // Undeclared exception!
      try { 
        xYLineAndShapeRenderer0.setSeriesShapesFilled((-1), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateFormat dateFormat0 = DateFormat.getDateInstance(0);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator("", dateFormat0, numberFormat0);
      StandardXYZURLGenerator standardXYZURLGenerator0 = new StandardXYZURLGenerator();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer(boxAndWhiskerXYToolTipGenerator0, standardXYZURLGenerator0);
      // Undeclared exception!
      try { 
        xYStepRenderer0.setSeriesShapesFilled((-1463), (Boolean) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      // Undeclared exception!
      try { 
        xYErrorRenderer0.setSeriesLinesVisible((-540), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        xYStepRenderer0.setSeriesLinesVisible((-3698), boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      // Undeclared exception!
      try { 
        xYErrorRenderer0.setLegendLine((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'line' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)xYLineAndShapeRenderer0.lookupSeriesShape(6);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 6, 0.0, (double) 1.0F, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(30.0, (-4357));
      CrosshairState crosshairState0 = new CrosshairState();
      // Undeclared exception!
      try { 
        xYLineAndShapeRenderer0.drawSecondaryPass(sunGraphics2D0, combinedRangeXYPlot0, (XYDataset) null, 10, (-4357), 34, cyclicNumberAxis0, rectangle2D_Double0, cyclicNumberAxis0, crosshairState0, (EntityCollection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYLineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)deviationRenderer0.lookupLegendShape(2890);
      XYSplineRenderer.FillType xYSplineRenderer_FillType0 = XYSplineRenderer.FillType.NONE;
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(2890, xYSplineRenderer_FillType0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedRangeCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      TimeSeries timeSeries0 = new TimeSeries(10, "", (String) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYSplineRenderer.XYSplineState xYSplineRenderer_XYSplineState0 = (XYSplineRenderer.XYSplineState)xYSplineRenderer0.initialise(sunGraphics2D0, rectangle2D_Double0, combinedDomainXYPlot0, timeSeriesCollection0, plotRenderingInfo0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      DateAxis dateAxis0 = new DateAxis("ZOOM_IN_RANGE", zoneInfo0, locale0);
      CrosshairState crosshairState0 = new CrosshairState();
      StandardEntityCollection standardEntityCollection0 = (StandardEntityCollection)xYSplineRenderer_XYSplineState0.getEntityCollection();
      // Undeclared exception!
      try { 
        deviationRenderer0.drawSecondaryPass(sunGraphics2D0, combinedDomainXYPlot0, timeSeriesCollection0, (-3250), 0, 1171, dateAxis0, rectangle2D_Double0, dateAxis0, crosshairState0, standardEntityCollection0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1171, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)deviationRenderer0.lookupLegendShape(2890);
      XYSplineRenderer.FillType xYSplineRenderer_FillType0 = XYSplineRenderer.FillType.NONE;
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(2890, xYSplineRenderer_FillType0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedRangeCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      TimeSeries timeSeries0 = new TimeSeries(10, "", (String) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYSplineRenderer.XYSplineState xYSplineRenderer_XYSplineState0 = (XYSplineRenderer.XYSplineState)xYSplineRenderer0.initialise(sunGraphics2D0, rectangle2D_Double0, combinedDomainXYPlot0, timeSeriesCollection0, plotRenderingInfo0);
      MockDate mockDate0 = new MockDate(300);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      Quarter quarter0 = new Quarter(mockDate0, zoneInfo0, locale0);
      PeriodAxis periodAxis0 = new PeriodAxis("ZOOM_RANGE_BOTH", quarter0, quarter0, zoneInfo0, locale0);
      // Undeclared exception!
      try { 
        deviationRenderer0.drawPrimaryLineAsPath(xYSplineRenderer_XYSplineState0, sunGraphics2D0, combinedDomainXYPlot0, timeSeriesCollection0, 1110, 9999, 768, periodAxis0, periodAxis0, rectangle2D_Double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9999, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      Line2D.Double line2D_Double0 = new Line2D.Double((double) xYSplineRenderer0.ZERO, (double) xYSplineRenderer0.ZERO, (double) xYSplineRenderer0.ZERO, 0.0);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYLineAndShapeRenderer.State xYLineAndShapeRenderer_State0 = new XYLineAndShapeRenderer.State(plotRenderingInfo0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DateAxis dateAxis0 = new DateAxis("L");
      // Undeclared exception!
      try { 
        xYSplineRenderer0.drawPrimaryLineAsPath(xYLineAndShapeRenderer_State0, (Graphics2D) null, (XYPlot) null, defaultIntervalXYDataset0, 0, 10, 0, dateAxis0, dateAxis0, rectangle2D0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State cannot be cast to org.jfree.chart.renderer.xy.XYSplineRenderer$XYSplineState
         //
         verifyException("org.jfree.chart.renderer.xy.XYSplineRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(xYLineAndShapeRenderer0.ZERO);
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(true, true);
      Point point0 = new Point(206, (-3652));
      Rectangle rectangle0 = new Rectangle(point0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = deviationRenderer0.initialise((Graphics2D) null, rectangle0, (XYPlot) null, simpleHistogramDataset0, plotRenderingInfo0);
      TimeZone timeZone0 = TimeZone.getTimeZone("k_*a>?eaLS]IH='bBy");
      Locale locale0 = Locale.UK;
      DateAxis dateAxis0 = new DateAxis("zOfznsEBN%Hjxt\"", timeZone0, locale0);
      // Undeclared exception!
      try { 
        xYLineAndShapeRenderer0.drawPrimaryLine(xYItemRendererState0, (Graphics2D) null, (XYPlot) null, simpleHistogramDataset0, 0, 0, (-651), dateAxis0, dateAxis0, rectangle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer((XYToolTipGenerator) null, customXYURLGenerator0);
      XYLineAndShapeRenderer.State xYLineAndShapeRenderer_State0 = new XYLineAndShapeRenderer.State((PlotRenderingInfo) null);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTableHeader jTableHeader0 = new JTableHeader(defaultTableColumnModel0);
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(1327);
      NumberAxis numberAxis0 = new NumberAxis();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      CrosshairState crosshairState0 = new CrosshairState();
      // Undeclared exception!
      try { 
        xYStepRenderer0.drawItem((Graphics2D) null, xYLineAndShapeRenderer_State0, rectangle0, (PlotRenderingInfo) null, (XYPlot) null, numberAxis0, numberAxis0, matrixSeriesCollection0, 0, 1327, crosshairState0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYStepRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) xYLineAndShapeRenderer0.ZERO, Double.NEGATIVE_INFINITY, 20.0, (double) xYLineAndShapeRenderer0.ZERO);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, true);
      Rectangle2D rectangle2D0 = xYLineAndShapeRenderer0.DEFAULT_VALUE_LABEL_FONT.getStringBounds("line", fontRenderContext0);
      // Undeclared exception!
      try { 
        xYLineAndShapeRenderer0.drawFirstPassShape((Graphics2D) null, (-3211), 26, 989, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYLineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      assertFalse(defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      
      defaultXYItemRenderer0.setDrawSeriesLineAsPath(true);
      assertTrue(defaultXYItemRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      Boolean boolean0 = new Boolean(true);
      xYErrorRenderer0.setSeriesLinesVisible(869, boolean0);
      assertTrue(xYErrorRenderer0.getDefaultShapesVisible());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYErrorRenderer0.getDefaultLinesVisible());
      assertTrue(xYErrorRenderer0.getDefaultShapesFilled());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      xYLineAndShapeRenderer0.setSeriesShapesFilled(0, (Boolean) null);
      assertTrue(xYLineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getDefaultShapesVisible());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      defaultXYItemRenderer0.setDefaultShapesVisible(false);
      DefaultXYItemRenderer defaultXYItemRenderer1 = new DefaultXYItemRenderer();
      boolean boolean0 = defaultXYItemRenderer0.equals(defaultXYItemRenderer1);
      assertFalse(defaultXYItemRenderer0.getDefaultShapesVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      DefaultXYItemRenderer defaultXYItemRenderer1 = (DefaultXYItemRenderer)defaultXYItemRenderer0.clone();
      assertTrue(defaultXYItemRenderer1.equals((Object)defaultXYItemRenderer0));
      
      defaultXYItemRenderer1.setDefaultEntityRadius(1327);
      boolean boolean0 = defaultXYItemRenderer0.equals(defaultXYItemRenderer1);
      assertFalse(boolean0);
      assertFalse(defaultXYItemRenderer1.equals((Object)defaultXYItemRenderer0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(false, false);
      boolean boolean0 = xYLineAndShapeRenderer0.equals(xYLineAndShapeRenderer0);
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      boolean boolean0 = defaultXYItemRenderer0.equals((Object) null);
      assertFalse(defaultXYItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getDefaultShapesVisible());
      assertFalse(boolean0);
      assertFalse(defaultXYItemRenderer0.getUseFillPaint());
      assertTrue(defaultXYItemRenderer0.getDefaultShapesFilled());
      assertTrue(defaultXYItemRenderer0.getDefaultLinesVisible());
      assertFalse(defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(defaultXYItemRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(false, false);
      XYLineAndShapeRenderer xYLineAndShapeRenderer1 = (XYLineAndShapeRenderer)xYLineAndShapeRenderer0.clone();
      boolean boolean0 = xYLineAndShapeRenderer0.equals(xYLineAndShapeRenderer1);
      assertNotSame(xYLineAndShapeRenderer1, xYLineAndShapeRenderer0);
      assertTrue(xYLineAndShapeRenderer1.getDefaultShapesFilled());
      assertTrue(boolean0);
      assertFalse(xYLineAndShapeRenderer1.getDefaultLinesVisible());
      assertFalse(xYLineAndShapeRenderer1.getDefaultShapesVisible());
      assertFalse(xYLineAndShapeRenderer1.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer1.getUseOutlinePaint());
      assertFalse(xYLineAndShapeRenderer1.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer1.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      xYSplineRenderer0.getLegendItem(1, 1997);
      assertFalse(xYSplineRenderer0.getUseFillPaint());
      assertTrue(xYSplineRenderer0.getDefaultShapesFilled());
      assertFalse(xYSplineRenderer0.getUseOutlinePaint());
      assertTrue(xYSplineRenderer0.getDefaultShapesVisible());
      assertFalse(xYSplineRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYSplineRenderer0.getDefaultLinesVisible());
      assertTrue(xYSplineRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      PiePlot piePlot0 = new PiePlot((PieDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart("[", piePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-1836), 0, 2514, 2514, 15, 0, false, false, false, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYLineAndShapeRenderer.State xYLineAndShapeRenderer_State0 = new XYLineAndShapeRenderer.State(plotRenderingInfo0);
      XYSeries xYSeries0 = new XYSeries(768, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      ModuloAxis moduloAxis0 = new ModuloAxis("ZOOM_DOMAIN_BOTH", (Range) null);
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(0.0F, 0, (-1218.2239F), 300);
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      // Undeclared exception!
      try { 
        xYLineAndShapeRenderer0.drawPrimaryLine(xYLineAndShapeRenderer_State0, (Graphics2D) null, (XYPlot) null, xYSeriesCollection0, (-119), 300, 300, moduloAxis0, (ValueAxis) null, rectangle2D0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 300, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      boolean boolean0 = xYSplineRenderer0.isItemPass(1);
      assertTrue(xYSplineRenderer0.getDefaultLinesVisible());
      assertTrue(boolean0);
      assertFalse(xYSplineRenderer0.getUseFillPaint());
      assertFalse(xYSplineRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYSplineRenderer0.getDrawOutlines());
      assertTrue(xYSplineRenderer0.getDefaultShapesFilled());
      assertTrue(xYSplineRenderer0.getDefaultShapesVisible());
      assertFalse(xYSplineRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, false);
      boolean boolean0 = xYLineAndShapeRenderer0.isItemPass(341);
      assertTrue(xYLineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(boolean0);
      assertFalse(xYLineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, false);
      boolean boolean0 = xYLineAndShapeRenderer0.isLinePass(0);
      assertTrue(boolean0);
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getDefaultShapesVisible());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(false, false);
      boolean boolean0 = xYLineAndShapeRenderer0.isLinePass((-63));
      assertFalse(xYLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertFalse(boolean0);
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(true, true);
      boolean boolean0 = deviationRenderer0.getItemShapeVisible((-3509), 1896);
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertTrue(deviationRenderer0.getDefaultShapesFilled());
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertTrue(boolean0);
      assertTrue(deviationRenderer0.getDefaultLinesVisible());
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, false);
      boolean boolean0 = xYLineAndShapeRenderer0.getItemLineVisible(946, 2);
      assertTrue(xYLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(boolean0);
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, false);
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      
      xYLineAndShapeRenderer0.setDrawSeriesLineAsPath(false);
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYLineAndShapeRenderer.State xYLineAndShapeRenderer_State0 = new XYLineAndShapeRenderer.State(plotRenderingInfo0);
      xYLineAndShapeRenderer_State0.startSeriesPass((XYDataset) null, 0, 1800, 1800, 300, 300);
      assertEquals(1800, xYLineAndShapeRenderer_State0.getFirstItemIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot((PieDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart("[", piePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-1836), 0, 2514, 2514, 15, 0, false, false, false, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYLineAndShapeRenderer.State xYLineAndShapeRenderer_State0 = new XYLineAndShapeRenderer.State(plotRenderingInfo0);
      xYLineAndShapeRenderer_State0.setLastPointGood(false);
      assertFalse(xYLineAndShapeRenderer_State0.isLastPointGood());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYLineAndShapeRenderer.State xYLineAndShapeRenderer_State0 = new XYLineAndShapeRenderer.State(plotRenderingInfo0);
      boolean boolean0 = xYLineAndShapeRenderer_State0.isLastPointGood();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(true, true);
      boolean boolean0 = deviationRenderer0.getUseOutlinePaint();
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertTrue(deviationRenderer0.getDefaultLinesVisible());
      assertFalse(boolean0);
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertTrue(deviationRenderer0.getDefaultShapesVisible());
      assertTrue(deviationRenderer0.getDefaultShapesFilled());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      xYErrorRenderer0.getSeriesShapesFilled((-1));
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getDefaultShapesFilled());
      assertTrue(xYErrorRenderer0.getDefaultShapesVisible());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertFalse(xYErrorRenderer0.getDefaultLinesVisible());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      xYErrorRenderer0.setDefaultLinesVisible(false);
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertTrue(xYErrorRenderer0.getDefaultShapesFilled());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertTrue(xYErrorRenderer0.getDefaultShapesVisible());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYErrorRenderer0.getDefaultLinesVisible());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      boolean boolean0 = xYLineAndShapeRenderer0.getDefaultShapesFilled();
      assertTrue(xYLineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(boolean0);
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getDefaultLinesVisible());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, false);
      int int0 = xYLineAndShapeRenderer0.getPassCount();
      assertFalse(xYLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getDefaultLinesVisible());
      assertEquals(2, int0);
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      Line2D.Double line2D_Double0 = new Line2D.Double((double) xYSplineRenderer0.ZERO, (double) xYSplineRenderer0.ZERO, (double) xYSplineRenderer0.ZERO, 0.0);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      xYSplineRenderer0.setLegendLine(rectangle2D0);
      assertTrue(xYSplineRenderer0.getDefaultLinesVisible());
      assertFalse(xYSplineRenderer0.getUseFillPaint());
      assertTrue(xYSplineRenderer0.getDrawOutlines());
      assertTrue(xYSplineRenderer0.getDefaultShapesVisible());
      assertFalse(xYSplineRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYSplineRenderer0.getUseOutlinePaint());
      assertTrue(xYSplineRenderer0.getDefaultShapesFilled());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(true, true);
      boolean boolean0 = deviationRenderer0.getDefaultShapesVisible();
      assertTrue(boolean0);
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertTrue(deviationRenderer0.getDefaultLinesVisible());
      assertTrue(deviationRenderer0.getDefaultShapesFilled());
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(true, true);
      boolean boolean0 = deviationRenderer0.getDefaultLinesVisible();
      assertTrue(deviationRenderer0.getDefaultShapesFilled());
      assertTrue(deviationRenderer0.getDefaultShapesVisible());
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertTrue(boolean0);
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertTrue(deviationRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(true, true);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart(multiplePiePlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1860);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      deviationRenderer0.drawFirstPassShape(graphics2D0, (-21), 2774, 365, multiplePiePlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertTrue(deviationRenderer0.getDefaultShapesFilled());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertTrue(deviationRenderer0.getDefaultShapesVisible());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertTrue(deviationRenderer0.getDefaultLinesVisible());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      xYLineAndShapeRenderer0.setUseFillPaint(false);
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(true, true);
      deviationRenderer0.setUseOutlinePaint(false);
      assertTrue(deviationRenderer0.getDefaultShapesFilled());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertTrue(deviationRenderer0.getDefaultShapesVisible());
      assertTrue(deviationRenderer0.getDefaultLinesVisible());
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertFalse(deviationRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, false);
      xYLineAndShapeRenderer0.setSeriesShapesVisible(0, true);
      boolean boolean0 = xYLineAndShapeRenderer0.getItemShapeVisible(0, 0);
      assertFalse(xYLineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(boolean0);
      assertTrue(xYLineAndShapeRenderer0.getDefaultShapesFilled());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, false);
      xYLineAndShapeRenderer0.setSeriesLinesVisible(1054, true);
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getDefaultLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getDefaultShapesVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(true, true);
      deviationRenderer0.setSeriesShapesFilled(1896, false);
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertTrue(deviationRenderer0.getDefaultLinesVisible());
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertTrue(deviationRenderer0.getDefaultShapesVisible());
      assertTrue(deviationRenderer0.getDefaultShapesFilled());
      assertFalse(deviationRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, false);
      xYLineAndShapeRenderer0.getSeriesShapesVisible(0);
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(true, true);
      boolean boolean0 = deviationRenderer0.getDrawSeriesLineAsPath();
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertTrue(deviationRenderer0.getDefaultShapesVisible());
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertTrue(deviationRenderer0.getDefaultShapesFilled());
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertTrue(boolean0);
      assertTrue(deviationRenderer0.getDefaultLinesVisible());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, false);
      xYLineAndShapeRenderer0.getSeriesLinesVisible(0);
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getDefaultShapesVisible());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      Line2D.Double line2D_Double0 = (Line2D.Double)xYErrorRenderer0.getLegendLine();
      assertEquals(7.0, line2D_Double0.x2, 0.01);
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getDefaultShapesFilled());
      assertEquals((-7.0), line2D_Double0.x1, 0.01);
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertFalse(xYErrorRenderer0.getDefaultLinesVisible());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertTrue(xYErrorRenderer0.getDefaultShapesVisible());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("Ixe9.:m", decimalFormat0, decimalFormat0);
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer(intervalXYToolTipGenerator0, customXYURLGenerator0);
      boolean boolean0 = xYStepRenderer0.getItemShapeVisible(417, 0);
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertFalse(boolean0);
      assertTrue(xYStepRenderer0.getDefaultShapesFilled());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getDefaultLinesVisible());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, false);
      boolean boolean0 = xYLineAndShapeRenderer0.getUseFillPaint();
      assertFalse(boolean0);
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getDefaultShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getDefaultShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDefaultLinesVisible());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(true, true);
      boolean boolean0 = deviationRenderer0.getDrawOutlines();
      assertTrue(deviationRenderer0.getDefaultShapesFilled());
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertTrue(deviationRenderer0.getDefaultShapesVisible());
      assertTrue(deviationRenderer0.getDefaultLinesVisible());
      assertTrue(boolean0);
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(true, true);
      Boolean boolean0 = new Boolean(true);
      deviationRenderer0.setSeriesShapesVisible(46, boolean0);
      assertTrue(deviationRenderer0.getDefaultShapesVisible());
      assertTrue(deviationRenderer0.getDefaultLinesVisible());
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertTrue(deviationRenderer0.getDefaultShapesFilled());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      xYErrorRenderer0.setDefaultShapesFilled(true);
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertFalse(xYErrorRenderer0.getDefaultLinesVisible());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertTrue(xYErrorRenderer0.getDefaultShapesVisible());
      assertTrue(xYErrorRenderer0.getDefaultShapesFilled());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
  }
}
