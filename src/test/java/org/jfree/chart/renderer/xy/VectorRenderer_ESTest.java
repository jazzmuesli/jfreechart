/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:31:37 GMT 2019
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.VectorRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.data.Range;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class VectorRenderer_ESTest extends VectorRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(vectorRenderer0.ZERO, (OHLCDataItem[]) null);
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, (double) vectorRenderer0.ZERO);
      // Undeclared exception!
      try { 
        vectorRenderer0.findRangeBounds(xYBarDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      // Undeclared exception!
      try { 
        vectorRenderer0.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      Date[] dateArray0 = new Date[2];
      double[] doubleArray0 = new double[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(vectorRenderer0.ZERO, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        vectorRenderer0.findRangeBounds(defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      // Undeclared exception!
      try { 
        vectorRenderer0.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      XYPlot xYPlot0 = new XYPlot(categoryTableXYDataset0, (ValueAxis) null, (ValueAxis) null, vectorRenderer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = xYDifferenceRenderer0.initialise((Graphics2D) null, rectangle2D_Double0, xYPlot0, (XYDataset) null, plotRenderingInfo0);
      CrosshairState crosshairState0 = new CrosshairState();
      // Undeclared exception!
      try { 
        vectorRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, rectangle2D_Double0, plotRenderingInfo0, xYPlot0, (ValueAxis) null, (ValueAxis) null, (XYDataset) null, 10, (-1376), crosshairState0, 477);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.VectorRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      boolean boolean0 = vectorRenderer0.equals(vectorRenderer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      boolean boolean0 = vectorRenderer0.equals(vectorSeriesCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      Range range0 = vectorRenderer0.findRangeBounds(vectorSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[6];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(vectorRenderer0.ZERO, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = vectorRenderer0.findRangeBounds(defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      XYSeries xYSeries0 = new XYSeries(false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 0.05);
      Range range0 = vectorRenderer0.findDomainBounds(xYBarDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[6];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(vectorRenderer0.ZERO, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        vectorRenderer0.findDomainBounds(defaultHighLowDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      Range range0 = vectorRenderer0.findDomainBounds(vectorSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      Object object0 = vectorRenderer0.clone();
      boolean boolean0 = vectorRenderer0.equals(object0);
      assertTrue(boolean0);
  }
}
