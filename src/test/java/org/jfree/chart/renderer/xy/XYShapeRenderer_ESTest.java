/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:27:21 GMT 2019
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.xy.SamplingXYLineRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.data.Range;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYZDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYShapeRenderer_ESTest extends XYShapeRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, (ValueAxis) null, (ValueAxis) null, xYShapeRenderer0);
      Color color0 = (Color)xYShapeRenderer0.getPaint((XYDataset) null, 1, 0);
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertEquals((-43691), color0.getRGB());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Stroke stroke0 = combinedRangeCategoryPlot0.getDomainCrosshairStroke();
      xYShapeRenderer0.setGuideLineStroke(stroke0);
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      Color color0 = (Color)FastScatterPlot.DEFAULT_GRIDLINE_PAINT;
      xYShapeRenderer0.setGuideLinePaint(color0);
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      
      xYShapeRenderer0.setUseOutlinePaint(false);
      boolean boolean0 = xYShapeRenderer0.getUseOutlinePaint();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      
      xYShapeRenderer0.setUseFillPaint(true);
      boolean boolean0 = xYShapeRenderer0.getUseFillPaint();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      
      xYShapeRenderer0.setDrawOutlines(true);
      boolean boolean0 = xYShapeRenderer0.getDrawOutlines();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      MatrixSeries matrixSeries0 = new MatrixSeries("H\"#R;vf(w", 2, 2);
      matrixSeriesCollection0.addSeries(matrixSeries0);
      xYShapeRenderer0.findZBounds(matrixSeriesCollection0);
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      Date[] dateArray0 = new Date[3];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2005.7;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("k!&*{(6Y1", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = xYShapeRenderer0.findRangeBounds(defaultHighLowDataset0);
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertEquals(1002.85, range0.getCentralValue(), 0.01);
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      Date[] dateArray0 = new Date[3];
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) (-5283);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("k!&*{(6Y1", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = xYShapeRenderer0.findRangeBounds(defaultHighLowDataset0);
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-2641.5), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      DateAxis dateAxis0 = new DateAxis();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(dateAxis0.DEFAULT_ANCHOR_DATE, 0.05, 46, 1.0E-8, 2.0, 1.0E-8);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItemArray0[0];
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItemArray0[0];
      oHLCDataItemArray0[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(xYShapeRenderer0.ZERO, oHLCDataItemArray0);
      Range range0 = xYShapeRenderer0.findDomainBounds(defaultOHLCDataset0);
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(taskSeries0).getItemCount();
      TaskSeries taskSeries1 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(taskSeries1).getItemCount();
      TaskSeries taskSeries2 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(taskSeries2).getItemCount();
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(taskSeries0, taskSeries1, taskSeries1, taskSeries2, taskSeries2).when(taskSeriesCollection0).getSeries(anyInt());
      doReturn(0, 334).when(taskSeriesCollection0).getSeriesCount();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYShapeRenderer0.findDomainBounds((XYDataset) xYTaskDataset0, false);
      Range range0 = xYShapeRenderer0.findDomainBounds(xYTaskDataset0);
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      // Undeclared exception!
      try { 
        xYShapeRenderer0.setGuideLineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      // Undeclared exception!
      try { 
        xYShapeRenderer0.setGuideLinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      MatrixSeries matrixSeries0 = new MatrixSeries("4Zor3}Pc2JD<r1drt\"Z", 2, 0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      // Undeclared exception!
      try { 
        xYShapeRenderer0.getPaint(matrixSeriesCollection0, 2, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      doReturn(1027).when(taskSeriesCollection0).getSeriesCount();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      // Undeclared exception!
      try { 
        xYShapeRenderer0.findRangeBounds(xYTaskDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(taskSeries0).getItemCount();
      TaskSeries taskSeries1 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(taskSeries1).getItemCount();
      TaskSeries taskSeries2 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn(615, 0, 85, 37, 1024).when(taskSeries2).getItemCount();
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(taskSeries0, taskSeries1, taskSeries1, taskSeries2, taskSeries2).when(taskSeriesCollection0).getSeries(anyInt());
      doReturn(0, 334).when(taskSeriesCollection0).getSeriesCount();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYShapeRenderer0.findDomainBounds((XYDataset) xYTaskDataset0, false);
      // Undeclared exception!
      xYShapeRenderer0.findDomainBounds(xYTaskDataset0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      doReturn(0, 334).when(taskSeriesCollection0).getSeriesCount();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYShapeRenderer0.findDomainBounds((XYDataset) xYTaskDataset0, false);
      // Undeclared exception!
      try { 
        xYShapeRenderer0.findDomainBounds(xYTaskDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(0);
      XYPlot xYPlot0 = new XYPlot(categoryTableXYDataset0, (ValueAxis) null, (ValueAxis) null, stackedXYAreaRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("scale", xYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      doReturn((PlotRenderingInfo) null).when(chartRenderingInfo0).getPlotInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 2, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Dimension dimension0 = new Dimension(5, (-1923));
      Rectangle rectangle0 = new Rectangle(dimension0);
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo1).getEntityCollection();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      XYItemRendererState xYItemRendererState0 = stackedXYAreaRenderer0.initialise(graphics2D0, rectangle0, xYPlot0, categoryTableXYDataset0, plotRenderingInfo0);
      Rectangle2D rectangle2D0 = rectangle0.getFrame();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        xYShapeRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D0, plotRenderingInfo0, xYPlot0, (ValueAxis) null, (ValueAxis) null, categoryTableXYDataset0, 5, 10, categoryCrosshairState0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      xYShapeRenderer0.setUseOutlinePaint(false);
      XYShapeRenderer xYShapeRenderer1 = new XYShapeRenderer();
      boolean boolean0 = xYShapeRenderer0.equals(xYShapeRenderer1);
      assertFalse(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      xYShapeRenderer0.setPaintScale(grayPaintScale0);
      XYShapeRenderer xYShapeRenderer1 = new XYShapeRenderer();
      boolean boolean0 = xYShapeRenderer0.equals(xYShapeRenderer1);
      assertFalse(xYShapeRenderer1.isGuideLinesVisible());
      assertFalse(xYShapeRenderer1.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer1.getUseOutlinePaint());
      assertFalse(xYShapeRenderer1.getDrawOutlines());
      assertFalse(xYShapeRenderer1.getUseFillPaint());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      XYShapeRenderer xYShapeRenderer1 = new XYShapeRenderer();
      boolean boolean0 = xYShapeRenderer0.equals(xYShapeRenderer1);
      assertFalse(xYShapeRenderer1.isGuideLinesVisible());
      assertTrue(boolean0);
      assertFalse(xYShapeRenderer1.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer1.getUseFillPaint());
      assertTrue(xYShapeRenderer1.getUseOutlinePaint());
      assertFalse(xYShapeRenderer1.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      boolean boolean0 = xYShapeRenderer0.equals(xYShapeRenderer0);
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertTrue(boolean0);
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      boolean boolean0 = xYShapeRenderer0.equals("qH>");
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(boolean0);
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        xYShapeRenderer0.getPaint(matrixSeriesCollection0, (-651), 1310);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, (ValueAxis) null, (ValueAxis) null, xYShapeRenderer0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(standardEntityCollection0).when(chartRenderingInfo0).getEntityCollection();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = stackedXYAreaRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, xYPlot0, (XYDataset) null, plotRenderingInfo0);
      CrosshairState crosshairState0 = new CrosshairState(true);
      // Undeclared exception!
      try { 
        xYShapeRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, (Rectangle2D) null, plotRenderingInfo0, xYPlot0, (ValueAxis) null, (ValueAxis) null, (XYDataset) null, 0, (-1183), crosshairState0, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      CrosshairState crosshairState0 = new CrosshairState();
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYItemRendererState xYItemRendererState0 = samplingXYLineRenderer0.initialise((Graphics2D) null, rectangle2D_Double0, combinedDomainXYPlot0, (XYDataset) null, (PlotRenderingInfo) null);
      PeriodAxis periodAxis0 = new PeriodAxis("subCategory");
      // Undeclared exception!
      try { 
        xYShapeRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, rectangle2D_Double0, (PlotRenderingInfo) null, combinedDomainXYPlot0, periodAxis0, periodAxis0, defaultWindDataset0, (-950), 0, crosshairState0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      xYShapeRenderer0.findZBounds(matrixSeriesCollection0);
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      xYShapeRenderer0.findZBounds((XYZDataset) null);
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((Number) xYShapeRenderer0.ZERO, (Number) xYShapeRenderer0.ZERO, "6Zi3OU", false);
      Range range0 = xYShapeRenderer0.findRangeBounds(categoryTableXYDataset0);
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      xYShapeRenderer0.findRangeBounds((XYDataset) null);
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      xYShapeRenderer0.findRangeBounds(matrixSeriesCollection0);
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      MatrixSeries matrixSeries0 = new MatrixSeries("H\"#R;vf(w", 2, 2);
      matrixSeriesCollection0.addSeries(matrixSeries0);
      Range range0 = xYShapeRenderer0.findDomainBounds(matrixSeriesCollection0);
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      xYShapeRenderer0.findDomainBounds((XYDataset) null);
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultTableXYDataset0, (-1924.6065968348466));
      xYShapeRenderer0.findDomainBounds(xYBarDataset0);
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      
      xYShapeRenderer0.setGuideLinesVisible(true);
      boolean boolean0 = xYShapeRenderer0.isGuideLinesVisible();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      boolean boolean0 = xYShapeRenderer0.getDrawOutlines();
      assertFalse(boolean0);
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      xYShapeRenderer0.setUseFillPaint(true);
      XYShapeRenderer xYShapeRenderer1 = new XYShapeRenderer();
      boolean boolean0 = xYShapeRenderer0.equals(xYShapeRenderer1);
      assertFalse(boolean0);
      assertTrue(xYShapeRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      boolean boolean0 = xYShapeRenderer0.getUseFillPaint();
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(boolean0);
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      xYShapeRenderer0.getPaintScale();
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      // Undeclared exception!
      try { 
        xYShapeRenderer0.setPaintScale((PaintScale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'scale' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      boolean boolean0 = xYShapeRenderer0.isGuideLinesVisible();
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertFalse(boolean0);
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      XYShapeRenderer xYShapeRenderer1 = (XYShapeRenderer)xYShapeRenderer0.clone();
      assertFalse(xYShapeRenderer1.getUseFillPaint());
      assertFalse(xYShapeRenderer1.isGuideLinesVisible());
      assertFalse(xYShapeRenderer1.getDrawOutlines());
      assertFalse(xYShapeRenderer1.getAutoPopulateSeriesShape());
      assertNotSame(xYShapeRenderer1, xYShapeRenderer0);
      assertTrue(xYShapeRenderer1.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      xYShapeRenderer0.getGuideLineStroke();
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      int int0 = xYShapeRenderer0.getPassCount();
      assertEquals(2, int0);
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      Color color0 = (Color)xYShapeRenderer0.getGuideLinePaint();
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertEquals((-12566464), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      boolean boolean0 = xYShapeRenderer0.getUseOutlinePaint();
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertTrue(boolean0);
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
  }
}
