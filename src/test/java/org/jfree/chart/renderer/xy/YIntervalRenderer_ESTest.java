/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:00:48 GMT 2019
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import javax.swing.JTree;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;
import javax.swing.tree.TreeNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.StandardXYItemLabelGenerator;
import org.jfree.chart.labels.SymbolicXYItemLabelGenerator;
import org.jfree.chart.labels.XYItemLabelGenerator;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.YIntervalRenderer;
import org.jfree.chart.ui.Layer;
import org.jfree.data.Range;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class YIntervalRenderer_ESTest extends YIntervalRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      SymbolicXYItemLabelGenerator symbolicXYItemLabelGenerator0 = new SymbolicXYItemLabelGenerator();
      yIntervalRenderer0.setAdditionalItemLabelGenerator(symbolicXYItemLabelGenerator0);
      XYItemLabelGenerator xYItemLabelGenerator0 = yIntervalRenderer0.getAdditionalItemLabelGenerator();
      assertSame(xYItemLabelGenerator0, symbolicXYItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(369).when(xYDataset0).getSeriesCount();
      doReturn(yIntervalRenderer0.ZERO, yIntervalRenderer0.ZERO, yIntervalRenderer0.ZERO, yIntervalRenderer0.ZERO, yIntervalRenderer0.ZERO).when(xYDataset0).getSeriesKey(anyInt());
      doReturn(369, 518, (-1), 112, 518).when(xYDataset0).indexOf(any(java.lang.Comparable.class));
      doReturn(319, 319, (-981), 112, 0).when(xYDataset0).getItemCount(anyInt());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(xYDataset0).getYValue(anyInt() , anyInt());
      Range range0 = yIntervalRenderer0.findRangeBounds(xYDataset0);
      assertFalse(range0.isNaNRange());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = yIntervalRenderer0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYDataset0, plotRenderingInfo0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(chartRenderingInfo0).when(plotRenderingInfo1).getOwner();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        yIntervalRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D1, plotRenderingInfo1, (XYPlot) null, valueAxis0, valueAxis0, xYDataset1, 500, 0, crosshairState0, 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataset$MockitoMock$345560954 cannot be cast to org.jfree.data.xy.IntervalXYDataset
         //
         verifyException("org.jfree.chart.renderer.xy.YIntervalRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYAnnotation xYAnnotation0 = mock(XYAnnotation.class, new ViolatedAssumptionAnswer());
      Layer layer0 = Layer.FOREGROUND;
      yIntervalRenderer0.addAnnotation(xYAnnotation0, layer0);
      // Undeclared exception!
      try { 
        yIntervalRenderer0.clone();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.CloneNotSupportedException: Object without clone() method is impossible.
         //
         verifyException("org.jfree.chart.util.CloneUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      StandardXYItemLabelGenerator standardXYItemLabelGenerator0 = new StandardXYItemLabelGenerator("]gy<");
      yIntervalRenderer0.setAdditionalItemLabelGenerator(standardXYItemLabelGenerator0);
      YIntervalRenderer yIntervalRenderer1 = new YIntervalRenderer();
      boolean boolean0 = yIntervalRenderer0.equals(yIntervalRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      YIntervalRenderer yIntervalRenderer1 = new YIntervalRenderer();
      boolean boolean0 = yIntervalRenderer0.equals(yIntervalRenderer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      boolean boolean0 = yIntervalRenderer0.equals(yIntervalRenderer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      boolean boolean0 = yIntervalRenderer0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      JTree jTree0 = new JTree((TreeNode) null);
      EtchedBorder etchedBorder0 = new EtchedBorder(0);
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) jTree0, (Border) etchedBorder0, (-2739), 10, (-2739), (-5484));
      LogAxis logAxis0 = new LogAxis(";{");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState((PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        yIntervalRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, rectangle0, (PlotRenderingInfo) null, combinedRangeXYPlot0, logAxis0, logAxis0, xIntervalSeriesCollection0, 0, 1, (CrosshairState) null, (-2816));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = yIntervalRenderer0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, (XYDataset) null, plotRenderingInfo0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo1).getOwner();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        yIntervalRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D1, plotRenderingInfo1, (XYPlot) null, valueAxis0, valueAxis0, (XYDataset) null, 2502, 2502, crosshairState0, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.YIntervalRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      Range range0 = yIntervalRenderer0.findRangeBounds((XYDataset) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYItemLabelGenerator xYItemLabelGenerator0 = yIntervalRenderer0.getAdditionalItemLabelGenerator();
      assertNull(xYItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      Object object0 = yIntervalRenderer0.clone();
      assertNotSame(yIntervalRenderer0, object0);
  }
}
