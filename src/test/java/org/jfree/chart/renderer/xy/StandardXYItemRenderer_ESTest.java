/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 20:56:33 GMT 2019
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import javax.swing.JTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator;
import org.jfree.chart.labels.HighLowItemLabelGenerator;
import org.jfree.chart.labels.IntervalXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYZToolTipGenerator;
import org.jfree.chart.labels.SymbolicXYItemLabelGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.urls.CustomXYURLGenerator;
import org.jfree.chart.urls.StandardXYURLGenerator;
import org.jfree.chart.urls.StandardXYZURLGenerator;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.UnitType;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StandardXYItemRenderer_ESTest extends StandardXYItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      Locale locale0 = Locale.UK;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator(dateFormat0, numberFormat0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "", "EQ{|vnqA=x", "!'");
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(43, highLowItemLabelGenerator0, timeSeriesURLGenerator0);
      BufferedImage bufferedImage0 = new BufferedImage(999, 4, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      LogAxis logAxis0 = new LogAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        cyclicXYItemRenderer0.drawItem(graphics2D0, xYItemRendererState0, (Rectangle2D) null, plotRenderingInfo0, combinedDomainXYPlot0, logAxis0, logAxis0, defaultTableXYDataset0, 1410, (-1), categoryCrosshairState0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1410, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(0);
      JTable jTable0 = new JTable(0, 0);
      Rectangle rectangle0 = jTable0.getCellRect(2, 2, false);
      standardXYItemRenderer0.setLegendLine(rectangle0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(1809, intervalXYToolTipGenerator0, timeSeriesURLGenerator0);
      cyclicXYItemRenderer0.getItemShapeFilled(9999, 1809);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = StandardXYToolTipGenerator.getTimeSeriesInstance();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, standardXYToolTipGenerator0);
      cyclicXYItemRenderer0.getPlotLines();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer((-332), (XYToolTipGenerator) null, (XYURLGenerator) null);
      cyclicXYItemRenderer0.getPlotImages();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      Locale locale0 = Locale.UK;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator(dateFormat0, numberFormat0);
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "", "EQ{|vnqA=x", "!'");
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(43, highLowItemLabelGenerator0, timeSeriesURLGenerator0);
      cyclicXYItemRenderer0.getPlotDiscontinuous();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("");
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(0, (XYToolTipGenerator) null, standardXYURLGenerator0);
      cyclicXYItemRenderer0.setBaseShapesFilled(false);
      cyclicXYItemRenderer0.getItemShapeFilled((-1), (-1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      StandardXYZURLGenerator standardXYZURLGenerator0 = new StandardXYZURLGenerator();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(1, boxAndWhiskerXYToolTipGenerator0, standardXYZURLGenerator0);
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart("index.html?series=2&amp;item=4", standardXYItemRenderer0.DEFAULT_VALUE_LABEL_FONT, polarPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 1);
      standardXYItemRenderer0.getImageHotspot(polarPlot0, 3116, 2, 7.0, (-1398.4101), bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(200, (XYToolTipGenerator) null);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(2202, 10, 10);
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(870, 10);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("ZOOM_RESET_BOTH", cyclicXYItemRenderer0.DEFAULT_VALUE_LABEL_FONT, waferMapPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2202, 8, (double) 3, (-1937.438), chartRenderingInfo0);
      cyclicXYItemRenderer0.getImageHotspot(waferMapPlot0, (byte)0, 768, 0.05, 45.0, bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(29, (XYToolTipGenerator) null);
      cyclicXYItemRenderer0.setGapThreshold((-2210.055403));
      cyclicXYItemRenderer0.getGapThreshold();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      cyclicXYItemRenderer0.setDrawSeriesLineAsPath(true);
      cyclicXYItemRenderer0.getDrawSeriesLineAsPath();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer((-831));
      cyclicXYItemRenderer0.getBaseShapesVisible();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      Locale locale0 = Locale.UK;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator(dateFormat0, numberFormat0);
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "", "EQ{|vnqA=x", "!'");
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(37, highLowItemLabelGenerator0, timeSeriesURLGenerator0);
      cyclicXYItemRenderer0.setBaseShapesFilled(false);
      cyclicXYItemRenderer0.getBaseShapesFilled();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(1432, (XYToolTipGenerator) null);
      // Undeclared exception!
      try { 
        cyclicXYItemRenderer0.setSeriesShapesFilled((-4035), (Boolean) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(29, (XYToolTipGenerator) null);
      // Undeclared exception!
      try { 
        cyclicXYItemRenderer0.setLegendLine((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'line' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      StandardXYItemRenderer.State standardXYItemRenderer_State0 = new StandardXYItemRenderer.State(plotRenderingInfo0);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(4, 1542, 0.0, (double) 1, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(0.05);
      // Undeclared exception!
      try { 
        standardXYItemRenderer0.drawItem(graphics2D0, standardXYItemRenderer_State0, rectangle2D_Double0, plotRenderingInfo0, combinedRangeXYPlot0, logarithmicAxis0, logarithmicAxis0, defaultBoxAndWhiskerXYDataset0, 8, 4, (CrosshairState) null, (-1308));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SymbolicXYItemLabelGenerator symbolicXYItemLabelGenerator0 = new SymbolicXYItemLabelGenerator();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(681, symbolicXYItemLabelGenerator0, (XYURLGenerator) null);
      assertTrue(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getPlotImages());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(4181, standardXYZToolTipGenerator0, customXYURLGenerator0);
      assertTrue(standardXYItemRenderer0.getBaseShapesVisible());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(standardXYItemRenderer0.getPlotImages());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator(dateFormat0, decimalFormat0);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer((-642), highLowItemLabelGenerator0);
      assertTrue(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(standardXYItemRenderer0.getPlotDiscontinuous());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(3, (XYToolTipGenerator) null, (XYURLGenerator) null);
      boolean boolean0 = cyclicXYItemRenderer0.getPlotLines();
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertTrue(boolean0);
      assertTrue(cyclicXYItemRenderer0.getBaseShapesVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      standardXYItemRenderer0.setDrawSeriesLineAsPath(true);
      boolean boolean0 = standardXYItemRenderer0.equals(cyclicXYItemRenderer0);
      assertTrue(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      Locale locale0 = Locale.UK;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator(dateFormat0, numberFormat0);
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "", "EQ{|vnqA=x", "!'");
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(43, highLowItemLabelGenerator0, timeSeriesURLGenerator0);
      CyclicXYItemRenderer cyclicXYItemRenderer1 = (CyclicXYItemRenderer)cyclicXYItemRenderer0.clone();
      cyclicXYItemRenderer1.setGapThreshold(8);
      boolean boolean0 = cyclicXYItemRenderer0.equals(cyclicXYItemRenderer1);
      assertEquals(8.0, cyclicXYItemRenderer1.getGapThreshold(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      StandardXYItemRenderer standardXYItemRenderer1 = new StandardXYItemRenderer((-1830));
      boolean boolean0 = standardXYItemRenderer0.equals(standardXYItemRenderer1);
      assertTrue(standardXYItemRenderer1.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer1.getBaseShapesVisible());
      assertEquals(1.0, standardXYItemRenderer1.getGapThreshold(), 0.01);
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer1.getPlotImages());
      assertFalse(standardXYItemRenderer1.getDrawSeriesLineAsPath());
      assertTrue(standardXYItemRenderer0.getPlotLines());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(4);
      boolean boolean0 = standardXYItemRenderer0.equals(cyclicXYItemRenderer0);
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertTrue(cyclicXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getPlotLines());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertTrue(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(11);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      boolean boolean0 = standardXYItemRenderer0.equals(cyclicXYItemRenderer0);
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getPlotLines());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(boolean0);
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      Locale locale0 = Locale.UK;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator(dateFormat0, numberFormat0);
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "", "EQ{|vnqA=x", "!'");
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(43, highLowItemLabelGenerator0, timeSeriesURLGenerator0);
      CyclicXYItemRenderer cyclicXYItemRenderer1 = (CyclicXYItemRenderer)cyclicXYItemRenderer0.clone();
      boolean boolean0 = cyclicXYItemRenderer0.equals(cyclicXYItemRenderer1);
      assertEquals(1.0, cyclicXYItemRenderer1.getGapThreshold(), 0.01);
      assertTrue(cyclicXYItemRenderer1.getPlotLines());
      assertTrue(cyclicXYItemRenderer1.getBaseShapesVisible());
      assertFalse(cyclicXYItemRenderer1.getPlotImages());
      assertFalse(cyclicXYItemRenderer1.getDrawSeriesLineAsPath());
      assertTrue(boolean0);
      assertNotSame(cyclicXYItemRenderer1, cyclicXYItemRenderer0);
      assertTrue(cyclicXYItemRenderer1.getPlotDiscontinuous());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      Locale locale0 = Locale.UK;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator(dateFormat0, numberFormat0);
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "", "EQ{|vnqA=x", "!'");
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(43, highLowItemLabelGenerator0, timeSeriesURLGenerator0);
      boolean boolean0 = cyclicXYItemRenderer0.equals(cyclicXYItemRenderer0);
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertTrue(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(boolean0);
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer((-2150));
      Locale locale0 = Locale.FRANCE;
      boolean boolean0 = cyclicXYItemRenderer0.equals(locale0);
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertTrue(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(boolean0);
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(0, boxAndWhiskerXYToolTipGenerator0);
      cyclicXYItemRenderer0.getLegendItem(200, 10);
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertFalse(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(0, (XYToolTipGenerator) null, (XYURLGenerator) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      cyclicXYItemRenderer0.setPlot(combinedRangeXYPlot0);
      cyclicXYItemRenderer0.getLegendItem(35, 0);
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(100);
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      
      cyclicXYItemRenderer0.setPlotDiscontinuous(true);
      assertTrue(cyclicXYItemRenderer0.getPlotDiscontinuous());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(100);
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      
      cyclicXYItemRenderer0.setPlotDiscontinuous(false);
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(cyclicXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getPlotLines());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer((-2171));
      assertTrue(cyclicXYItemRenderer0.getPlotImages());
      
      cyclicXYItemRenderer0.setPlotImages(false);
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer((-2150));
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      
      cyclicXYItemRenderer0.setPlotImages(false);
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertTrue(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("", "", "");
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(0, (XYToolTipGenerator) null, standardXYURLGenerator0);
      assertFalse(standardXYItemRenderer0.getPlotLines());
      
      standardXYItemRenderer0.setPlotLines(true);
      assertTrue(standardXYItemRenderer0.getPlotLines());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      assertTrue(standardXYItemRenderer0.getPlotLines());
      
      standardXYItemRenderer0.setPlotLines(true);
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(standardXYItemRenderer0.getPlotImages());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance(3, 3, locale0);
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("Not yet implemented.", numberFormat0, dateFormat0);
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(3, intervalXYToolTipGenerator0, timeSeriesURLGenerator0);
      boolean boolean0 = standardXYItemRenderer0.getItemShapeFilled(3, 3);
      assertTrue(boolean0);
      assertTrue(standardXYItemRenderer0.getPlotLines());
      assertTrue(standardXYItemRenderer0.getBaseShapesVisible());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(100);
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      
      cyclicXYItemRenderer0.setBaseShapesVisible(true);
      assertTrue(cyclicXYItemRenderer0.getBaseShapesVisible());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(0, boxAndWhiskerXYToolTipGenerator0);
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      
      cyclicXYItemRenderer0.setBaseShapesVisible(false);
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(cyclicXYItemRenderer0.getPlotLines());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      standardXYItemRenderer0.getGapThresholdType();
      assertTrue(standardXYItemRenderer0.getPlotLines());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      double double0 = standardXYItemRenderer0.getGapThreshold();
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(1.0, double0, 0.01);
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertTrue(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      Locale locale0 = Locale.UK;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator(dateFormat0, numberFormat0);
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "", "EQ{|vnqA=x", "!'");
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(43, highLowItemLabelGenerator0, timeSeriesURLGenerator0);
      cyclicXYItemRenderer0.setGapThreshold(976.462674899935);
      CyclicXYItemRenderer cyclicXYItemRenderer1 = (CyclicXYItemRenderer)cyclicXYItemRenderer0.clone();
      cyclicXYItemRenderer1.setGapThreshold(8);
      boolean boolean0 = cyclicXYItemRenderer0.equals(cyclicXYItemRenderer1);
      assertEquals(976.462674899935, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(100);
      boolean boolean0 = cyclicXYItemRenderer0.getBaseShapesFilled();
      assertFalse(cyclicXYItemRenderer0.getPlotLines());
      assertTrue(cyclicXYItemRenderer0.getPlotImages());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(boolean0);
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      StandardXYItemRenderer.State standardXYItemRenderer_State0 = (StandardXYItemRenderer.State)standardXYItemRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, (XYPlot) null, vectorSeriesCollection0, plotRenderingInfo0);
      assertTrue(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertEquals((-1), standardXYItemRenderer_State0.getSeriesIndex());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(3);
      boolean boolean0 = cyclicXYItemRenderer0.getDrawSeriesLineAsPath();
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertFalse(boolean0);
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(0, (XYToolTipGenerator) null, (XYURLGenerator) null);
      boolean boolean0 = cyclicXYItemRenderer0.getBaseShapesVisible();
      assertFalse(boolean0);
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertFalse(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(100);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      cyclicXYItemRenderer0.getImage(waferMapPlot0, 10, 1795, 0, (-308.07));
      assertTrue(cyclicXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(cyclicXYItemRenderer0.getPlotLines());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      UnitType unitType0 = UnitType.ABSOLUTE;
      cyclicXYItemRenderer0.setGapThresholdType(unitType0);
      CyclicXYItemRenderer cyclicXYItemRenderer1 = new CyclicXYItemRenderer();
      boolean boolean0 = cyclicXYItemRenderer0.equals(cyclicXYItemRenderer1);
      assertFalse(cyclicXYItemRenderer1.getPlotImages());
      assertFalse(cyclicXYItemRenderer1.getDrawSeriesLineAsPath());
      assertTrue(cyclicXYItemRenderer1.getPlotLines());
      assertFalse(cyclicXYItemRenderer1.getPlotDiscontinuous());
      assertFalse(boolean0);
      assertEquals(1.0, cyclicXYItemRenderer1.getGapThreshold(), 0.01);
      assertFalse(cyclicXYItemRenderer1.getBaseShapesVisible());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      cyclicXYItemRenderer0.getSeriesShapesFilled((-32));
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(100);
      Boolean boolean0 = Boolean.FALSE;
      cyclicXYItemRenderer0.setSeriesShapesFilled(100, boolean0);
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(cyclicXYItemRenderer0.getPlotLines());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer((-2150));
      Line2D.Double line2D_Double0 = (Line2D.Double)cyclicXYItemRenderer0.getLegendLine();
      assertEquals((-7.0), line2D_Double0.x1, 0.01);
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(7.0, line2D_Double0.x2, 0.01);
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(0.0, line2D_Double0.y1, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart(ringPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      StandardXYItemRenderer.State standardXYItemRenderer_State0 = new StandardXYItemRenderer.State(plotRenderingInfo0);
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(0, boxAndWhiskerXYToolTipGenerator0);
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      XYPlot xYPlot0 = new XYPlot();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CrosshairState crosshairState0 = new CrosshairState(false);
      // Undeclared exception!
      try { 
        cyclicXYItemRenderer0.drawItem((Graphics2D) null, standardXYItemRenderer_State0, rectangle0, plotRenderingInfo0, xYPlot0, (ValueAxis) null, (ValueAxis) null, categoryTableXYDataset0, 2, 472, crosshairState0, 1741);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.StandardXYItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      boolean boolean0 = cyclicXYItemRenderer0.getPlotDiscontinuous();
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(boolean0);
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      boolean boolean0 = standardXYItemRenderer0.getPlotImages();
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertTrue(standardXYItemRenderer0.getPlotLines());
      assertFalse(boolean0);
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(100);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      // Undeclared exception!
      try { 
        cyclicXYItemRenderer0.getImageHotspot(waferMapPlot0, 10, 8, (-1467.5983021767186), 1.0, (Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.StandardXYItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StandardXYItemRenderer.State standardXYItemRenderer_State0 = new StandardXYItemRenderer.State((PlotRenderingInfo) null);
      int int0 = standardXYItemRenderer_State0.getSeriesIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart(ringPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      StandardXYItemRenderer.State standardXYItemRenderer_State0 = new StandardXYItemRenderer.State(plotRenderingInfo0);
      standardXYItemRenderer_State0.setLastPointGood(true);
      assertTrue(standardXYItemRenderer_State0.isLastPointGood());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StandardXYItemRenderer.State standardXYItemRenderer_State0 = new StandardXYItemRenderer.State((PlotRenderingInfo) null);
      boolean boolean0 = standardXYItemRenderer_State0.isLastPointGood();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      StandardXYItemRenderer.State standardXYItemRenderer_State0 = new StandardXYItemRenderer.State(plotRenderingInfo0);
      standardXYItemRenderer_State0.setSeriesIndex((-1744));
      assertEquals((-1744), standardXYItemRenderer_State0.getSeriesIndex());
  }
}
