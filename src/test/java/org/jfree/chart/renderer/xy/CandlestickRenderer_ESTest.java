/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:08:35 GMT 2019
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import javax.swing.JSpinner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.HighLowItemLabelGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYZToolTipGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class CandlestickRenderer_ESTest extends CandlestickRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      CandlestickRenderer candlestickRenderer1 = new CandlestickRenderer(0);
      boolean boolean0 = candlestickRenderer0.equals(candlestickRenderer1);
      assertEquals(0, candlestickRenderer1.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer1.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer1.getUseOutlinePaint());
      assertFalse(boolean0);
      assertEquals(0.0, candlestickRenderer1.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer1.equals((Object)candlestickRenderer0));
      assertEquals(0.0, candlestickRenderer1.getCandleWidth(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer1.getAutoWidthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0, false, (XYToolTipGenerator) null);
      candlestickRenderer0.setVolumePaint(defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      Color color0 = (Color)candlestickRenderer0.getVolumePaint();
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(0, color0.getBlue());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1024.02046108022));
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      
      candlestickRenderer0.setAutoWidthFactor(1);
      assertEquals(1.0, candlestickRenderer0.getAutoWidthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(2711.0233);
      candlestickRenderer0.setAutoWidthMethod(139);
      candlestickRenderer0.setAutoWidthMethod((-767));
      assertEquals((-767), candlestickRenderer0.getAutoWidthMethod());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(216.727561, false, (XYToolTipGenerator) null);
      candlestickRenderer0.setCandleWidth(0.0);
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      
      candlestickRenderer0.setUseOutlinePaint(true);
      boolean boolean0 = candlestickRenderer0.getUseOutlinePaint();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.setDownPaint((Paint) null);
      Paint paint0 = candlestickRenderer0.getDownPaint();
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertNull(paint0);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0);
      double double0 = candlestickRenderer0.getCandleWidth();
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0, "OfnHDSj~cgZ~8s*r%");
      DecimalFormat decimalFormat0 = jSpinner_NumberEditor0.getFormat();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("OfnHDSj~cgZ~8s*r%", decimalFormat0, decimalFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(2197.999726166776, false, standardXYToolTipGenerator0);
      double double0 = candlestickRenderer0.getCandleWidth();
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(2197.999726166776, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-480.95556133686335));
      candlestickRenderer0.setAutoWidthMethod(15);
      int int0 = candlestickRenderer0.getAutoWidthMethod();
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1.0));
      candlestickRenderer0.setAutoWidthGap(2.0);
      double double0 = candlestickRenderer0.getAutoWidthGap();
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1024.02046108022));
      candlestickRenderer0.setAutoWidthGap((-1024.02046108022));
      double double0 = candlestickRenderer0.getAutoWidthGap();
      assertEquals((-1024.02046108022), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      
      candlestickRenderer0.setAutoWidthFactor((double) candlestickRenderer0.ZERO);
      double double0 = candlestickRenderer0.getAutoWidthFactor();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.setAutoWidthFactor((-4107.88));
      double double0 = candlestickRenderer0.getAutoWidthFactor();
      assertEquals((-4107.88), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      // Undeclared exception!
      try { 
        candlestickRenderer0.setVolumePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0, true, (XYToolTipGenerator) null);
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(2, 0.0F, (-1.0F), 1, (-1213.6826F), 0.95F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, (-1), 2, 2513, 0, 2, 1, true, true, false, false, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        candlestickRenderer0.initialise((Graphics2D) null, rectangle2D0, combinedDomainXYPlot0, timeSeriesCollection0, plotRenderingInfo0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesCollection cannot be cast to org.jfree.data.xy.OHLCDataset
         //
         verifyException("org.jfree.chart.renderer.xy.CandlestickRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.ITALIAN;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator(dateFormat0, numberFormat0);
      CandlestickRenderer candlestickRenderer1 = new CandlestickRenderer((-2330.83816642), true, highLowItemLabelGenerator0);
      boolean boolean0 = candlestickRenderer0.equals(candlestickRenderer1);
      assertFalse(candlestickRenderer1.getUseOutlinePaint());
      assertEquals(0, candlestickRenderer1.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer1.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(boolean0);
      assertEquals((-2330.83816642), candlestickRenderer1.getCandleWidth(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer1.getAutoWidthFactor(), 0.01);
      assertEquals(0.0, candlestickRenderer1.getAutoWidthGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      boolean boolean0 = candlestickRenderer0.equals(candlestickRenderer0);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(boolean0);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(4461.721707396715, false, (XYToolTipGenerator) null);
      Color color0 = (Color)candlestickRenderer0.getUpPaint();
      boolean boolean0 = candlestickRenderer0.equals(color0);
      assertFalse(boolean0);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals((-16711936), color0.getRGB());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(4461.721707396715, candlestickRenderer0.getCandleWidth(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(4461.721707396715, false, (XYToolTipGenerator) null);
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(2, 0.3F, 1, 0.3F, 45, 45);
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      XYPlot xYPlot0 = new XYPlot();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1753, 0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYItemRendererState xYItemRendererState0 = xYDifferenceRenderer0.initialise((Graphics2D) null, rectangle2D0, xYPlot0, dynamicTimeSeriesCollection0, plotRenderingInfo0);
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("{0}: ({1} - {2}), ({5} - {6})", stringArray0);
      CrosshairState crosshairState0 = new CrosshairState(true);
      // Undeclared exception!
      try { 
        candlestickRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, rectangle2D0, (PlotRenderingInfo) null, xYPlot0, symbolAxis0, symbolAxis0, dynamicTimeSeriesCollection0, (-269), 1992, crosshairState0, 45);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.DynamicTimeSeriesCollection cannot be cast to org.jfree.data.xy.OHLCDataset
         //
         verifyException("org.jfree.chart.renderer.xy.CandlestickRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0, true, (XYToolTipGenerator) null);
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(2, (-0.9221669F), (-1.0F), 1, (-1213.6826F), 0.95F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(27);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = xYSplineRenderer0.initialise((Graphics2D) null, rectangle2D0, combinedDomainXYPlot0, timeSeriesCollection0, plotRenderingInfo0);
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        candlestickRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, rectangle2D0, plotRenderingInfo0, combinedDomainXYPlot0, dateAxis0, dateAxis0, timeSeriesCollection0, 10, 27, categoryCrosshairState0, 27);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesCollection cannot be cast to org.jfree.data.xy.OHLCDataset
         //
         verifyException("org.jfree.chart.renderer.xy.CandlestickRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0, true, (XYToolTipGenerator) null);
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(2, 0.0F, (-1.0F), 1, (-1213.6826F), 0.95F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, (-1), 2, 2513, 0, 2, 1, true, true, false, false, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        candlestickRenderer0.initialise((Graphics2D) null, rectangle2D0, combinedDomainXYPlot0, (XYDataset) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.CandlestickRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = StandardXYToolTipGenerator.getTimeSeriesInstance();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1.0), false, standardXYToolTipGenerator0);
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(0.6428571428571429, 0.6428571428571429, (double) candlestickRenderer0.ZERO, (-34.0), 0.6428571428571429, 2);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection((TimePeriodValues) null);
      String[] stringArray0 = new String[7];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      XYPlot xYPlot0 = new XYPlot(timePeriodValuesCollection0, symbolAxis0, symbolAxis0, candlestickRenderer0);
      assertFalse(candlestickRenderer0.getDrawVolume());
      
      candlestickRenderer0.initialise((Graphics2D) null, rectangle2D0, xYPlot0, timePeriodValuesCollection0, (PlotRenderingInfo) null);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-480.95556133686335));
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      
      candlestickRenderer0.setUseOutlinePaint(false);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals((-480.95556133686335), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-480.95556133686335));
      assertTrue(candlestickRenderer0.getDrawVolume());
      
      candlestickRenderer0.setDrawVolume(false);
      boolean boolean0 = candlestickRenderer0.getDrawVolume();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(868.7533, true, standardXYZToolTipGenerator0);
      assertTrue(candlestickRenderer0.getDrawVolume());
      
      candlestickRenderer0.setDrawVolume(true);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(868.7533, candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1024.02046108022));
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      
      candlestickRenderer0.setAutoWidthGap(0.0);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals((-1024.02046108022), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(868.7533, true, standardXYZToolTipGenerator0);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      
      candlestickRenderer0.setAutoWidthFactor(0.0);
      candlestickRenderer0.setAutoWidthFactor(0.0);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-480.95556133686335));
      candlestickRenderer0.setAutoWidthMethod(0);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals((-480.95556133686335), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1024.02046108022));
      candlestickRenderer0.setCandleWidth(0.0);
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-480.95556133686335));
      assertEquals((-480.95556133686335), candlestickRenderer0.getCandleWidth(), 0.01);
      
      candlestickRenderer0.setCandleWidth((-480.95556133686335));
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-480.95556133686335));
      boolean boolean0 = candlestickRenderer0.getDrawVolume();
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals((-480.95556133686335), candlestickRenderer0.getCandleWidth(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(boolean0);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Paint paint0 = candlestickRenderer0.lookupSeriesOutlinePaint(2376);
      candlestickRenderer0.setVolumePaint(paint0);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDrawVolume());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1024.02046108022));
      double double0 = candlestickRenderer0.getAutoWidthGap();
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals((-1024.02046108022), candlestickRenderer0.getCandleWidth(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(2348.5079575033683);
      Color color0 = Color.RED;
      candlestickRenderer0.setUpPaint(color0);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2348.5079575033683, candlestickRenderer0.getCandleWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-480.95556133686335));
      double double0 = candlestickRenderer0.getAutoWidthFactor();
      assertEquals((-480.95556133686335), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(0.6428571428571429, double0, 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(868.7533, true, standardXYZToolTipGenerator0);
      boolean boolean0 = candlestickRenderer0.getUseOutlinePaint();
      assertEquals(868.7533, candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.setMaxCandleWidthInMilliseconds((-5242.773217669205));
      double double0 = candlestickRenderer0.getMaxCandleWidthInMilliseconds();
      assertEquals((-5242.773217669205), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0, true, (XYToolTipGenerator) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      candlestickRenderer0.findRangeBounds(timeSeriesCollection0);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1024.02046108022));
      double double0 = candlestickRenderer0.getMaxCandleWidthInMilliseconds();
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(7.2E7, double0, 0.01);
      assertEquals((-1024.02046108022), candlestickRenderer0.getCandleWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-480.95556133686335));
      Color color0 = (Color)candlestickRenderer0.getVolumePaint();
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals((-480.95556133686335), candlestickRenderer0.getCandleWidth(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(128, color0.getGreen());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1024.02046108022));
      int int0 = candlestickRenderer0.getAutoWidthMethod();
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals((-1024.02046108022), candlestickRenderer0.getCandleWidth(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, int0);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1024.02046108022));
      CandlestickRenderer candlestickRenderer1 = (CandlestickRenderer)candlestickRenderer0.clone();
      assertEquals(0.6428571428571429, candlestickRenderer1.getAutoWidthFactor(), 0.01);
      assertEquals(7.2E7, candlestickRenderer1.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer1.getDrawVolume());
      assertEquals((-1024.02046108022), candlestickRenderer1.getCandleWidth(), 0.01);
      assertEquals(0.0, candlestickRenderer1.getAutoWidthGap(), 0.01);
      assertEquals(0, candlestickRenderer1.getAutoWidthMethod());
      assertFalse(candlestickRenderer1.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1024.02046108022));
      Color color0 = (Color)candlestickRenderer0.getDownPaint();
      candlestickRenderer0.setDownPaint(color0);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(255, color0.getRed());
      assertEquals((-1024.02046108022), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      double double0 = candlestickRenderer0.getCandleWidth();
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }
}
