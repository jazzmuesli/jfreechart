/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:38:30 GMT 2019
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Point2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.HashUtils;
import org.jfree.chart.util.BooleanList;
import org.jfree.chart.util.PaintList;
import org.jfree.chart.util.StrokeList;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HashUtils_ESTest extends HashUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashUtils.hashCode((-1482), "org.jfree.chart.util.PaintList");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashUtils.hashCode(2, 2148.4897);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashUtils.hashCode((-1705179651), (-169.0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-268.71);
      int int0 = HashUtils.hashCodeForDoubleArray(doubleArray0);
      assertEquals((-389227304), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      Color color0 = Color.RED;
      GradientPaint gradientPaint0 = new GradientPaint(2047, (-1337.51F), color0, 0, (-1337.51F), color0);
      paintList0.setPaint(0, gradientPaint0);
      HashUtils.hashCode(2047, paintList0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = HashUtils.hashCodeForDoubleArray(doubleArray0);
      assertEquals(136505233, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashUtils.hashCode((-2172), (Comparable) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BasicStroke basicStroke0 = new BasicStroke(29);
      HashUtils.hashCode(29, (Stroke) basicStroke0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashUtils.hashCode((-41), (Stroke) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point point0 = new Point();
      Color color0 = Color.CYAN;
      GradientPaint gradientPaint0 = new GradientPaint(point0, color0, point0, color0, true);
      int int0 = HashUtils.hashCodeForPaint(gradientPaint0);
      assertEquals((-644839505), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Color color0 = Color.WHITE;
      int int0 = HashUtils.hashCodeForPaint(color0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = HashUtils.hashCodeForPaint((Paint) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StrokeList strokeList0 = new StrokeList();
      strokeList0.setStroke(0, (Stroke) null);
      HashUtils.hashCode(0, strokeList0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StrokeList strokeList0 = new StrokeList();
      HashUtils.hashCode(681, strokeList0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashUtils.hashCode(10, (StrokeList) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      paintList0.setPaint(1, (Paint) null);
      HashUtils.hashCode(222, paintList0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      HashUtils.hashCode((-332), paintList0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashUtils.hashCode(127, (PaintList) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BooleanList booleanList0 = new BooleanList();
      Boolean boolean0 = Boolean.FALSE;
      booleanList0.setBoolean(0, boolean0);
      HashUtils.hashCode(2, booleanList0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BooleanList booleanList0 = new BooleanList();
      HashUtils.hashCode(1907, booleanList0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashUtils.hashCode((-1482), (BooleanList) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashUtils.hashCode(0, (Object) "A/81{9");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashUtils.hashCode(8, (Object) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashUtils.hashCode(339, (Comparable) "");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BooleanList booleanList0 = new BooleanList();
      booleanList0.setBoolean(2630, (Boolean) null);
      HashUtils.hashCode(2630, booleanList0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashUtils.hashCode(13, (String) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StrokeList strokeList0 = new StrokeList();
      BasicStroke basicStroke0 = new BasicStroke();
      strokeList0.setStroke(127, basicStroke0);
      HashUtils.hashCode(127, strokeList0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashUtils.hashCode(1033, true);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashUtils.hashCode((-107), false);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = HashUtils.hashCodeForDoubleArray((double[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      SystemColor systemColor0 = SystemColor.menu;
      GradientPaint gradientPaint0 = new GradientPaint(point2D_Double0, systemColor0, point2D_Double0, systemColor0, true);
      HashUtils.hashCode((-371), (Paint) gradientPaint0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      Color color0 = Color.yellow;
      paintList0.setPaint(140, color0);
      HashUtils.hashCode(2547, paintList0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashUtils.hashCode(2547, 2547);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashUtils hashUtils0 = new HashUtils();
  }
}
