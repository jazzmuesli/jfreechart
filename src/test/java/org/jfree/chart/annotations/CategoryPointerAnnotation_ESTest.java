/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:56:55 GMT 2019
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.TextAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.AnnotationChangeListener;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.text.TextUtils;
import org.jfree.chart.ui.TextAnchor;
import org.jfree.data.category.CategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CategoryPointerAnnotation_ESTest extends CategoryPointerAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Hur2l", "Hur2l", 2.0, 2.0);
      CategoryPointerAnnotation categoryPointerAnnotation1 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      categoryPointerAnnotation1.clone();
      categoryPointerAnnotation0.setArrowLength((-2170.9));
      categoryPointerAnnotation0.equals(categoryPointerAnnotation1);
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.hashCode();
      CategoryPointerAnnotation categoryPointerAnnotation2 = new CategoryPointerAnnotation("Hur2l", (-1677358925), 0.0, 5.0);
      categoryPointerAnnotation0.equals(categoryPointerAnnotation2);
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation1.equals(categoryPointerAnnotation0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("paint", "paint", (-1865.2385241922), 766.76);
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.setAngle((-1865.2385241922));
      categoryPointerAnnotation0.setArrowLength(0.0);
      Color color0 = (Color)TextAnnotation.DEFAULT_PAINT;
      categoryPointerAnnotation0.setArrowPaint(color0);
      categoryPointerAnnotation0.setBaseRadius(0.0);
      categoryPointerAnnotation0.setBaseRadius(30.0);
      categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setValue(0.0);
      categoryPointerAnnotation0.setRotationAngle(0.0);
      categoryPointerAnnotation0.setValue(30.0);
      categoryPointerAnnotation0.hashCode();
      CategoryPointerAnnotation categoryPointerAnnotation1 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      categoryPointerAnnotation1.setAngle(5.0);
      categoryPointerAnnotation0.setNotify(true);
      categoryPointerAnnotation0.equals(categoryPointerAnnotation1);
      categoryPointerAnnotation0.getTipRadius();
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.setAngle(30.0);
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.setTipRadius((-836.1878927133));
      categoryPointerAnnotation0.getLabelOffset();
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.setAngle(1513.743);
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.getArrowStroke();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", 0.0, 0.0);
      categoryPointerAnnotation0.setText("");
      categoryPointerAnnotation0.setBaseRadius(0.0);
      categoryPointerAnnotation0.equals("");
      CategoryPointerAnnotation categoryPointerAnnotation1 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.setBaseRadius(30.0);
      categoryPointerAnnotation0.equals("");
      categoryPointerAnnotation0.fireAnnotationChanged();
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.getArrowLength();
      categoryPointerAnnotation0.equals(categoryPointerAnnotation1);
      categoryPointerAnnotation0.setAngle(2044.57419);
      CategoryPointerAnnotation categoryPointerAnnotation2 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      categoryPointerAnnotation2.setArrowPaint(categoryPointerAnnotation0.DEFAULT_PAINT);
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.getArrowWidth();
      BasicStroke basicStroke0 = (BasicStroke)categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setArrowStroke(basicStroke0);
      CategoryPointerAnnotation categoryPointerAnnotation3 = (CategoryPointerAnnotation)categoryPointerAnnotation1.clone();
      categoryPointerAnnotation2.equals(categoryPointerAnnotation3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", (-1.5707963267948966), (-1.5707963267948966));
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.setArrowWidth((-1.5707963267948966));
      categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setArrowLength((-1776.0));
      categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.hashCode();
      Object object0 = categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.equals(object0);
      Object object1 = categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.equals(object1);
      categoryPointerAnnotation0.setBaseRadius((-1736.6745540096));
      Object object2 = categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.equals(object2);
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.equals((Object) null);
      categoryPointerAnnotation0.equals(stroke0);
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.getArrowWidth();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", 0.0, 0.0);
      categoryPointerAnnotation0.setText("");
      categoryPointerAnnotation0.setBaseRadius(0.0);
      categoryPointerAnnotation0.equals("");
      categoryPointerAnnotation0.equals("");
      categoryPointerAnnotation0.fireAnnotationChanged();
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.getArrowLength();
      categoryPointerAnnotation0.equals(categoryPointerAnnotation0);
      categoryPointerAnnotation0.setAngle(2044.57419);
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.getArrowWidth();
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", 716.961580961347, (-994.0));
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      Object object0 = categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.setTipRadius((-994.0));
      categoryPointerAnnotation0.setTipRadius(3.0);
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.equals(object0);
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.setArrowPaint(((TextAnnotation) object0).DEFAULT_PAINT);
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.setTipRadius(0.0);
      object0.equals("fUTo^_*1Qh");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(")_s$+", ")_s$+", 1742.029, 487.462086);
      CategoryAnchor categoryAnchor0 = CategoryAnchor.MIDDLE;
      categoryPointerAnnotation0.setCategoryAnchor(categoryAnchor0);
      Font font0 = TextAnnotation.DEFAULT_FONT;
      categoryPointerAnnotation0.setBaseRadius(1742.029);
      categoryPointerAnnotation0.setFont(font0);
      categoryPointerAnnotation0.getArrowLength();
      categoryPointerAnnotation0.getArrowLength();
      categoryPointerAnnotation0.getArrowPaint();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getColumnCount();
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(categoryDataset0).when(categoryPlot0).getDataset();
      doReturn(axisLocation0).when(categoryPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(categoryPlot0).getOrientation();
      doReturn(axisLocation0).when(categoryPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      doReturn(3.0).when(categoryAxis0).getCategoryMiddle(anyInt() , anyInt() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      double double0 = TextAnnotation.DEFAULT_ROTATION_ANGLE;
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((-3189.201)).when(valueAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      // Undeclared exception!
      try { 
        categoryPointerAnnotation0.draw((Graphics2D) null, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.CategoryPointerAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("QT%Gr=P}=mr", "QT%Gr=P}=mr", (-3095.902622328), 4022.6827200152);
      categoryPointerAnnotation0.setNotify(false);
      TextAnchor textAnchor0 = categoryPointerAnnotation0.getTextAnchor();
      categoryPointerAnnotation0.setTextAnchor(textAnchor0);
      categoryPointerAnnotation0.getArrowPaint();
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryPointerAnnotation0.notifyListeners(annotationChangeEvent0);
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.setTipRadius((-459.975946091474));
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.getTipRadius();
      categoryPointerAnnotation0.getArrowStroke();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", 1742.029, 487.462086);
      CategoryAnchor categoryAnchor0 = CategoryAnchor.MIDDLE;
      categoryPointerAnnotation0.setCategoryAnchor(categoryAnchor0);
      Font font0 = TextAnnotation.DEFAULT_FONT;
      categoryPointerAnnotation0.setBaseRadius(0.0);
      categoryPointerAnnotation0.setFont(font0);
      categoryPointerAnnotation0.getArrowLength();
      categoryPointerAnnotation0.getArrowLength();
      categoryPointerAnnotation0.getArrowPaint();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getColumnCount();
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(categoryDataset0).when(categoryPlot0).getDataset();
      doReturn(axisLocation0).when(categoryPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(categoryPlot0).getOrientation();
      doReturn(axisLocation0).when(categoryPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(categoryAxis0).getCategoryMiddle(anyInt() , anyInt() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      categoryPointerAnnotation0.getTipRadius();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(valueAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      // Undeclared exception!
      try { 
        categoryPointerAnnotation0.draw((Graphics2D) null, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.CategoryPointerAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", 1742.029, 487.462086);
      CategoryAnchor categoryAnchor0 = CategoryAnchor.MIDDLE;
      categoryPointerAnnotation0.setCategoryAnchor(categoryAnchor0);
      Font font0 = TextAnnotation.DEFAULT_FONT;
      categoryPointerAnnotation0.setBaseRadius(0.0);
      categoryPointerAnnotation0.setFont(font0);
      categoryPointerAnnotation0.getArrowLength();
      categoryPointerAnnotation0.getArrowLength();
      categoryPointerAnnotation0.getArrowPaint();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn((CategoryDataset) null).when(categoryPlot0).getDataset();
      doReturn(axisLocation0).when(categoryPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(categoryPlot0).getOrientation();
      doReturn(axisLocation0).when(categoryPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      categoryPointerAnnotation0.getTipRadius();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryPointerAnnotation0.draw((Graphics2D) null, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.CategoryPointerAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("@CZn&7YlQN", "@CZn&7YlQN", 1257.808953, 1257.808953);
      Font font0 = TextAnnotation.DEFAULT_FONT;
      categoryPointerAnnotation0.setFont(font0);
      categoryPointerAnnotation0.setCategory("@CZn&7YlQN");
      categoryPointerAnnotation0.setRotationAngle(1257.808953);
      Paint paint0 = categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setArrowPaint(paint0);
      categoryPointerAnnotation0.setLabelOffset((-1515.804));
      categoryPointerAnnotation0.equals("interval");
      categoryPointerAnnotation0.setAngle((-1515.804));
      categoryPointerAnnotation0.setAngle(684.2542541319);
      categoryPointerAnnotation0.setArrowLength(1257.808953);
      categoryPointerAnnotation0.setArrowLength((-1515.804));
      categoryPointerAnnotation0.setPaint(paint0);
      categoryPointerAnnotation0.setArrowLength(2006.052883811257);
      categoryPointerAnnotation0.setBaseRadius(1257.808953);
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setArrowWidth(3.0);
      categoryPointerAnnotation0.setLabelOffset(3416.32281);
      categoryPointerAnnotation0.setTipRadius(1190.7366498661183);
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.setArrowWidth((-1515.804));
      categoryPointerAnnotation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("0rGFdc1JYpAD4 @", "0rGFdc1JYpAD4 @", 1826.5546459399222, 2.0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(categoryPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(categoryPlot0).getOrientation();
      doReturn((AxisLocation) null).when(categoryPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryPointerAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("eG&)?R*2b;pyh#aumgs", "eG&)?R*2b;pyh#aumgs", 0.0, 0.0);
      categoryPointerAnnotation0.clone();
      Font font0 = TextAnnotation.DEFAULT_FONT;
      categoryPointerAnnotation0.setFont(font0);
      categoryPointerAnnotation0.setArrowLength(0.0);
      categoryPointerAnnotation0.equals("eG&)?R*2b;pyh#aumgs");
      Graphics2D graphics2D0 = null;
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(categoryPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(categoryPlot0).getOrientation();
      categoryPointerAnnotation0.setArrowPaint(categoryPlot0.DEFAULT_CROSSHAIR_PAINT);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryPointerAnnotation0.notifyListeners(annotationChangeEvent0);
      TextAnchor textAnchor0 = categoryPointerAnnotation0.getTextAnchor();
      categoryPointerAnnotation0.setRotationAnchor(textAnchor0);
      // Undeclared exception!
      try { 
        categoryPointerAnnotation0.draw((Graphics2D) null, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("8f?d", "8f?d", 4025.5576769, 4025.5576769);
      categoryPointerAnnotation0.setCategory("8f?d");
      CategoryAnchor categoryAnchor0 = CategoryAnchor.MIDDLE;
      categoryPointerAnnotation0.setBaseRadius((-2531.53622194648));
      categoryPointerAnnotation0.setCategoryAnchor(categoryAnchor0);
      categoryPointerAnnotation0.getArrowLength();
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.clone();
      Font font0 = TextAnnotation.DEFAULT_FONT;
      categoryPointerAnnotation0.setFont(font0);
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.getAngle();
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      categoryPointerAnnotation0.removeChangeListener(annotationChangeListener0);
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.getTipRadius();
      categoryPointerAnnotation0.setLabelOffset(0.0);
      categoryPointerAnnotation0.setLabelOffset(0.0);
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.setAngle(6.0);
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setAngle(4558.63337);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(";'1t", ";'1t", 0.0, 0.0);
      categoryPointerAnnotation0.setText(";'1t");
      Font font0 = categoryPointerAnnotation0.getFont();
      categoryPointerAnnotation0.setFont(font0);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      categoryPointerAnnotation0.hasListener(eventListener0);
      categoryPointerAnnotation0.setLabelOffset(0.0);
      categoryPointerAnnotation0.getLabelOffset();
      categoryPointerAnnotation0.setBaseRadius((-350.8175));
      categoryPointerAnnotation0.setBaseRadius((-45.0));
      categoryPointerAnnotation0.setArrowWidth(0.0);
      Paint paint0 = categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setLabelOffset(0.0);
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.setArrowPaint(paint0);
      categoryPointerAnnotation0.setBaseRadius((-764.2588));
      categoryPointerAnnotation0.setLabelOffset(0.0);
      categoryPointerAnnotation0.getArrowPaint();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", 0.0, 3.0);
      categoryPointerAnnotation0.setArrowLength(3.0);
      Color color0 = (Color)TextAnnotation.DEFAULT_PAINT;
      categoryPointerAnnotation0.setArrowPaint(color0);
      categoryPointerAnnotation0.setArrowLength(0.0);
      categoryPointerAnnotation0.setPaint(color0);
      categoryPointerAnnotation0.setTipRadius(583.0423551591217);
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.getArrowLength();
      CategoryPointerAnnotation categoryPointerAnnotation1 = new CategoryPointerAnnotation("", 0.0, 3.0, 3.0);
      categoryPointerAnnotation1.clone();
      categoryPointerAnnotation0.equals(categoryPointerAnnotation1);
      categoryPointerAnnotation1.getArrowPaint();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", 10.0, (-1.0));
      Paint paint0 = categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setPaint(paint0);
      categoryPointerAnnotation0.setAngle((-1.0));
      categoryPointerAnnotation0.hashCode();
      Font font0 = categoryPointerAnnotation0.getFont();
      categoryPointerAnnotation0.setFont(font0);
      categoryPointerAnnotation0.setArrowLength((-1.0));
      categoryPointerAnnotation0.setAngle(10.0);
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.getBaseRadius();
      CategoryPointerAnnotation categoryPointerAnnotation1 = new CategoryPointerAnnotation("EXcO$X#", 3.0, (-2524.655554252668), (-1910.4682049589096));
      categoryPointerAnnotation0.equals(categoryPointerAnnotation1);
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation1.setArrowPaint(categoryPointerAnnotation0.DEFAULT_PAINT);
      categoryPointerAnnotation1.getArrowWidth();
      categoryPointerAnnotation1.setNotify(false);
      categoryPointerAnnotation1.setLabelOffset((-267.173424224743));
      categoryPointerAnnotation0.setTipRadius(2563.687007683);
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setArrowPaint(categoryPointerAnnotation1.DEFAULT_PAINT);
      categoryPointerAnnotation0.setTipRadius(10.0);
      categoryPointerAnnotation1.getBaseRadius();
      categoryPointerAnnotation0.equals((Object) null);
      categoryPointerAnnotation1.setLabelOffset(3.0);
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.setBaseRadius((-107.475));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("|Bd5*LR,:D+8", "|Bd5*LR,:D+8", 3.0, 3.0);
      categoryPointerAnnotation0.setRotationAngle((-1011.1062467941907));
      categoryPointerAnnotation0.setRotationAngle((-1727.3684727533));
      Paint paint0 = categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setArrowPaint(paint0);
      categoryPointerAnnotation0.setLabelOffset(3.0);
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setTipRadius(3.0);
      categoryPointerAnnotation0.setArrowWidth(0.0);
      Object object0 = categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.equals(object0);
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.getTipRadius();
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.setAngle(3.0);
      categoryPointerAnnotation0.getLabelOffset();
      categoryPointerAnnotation0.getArrowLength();
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.getArrowLength();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.setAngle(30.0);
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.getAngle();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", 2174.180711, 1287.9720663497);
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setArrowLength(2174.180711);
      categoryPointerAnnotation0.setArrowLength(3292.21);
      categoryPointerAnnotation0.setTipRadius(1091.4833707082);
      categoryPointerAnnotation0.getLabelOffset();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.setLabelOffset(0.0);
      categoryPointerAnnotation0.setArrowWidth(2562.49769623);
      categoryPointerAnnotation0.setLabelOffset(3.0);
      Object object0 = categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("stroke", "stroke", 5.0, 5.0);
      categoryPointerAnnotation0.setArrowWidth(265.0155784);
      Paint paint0 = categoryPointerAnnotation0.getPaint();
      categoryPointerAnnotation0.setPaint(paint0);
      TextUtils.setUseFontMetricsGetStringBounds(false);
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.setLabelOffset(30.0);
      TextUtils.setDrawStringsWithFontAttributes(true);
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.setAngle(5.0);
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.getTipRadius();
      categoryPointerAnnotation0.setArrowPaint(paint0);
      categoryPointerAnnotation0.getArrowLength();
      categoryPointerAnnotation0.setArrowWidth(224.858961649);
      categoryPointerAnnotation0.getArrowWidth();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("]", "]", 0.001, 0.001);
      CategoryAnchor categoryAnchor0 = CategoryAnchor.START;
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      categoryPointerAnnotation0.hasListener(eventListener0);
      categoryPointerAnnotation0.setCategoryAnchor(categoryAnchor0);
      categoryPointerAnnotation0.equals("]");
      CategoryPointerAnnotation categoryPointerAnnotation1 = new CategoryPointerAnnotation("]", 0.0, 0.0, 3.0);
      categoryPointerAnnotation0.equals(categoryPointerAnnotation1);
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.getArrowWidth();
      CategoryPointerAnnotation categoryPointerAnnotation2 = new CategoryPointerAnnotation("HP)wi~1J>AJ+C0K", 3.0, 3.0, 30.0);
      Stroke stroke0 = categoryPointerAnnotation2.getArrowStroke();
      categoryPointerAnnotation1.setArrowStroke(stroke0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryPointerAnnotation1.draw(graphics2D0, (CategoryPlot) null, rectangle2D0, (CategoryAxis) null, valueAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.CategoryPointerAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("e", "e", 0.0, 0.0);
      Paint paint0 = categoryPointerAnnotation0.getPaint();
      categoryPointerAnnotation0.setPaint(paint0);
      categoryPointerAnnotation0.setCategory("e");
      categoryPointerAnnotation0.setArrowLength(4306.3415333);
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.getBaseRadius();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", (-1.0), (-1.0));
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      categoryPointerAnnotation0.hasListener(eventListener0);
      TextUtils.setUseFontMetricsGetStringBounds(false);
      categoryPointerAnnotation0.setLabelOffset((-966.1));
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.setBaseRadius((-1790.899654));
      Paint paint0 = categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setArrowPaint(paint0);
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.getBaseRadius();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = null;
      try {
        categoryPointerAnnotation0 = new CategoryPointerAnnotation((String) null, (Comparable) null, 2675.5327923532664, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Empty list not permitted.", "Empty list not permitted.", (-389.87164209388), 1.0);
      CategoryPointerAnnotation categoryPointerAnnotation1 = new CategoryPointerAnnotation("Empty list not permitted.", 10.0, 1.0, 10.0);
      categoryPointerAnnotation0.equals(categoryPointerAnnotation1);
      categoryPointerAnnotation0.getArrowStroke();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("\"/zd'ivT3pO@", "\"/zd'ivT3pO@", 3.0, 3.0);
      categoryPointerAnnotation0.fireAnnotationChanged();
      Paint paint0 = categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setArrowPaint(paint0);
      categoryPointerAnnotation0.setLabelOffset((-1164.9503007));
      categoryPointerAnnotation0.setArrowWidth((-1164.9503007));
      categoryPointerAnnotation0.getArrowLength();
      categoryPointerAnnotation0.setAngle(3.0);
      categoryPointerAnnotation0.getLabelOffset();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("~62IF", "~62IF", 0.0, 3.0);
      categoryPointerAnnotation0.setLabelOffset(3.0);
      categoryPointerAnnotation0.setArrowLength(0.0);
      categoryPointerAnnotation0.setCategory("~62IF");
      TextUtils.setUseFontMetricsGetStringBounds(false);
      categoryPointerAnnotation0.setArrowWidth((-1.0));
      // Undeclared exception!
      try { 
        categoryPointerAnnotation0.setArrowPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("org.jfree.chart.annotations.AbstractAnnotation", "org.jfree.chart.annotations.AbstractAnnotation", (-1.0), 0.0);
      TextUtils.setUseFontMetricsGetStringBounds(false);
      categoryPointerAnnotation0.setArrowLength(6.0);
      categoryPointerAnnotation0.setLabelOffset(0.0);
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.setArrowWidth(0.0);
      categoryPointerAnnotation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", 1078.9999, Double.POSITIVE_INFINITY);
      TextAnchor textAnchor0 = TextAnnotation.DEFAULT_TEXT_ANCHOR;
      categoryPointerAnnotation0.setRotationAnchor(textAnchor0);
      categoryPointerAnnotation0.setArrowLength((-1.0));
      categoryPointerAnnotation0.setTipRadius(0.0);
      categoryPointerAnnotation0.getArrowLength();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Pie_3D_Plot", "Pie_3D_Plot", 1181.7308931685, 1181.7308931685);
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.equals("Pie_3D_Plot");
      categoryPointerAnnotation0.setArrowWidth(1181.7308931685);
      categoryPointerAnnotation0.setTipRadius(1181.7308931685);
      categoryPointerAnnotation0.setText("Pie_3D_Plot");
      categoryPointerAnnotation0.setAngle((-176.6272237173999));
      categoryPointerAnnotation0.setTipRadius(1181.7308931685);
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setAngle(1181.7308931685);
      categoryPointerAnnotation0.setAngle(1022.89868384607);
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.setArrowLength((-195.322));
      categoryPointerAnnotation0.setBaseRadius((-1701.756437));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = 1.0;
      double double1 = 620.877;
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(";Ww36[PEiF", ";Ww36[PEiF", 1.0, 620.877);
      Stroke stroke0 = null;
      TextAnchor textAnchor0 = null;
      categoryPointerAnnotation0.setLabelOffset(620.877);
      // Undeclared exception!
      try { 
        categoryPointerAnnotation0.setArrowStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("org.jfree.chart.event.PlotChangeEvent", "org.jfree.chart.event.PlotChangeEvent", 1561.9649, 499.834);
      categoryPointerAnnotation0.setAngle((-1062.4905469171422));
      categoryPointerAnnotation0.setBaseRadius(499.834);
      categoryPointerAnnotation0.getTipRadius();
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.setAngle((-1062.4905469171422));
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.setBaseRadius((-1062.4905469171422));
      Color color0 = (Color)TextAnnotation.DEFAULT_PAINT;
      categoryPointerAnnotation0.setArrowPaint(color0);
      categoryPointerAnnotation0.setAngle(499.834);
      categoryPointerAnnotation0.clone();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", (-10.79035049732), 0.0);
      categoryPointerAnnotation0.equals("`[*<v!N49I$");
      categoryPointerAnnotation0.getTipRadius();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(categoryPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(categoryPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryPointerAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(",Ii", ",Ii", 0.18, 0.0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(categoryPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(categoryPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryPointerAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", 0.0, 0.0);
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.setText("");
      categoryPointerAnnotation0.setTipRadius(0.0);
      categoryPointerAnnotation0.getArrowLength();
      Paint paint0 = categoryPointerAnnotation0.getPaint();
      categoryPointerAnnotation0.setPaint(paint0);
      categoryPointerAnnotation0.setArrowWidth(3.0);
      Object object0 = categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.setValue(0.0);
      categoryPointerAnnotation0.equals(object0);
      categoryPointerAnnotation0.getArrowWidth();
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryPointerAnnotation0.notifyListeners(annotationChangeEvent0);
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.setAngle(0.0);
      Paint paint1 = categoryPointerAnnotation0.getPaint();
      categoryPointerAnnotation0.setArrowPaint(paint1);
      categoryPointerAnnotation0.setBaseRadius(3.0);
      categoryPointerAnnotation0.getTipRadius();
      categoryPointerAnnotation0.setLabelOffset((-1.0));
      categoryPointerAnnotation0.setAngle(227.83707169);
      categoryPointerAnnotation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", 0.0, 0.0);
      categoryPointerAnnotation0.setText("");
      categoryPointerAnnotation0.setBaseRadius(0.0);
      categoryPointerAnnotation0.equals("");
      Object object0 = categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.equals("");
      categoryPointerAnnotation0.fireAnnotationChanged();
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.getArrowLength();
      categoryPointerAnnotation0.equals(object0);
      categoryPointerAnnotation0.setAngle(2044.57419);
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.getArrowWidth();
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("ap}tYZ8,]iUS", "ap}tYZ8,]iUS", 0.0, 5.0);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(categoryPointerAnnotation0);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals("ap}tYZ8,]iUS", categoryPointerAnnotation0.getText());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getAngle(), 0.01);
      
      double double0 = categoryPointerAnnotation0.getArrowWidth();
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, double0, 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals("ap}tYZ8,]iUS", categoryPointerAnnotation0.getText());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getAngle(), 0.01);
      
      Color color0 = (Color)categoryPointerAnnotation0.getArrowPaint();
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(color0);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals("ap}tYZ8,]iUS", categoryPointerAnnotation0.getText());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      categoryPointerAnnotation0.setTipRadius(0.0);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals("ap}tYZ8,]iUS", categoryPointerAnnotation0.getText());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getAngle(), 0.01);
      
      CategoryPointerAnnotation categoryPointerAnnotation1 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation1, categoryPointerAnnotation0);
      assertTrue(categoryPointerAnnotation1.equals((Object)categoryPointerAnnotation0));
      assertNotNull(categoryPointerAnnotation1);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals("ap}tYZ8,]iUS", categoryPointerAnnotation0.getText());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation1.getCategoryAnchor());
      assertEquals("ap}tYZ8,]iUS", categoryPointerAnnotation1.getText());
      assertEquals(5.0, categoryPointerAnnotation1.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation1.getValue(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation1.getBaseRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation1.getRotationAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation1.getLabelOffset(), 0.01);
      assertTrue(categoryPointerAnnotation1.getNotify());
      assertEquals(5.0, categoryPointerAnnotation1.getAngle(), 0.01);
      
      TextUtils.setUseFontMetricsGetStringBounds(true);
      categoryPointerAnnotation0.hashCode();
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertTrue(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals("ap}tYZ8,]iUS", categoryPointerAnnotation0.getText());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getAngle(), 0.01);
      
      CategoryPointerAnnotation categoryPointerAnnotation2 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation2);
      assertNotSame(categoryPointerAnnotation2, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation2, categoryPointerAnnotation0);
      assertTrue(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertTrue(categoryPointerAnnotation2.equals((Object)categoryPointerAnnotation1));
      assertTrue(categoryPointerAnnotation2.equals((Object)categoryPointerAnnotation0));
      assertNotNull(categoryPointerAnnotation2);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals("ap}tYZ8,]iUS", categoryPointerAnnotation0.getText());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation2.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation2.getRotationAngle(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation2.getBaseRadius(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation2.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation2.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation2.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation2.getTipRadius(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation2.getCategoryAnchor());
      assertEquals("ap}tYZ8,]iUS", categoryPointerAnnotation2.getText());
      assertEquals(3.0, categoryPointerAnnotation2.getLabelOffset(), 0.01);
      assertTrue(categoryPointerAnnotation2.getNotify());
      
      boolean boolean0 = categoryPointerAnnotation0.equals(categoryPointerAnnotation2);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation2);
      assertNotSame(categoryPointerAnnotation2, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation2, categoryPointerAnnotation0);
      assertTrue(boolean0);
      assertTrue(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation2));
      assertTrue(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertTrue(categoryPointerAnnotation2.equals((Object)categoryPointerAnnotation1));
      assertTrue(categoryPointerAnnotation2.equals((Object)categoryPointerAnnotation0));
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals("ap}tYZ8,]iUS", categoryPointerAnnotation0.getText());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation2.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation2.getRotationAngle(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation2.getBaseRadius(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation2.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation2.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation2.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation2.getTipRadius(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation2.getCategoryAnchor());
      assertEquals("ap}tYZ8,]iUS", categoryPointerAnnotation2.getText());
      assertEquals(3.0, categoryPointerAnnotation2.getLabelOffset(), 0.01);
      assertTrue(categoryPointerAnnotation2.getNotify());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("X[3", "X[3", 2478.8, 2478.8);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertNotNull(categoryPointerAnnotation0);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals("X[3", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(2478.8, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(2478.8, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      
      categoryPointerAnnotation0.setBaseRadius(2478.8);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(2478.8, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("X[3", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(2478.8, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(2478.8, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      
      categoryPointerAnnotation0.setTipRadius(2478.8);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(2478.8, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("X[3", categoryPointerAnnotation0.getText());
      assertEquals(2478.8, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(2478.8, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(2478.8, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      
      categoryPointerAnnotation0.setArrowWidth(2478.8);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(2478.8, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("X[3", categoryPointerAnnotation0.getText());
      assertEquals(2478.8, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(2478.8, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(2478.8, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(2478.8, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      
      double double0 = categoryPointerAnnotation0.getTipRadius();
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(2478.8, double0, 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(2478.8, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("X[3", categoryPointerAnnotation0.getText());
      assertEquals(2478.8, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(2478.8, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(2478.8, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(2478.8, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      
      BasicStroke basicStroke0 = (BasicStroke)categoryPointerAnnotation0.getArrowStroke();
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertNotNull(basicStroke0);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(2478.8, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("X[3", categoryPointerAnnotation0.getText());
      assertEquals(2478.8, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(2478.8, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(2478.8, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(2478.8, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("sY.='", "sY.='", 30.0, 1880.778905471);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotNull(categoryPointerAnnotation0);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(30.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(1880.778905471, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals("sY.='", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      
      categoryPointerAnnotation0.setArrowWidth(1880.778905471);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(30.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(1880.778905471, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(1880.778905471, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals("sY.='", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("org.jfree.chart.entity.PlotEntity", "org.jfree.chart.entity.PlotEntity", 3.0, 2076.856);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertNotNull(categoryPointerAnnotation0);
      assertEquals(3.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(2076.856, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals("org.jfree.chart.entity.PlotEntity", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      
      double double0 = categoryPointerAnnotation0.getArrowLength();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(5.0, double0, 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(2076.856, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals("org.jfree.chart.entity.PlotEntity", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("!nWsr50$&+e2", "!nWsr50$&+e2", 789.320471771, 158.577);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertNotNull(categoryPointerAnnotation0);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals("!nWsr50$&+e2", categoryPointerAnnotation0.getText());
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(789.320471771, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(158.577, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      
      categoryPointerAnnotation0.setLabelOffset(158.577);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(158.577, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("!nWsr50$&+e2", categoryPointerAnnotation0.getText());
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(789.320471771, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(158.577, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Hur2l", "Hur2l", 2.0, 2.0);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertNotNull(categoryPointerAnnotation0);
      assertEquals("Hur2l", categoryPointerAnnotation0.getText());
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      
      CategoryPointerAnnotation categoryPointerAnnotation1 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation1, categoryPointerAnnotation0);
      assertTrue(categoryPointerAnnotation1.equals((Object)categoryPointerAnnotation0));
      assertNotNull(categoryPointerAnnotation1);
      assertEquals("Hur2l", categoryPointerAnnotation0.getText());
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation1.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation1.getRotationAngle(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation1.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation1.getNotify());
      assertEquals(3.0, categoryPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation1.getBaseRadius(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation1.getCategoryAnchor());
      assertEquals("Hur2l", categoryPointerAnnotation1.getText());
      assertEquals(2.0, categoryPointerAnnotation1.getValue(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation1.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation1.getLabelOffset(), 0.01);
      
      categoryPointerAnnotation0.hashCode();
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertTrue(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertEquals("Hur2l", categoryPointerAnnotation0.getText());
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      
      categoryPointerAnnotation0.setArrowLength((-2170.9));
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertEquals("Hur2l", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals((-2170.9), categoryPointerAnnotation0.getArrowLength(), 0.01);
      
      boolean boolean0 = categoryPointerAnnotation0.equals(categoryPointerAnnotation1);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation1, categoryPointerAnnotation0);
      assertFalse(boolean0);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertFalse(categoryPointerAnnotation1.equals((Object)categoryPointerAnnotation0));
      assertEquals("Hur2l", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals((-2170.9), categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation1.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation1.getRotationAngle(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation1.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation1.getNotify());
      assertEquals(3.0, categoryPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation1.getBaseRadius(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation1.getCategoryAnchor());
      assertEquals("Hur2l", categoryPointerAnnotation1.getText());
      assertEquals(2.0, categoryPointerAnnotation1.getValue(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation1.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation1.getLabelOffset(), 0.01);
      
      Color color0 = (Color)categoryPointerAnnotation0.getArrowPaint();
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertNotNull(color0);
      assertEquals("Hur2l", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals((-2170.9), categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      
      categoryPointerAnnotation0.hashCode();
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertEquals("Hur2l", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals((-2170.9), categoryPointerAnnotation0.getArrowLength(), 0.01);
      
      CategoryPointerAnnotation categoryPointerAnnotation2 = new CategoryPointerAnnotation("Hur2l", (-1677358925), 3242.63827, 5.0);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertFalse(categoryPointerAnnotation2.equals((Object)categoryPointerAnnotation1));
      assertFalse(categoryPointerAnnotation2.equals((Object)categoryPointerAnnotation0));
      assertNotNull(categoryPointerAnnotation2);
      assertEquals(3242.63827, categoryPointerAnnotation2.getValue(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation2.getArrowLength(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation2.getAngle(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation2.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation2.getLabelOffset(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation2.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation2.getNotify());
      assertEquals("Hur2l", categoryPointerAnnotation2.getText());
      assertEquals(0.0, categoryPointerAnnotation2.getRotationAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation2.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation2.getCategoryAnchor());
      
      boolean boolean1 = categoryPointerAnnotation0.equals(categoryPointerAnnotation2);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation2);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation2, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation2, categoryPointerAnnotation0);
      assertFalse(boolean1);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation2));
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertFalse(categoryPointerAnnotation2.equals((Object)categoryPointerAnnotation1));
      assertFalse(categoryPointerAnnotation2.equals((Object)categoryPointerAnnotation0));
      assertTrue(boolean1 == boolean0);
      assertEquals("Hur2l", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals((-2170.9), categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(3242.63827, categoryPointerAnnotation2.getValue(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation2.getArrowLength(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation2.getAngle(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation2.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation2.getLabelOffset(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation2.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation2.getNotify());
      assertEquals("Hur2l", categoryPointerAnnotation2.getText());
      assertEquals(0.0, categoryPointerAnnotation2.getRotationAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation2.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation2.getCategoryAnchor());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", 1.5707963267948966, 2.0);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotNull(categoryPointerAnnotation0);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(1.5707963267948966, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      
      categoryPointerAnnotation0.setNotify(true);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(1.5707963267948966, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      
      Color color0 = (Color)TextAnnotation.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      
      categoryPointerAnnotation0.setPaint(color0);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(1.5707963267948966, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      
      double double0 = categoryPointerAnnotation0.getBaseRadius();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, double0, 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(1.5707963267948966, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      
      categoryPointerAnnotation0.setArrowPaint(color0);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(1.5707963267948966, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      categoryPointerAnnotation0.addChangeListener(annotationChangeListener0);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(1.5707963267948966, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      
      boolean boolean0 = categoryPointerAnnotation0.equals((Object) null);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertFalse(boolean0);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(1.5707963267948966, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      
      categoryPointerAnnotation0.setTipRadius(2874.3799006455);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(2874.3799006455, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(1.5707963267948966, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      
      categoryPointerAnnotation0.setArrowWidth(1741.8701108135356);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(1741.8701108135356, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(2874.3799006455, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(1.5707963267948966, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      
      categoryPointerAnnotation0.hashCode();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(1741.8701108135356, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(2874.3799006455, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(1.5707963267948966, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      
      categoryPointerAnnotation0.setArrowWidth(2874.3799006455);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(2874.3799006455, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(2874.3799006455, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(1.5707963267948966, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)categoryPointerAnnotation0.getArrowStroke();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotNull(basicStroke0);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(2874.3799006455, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(2874.3799006455, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(1.5707963267948966, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      double double1 = categoryPointerAnnotation0.getBaseRadius();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(2874.3799006455, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(2874.3799006455, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(1.5707963267948966, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      
      double double2 = categoryPointerAnnotation0.getLabelOffset();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(2874.3799006455, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(2874.3799006455, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(1.5707963267948966, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      
      categoryPointerAnnotation0.setLabelOffset(1741.8701108135356);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(1741.8701108135356, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(2874.3799006455, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(2874.3799006455, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(1.5707963267948966, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      
      CategoryPointerAnnotation categoryPointerAnnotation1 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation1, categoryPointerAnnotation0);
      assertTrue(categoryPointerAnnotation1.equals((Object)categoryPointerAnnotation0));
      assertNotNull(categoryPointerAnnotation1);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(1741.8701108135356, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(2874.3799006455, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(2874.3799006455, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(1.5707963267948966, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation1.getCategoryAnchor());
      assertEquals(1.5707963267948966, categoryPointerAnnotation1.getValue(), 0.01);
      assertEquals(2.0, categoryPointerAnnotation1.getAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation1.getArrowLength(), 0.01);
      assertEquals(2874.3799006455, categoryPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("", categoryPointerAnnotation1.getText());
      assertEquals(0.0, categoryPointerAnnotation1.getRotationAngle(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation1.getBaseRadius(), 0.01);
      assertEquals(1741.8701108135356, categoryPointerAnnotation1.getLabelOffset(), 0.01);
      assertTrue(categoryPointerAnnotation1.getNotify());
      assertEquals(2874.3799006455, categoryPointerAnnotation1.getTipRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", 0.0, 0.0);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(categoryPointerAnnotation0);
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      
      categoryPointerAnnotation0.setText("");
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      
      categoryPointerAnnotation0.setBaseRadius(0.0);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      
      boolean boolean0 = categoryPointerAnnotation0.equals("");
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      
      CategoryPointerAnnotation categoryPointerAnnotation1 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation1, categoryPointerAnnotation0);
      assertTrue(categoryPointerAnnotation1.equals((Object)categoryPointerAnnotation0));
      assertNotNull(categoryPointerAnnotation1);
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertTrue(categoryPointerAnnotation1.getNotify());
      assertEquals(10.0, categoryPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation1.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation1.getBaseRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation1.getRotationAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation1.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation1.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("", categoryPointerAnnotation1.getText());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation1.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation1.getValue(), 0.01);
      
      boolean boolean1 = categoryPointerAnnotation0.equals("");
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertFalse(boolean1);
      assertTrue(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      
      categoryPointerAnnotation0.fireAnnotationChanged();
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertTrue(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      
      double double0 = categoryPointerAnnotation0.getBaseRadius();
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertEquals(0.0, double0, 0.01);
      assertTrue(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      
      double double1 = categoryPointerAnnotation0.getArrowLength();
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertEquals(5.0, double1, 0.01);
      assertTrue(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      
      boolean boolean2 = categoryPointerAnnotation0.equals(categoryPointerAnnotation1);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation1, categoryPointerAnnotation0);
      assertTrue(boolean2);
      assertTrue(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertTrue(categoryPointerAnnotation1.equals((Object)categoryPointerAnnotation0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertTrue(categoryPointerAnnotation1.getNotify());
      assertEquals(10.0, categoryPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation1.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation1.getBaseRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation1.getRotationAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation1.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation1.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("", categoryPointerAnnotation1.getText());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation1.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation1.getValue(), 0.01);
      
      categoryPointerAnnotation0.setAngle(2044.57419);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(2044.57419, categoryPointerAnnotation0.getAngle(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      
      CategoryPointerAnnotation categoryPointerAnnotation2 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation2);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation2, categoryPointerAnnotation0);
      assertNotSame(categoryPointerAnnotation2, categoryPointerAnnotation1);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertTrue(categoryPointerAnnotation2.equals((Object)categoryPointerAnnotation0));
      assertFalse(categoryPointerAnnotation2.equals((Object)categoryPointerAnnotation1));
      assertNotNull(categoryPointerAnnotation2);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(2044.57419, categoryPointerAnnotation0.getAngle(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(2044.57419, categoryPointerAnnotation2.getAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation2.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation2.getValue(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation2.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation2.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation2.getText());
      assertEquals(10.0, categoryPointerAnnotation2.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation2.getNotify());
      assertEquals(3.0, categoryPointerAnnotation2.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation2.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation2.getRotationAngle(), 0.01);
      
      categoryPointerAnnotation2.setArrowPaint(categoryPointerAnnotation0.DEFAULT_PAINT);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation2);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation2, categoryPointerAnnotation0);
      assertNotSame(categoryPointerAnnotation2, categoryPointerAnnotation1);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertTrue(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation2));
      assertTrue(categoryPointerAnnotation2.equals((Object)categoryPointerAnnotation0));
      assertFalse(categoryPointerAnnotation2.equals((Object)categoryPointerAnnotation1));
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(2044.57419, categoryPointerAnnotation0.getAngle(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(2044.57419, categoryPointerAnnotation2.getAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation2.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation2.getValue(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation2.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation2.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation2.getText());
      assertEquals(10.0, categoryPointerAnnotation2.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation2.getNotify());
      assertEquals(3.0, categoryPointerAnnotation2.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation2.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation2.getRotationAngle(), 0.01);
      
      categoryPointerAnnotation0.hashCode();
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation2);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertTrue(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation2));
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(2044.57419, categoryPointerAnnotation0.getAngle(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      
      double double2 = categoryPointerAnnotation0.getArrowWidth();
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation2);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertEquals(3.0, double2, 0.01);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertTrue(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation2));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(2044.57419, categoryPointerAnnotation0.getAngle(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      
      BasicStroke basicStroke0 = (BasicStroke)categoryPointerAnnotation0.getArrowStroke();
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation2);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertTrue(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation2));
      assertNotNull(basicStroke0);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(2044.57419, categoryPointerAnnotation0.getAngle(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      categoryPointerAnnotation0.setArrowStroke(basicStroke0);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation2);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertTrue(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation2));
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(2044.57419, categoryPointerAnnotation0.getAngle(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      CategoryPointerAnnotation categoryPointerAnnotation3 = (CategoryPointerAnnotation)categoryPointerAnnotation1.clone();
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation2);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation3);
      assertNotSame(categoryPointerAnnotation3, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation3, categoryPointerAnnotation2);
      assertNotSame(categoryPointerAnnotation3, categoryPointerAnnotation0);
      assertNotSame(categoryPointerAnnotation1, categoryPointerAnnotation3);
      assertNotSame(categoryPointerAnnotation1, categoryPointerAnnotation0);
      assertNotSame(categoryPointerAnnotation1, categoryPointerAnnotation2);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertTrue(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation2));
      assertFalse(categoryPointerAnnotation3.equals((Object)categoryPointerAnnotation2));
      assertFalse(categoryPointerAnnotation3.equals((Object)categoryPointerAnnotation0));
      assertTrue(categoryPointerAnnotation3.equals((Object)categoryPointerAnnotation1));
      assertFalse(categoryPointerAnnotation1.equals((Object)categoryPointerAnnotation0));
      assertFalse(categoryPointerAnnotation1.equals((Object)categoryPointerAnnotation2));
      assertNotNull(categoryPointerAnnotation3);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(2044.57419, categoryPointerAnnotation0.getAngle(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(5.0, categoryPointerAnnotation3.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation3.getValue(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation3.getRotationAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation3.getArrowWidth(), 0.01);
      assertTrue(categoryPointerAnnotation3.getNotify());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation3.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation3.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation3.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation3.getBaseRadius(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation3.getTipRadius(), 0.01);
      assertEquals("", categoryPointerAnnotation3.getText());
      assertTrue(categoryPointerAnnotation1.getNotify());
      assertEquals(10.0, categoryPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation1.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation1.getBaseRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation1.getRotationAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation1.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation1.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("", categoryPointerAnnotation1.getText());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation1.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation1.getValue(), 0.01);
      
      boolean boolean3 = categoryPointerAnnotation2.equals(categoryPointerAnnotation3);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation2);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation3);
      assertNotSame(categoryPointerAnnotation3, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation3, categoryPointerAnnotation2);
      assertNotSame(categoryPointerAnnotation3, categoryPointerAnnotation0);
      assertNotSame(categoryPointerAnnotation1, categoryPointerAnnotation3);
      assertNotSame(categoryPointerAnnotation1, categoryPointerAnnotation0);
      assertNotSame(categoryPointerAnnotation1, categoryPointerAnnotation2);
      assertNotSame(categoryPointerAnnotation2, categoryPointerAnnotation0);
      assertNotSame(categoryPointerAnnotation2, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation2, categoryPointerAnnotation3);
      assertFalse(boolean3);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation3));
      assertTrue(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation2));
      assertFalse(categoryPointerAnnotation3.equals((Object)categoryPointerAnnotation2));
      assertFalse(categoryPointerAnnotation3.equals((Object)categoryPointerAnnotation0));
      assertTrue(categoryPointerAnnotation3.equals((Object)categoryPointerAnnotation1));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(categoryPointerAnnotation1.equals((Object)categoryPointerAnnotation0));
      assertFalse(categoryPointerAnnotation1.equals((Object)categoryPointerAnnotation2));
      assertTrue(categoryPointerAnnotation1.equals((Object)categoryPointerAnnotation3));
      assertTrue(categoryPointerAnnotation2.equals((Object)categoryPointerAnnotation0));
      assertFalse(categoryPointerAnnotation2.equals((Object)categoryPointerAnnotation1));
      assertFalse(categoryPointerAnnotation2.equals((Object)categoryPointerAnnotation3));
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(2044.57419, categoryPointerAnnotation0.getAngle(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(5.0, categoryPointerAnnotation3.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation3.getValue(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation3.getRotationAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation3.getArrowWidth(), 0.01);
      assertTrue(categoryPointerAnnotation3.getNotify());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation3.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation3.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation3.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation3.getBaseRadius(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation3.getTipRadius(), 0.01);
      assertEquals("", categoryPointerAnnotation3.getText());
      assertTrue(categoryPointerAnnotation1.getNotify());
      assertEquals(10.0, categoryPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation1.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation1.getBaseRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation1.getRotationAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation1.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation1.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("", categoryPointerAnnotation1.getText());
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation1.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation1.getValue(), 0.01);
      assertEquals(2044.57419, categoryPointerAnnotation2.getAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation2.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation2.getValue(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation2.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation2.getLabelOffset(), 0.01);
      assertEquals("", categoryPointerAnnotation2.getText());
      assertEquals(10.0, categoryPointerAnnotation2.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation2.getNotify());
      assertEquals(3.0, categoryPointerAnnotation2.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation2.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation2.getRotationAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(")_s$+", ")_s$+", 1742.029, 487.462086);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertNotNull(categoryPointerAnnotation0);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(1742.029, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(487.462086, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(")_s$+", categoryPointerAnnotation0.getText());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      
      CategoryAnchor categoryAnchor0 = CategoryAnchor.MIDDLE;
      categoryPointerAnnotation0.setCategoryAnchor(categoryAnchor0);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(1742.029, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(487.462086, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(")_s$+", categoryPointerAnnotation0.getText());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      
      Font font0 = TextAnnotation.DEFAULT_FONT;
      assertNotNull(font0);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      
      categoryPointerAnnotation0.setBaseRadius(0.0);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(1742.029, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(487.462086, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(")_s$+", categoryPointerAnnotation0.getText());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      
      categoryPointerAnnotation0.setFont(font0);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(1742.029, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(487.462086, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(")_s$+", categoryPointerAnnotation0.getText());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      
      double double0 = categoryPointerAnnotation0.getArrowLength();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(5.0, double0, 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(1742.029, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(487.462086, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(")_s$+", categoryPointerAnnotation0.getText());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      
      double double1 = categoryPointerAnnotation0.getArrowLength();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(5.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(1742.029, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(487.462086, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(")_s$+", categoryPointerAnnotation0.getText());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      
      Color color0 = (Color)categoryPointerAnnotation0.getArrowPaint();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertNotNull(color0);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(1742.029, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(487.462086, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(")_s$+", categoryPointerAnnotation0.getText());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(486).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((-1172)).when(categoryDataset0).getColumnCount();
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(categoryDataset0).when(categoryPlot0).getDataset();
      doReturn(axisLocation0).when(categoryPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(categoryPlot0).getOrientation();
      doReturn(axisLocation0).when(categoryPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      doReturn(5.0).when(categoryAxis0).getCategoryMiddle(anyInt() , anyInt() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      double double2 = categoryPointerAnnotation0.getTipRadius();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(1742.029, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(487.462086, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(")_s$+", categoryPointerAnnotation0.getText());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((-55.0170026)).when(valueAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      // Undeclared exception!
      try { 
        categoryPointerAnnotation0.draw((Graphics2D) null, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.CategoryPointerAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Ds", "Ds", 1742.029, 487.462086);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertNotNull(categoryPointerAnnotation0);
      assertEquals("Ds", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(487.462086, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(1742.029, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      
      CategoryAnchor categoryAnchor0 = CategoryAnchor.MIDDLE;
      categoryPointerAnnotation0.setCategoryAnchor(categoryAnchor0);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals("Ds", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(487.462086, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(1742.029, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      
      Font font0 = TextAnnotation.DEFAULT_FONT;
      assertNotNull(font0);
      assertFalse(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      
      categoryPointerAnnotation0.setBaseRadius(0.0);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals("Ds", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(487.462086, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(1742.029, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      
      categoryPointerAnnotation0.setFont(font0);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals("Ds", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(487.462086, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(1742.029, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertFalse(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      
      double double0 = categoryPointerAnnotation0.getArrowLength();
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(5.0, double0, 0.01);
      assertEquals("Ds", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(487.462086, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(1742.029, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      
      double double1 = categoryPointerAnnotation0.getArrowLength();
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(5.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals("Ds", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(487.462086, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(1742.029, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      
      Color color0 = (Color)categoryPointerAnnotation0.getArrowPaint();
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertNotNull(color0);
      assertEquals("Ds", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(487.462086, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(1742.029, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(2078209981).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(2078209981).when(categoryDataset0).getColumnCount();
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(categoryDataset0).when(categoryPlot0).getDataset();
      doReturn(axisLocation0).when(categoryPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(categoryPlot0).getOrientation();
      doReturn(axisLocation0).when(categoryPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      doReturn((double)1.0F).when(categoryAxis0).getCategoryMiddle(anyInt() , anyInt() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      double double2 = categoryPointerAnnotation0.getTipRadius();
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(10.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals("Ds", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(487.462086, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(1742.029, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.2).when(valueAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      // Undeclared exception!
      try { 
        categoryPointerAnnotation0.draw((Graphics2D) null, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.CategoryPointerAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("H!", "H!", (-247.23096736304925), 360.0);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(categoryPointerAnnotation0);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("H!", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(360.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals((-247.23096736304925), categoryPointerAnnotation0.getValue(), 0.01);
      
      categoryPointerAnnotation0.setRotationAngle((-247.23096736304925));
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals((-247.23096736304925), categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("H!", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(360.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals((-247.23096736304925), categoryPointerAnnotation0.getValue(), 0.01);
      
      categoryPointerAnnotation0.fireAnnotationChanged();
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals((-247.23096736304925), categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("H!", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(360.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals((-247.23096736304925), categoryPointerAnnotation0.getValue(), 0.01);
      
      double double0 = categoryPointerAnnotation0.getLabelOffset();
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, double0, 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals((-247.23096736304925), categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("H!", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(360.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals((-247.23096736304925), categoryPointerAnnotation0.getValue(), 0.01);
      
      double double1 = categoryPointerAnnotation0.getBaseRadius();
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals((-247.23096736304925), categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("H!", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(360.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals((-247.23096736304925), categoryPointerAnnotation0.getValue(), 0.01);
      
      CategoryPointerAnnotation categoryPointerAnnotation1 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation1, categoryPointerAnnotation0);
      assertTrue(categoryPointerAnnotation1.equals((Object)categoryPointerAnnotation0));
      assertNotNull(categoryPointerAnnotation1);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals((-247.23096736304925), categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("H!", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(360.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals((-247.23096736304925), categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation1.getArrowLength(), 0.01);
      assertEquals(360.0, categoryPointerAnnotation1.getAngle(), 0.01);
      assertEquals("H!", categoryPointerAnnotation1.getText());
      assertEquals((-247.23096736304925), categoryPointerAnnotation1.getValue(), 0.01);
      assertTrue(categoryPointerAnnotation1.getNotify());
      assertEquals(3.0, categoryPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation1.getBaseRadius(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation1.getCategoryAnchor());
      assertEquals(3.0, categoryPointerAnnotation1.getLabelOffset(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals((-247.23096736304925), categoryPointerAnnotation1.getRotationAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("paint", "paint", (-1865.2385241922), 766.76);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotNull(categoryPointerAnnotation0);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(766.76, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      
      double double0 = categoryPointerAnnotation0.getAngle();
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(766.76, double0, 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(766.76, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      
      double double1 = categoryPointerAnnotation0.getBaseRadius();
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(766.76, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      
      categoryPointerAnnotation0.setAngle((-1865.2385241922));
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      
      categoryPointerAnnotation0.setArrowLength(0.0);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      
      Color color0 = (Color)TextAnnotation.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      
      categoryPointerAnnotation0.setArrowPaint(color0);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      
      categoryPointerAnnotation0.setBaseRadius(0.0);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      
      categoryPointerAnnotation0.setBaseRadius(30.0);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)categoryPointerAnnotation0.getArrowStroke();
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotNull(basicStroke0);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      
      categoryPointerAnnotation0.setValue(0.0);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      
      double double2 = categoryPointerAnnotation0.getArrowWidth();
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      
      categoryPointerAnnotation0.setRotationAngle(0.0);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      
      categoryPointerAnnotation0.hashCode();
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      
      CategoryPointerAnnotation categoryPointerAnnotation1 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation1, categoryPointerAnnotation0);
      assertTrue(categoryPointerAnnotation1.equals((Object)categoryPointerAnnotation0));
      assertNotNull(categoryPointerAnnotation1);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation1.getBaseRadius(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation1.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation1.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation1.getLabelOffset(), 0.01);
      assertEquals((-1865.2385241922), categoryPointerAnnotation1.getAngle(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation1.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation1.getNotify());
      assertEquals(0.0, categoryPointerAnnotation1.getRotationAngle(), 0.01);
      assertEquals("paint", categoryPointerAnnotation1.getText());
      assertEquals(0.0, categoryPointerAnnotation1.getArrowLength(), 0.01);
      
      categoryPointerAnnotation0.setNotify(true);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertTrue(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      
      boolean boolean0 = categoryPointerAnnotation0.equals(categoryPointerAnnotation1);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation1, categoryPointerAnnotation0);
      assertTrue(boolean0);
      assertTrue(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertTrue(categoryPointerAnnotation1.equals((Object)categoryPointerAnnotation0));
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation1.getBaseRadius(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation1.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation1.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation1.getLabelOffset(), 0.01);
      assertEquals((-1865.2385241922), categoryPointerAnnotation1.getAngle(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation1.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation1.getNotify());
      assertEquals(0.0, categoryPointerAnnotation1.getRotationAngle(), 0.01);
      assertEquals("paint", categoryPointerAnnotation1.getText());
      assertEquals(0.0, categoryPointerAnnotation1.getArrowLength(), 0.01);
      
      double double3 = categoryPointerAnnotation0.getTipRadius();
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertEquals(10.0, double3, 0.01);
      assertTrue(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      
      double double4 = categoryPointerAnnotation0.getBaseRadius();
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertEquals(30.0, double4, 0.01);
      assertTrue(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals((-1865.2385241922), categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      
      categoryPointerAnnotation0.setAngle(3.0);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      
      CategoryPointerAnnotation categoryPointerAnnotation2 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation2);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation2, categoryPointerAnnotation0);
      assertNotSame(categoryPointerAnnotation2, categoryPointerAnnotation1);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertTrue(categoryPointerAnnotation2.equals((Object)categoryPointerAnnotation0));
      assertFalse(categoryPointerAnnotation2.equals((Object)categoryPointerAnnotation1));
      assertNotNull(categoryPointerAnnotation2);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation2.getTipRadius(), 0.01);
      assertTrue(categoryPointerAnnotation2.getNotify());
      assertEquals(0.0, categoryPointerAnnotation2.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation2.getLabelOffset(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation2.getArrowWidth(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation2.getBaseRadius(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation2.getCategoryAnchor());
      assertEquals(3.0, categoryPointerAnnotation2.getAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation2.getRotationAngle(), 0.01);
      assertEquals("paint", categoryPointerAnnotation2.getText());
      assertEquals(0.0, categoryPointerAnnotation2.getArrowLength(), 0.01);
      
      categoryPointerAnnotation0.setTipRadius((-836.1878927133));
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation2);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation2));
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals((-836.1878927133), categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      
      double double5 = categoryPointerAnnotation0.getLabelOffset();
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation2);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertEquals(3.0, double5, 0.01);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation2));
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals((-836.1878927133), categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      
      CategoryPointerAnnotation categoryPointerAnnotation3 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation2);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation3);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation3, categoryPointerAnnotation1);
      assertNotSame(categoryPointerAnnotation3, categoryPointerAnnotation0);
      assertNotSame(categoryPointerAnnotation3, categoryPointerAnnotation2);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation2));
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertFalse(categoryPointerAnnotation3.equals((Object)categoryPointerAnnotation1));
      assertTrue(categoryPointerAnnotation3.equals((Object)categoryPointerAnnotation0));
      assertFalse(categoryPointerAnnotation3.equals((Object)categoryPointerAnnotation2));
      assertNotNull(categoryPointerAnnotation3);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals((-836.1878927133), categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals((-836.1878927133), categoryPointerAnnotation3.getTipRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation3.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation3.getCategoryAnchor());
      assertEquals(30.0, categoryPointerAnnotation3.getBaseRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation3.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation3.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation3.getLabelOffset(), 0.01);
      assertTrue(categoryPointerAnnotation3.getNotify());
      assertEquals(0.0, categoryPointerAnnotation3.getRotationAngle(), 0.01);
      assertEquals("paint", categoryPointerAnnotation3.getText());
      assertEquals(0.0, categoryPointerAnnotation3.getArrowLength(), 0.01);
      
      categoryPointerAnnotation0.setAngle(1513.743);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation2);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation3);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation2));
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation3));
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(1513.743, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals((-836.1878927133), categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      
      categoryPointerAnnotation0.hashCode();
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation2);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation3);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation2));
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation3));
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(1513.743, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals((-836.1878927133), categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      
      double double6 = categoryPointerAnnotation0.getAngle();
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation2);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation3);
      assertNotSame(categoryPointerAnnotation0, categoryPointerAnnotation1);
      assertEquals(1513.743, double6, 0.01);
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation2));
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation3));
      assertFalse(categoryPointerAnnotation0.equals((Object)categoryPointerAnnotation1));
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("paint", categoryPointerAnnotation0.getText());
      assertEquals(1513.743, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals((-836.1878927133), categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", 716.961580961347, (-994.0));
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      CategoryPointerAnnotation categoryPointerAnnotation1 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      TextUtils.setDrawStringsWithFontAttributes(true);
      categoryPointerAnnotation0.setTipRadius((-994.0));
      categoryPointerAnnotation0.setTipRadius(3.0);
      categoryPointerAnnotation1.clone();
      categoryPointerAnnotation0.equals(categoryPointerAnnotation0);
      categoryPointerAnnotation1.getAngle();
      categoryPointerAnnotation0.setArrowPaint(categoryPointerAnnotation0.DEFAULT_PAINT);
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.equals(categoryPointerAnnotation1);
      categoryPointerAnnotation0.equals(stroke0);
      CategoryPointerAnnotation categoryPointerAnnotation2 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      categoryPointerAnnotation2.getArrowStroke();
      assertEquals(3.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("P%", "", 1.05651401153445, 1.05651401153445);
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.getArrowPaint();
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(1.05651401153445, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
  }
}
