/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:53:20 GMT 2019
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.AnnotationChangeListener;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class XYLineAnnotation_ESTest extends XYLineAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-126.74515660557), (-126.74515660557), (-2318.0), (-2318.0));
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation1 = AxisLocation.TOP_OR_LEFT;
      PlotOrientation plotOrientation1 = PlotOrientation.HORIZONTAL;
      AxisLocation axisLocation2 = AxisLocation.BOTTOM_OR_LEFT;
      XYPlot xYPlot1 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation1).when(xYPlot1).getDomainAxisLocation();
      doReturn(plotOrientation1).when(xYPlot1).getOrientation();
      doReturn(axisLocation2).when(xYPlot1).getRangeAxisLocation();
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0, 1774, 0).when(rectangle2D1).outcode(anyDouble() , anyDouble());
      doReturn(4.0).when(rectangle2D1).getMaxX();
      doReturn(0.05).when(rectangle2D1).getMaxY();
      doReturn(0.05).when(rectangle2D1).getMinX();
      doReturn(1174.14608516).when(rectangle2D1).getMinY();
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((double)10, (double)2.0F, 258.08313, 1.0).when(valueAxis1).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.draw(graphics2D1, xYPlot1, rectangle2D1, valueAxis1, valueAxis1, 10, plotRenderingInfo0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation1.equals((Object)axisLocation2));
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotSame(axisLocation1, axisLocation0);
      assertNotSame(axisLocation1, axisLocation2);
      assertSame(plotOrientation1, plotOrientation0);
      assertSame(axisLocation2, axisLocation0);
      assertNotSame(axisLocation2, axisLocation1);
      
      int int0 = (-1604);
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, int0, plotRenderingInfo1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(2356.89915, (-2588.0), (-2588.0), 2356.89915);
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      boolean boolean0 = xYLineAnnotation0.equals(xYLineAnnotation0);
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.0, 2905.5784581332055, 0.0, 0.0);
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertNotNull(xYLineAnnotation0);
      
      xYLineAnnotation0.setToolTipText("FORWARD");
      assertTrue(xYLineAnnotation0.getNotify());
      assertEquals("FORWARD", xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.notifyListeners(annotationChangeEvent0);
      assertTrue(xYLineAnnotation0.getNotify());
      assertEquals("FORWARD", xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      
      xYLineAnnotation0.setURL("org.jfree.chart.annotations.XYLineAnnotation");
      assertTrue(xYLineAnnotation0.getNotify());
      assertEquals("FORWARD", xYLineAnnotation0.getToolTipText());
      assertEquals("org.jfree.chart.annotations.XYLineAnnotation", xYLineAnnotation0.getURL());
      
      xYLineAnnotation0.hashCode();
      assertTrue(xYLineAnnotation0.getNotify());
      assertEquals("FORWARD", xYLineAnnotation0.getToolTipText());
      assertEquals("org.jfree.chart.annotations.XYLineAnnotation", xYLineAnnotation0.getURL());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      doReturn(axisLocation0).when(xYPlot0).getRangeAxisLocation();
      boolean boolean0 = xYLineAnnotation0.equals("org.jfree.chart.annotations.XYLineAnnotation");
      assertTrue(xYLineAnnotation0.getNotify());
      assertEquals("FORWARD", xYLineAnnotation0.getToolTipText());
      assertEquals("org.jfree.chart.annotations.XYLineAnnotation", xYLineAnnotation0.getURL());
      assertFalse(boolean0);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(rectangle2D0).outcode(anyDouble() , anyDouble());
      doReturn(0.0).when(rectangle2D0).getMaxX();
      doReturn(0.0).when(rectangle2D0).getMaxY();
      doReturn(0.0).when(rectangle2D0).getMinX();
      doReturn(0.0).when(rectangle2D0).getMinY();
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.removeChangeListener(annotationChangeListener0);
      assertTrue(xYLineAnnotation0.getNotify());
      assertEquals("FORWARD", xYLineAnnotation0.getToolTipText());
      assertEquals("org.jfree.chart.annotations.XYLineAnnotation", xYLineAnnotation0.getURL());
      
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(valueAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      XYLineAnnotation xYLineAnnotation1 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertEquals("org.jfree.chart.annotations.XYLineAnnotation", xYLineAnnotation1.getURL());
      assertEquals("FORWARD", xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertTrue(xYLineAnnotation0.getNotify());
      assertEquals("FORWARD", xYLineAnnotation0.getToolTipText());
      assertEquals("org.jfree.chart.annotations.XYLineAnnotation", xYLineAnnotation0.getURL());
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotNull(xYLineAnnotation1);
      
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.AbstractXYAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.0, 0.0, 2980.67148, (-10.906393313445903), stroke0, paint0);
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      doReturn(axisLocation0).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(rectangle2D0).outcode(anyDouble() , anyDouble());
      doReturn(0.0).when(rectangle2D0).getMaxX();
      doReturn(0.0).when(rectangle2D0).getMaxY();
      doReturn(0.0).when(rectangle2D0).getMinX();
      doReturn(0.0).when(rectangle2D0).getMinY();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(valueAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation(0.05, 1.0F, 1.0E-4, 3486.7961230375654);
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getURL());
      assertNotNull(xYLineAnnotation1);
      
      XYLineAnnotation xYLineAnnotation2 = (XYLineAnnotation)xYLineAnnotation1.clone();
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation2.equals((Object)xYLineAnnotation1));
      assertNull(xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getURL());
      assertTrue(xYLineAnnotation2.getNotify());
      assertNull(xYLineAnnotation2.getURL());
      assertNull(xYLineAnnotation2.getToolTipText());
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation0);
      assertNotNull(xYLineAnnotation2);
      
      boolean boolean0 = xYLineAnnotation1.getNotify();
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation2));
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getURL());
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation2);
      assertTrue(boolean0);
      
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 29, plotRenderingInfo0);
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      
      XYPlot xYPlot1 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot1).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot1).getOrientation();
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYLineAnnotation2.draw((Graphics2D) null, xYPlot1, rectangle2D1, valueAxis1, valueAxis1, 29, plotRenderingInfo1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(2187.451139449994, 2187.451139449994, (-79.2), 1.0);
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      XYLineAnnotation xYLineAnnotation1 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation1.getURL());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotNull(xYLineAnnotation1);
      
      boolean boolean0 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation1.getURL());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertTrue(boolean0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      AxisLocation axisLocation1 = AxisLocation.TOP_OR_RIGHT;
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      doReturn(axisLocation1).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.setNotify(false);
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertFalse(xYLineAnnotation0.getNotify());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      
      ValueAxis valueAxis0 = null;
      PlotRenderingInfo plotRenderingInfo0 = null;
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, (ValueAxis) null, (ValueAxis) null, 10, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(1186.6440015958808, 1186.6440015958808, (-393.74), 0.0);
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNotNull(xYLineAnnotation0);
      
      boolean boolean0 = xYLineAnnotation0.equals((Object) null);
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertFalse(boolean0);
      
      XYLineAnnotation xYLineAnnotation1 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNull(xYLineAnnotation1.getURL());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotNull(xYLineAnnotation1);
      
      boolean boolean1 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertFalse(boolean1 == boolean0);
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNull(xYLineAnnotation1.getURL());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertTrue(boolean1);
      
      xYLineAnnotation0.hashCode();
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      
      xYLineAnnotation0.hashCode();
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = null;
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      AxisLocation axisLocation1 = AxisLocation.BOTTOM_OR_LEFT;
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      doReturn(axisLocation1).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.setURL("B;");
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertEquals("B;", xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(valueAxis1).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      ValueAxis valueAxis2 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(valueAxis2).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw((Graphics2D) null, xYPlot0, rectangle2D1, valueAxis1, valueAxis2, 10, plotRenderingInfo1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-1169.124713171), (-1169.124713171), 0.0, 0.0);
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      AnnotationChangeListener annotationChangeListener1 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.removeChangeListener(annotationChangeListener1);
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      xYLineAnnotation0.removeChangeListener(annotationChangeListener0);
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      AnnotationChangeListener annotationChangeListener2 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.addChangeListener(annotationChangeListener2);
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      XYLineAnnotation xYLineAnnotation1 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getURL());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotNull(xYLineAnnotation1);
      
      xYLineAnnotation0.hashCode();
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      
      XYLineAnnotation xYLineAnnotation2 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation2.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation2.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation2.getURL());
      assertNull(xYLineAnnotation2.getToolTipText());
      assertTrue(xYLineAnnotation2.getNotify());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation0);
      assertNotNull(xYLineAnnotation2);
      
      boolean boolean0 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation2));
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getURL());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation2);
      assertTrue(boolean0);
      
      XYLineAnnotation xYLineAnnotation3 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation3.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation3.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation3.equals((Object)xYLineAnnotation2));
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation3.getToolTipText());
      assertTrue(xYLineAnnotation3.getNotify());
      assertNull(xYLineAnnotation3.getURL());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation3);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation3, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation3, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation3, xYLineAnnotation2);
      assertNotNull(xYLineAnnotation3);
      
      XYLineAnnotation xYLineAnnotation4 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation3));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation4.equals((Object)xYLineAnnotation3));
      assertTrue(xYLineAnnotation4.equals((Object)xYLineAnnotation2));
      assertTrue(xYLineAnnotation4.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation4.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation4.getURL());
      assertTrue(xYLineAnnotation4.getNotify());
      assertNull(xYLineAnnotation4.getToolTipText());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation3);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation4);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation4, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation4, xYLineAnnotation3);
      assertNotSame(xYLineAnnotation4, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation4, xYLineAnnotation0);
      assertNotNull(xYLineAnnotation4);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      doReturn(axisLocation0).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(10, (-2146835729)).when(rectangle2D0).outcode(anyDouble() , anyDouble());
      doReturn((-1967.307645592)).when(rectangle2D0).getMaxX();
      doReturn(360.0).when(rectangle2D0).getMaxY();
      doReturn((double)10).when(rectangle2D0).getMinX();
      doReturn((double)1.0F).when(rectangle2D0).getMinY();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(360.0, (double)1.0F, 794.26, 3329.36914244202).when(valueAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation1.setURL("0.###");
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation3));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation4));
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation4));
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation2));
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation3));
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertEquals("0.###", xYLineAnnotation1.getURL());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation3);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation4);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation4);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation3);
      
      xYLineAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, (-1103), plotRenderingInfo0);
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation3));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation4));
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation3);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation4);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      
      boolean boolean1 = xYLineAnnotation1.equals(plotOrientation0);
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation3));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation4));
      assertFalse(boolean1 == boolean0);
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation4));
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation2));
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation3));
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertEquals("0.###", xYLineAnnotation1.getURL());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation3);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation4);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation4);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation3);
      assertFalse(boolean1);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-68.3299661597405), (-68.3299661597405), (-68.3299661597405), (-68.3299661597405), stroke0, paint0);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNotNull(xYLineAnnotation0);
      
      xYLineAnnotation0.fireAnnotationChanged();
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.removeChangeListener(annotationChangeListener0);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      
      xYLineAnnotation0.hashCode();
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = xYLineAnnotation0.hasListener(eventListener0);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      assertFalse(boolean0);
      
      xYLineAnnotation0.setNotify(false);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertFalse(xYLineAnnotation0.getNotify());
      
      XYLineAnnotation xYLineAnnotation1 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertFalse(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNull(xYLineAnnotation1.getURL());
      assertFalse(xYLineAnnotation1.getNotify());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotNull(xYLineAnnotation1);
      
      boolean boolean1 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertFalse(boolean1 == boolean0);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertFalse(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNull(xYLineAnnotation1.getURL());
      assertFalse(xYLineAnnotation1.getNotify());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertTrue(boolean1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation2 = new XYLineAnnotation((-68.3299661597405), (-68.3299661597405), 0.0, 0.0);
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation0));
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation1));
      assertNull(xYLineAnnotation2.getURL());
      assertNull(xYLineAnnotation2.getToolTipText());
      assertTrue(xYLineAnnotation2.getNotify());
      assertNotNull(xYLineAnnotation2);
      
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation2.notifyListeners(annotationChangeEvent0);
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation0));
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation1));
      assertNull(xYLineAnnotation2.getURL());
      assertNull(xYLineAnnotation2.getToolTipText());
      assertTrue(xYLineAnnotation2.getNotify());
      assertNotSame(xYLineAnnotation2, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation1);
      
      xYLineAnnotation2.setURL((String) null);
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation0));
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation1));
      assertNull(xYLineAnnotation2.getURL());
      assertNull(xYLineAnnotation2.getToolTipText());
      assertTrue(xYLineAnnotation2.getNotify());
      assertNotSame(xYLineAnnotation2, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation1);
      
      boolean boolean2 = xYLineAnnotation0.equals(xYLineAnnotation2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation0));
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation1));
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertFalse(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation2.getURL());
      assertNull(xYLineAnnotation2.getToolTipText());
      assertTrue(xYLineAnnotation2.getNotify());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation1);
      assertFalse(boolean2);
      
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw(graphics2D0, xYPlot0, (Rectangle2D) null, valueAxis0, valueAxis0, 500, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(1809.1748345959327, 1344.084, 1344.084, 0.0, stroke0, paint0);
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation(1809.1748345959327, 1344.084, 1339.502854327, 1344.084, stroke1, paint1);
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation1.getURL());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNotNull(xYLineAnnotation1);
      
      XYLineAnnotation xYLineAnnotation2 = (XYLineAnnotation)xYLineAnnotation1.clone();
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation2.equals((Object)xYLineAnnotation1));
      assertNull(xYLineAnnotation1.getURL());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation2.getURL());
      assertNull(xYLineAnnotation2.getToolTipText());
      assertTrue(xYLineAnnotation2.getNotify());
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation0);
      assertNotNull(xYLineAnnotation2);
      
      boolean boolean0 = xYLineAnnotation0.equals(xYLineAnnotation2);
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation2));
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation2.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation1.getURL());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation2.getURL());
      assertNull(xYLineAnnotation2.getToolTipText());
      assertTrue(xYLineAnnotation2.getNotify());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation0);
      assertFalse(boolean0);
      
      xYLineAnnotation0.setToolTipText("ZMuDg%K4v");
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertEquals("ZMuDg%K4v", xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      
      XYLineAnnotation xYLineAnnotation3 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertFalse(xYLineAnnotation3.equals((Object)xYLineAnnotation2));
      assertTrue(xYLineAnnotation3.equals((Object)xYLineAnnotation0));
      assertFalse(xYLineAnnotation3.equals((Object)xYLineAnnotation1));
      assertEquals("ZMuDg%K4v", xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation3.getNotify());
      assertNull(xYLineAnnotation3.getURL());
      assertEquals("ZMuDg%K4v", xYLineAnnotation3.getToolTipText());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation3);
      assertNotSame(xYLineAnnotation3, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation3, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation3, xYLineAnnotation1);
      assertNotNull(xYLineAnnotation3);
      
      XYLineAnnotation xYLineAnnotation4 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation3));
      assertFalse(xYLineAnnotation4.equals((Object)xYLineAnnotation2));
      assertFalse(xYLineAnnotation4.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation4.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation4.equals((Object)xYLineAnnotation3));
      assertEquals("ZMuDg%K4v", xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertEquals("ZMuDg%K4v", xYLineAnnotation4.getToolTipText());
      assertTrue(xYLineAnnotation4.getNotify());
      assertNull(xYLineAnnotation4.getURL());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation4);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation3);
      assertNotSame(xYLineAnnotation4, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation4, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation4, xYLineAnnotation3);
      assertNotSame(xYLineAnnotation4, xYLineAnnotation0);
      assertNotNull(xYLineAnnotation4);
      
      XYLineAnnotation xYLineAnnotation5 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation4));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation3));
      assertTrue(xYLineAnnotation5.equals((Object)xYLineAnnotation4));
      assertTrue(xYLineAnnotation5.equals((Object)xYLineAnnotation0));
      assertFalse(xYLineAnnotation5.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation5.equals((Object)xYLineAnnotation3));
      assertFalse(xYLineAnnotation5.equals((Object)xYLineAnnotation2));
      assertEquals("ZMuDg%K4v", xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation5.getURL());
      assertEquals("ZMuDg%K4v", xYLineAnnotation5.getToolTipText());
      assertTrue(xYLineAnnotation5.getNotify());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation5);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation4);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation3);
      assertNotSame(xYLineAnnotation5, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation5, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation5, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation5, xYLineAnnotation4);
      assertNotSame(xYLineAnnotation5, xYLineAnnotation3);
      assertNotNull(xYLineAnnotation5);
      
      boolean boolean1 = xYLineAnnotation0.equals("ZMuDg%K4v");
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation4));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation3));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation5));
      assertTrue(boolean1 == boolean0);
      assertEquals("ZMuDg%K4v", xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation5);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation4);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation3);
      assertFalse(boolean1);
      
      xYLineAnnotation0.hashCode();
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation4));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation3));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation5));
      assertEquals("ZMuDg%K4v", xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation5);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation4);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation3);
      
      xYLineAnnotation0.hashCode();
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation4));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation3));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation5));
      assertEquals("ZMuDg%K4v", xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation5);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation4);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation3);
      
      XYLineAnnotation xYLineAnnotation6 = new XYLineAnnotation(0.0, 1205.219663946192, 0.2, 0.05);
      assertFalse(xYLineAnnotation6.equals((Object)xYLineAnnotation4));
      assertFalse(xYLineAnnotation6.equals((Object)xYLineAnnotation5));
      assertFalse(xYLineAnnotation6.equals((Object)xYLineAnnotation1));
      assertFalse(xYLineAnnotation6.equals((Object)xYLineAnnotation2));
      assertFalse(xYLineAnnotation6.equals((Object)xYLineAnnotation0));
      assertFalse(xYLineAnnotation6.equals((Object)xYLineAnnotation3));
      assertTrue(xYLineAnnotation6.getNotify());
      assertNull(xYLineAnnotation6.getURL());
      assertNull(xYLineAnnotation6.getToolTipText());
      assertNotNull(xYLineAnnotation6);
      
      boolean boolean2 = xYLineAnnotation0.equals(xYLineAnnotation6);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation4));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation3));
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation6));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation5));
      assertFalse(xYLineAnnotation6.equals((Object)xYLineAnnotation4));
      assertFalse(xYLineAnnotation6.equals((Object)xYLineAnnotation5));
      assertFalse(xYLineAnnotation6.equals((Object)xYLineAnnotation1));
      assertFalse(xYLineAnnotation6.equals((Object)xYLineAnnotation2));
      assertFalse(xYLineAnnotation6.equals((Object)xYLineAnnotation0));
      assertFalse(xYLineAnnotation6.equals((Object)xYLineAnnotation3));
      assertEquals("ZMuDg%K4v", xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation6.getNotify());
      assertNull(xYLineAnnotation6.getURL());
      assertNull(xYLineAnnotation6.getToolTipText());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation5);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation4);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation6);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation3);
      assertNotSame(xYLineAnnotation6, xYLineAnnotation4);
      assertNotSame(xYLineAnnotation6, xYLineAnnotation5);
      assertNotSame(xYLineAnnotation6, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation6, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation6, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation6, xYLineAnnotation3);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-1.0), 2583.7, (-5187.704643815), 3136.58489);
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertNotNull(xYLineAnnotation0);
      
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation((-1.0), (-1.0), (-1.0), (-3997.0962615386443));
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getURL());
      assertNotNull(xYLineAnnotation1);
      
      boolean boolean0 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getURL());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(994.51184714, 0.0, 0.0, (-1.0), stroke0, paint0);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNotNull(xYLineAnnotation0);
      
      xYLineAnnotation0.fireAnnotationChanged();
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = null;
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.setURL("T<|Nm3]Sn");
      assertEquals("T<|Nm3]Sn", xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw(graphics2D0, (XYPlot) null, rectangle2D0, valueAxis0, valueAxis0, 500, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.0, 0.0, 0.0, 0.0, stroke0, paint0);
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertNotNull(xYLineAnnotation0);
      
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation(0.0, 0.0, 0.0, 0.0);
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getURL());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNotNull(xYLineAnnotation1);
      
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = xYLineAnnotation1.hasListener(eventListener0);
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getURL());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertFalse(boolean0);
      
      boolean boolean1 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertTrue(boolean1 == boolean0);
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getURL());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertFalse(boolean1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      doReturn((AxisLocation) null).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, (-2183), plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = null;
      try {
        xYLineAnnotation0 = new XYLineAnnotation(180.0, 180.0, 180.0, 0.12, (Stroke) null, paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-1970.1734), (-1970.1734), (-1970.1734), 143.169);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNotNull(xYLineAnnotation0);
      
      xYLineAnnotation0.hashCode();
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      
      xYLineAnnotation0.hashCode();
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      
      xYLineAnnotation0.hashCode();
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(1493.00901038, 1493.00901038, 131.94195376483, 131.94195376483);
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      xYLineAnnotation0.hashCode();
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation(0.0, 0.2, 1493.00901038, 0.0);
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getURL());
      assertNotNull(xYLineAnnotation1);
      
      boolean boolean0 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getURL());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-1805.511637), 1411.9268, 0.5, 1043.70506);
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertNotNull(xYLineAnnotation0);
      
      xYLineAnnotation0.hashCode();
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      
      XYLineAnnotation xYLineAnnotation1 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation1.getURL());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotNull(xYLineAnnotation1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.addChangeListener(annotationChangeListener0);
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      
      ValueAxis valueAxis0 = null;
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, (ValueAxis) null, (ValueAxis) null, 0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.0, (-1300.03391257946), 0.0, 0.0);
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      boolean boolean0 = xYLineAnnotation0.equals((Object) null);
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertFalse(boolean0);
      
      xYLineAnnotation0.notifyListeners((AnnotationChangeEvent) null);
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      xYLineAnnotation0.hashCode();
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      XYLineAnnotation xYLineAnnotation1 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation1.getURL());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotNull(xYLineAnnotation1);
      
      boolean boolean1 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertFalse(boolean1 == boolean0);
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation1.getURL());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(1.0, 1.0, 1.0, 1.0);
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      XYLineAnnotation xYLineAnnotation1 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNull(xYLineAnnotation1.getURL());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotNull(xYLineAnnotation1);
      
      boolean boolean0 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNull(xYLineAnnotation1.getURL());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertTrue(boolean0);
      
      XYLineAnnotation xYLineAnnotation2 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation2.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation2.equals((Object)xYLineAnnotation1));
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation2.getURL());
      assertNull(xYLineAnnotation2.getToolTipText());
      assertTrue(xYLineAnnotation2.getNotify());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation0);
      assertNotNull(xYLineAnnotation2);
      
      XYLineAnnotation xYLineAnnotation3 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation3.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation3.equals((Object)xYLineAnnotation2));
      assertTrue(xYLineAnnotation3.equals((Object)xYLineAnnotation1));
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation3.getToolTipText());
      assertTrue(xYLineAnnotation3.getNotify());
      assertNull(xYLineAnnotation3.getURL());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation3);
      assertNotSame(xYLineAnnotation3, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation3, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation3, xYLineAnnotation1);
      assertNotNull(xYLineAnnotation3);
      
      boolean boolean1 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation3));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation3));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation2));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertTrue(boolean1 == boolean0);
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNull(xYLineAnnotation1.getURL());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation3);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation3);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.0, 0.0, 0.0, (-1.0));
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      xYLineAnnotation0.hashCode();
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(2356.89915, (-2588.0), (-2588.0), 0.08);
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNotNull(xYLineAnnotation0);
      
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation(2356.89915, (-935.33), 2356.89915, 0.0);
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation1.getURL());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNotNull(xYLineAnnotation1);
      
      boolean boolean0 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation1.getURL());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.0, 2905.5784581332055, 0.0, 0.0);
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNotNull(xYLineAnnotation0);
      
      xYLineAnnotation0.setToolTipText("FORWARD");
      assertNull(xYLineAnnotation0.getURL());
      assertEquals("FORWARD", xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.notifyListeners(annotationChangeEvent0);
      assertNull(xYLineAnnotation0.getURL());
      assertEquals("FORWARD", xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      
      xYLineAnnotation0.setURL("org.jfree.chart.annotations.XYLineAnnotation");
      assertEquals("org.jfree.chart.annotations.XYLineAnnotation", xYLineAnnotation0.getURL());
      assertEquals("FORWARD", xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      
      xYLineAnnotation0.hashCode();
      assertEquals("org.jfree.chart.annotations.XYLineAnnotation", xYLineAnnotation0.getURL());
      assertEquals("FORWARD", xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      doReturn(axisLocation0).when(xYPlot0).getRangeAxisLocation();
      boolean boolean0 = xYLineAnnotation0.equals("org.jfree.chart.annotations.XYLineAnnotation");
      assertEquals("org.jfree.chart.annotations.XYLineAnnotation", xYLineAnnotation0.getURL());
      assertEquals("FORWARD", xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      assertFalse(boolean0);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(2054, 2651).when(rectangle2D0).outcode(anyDouble() , anyDouble());
      doReturn((double)2054).when(rectangle2D0).getMaxX();
      doReturn(698.576).when(rectangle2D0).getMaxY();
      doReturn(135.0).when(rectangle2D0).getMinX();
      doReturn((double)2651).when(rectangle2D0).getMinY();
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.removeChangeListener(annotationChangeListener0);
      assertEquals("org.jfree.chart.annotations.XYLineAnnotation", xYLineAnnotation0.getURL());
      assertEquals("FORWARD", xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      
      boolean boolean1 = xYLineAnnotation0.equals("@kFc");
      assertTrue(boolean1 == boolean0);
      assertEquals("org.jfree.chart.annotations.XYLineAnnotation", xYLineAnnotation0.getURL());
      assertEquals("FORWARD", xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      assertFalse(boolean1);
      
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(1364.5784, 1250.5667758, (double)10, (double)10).when(valueAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      XYLineAnnotation xYLineAnnotation1 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertEquals("org.jfree.chart.annotations.XYLineAnnotation", xYLineAnnotation0.getURL());
      assertEquals("FORWARD", xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      assertEquals("org.jfree.chart.annotations.XYLineAnnotation", xYLineAnnotation1.getURL());
      assertEquals("FORWARD", xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotNull(xYLineAnnotation1);
      
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.AbstractXYAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-68.3299661597405), (-68.3299661597405), (-68.3299661597405), (-68.3299661597405), stroke0, paint0);
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      xYLineAnnotation0.fireAnnotationChanged();
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.removeChangeListener(annotationChangeListener0);
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      xYLineAnnotation0.hashCode();
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = xYLineAnnotation0.hasListener(eventListener0);
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertFalse(boolean0);
      
      xYLineAnnotation0.setNotify(false);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertFalse(xYLineAnnotation0.getNotify());
      
      XYLineAnnotation xYLineAnnotation1 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertFalse(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation1.getURL());
      assertFalse(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotNull(xYLineAnnotation1);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertFalse(boolean1 == boolean0);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertFalse(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation1.getURL());
      assertFalse(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertTrue(boolean1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation2 = new XYLineAnnotation((-68.3299661597405), (-68.3299661597405), 0.0, 0.0);
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation1));
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation2.getURL());
      assertNull(xYLineAnnotation2.getToolTipText());
      assertTrue(xYLineAnnotation2.getNotify());
      assertNotNull(xYLineAnnotation2);
      
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation2.fireAnnotationChanged();
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation1));
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation2.getURL());
      assertNull(xYLineAnnotation2.getToolTipText());
      assertTrue(xYLineAnnotation2.getNotify());
      assertNotSame(xYLineAnnotation2, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation0);
      
      xYLineAnnotation2.notifyListeners(annotationChangeEvent0);
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation1));
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation2.getURL());
      assertNull(xYLineAnnotation2.getToolTipText());
      assertTrue(xYLineAnnotation2.getNotify());
      assertNotSame(xYLineAnnotation2, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation0);
      
      xYLineAnnotation2.setURL((String) null);
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation1));
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation2.getURL());
      assertNull(xYLineAnnotation2.getToolTipText());
      assertTrue(xYLineAnnotation2.getNotify());
      assertNotSame(xYLineAnnotation2, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation0);
      
      boolean boolean2 = xYLineAnnotation0.equals(xYLineAnnotation2);
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation1));
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertFalse(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation2.getURL());
      assertNull(xYLineAnnotation2.getToolTipText());
      assertTrue(xYLineAnnotation2.getNotify());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation0);
      assertFalse(boolean2);
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      doReturn((AxisLocation) null).when(xYPlot0).getRangeAxisLocation();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw(graphics2D0, xYPlot0, (Rectangle2D) null, valueAxis0, valueAxis0, 500, plotRenderingInfo1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-126.74515660557), (-126.74515660557), (-2318.0), (-2318.0));
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNotNull(xYLineAnnotation0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      AxisLocation axisLocation1 = AxisLocation.BOTTOM_OR_LEFT;
      XYPlot xYPlot1 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot1).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot1).getOrientation();
      doReturn(axisLocation1).when(xYPlot1).getRangeAxisLocation();
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(rectangle2D1).outcode(anyDouble() , anyDouble());
      doReturn(0.0).when(rectangle2D1).getMaxX();
      doReturn(0.0).when(rectangle2D1).getMaxY();
      doReturn(0.0).when(rectangle2D1).getMinX();
      doReturn(0.0).when(rectangle2D1).getMinY();
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(valueAxis1).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.draw(graphics2D1, xYPlot1, rectangle2D1, valueAxis1, valueAxis1, 10, plotRenderingInfo0);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, (-1604), plotRenderingInfo1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.0, 0.0, 2980.67148, 0.0, stroke0, paint0);
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      doReturn((AxisLocation) null).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation(0.05, 1.0F, 1.0E-4, 3459.85627971);
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation1.getURL());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNotNull(xYLineAnnotation1);
      
      XYLineAnnotation xYLineAnnotation2 = (XYLineAnnotation)xYLineAnnotation1.clone();
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation2.equals((Object)xYLineAnnotation1));
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation1.getURL());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation2.getToolTipText());
      assertTrue(xYLineAnnotation2.getNotify());
      assertNull(xYLineAnnotation2.getURL());
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation0);
      assertNotNull(xYLineAnnotation2);
      
      boolean boolean0 = xYLineAnnotation0.equals(xYLineAnnotation2);
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation2));
      assertTrue(xYLineAnnotation2.equals((Object)xYLineAnnotation1));
      assertFalse(xYLineAnnotation2.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation1.getURL());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation2.getToolTipText());
      assertTrue(xYLineAnnotation2.getNotify());
      assertNull(xYLineAnnotation2.getURL());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation0);
      assertFalse(boolean0);
      
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 29, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.05, 500, 1.0, 1.0, xYPlot0.DEFAULT_GRIDLINE_STROKE, valueAxis0.DEFAULT_TICK_MARK_PAINT);
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertNotNull(xYLineAnnotation0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot1 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot1).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot1).getOrientation();
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw(graphics2D0, xYPlot1, rectangle2D0, valueAxis1, valueAxis1, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(123.96352563, 123.96352563, 123.96352563, 1658.020858292203);
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      XYLineAnnotation xYLineAnnotation1 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNull(xYLineAnnotation1.getURL());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotNull(xYLineAnnotation1);
      
      boolean boolean0 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNull(xYLineAnnotation1.getURL());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertTrue(boolean0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation2 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation2.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation2.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation2.getToolTipText());
      assertTrue(xYLineAnnotation2.getNotify());
      assertNull(xYLineAnnotation2.getURL());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation2, xYLineAnnotation1);
      assertNotNull(xYLineAnnotation2);
      
      xYLineAnnotation1.setNotify(true);
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation2));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNull(xYLineAnnotation1.getURL());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation2);
      
      XYLineAnnotation xYLineAnnotation3 = (XYLineAnnotation)xYLineAnnotation1.clone();
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation2));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation3.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation3.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation3.equals((Object)xYLineAnnotation2));
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNull(xYLineAnnotation1.getURL());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation3.getURL());
      assertNull(xYLineAnnotation3.getToolTipText());
      assertTrue(xYLineAnnotation3.getNotify());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation3);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation3);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation3, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation3, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation3, xYLineAnnotation1);
      assertNotNull(xYLineAnnotation3);
      
      XYLineAnnotation xYLineAnnotation4 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation3));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation4.equals((Object)xYLineAnnotation2));
      assertTrue(xYLineAnnotation4.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation4.equals((Object)xYLineAnnotation3));
      assertTrue(xYLineAnnotation4.equals((Object)xYLineAnnotation1));
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation4.getURL());
      assertTrue(xYLineAnnotation4.getNotify());
      assertNull(xYLineAnnotation4.getToolTipText());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation4);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation3);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation4, xYLineAnnotation3);
      assertNotSame(xYLineAnnotation4, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation4, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation4, xYLineAnnotation2);
      assertNotNull(xYLineAnnotation4);
      
      XYLineAnnotation xYLineAnnotation5 = (XYLineAnnotation)xYLineAnnotation1.clone();
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation2));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation4));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation3));
      assertTrue(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation4));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation2));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation3));
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation5.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation5.equals((Object)xYLineAnnotation2));
      assertTrue(xYLineAnnotation5.equals((Object)xYLineAnnotation3));
      assertTrue(xYLineAnnotation5.equals((Object)xYLineAnnotation1));
      assertTrue(xYLineAnnotation5.equals((Object)xYLineAnnotation4));
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNull(xYLineAnnotation1.getURL());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation5.getURL());
      assertNull(xYLineAnnotation5.getToolTipText());
      assertTrue(xYLineAnnotation5.getNotify());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation4);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation5);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation3);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation3);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation5);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation4);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation5, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation5, xYLineAnnotation4);
      assertNotSame(xYLineAnnotation5, xYLineAnnotation2);
      assertNotSame(xYLineAnnotation5, xYLineAnnotation0);
      assertNotSame(xYLineAnnotation5, xYLineAnnotation3);
      assertNotNull(xYLineAnnotation5);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(1331.93426486, 917.0, (-1.0), 1331.93426486, stroke0, paint0);
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      xYLineAnnotation0.setToolTipText("Ukm");
      assertEquals("Ukm", xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      
      XYLineAnnotation xYLineAnnotation1 = (XYLineAnnotation)xYLineAnnotation0.clone();
      assertTrue(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertEquals("Ukm", xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation1.getURL());
      assertEquals("Ukm", xYLineAnnotation1.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertNotNull(xYLineAnnotation1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-1.245414505210942), (-1.245414505210942), (-1584.689501), (-1584.689501), stroke0, paint0);
      xYLineAnnotation0.clone();
      xYLineAnnotation0.setURL("");
      Object object0 = xYLineAnnotation0.clone();
      xYLineAnnotation0.equals(object0);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.removeChangeListener(annotationChangeListener0);
      xYLineAnnotation0.hashCode();
      xYLineAnnotation0.hashCode();
      xYLineAnnotation0.equals((Object) null);
      xYLineAnnotation0.hashCode();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      doReturn(axisLocation0).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(rectangle2D0).outcode(anyDouble() , anyDouble());
      doReturn(0.0).when(rectangle2D0).getMaxX();
      doReturn(0.0).when(rectangle2D0).getMaxY();
      doReturn(0.0).when(rectangle2D0).getMinX();
      doReturn(0.0).when(rectangle2D0).getMinY();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(valueAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.AbstractXYAnnotation", e);
      }
  }
}
