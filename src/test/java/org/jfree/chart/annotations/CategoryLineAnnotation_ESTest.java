/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:04:43 GMT 2019
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.AnnotationChangeListener;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class CategoryLineAnnotation_ESTest extends CategoryLineAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("B|&bKFUAMCJBWx~jp", "[\"[J", "n m$4ZrC9)A:03PW", "B|&bKFUAMCJBWx~jp", (String) null).when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn("V65", "").when(paint0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-468.503212345), comparable0, 1.0, paint0, stroke0);
      Object object0 = categoryLineAnnotation0.clone();
      categoryLineAnnotation0.getValue1();
      Comparable comparable1 = categoryLineAnnotation0.getCategory2();
      categoryLineAnnotation0.setValue2(528.9);
      categoryLineAnnotation0.setCategory1(comparable1);
      categoryLineAnnotation0.getCategory2();
      categoryLineAnnotation0.hashCode();
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.hasListener(eventListener0);
      EventListener eventListener1 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.hasListener(eventListener1);
      categoryLineAnnotation0.equals(object0);
      categoryLineAnnotation0.setValue1((-468.503212345));
      Paint paint1 = categoryLineAnnotation0.getPaint();
      categoryLineAnnotation0.getPaint();
      categoryLineAnnotation0.getCategory1();
      categoryLineAnnotation0.setCategory1(comparable1);
      categoryLineAnnotation0.equals(paint1);
      categoryLineAnnotation0.clone();
      categoryLineAnnotation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("juQy<z(n", "juQy<z(n", "juQy<z(n", "&95x").when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-67.54748269508373), comparable0, 0.0, paint0, stroke0);
      categoryLineAnnotation0.hashCode();
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.notifyListeners(annotationChangeEvent0);
      categoryLineAnnotation0.getCategory2();
      Comparable comparable1 = categoryLineAnnotation0.getCategory1();
      Comparable comparable2 = categoryLineAnnotation0.getCategory1();
      categoryLineAnnotation0.setCategory2(comparable1);
      categoryLineAnnotation0.getValue2();
      categoryLineAnnotation0.setCategory1(comparable2);
      categoryLineAnnotation0.hashCode();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn("&95x", "&95x", (String) null).when(paint1).toString();
      categoryLineAnnotation0.setPaint(paint1);
      categoryLineAnnotation0.getPaint();
      categoryLineAnnotation0.getPaint();
      CategoryLineAnnotation categoryLineAnnotation1 = (CategoryLineAnnotation)categoryLineAnnotation0.clone();
      categoryLineAnnotation1.setCategory2("juQy<z(n");
      categoryLineAnnotation0.equals(categoryLineAnnotation1);
      categoryLineAnnotation0.getPaint();
      categoryLineAnnotation1.getCategory2();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("kcIPPR").when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-103.4688), comparable0, 1.0, paint0, stroke0);
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setNotify(true);
      categoryLineAnnotation0.setStroke(stroke1);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation1 = (CategoryLineAnnotation)categoryLineAnnotation0.clone();
      categoryLineAnnotation0.setCategory2(comparable1);
      categoryLineAnnotation0.hashCode();
      Comparable comparable2 = categoryLineAnnotation0.getCategory1();
      categoryLineAnnotation0.setCategory2(comparable2);
      categoryLineAnnotation0.setCategory2(comparable2);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.removeChangeListener(annotationChangeListener0);
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(45, 436).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(2146203668).when(categoryDataset0).getColumnCount();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      AxisLocation axisLocation1 = AxisLocation.TOP_OR_RIGHT;
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(categoryDataset0).when(categoryPlot0).getDataset();
      doReturn(axisLocation0).when(categoryPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(categoryPlot0).getOrientation();
      doReturn(axisLocation1).when(categoryPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(categoryAxis0).getCategoryJava2DCoordinate(any(org.jfree.chart.axis.CategoryAnchor.class) , anyInt() , anyInt() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      categoryLineAnnotation0.setStroke(categoryPlot0.DEFAULT_GRIDLINE_STROKE);
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(valueAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.hasListener(eventListener0);
      categoryLineAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
      categoryLineAnnotation1.clone();
      categoryLineAnnotation0.clone();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(1.0E-8, 0.0F, true, 2565.558706303195, valueAxis0.DEFAULT_AXIS_LINE_PAINT, valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      categoryLineAnnotation0.getPaint();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("kcIPPR").when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-103.4688), comparable0, (-103.4688), paint0, stroke0);
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setNotify(true);
      categoryLineAnnotation0.setStroke(stroke1);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.clone();
      categoryLineAnnotation0.setCategory2(comparable1);
      categoryLineAnnotation0.hashCode();
      Comparable comparable2 = categoryLineAnnotation0.getCategory1();
      categoryLineAnnotation0.setCategory2(comparable2);
      categoryLineAnnotation0.setCategory2(comparable2);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(2146203668, 2146203668).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((-2477)).when(categoryDataset0).getColumnCount();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(categoryDataset0).when(categoryPlot0).getDataset();
      doReturn(axisLocation0).when(categoryPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(categoryPlot0).getOrientation();
      doReturn((AxisLocation) null).when(categoryPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("*2Kkn6u5\"+mBH55").when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-1.0), comparable0, (-1.0), paint0, stroke0);
      categoryLineAnnotation0.getValue2();
      categoryLineAnnotation0.getCategory2();
      categoryLineAnnotation0.equals(categoryLineAnnotation0);
      categoryLineAnnotation0.setValue2(0.0);
      categoryLineAnnotation0.getValue1();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getColumnCount();
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(categoryDataset0).when(categoryPlot0).getDataset();
      doReturn((AxisLocation) null).when(categoryPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(categoryPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("@", "@").when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.0, comparable0, (-951.74), paint0, stroke0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Object object0 = categoryLineAnnotation0.clone();
      categoryLineAnnotation0.equals(object0);
      categoryLineAnnotation0.hasListener((EventListener) null);
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getColumnCount();
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(categoryDataset0).when(categoryPlot0).getDataset();
      doReturn((AxisLocation) null).when(categoryPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(categoryPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setStroke(categoryPlot0.DEFAULT_GRIDLINE_STROKE);
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 1326.43, comparable0, (-1166.6471956183), paint0, stroke0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getColumnCount();
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(categoryDataset0).when(categoryPlot0).getDataset();
      doReturn((AxisLocation) null).when(categoryPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(categoryPlot0).getOrientation();
      Rectangle2D rectangle2D0 = null;
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.addChangeListener(annotationChangeListener0);
      categoryLineAnnotation0.setCategory1(10);
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.draw(graphics2D0, categoryPlot0, (Rectangle2D) null, categoryAxis0, valueAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.0, comparable0, 0.0, paint0, stroke0);
      categoryLineAnnotation0.getValue2();
      Object object0 = categoryLineAnnotation0.clone();
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.removeChangeListener(annotationChangeListener0);
      categoryLineAnnotation0.getValue2();
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setStroke(stroke1);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn((CategoryDataset) null).when(categoryPlot0).getDataset();
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.notifyListeners(annotationChangeEvent0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.equals(object0);
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.CategoryLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 815.196, comparable0, 499.81601844624333, paint0, stroke0);
      categoryLineAnnotation0.hashCode();
      double double0 = 0.0;
      Comparable<CategoryLineAnnotation> comparable1 = (Comparable<CategoryLineAnnotation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.fireAnnotationChanged();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Comparable<String> comparable2 = null;
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.setCategory2((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparable<CategoryLineAnnotation> comparable0 = (Comparable<CategoryLineAnnotation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(paint0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 1.7976931348623157E308, comparable0, 1.7976931348623157E308, paint0, stroke0);
      categoryLineAnnotation0.getCategory1();
      categoryLineAnnotation0.getValue1();
      categoryLineAnnotation0.getPaint();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-3127.626001229), comparable0, (-1450.87789189635), paint0, stroke0);
      Object object0 = categoryLineAnnotation0.clone();
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setValue1((-1450.87789189635));
      categoryLineAnnotation0.equals(object0);
      categoryLineAnnotation0.removeChangeListener(annotationChangeListener0);
      categoryLineAnnotation0.setValue1(3.0);
      categoryLineAnnotation0.getCategory1();
      categoryLineAnnotation0.hashCode();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(paint1).toString();
      categoryLineAnnotation0.setPaint(paint1);
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setStroke(stroke1);
      categoryLineAnnotation0.setValue2((-1450.87789189635));
      categoryLineAnnotation0.getCategory2();
      categoryLineAnnotation0.hashCode();
      categoryLineAnnotation0.getPaint();
      Object object1 = categoryLineAnnotation0.clone();
      categoryLineAnnotation0.equals(object1);
      categoryLineAnnotation0.setValue2(3.0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.0, comparable0, (-3058.463282736848), paint0, stroke0);
      categoryLineAnnotation0.getValue2();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 180.0, comparable0, 1.0, paint0, stroke0);
      Comparable comparable1 = categoryLineAnnotation0.getCategory1();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation1 = new CategoryLineAnnotation(comparable1, 180.0, comparable1, 180.0, paint1, stroke1);
      categoryLineAnnotation0.equals(categoryLineAnnotation1);
      Stroke stroke2 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.hashCode();
      categoryLineAnnotation1.setValue1(0.01);
      categoryLineAnnotation0.setStroke(stroke2);
      Stroke stroke3 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation1.setStroke(stroke3);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparable<CategoryLineAnnotation> comparable0 = (Comparable<CategoryLineAnnotation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 513.70988675759, comparable0, 513.70988675759, paint0, stroke0);
      categoryLineAnnotation0.getValue2();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.0, comparable0, 0.0, paint0, stroke0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation1 = new CategoryLineAnnotation(comparable1, (-1577.21195), comparable1, 0.0, paint1, stroke1);
      categoryLineAnnotation0.equals(categoryLineAnnotation1);
      categoryLineAnnotation0.getValue1();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stroke0).toString();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.0, comparable0, 0.0, paint0, stroke0);
      categoryLineAnnotation0.fireAnnotationChanged();
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      categoryLineAnnotation0.setCategory1(comparable1);
      categoryLineAnnotation0.getCategory1();
      categoryLineAnnotation0.getStroke();
      categoryLineAnnotation0.getValue2();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-717.0), comparable0, (-717.0), paint0, stroke0);
      categoryLineAnnotation0.hashCode();
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      categoryLineAnnotation0.setCategory1(comparable1);
      categoryLineAnnotation0.setCategory2(1319520608);
      categoryLineAnnotation0.hashCode();
      categoryLineAnnotation0.getCategory1();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparable<Integer> comparable0 = null;
      double double0 = 0.0;
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = null;
      try {
        categoryLineAnnotation0 = new CategoryLineAnnotation((Comparable) null, 0.0, (Comparable) null, 0.0, paint0, stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category1' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.0, comparable0, 0.0, paint0, stroke0);
      categoryLineAnnotation0.getValue2();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<CategoryLineAnnotation> comparable1 = (Comparable<CategoryLineAnnotation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-159.212421686096), comparable1, (-159.212421686096), paint0, stroke0);
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.setStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-2705.180064311301), comparable0, (-335.76235), paint0, stroke0);
      categoryLineAnnotation0.clone();
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.removeChangeListener(annotationChangeListener0);
      categoryLineAnnotation0.clone();
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.hasListener(eventListener0);
      categoryLineAnnotation0.fireAnnotationChanged();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.draw(graphics2D0, (CategoryPlot) null, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.CategoryLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-1980.5613834203), comparable0, (-1980.5613834203), paint0, stroke0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn((CategoryDataset) null).when(categoryPlot0).getDataset();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.CategoryLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparable<CategoryLineAnnotation> comparable0 = (Comparable<CategoryLineAnnotation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.0, comparable0, 0.0, paint0, stroke0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setCategory2(comparable1);
      categoryLineAnnotation0.clone();
      categoryLineAnnotation0.setValue1(0.0);
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.setCategory1((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.0, comparable0, 1417.520076, paint0, stroke0);
      String string0 = null;
      categoryLineAnnotation0.equals((Object) null);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setPaint(paint1);
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setPaint(paint2);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.removeChangeListener(annotationChangeListener0);
      Comparable comparable1 = categoryLineAnnotation0.getCategory1();
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setStroke(stroke1);
      categoryLineAnnotation0.setValue2(1.0);
      categoryLineAnnotation0.setCategory2(comparable1);
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.setPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-5269.346204588387), comparable0, (-5269.346204588387), paint0, stroke0);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setPaint(paint1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(paint0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 1.25, comparable0, 1.25, paint0, stroke0);
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setCategory2(comparable1);
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setCategory2(comparable2);
      categoryLineAnnotation0.getPaint();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 1224.93624782497, comparable0, 1224.93624782497, paint0, stroke0);
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.setCategory2((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("", "@f1FE<s8l2{A}", (String) null, (String) null, (String) null).when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.0, comparable0, 0.0, paint0, stroke0);
      categoryLineAnnotation0.getValue2();
      Object object0 = categoryLineAnnotation0.clone();
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.removeChangeListener(annotationChangeListener0);
      categoryLineAnnotation0.getValue2();
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setStroke(stroke1);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(42, 42).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(39).when(categoryDataset0).getColumnCount();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(categoryDataset0).when(categoryPlot0).getDataset();
      doReturn(axisLocation0).when(categoryPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(categoryPlot0).getOrientation();
      doReturn(axisLocation0).when(categoryPlot0).getRangeAxisLocation();
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.notifyListeners(annotationChangeEvent0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.equals(object0);
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(categoryAxis0).getCategoryJava2DCoordinate(any(org.jfree.chart.axis.CategoryAnchor.class) , anyInt() , anyInt() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(valueAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      categoryLineAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
      categoryLineAnnotation0.setStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      categoryLineAnnotation0.hashCode();
      Object object1 = categoryLineAnnotation0.clone();
      categoryLineAnnotation0.equals(object1);
      categoryLineAnnotation0.getCategory2();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("", "@f1FE<s8l2{A}", "W5FZ!bIhuJix^bS{[.", "", "").when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.0, comparable0, 0.0, paint0, stroke0);
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotNull(categoryLineAnnotation0);
      
      double double0 = categoryLineAnnotation0.getValue2();
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(0.0, double0, 0.01);
      
      CategoryLineAnnotation categoryLineAnnotation1 = (CategoryLineAnnotation)categoryLineAnnotation0.clone();
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(0.0, categoryLineAnnotation1.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation1.getNotify());
      assertEquals(0.0, categoryLineAnnotation1.getValue1(), 0.01);
      assertNotNull(categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation1, categoryLineAnnotation0);
      assertTrue(categoryLineAnnotation1.equals((Object)categoryLineAnnotation0));
      
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.removeChangeListener(annotationChangeListener0);
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      
      double double1 = categoryLineAnnotation0.getValue2();
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setStroke(stroke1);
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(42, 42).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(39).when(categoryDataset0).getColumnCount();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(categoryDataset0).when(categoryPlot0).getDataset();
      doReturn(axisLocation0).when(categoryPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(categoryPlot0).getOrientation();
      doReturn(axisLocation0).when(categoryPlot0).getRangeAxisLocation();
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.notifyListeners(annotationChangeEvent0);
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = categoryLineAnnotation0.equals(categoryLineAnnotation1);
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(0.0, categoryLineAnnotation1.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation1.getNotify());
      assertEquals(0.0, categoryLineAnnotation1.getValue1(), 0.01);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation1, categoryLineAnnotation0);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertFalse(categoryLineAnnotation1.equals((Object)categoryLineAnnotation0));
      assertFalse(boolean0);
      
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      doReturn(2560.24, 0.0).when(categoryAxis0).getCategoryJava2DCoordinate(any(org.jfree.chart.axis.CategoryAnchor.class) , anyInt() , anyInt() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.08, (-1927.9)).when(valueAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      categoryLineAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      
      categoryLineAnnotation0.setStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      
      categoryLineAnnotation0.hashCode();
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      
      CategoryLineAnnotation categoryLineAnnotation2 = (CategoryLineAnnotation)categoryLineAnnotation0.clone();
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertTrue(categoryLineAnnotation2.getNotify());
      assertEquals(0.0, categoryLineAnnotation2.getValue2(), 0.01);
      assertEquals(0.0, categoryLineAnnotation2.getValue1(), 0.01);
      assertNotNull(categoryLineAnnotation2);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertNotSame(categoryLineAnnotation2, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation2, categoryLineAnnotation0);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertTrue(categoryLineAnnotation2.equals((Object)categoryLineAnnotation0));
      assertFalse(categoryLineAnnotation2.equals((Object)categoryLineAnnotation1));
      
      boolean boolean1 = categoryLineAnnotation0.equals(categoryLineAnnotation2);
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertTrue(categoryLineAnnotation2.getNotify());
      assertEquals(0.0, categoryLineAnnotation2.getValue2(), 0.01);
      assertEquals(0.0, categoryLineAnnotation2.getValue1(), 0.01);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertNotSame(categoryLineAnnotation2, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation2, categoryLineAnnotation0);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation2));
      assertTrue(categoryLineAnnotation2.equals((Object)categoryLineAnnotation0));
      assertFalse(categoryLineAnnotation2.equals((Object)categoryLineAnnotation1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Comparable comparable1 = categoryLineAnnotation0.getCategory2();
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotNull(comparable1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation2));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("org.jfree.chart.entity.TickLabelEntity", (String) null).when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-1922.42127), comparable0, (-1922.42127), paint0, stroke0);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotNull(categoryLineAnnotation0);
      
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setStroke(stroke1);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setCategory1(comparable1);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      
      Stroke stroke2 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn("org.jfree.chart.entity.TickLabelEntity").when(stroke2).toString();
      categoryLineAnnotation0.setStroke(stroke2);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      
      categoryLineAnnotation0.setNotify(true);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      
      categoryLineAnnotation0.fireAnnotationChanged();
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      
      double double0 = categoryLineAnnotation0.getValue2();
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals((-1922.42127), double0, 0.01);
      
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("org.jfree.chart.entity.TickLabelEntity", (String) null).when(comparable2).toString();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setPaint(paint1);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      
      categoryLineAnnotation0.setCategory1(comparable2);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      
      CategoryLineAnnotation categoryLineAnnotation1 = (CategoryLineAnnotation)categoryLineAnnotation0.clone();
      assertTrue(categoryLineAnnotation1.getNotify());
      assertEquals((-1922.42127), categoryLineAnnotation1.getValue2(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation1.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotNull(categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation1, categoryLineAnnotation0);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertTrue(categoryLineAnnotation1.equals((Object)categoryLineAnnotation0));
      
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setPaint(paint2);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      
      Comparable comparable3 = categoryLineAnnotation0.getCategory2();
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotNull(comparable3);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      
      Stroke stroke3 = categoryLineAnnotation0.getStroke();
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotNull(stroke3);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(stroke3, stroke1);
      assertNotSame(stroke3, stroke0);
      assertSame(stroke3, stroke2);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertFalse(stroke3.equals((Object)stroke1));
      assertFalse(stroke3.equals((Object)stroke0));
      
      Comparable comparable4 = categoryLineAnnotation0.getCategory1();
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotNull(comparable4);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(comparable4, comparable3);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertFalse(comparable4.equals((Object)comparable3));
      
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = categoryLineAnnotation0.hasListener(eventListener0);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertFalse(boolean0);
      
      categoryLineAnnotation0.setCategory2(comparable4);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(comparable4, comparable3);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertFalse(comparable4.equals((Object)comparable3));
      
      categoryLineAnnotation0.setStroke(stroke3);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(stroke3, stroke1);
      assertNotSame(stroke3, stroke0);
      assertSame(stroke3, stroke2);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertFalse(stroke3.equals((Object)stroke1));
      assertFalse(stroke3.equals((Object)stroke0));
      
      double double1 = categoryLineAnnotation0.getValue2();
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertEquals(double1, double0, 0.01);
      assertEquals((-1922.42127), double1, 0.01);
      
      CategoryLineAnnotation categoryLineAnnotation2 = (CategoryLineAnnotation)categoryLineAnnotation0.clone();
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals((-1922.42127), categoryLineAnnotation2.getValue2(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation2.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation2.getNotify());
      assertNotNull(categoryLineAnnotation2);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation2, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation2, categoryLineAnnotation0);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertFalse(categoryLineAnnotation2.equals((Object)categoryLineAnnotation1));
      assertTrue(categoryLineAnnotation2.equals((Object)categoryLineAnnotation0));
      
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation2.removeChangeListener(annotationChangeListener0);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals((-1922.42127), categoryLineAnnotation2.getValue2(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation2.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation2.getNotify());
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation2, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation2, categoryLineAnnotation0);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation2));
      assertFalse(categoryLineAnnotation2.equals((Object)categoryLineAnnotation1));
      assertTrue(categoryLineAnnotation2.equals((Object)categoryLineAnnotation0));
      
      boolean boolean1 = categoryLineAnnotation2.equals(categoryLineAnnotation1);
      assertTrue(categoryLineAnnotation1.getNotify());
      assertEquals((-1922.42127), categoryLineAnnotation1.getValue2(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation1.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals((-1922.42127), categoryLineAnnotation2.getValue2(), 0.01);
      assertEquals((-1922.42127), categoryLineAnnotation2.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation2.getNotify());
      assertNotSame(categoryLineAnnotation1, categoryLineAnnotation0);
      assertNotSame(categoryLineAnnotation1, categoryLineAnnotation2);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation2, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation2, categoryLineAnnotation0);
      assertFalse(categoryLineAnnotation1.equals((Object)categoryLineAnnotation0));
      assertFalse(categoryLineAnnotation1.equals((Object)categoryLineAnnotation2));
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation2));
      assertFalse(categoryLineAnnotation2.equals((Object)categoryLineAnnotation1));
      assertTrue(categoryLineAnnotation2.equals((Object)categoryLineAnnotation0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stroke0).toString();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-1.0), comparable0, (-2461.546), paint0, stroke0);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals((-2461.546), categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals((-1.0), categoryLineAnnotation0.getValue1(), 0.01);
      assertNotNull(categoryLineAnnotation0);
      
      Stroke stroke1 = categoryLineAnnotation0.getStroke();
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals((-2461.546), categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals((-1.0), categoryLineAnnotation0.getValue1(), 0.01);
      assertNotNull(stroke1);
      assertSame(stroke1, stroke0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(paint0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-468.503212345), comparable0, 1.0, paint0, stroke0);
      assertEquals(1.0, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals((-468.503212345), categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotNull(categoryLineAnnotation0);
      
      CategoryLineAnnotation categoryLineAnnotation1 = (CategoryLineAnnotation)categoryLineAnnotation0.clone();
      assertEquals(1.0, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals((-468.503212345), categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertTrue(categoryLineAnnotation1.getNotify());
      assertEquals((-468.503212345), categoryLineAnnotation1.getValue1(), 0.01);
      assertEquals(1.0, categoryLineAnnotation1.getValue2(), 0.01);
      assertNotNull(categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation1, categoryLineAnnotation0);
      assertTrue(categoryLineAnnotation1.equals((Object)categoryLineAnnotation0));
      
      double double0 = categoryLineAnnotation0.getValue1();
      assertEquals(1.0, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals((-468.503212345), categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertEquals((-468.503212345), double0, 0.01);
      
      Comparable comparable1 = categoryLineAnnotation0.getCategory2();
      assertEquals(1.0, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals((-468.503212345), categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotNull(comparable1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      
      categoryLineAnnotation0.setValue2(528.9);
      assertEquals((-468.503212345), categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(528.9, categoryLineAnnotation0.getValue2(), 0.01);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      
      categoryLineAnnotation0.setCategory1(comparable1);
      assertEquals((-468.503212345), categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(528.9, categoryLineAnnotation0.getValue2(), 0.01);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      
      Comparable comparable2 = categoryLineAnnotation0.getCategory2();
      assertEquals((-468.503212345), categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(528.9, categoryLineAnnotation0.getValue2(), 0.01);
      assertNotNull(comparable2);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertSame(comparable2, comparable1);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      
      categoryLineAnnotation0.hashCode();
      assertEquals((-468.503212345), categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(528.9, categoryLineAnnotation0.getValue2(), 0.01);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = categoryLineAnnotation0.hasListener(eventListener0);
      assertEquals((-468.503212345), categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(528.9, categoryLineAnnotation0.getValue2(), 0.01);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertFalse(boolean0);
      
      CategoryLineAnnotation categoryLineAnnotation2 = (CategoryLineAnnotation)categoryLineAnnotation0.clone();
      assertEquals((-468.503212345), categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(528.9, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(528.9, categoryLineAnnotation2.getValue2(), 0.01);
      assertEquals((-468.503212345), categoryLineAnnotation2.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation2.getNotify());
      assertNotNull(categoryLineAnnotation2);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertNotSame(categoryLineAnnotation2, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation2, categoryLineAnnotation0);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertTrue(categoryLineAnnotation2.equals((Object)categoryLineAnnotation0));
      assertFalse(categoryLineAnnotation2.equals((Object)categoryLineAnnotation1));
      
      EventListener eventListener1 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = categoryLineAnnotation0.hasListener(eventListener1);
      assertEquals((-468.503212345), categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(528.9, categoryLineAnnotation0.getValue2(), 0.01);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = categoryLineAnnotation0.equals(categoryLineAnnotation2);
      assertEquals((-468.503212345), categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(528.9, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(528.9, categoryLineAnnotation2.getValue2(), 0.01);
      assertEquals((-468.503212345), categoryLineAnnotation2.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation2.getNotify());
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertNotSame(categoryLineAnnotation2, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation2, categoryLineAnnotation0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation2));
      assertTrue(categoryLineAnnotation2.equals((Object)categoryLineAnnotation0));
      assertFalse(categoryLineAnnotation2.equals((Object)categoryLineAnnotation1));
      assertTrue(boolean2);
      
      categoryLineAnnotation0.setValue1((-468.503212345));
      assertEquals((-468.503212345), categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(528.9, categoryLineAnnotation0.getValue2(), 0.01);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation2));
      
      Paint paint1 = categoryLineAnnotation0.getPaint();
      assertEquals(0, paint1.getTransparency());
      assertEquals((-468.503212345), categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(528.9, categoryLineAnnotation0.getValue2(), 0.01);
      assertNotNull(paint1);
      assertSame(paint1, paint0);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation2));
      
      Paint paint2 = categoryLineAnnotation0.getPaint();
      assertEquals(0, paint2.getTransparency());
      assertEquals((-468.503212345), categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(528.9, categoryLineAnnotation0.getValue2(), 0.01);
      assertNotNull(paint2);
      assertSame(paint2, paint0);
      assertSame(paint2, paint1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation2));
      
      Comparable comparable3 = categoryLineAnnotation0.getCategory1();
      assertEquals((-468.503212345), categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(528.9, categoryLineAnnotation0.getValue2(), 0.01);
      assertNotNull(comparable3);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertSame(comparable3, comparable2);
      assertSame(comparable3, comparable1);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation2));
      
      categoryLineAnnotation0.setCategory1(comparable1);
      assertEquals((-468.503212345), categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(528.9, categoryLineAnnotation0.getValue2(), 0.01);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertSame(comparable1, comparable3);
      assertSame(comparable1, comparable2);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation2));
      
      boolean boolean3 = categoryLineAnnotation0.equals(paint1);
      assertEquals(0, paint1.getTransparency());
      assertEquals((-468.503212345), categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(528.9, categoryLineAnnotation0.getValue2(), 0.01);
      assertSame(paint1, paint0);
      assertSame(paint1, paint2);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation2));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      CategoryLineAnnotation categoryLineAnnotation3 = (CategoryLineAnnotation)categoryLineAnnotation0.clone();
      assertEquals((-468.503212345), categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(528.9, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals((-468.503212345), categoryLineAnnotation3.getValue1(), 0.01);
      assertEquals(528.9, categoryLineAnnotation3.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation3.getNotify());
      assertNotNull(categoryLineAnnotation3);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation3);
      assertNotSame(categoryLineAnnotation3, categoryLineAnnotation2);
      assertNotSame(categoryLineAnnotation3, categoryLineAnnotation0);
      assertNotSame(categoryLineAnnotation3, categoryLineAnnotation1);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation2));
      assertTrue(categoryLineAnnotation3.equals((Object)categoryLineAnnotation0));
      assertTrue(categoryLineAnnotation3.equals((Object)categoryLineAnnotation2));
      assertFalse(categoryLineAnnotation3.equals((Object)categoryLineAnnotation1));
      
      categoryLineAnnotation0.hashCode();
      assertEquals((-468.503212345), categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(528.9, categoryLineAnnotation0.getValue2(), 0.01);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation3);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation3));
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation2));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.0, comparable0, 0.12, paint0, stroke0);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(0.12, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertNotNull(categoryLineAnnotation0);
      
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setStroke(stroke1);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(0.12, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      
      CategoryLineAnnotation categoryLineAnnotation1 = (CategoryLineAnnotation)categoryLineAnnotation0.clone();
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(0.12, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation1.getNotify());
      assertEquals(0.12, categoryLineAnnotation1.getValue2(), 0.01);
      assertEquals(0.0, categoryLineAnnotation1.getValue1(), 0.01);
      assertNotNull(categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation1, categoryLineAnnotation0);
      assertTrue(categoryLineAnnotation1.equals((Object)categoryLineAnnotation0));
      
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.removeChangeListener(annotationChangeListener0);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(0.12, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      
      double double0 = categoryLineAnnotation0.getValue1();
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(0.12, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertEquals(0.0, double0, 0.01);
      
      Comparable comparable1 = categoryLineAnnotation0.getCategory1();
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(0.12, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertNotNull(comparable1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertTrue(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comparable<CategoryLineAnnotation> comparable0 = (Comparable<CategoryLineAnnotation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<String> comparable1 = null;
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = null;
      try {
        categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.0, (Comparable) null, 0.04, (Paint) null, stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category2' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("e{=6q", "stroke", "stroke", "stroke", "e{=6q").when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-3127.626001229), comparable0, (-1450.87789189635), paint0, stroke0);
      CategoryLineAnnotation categoryLineAnnotation1 = (CategoryLineAnnotation)categoryLineAnnotation0.clone();
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setValue1((-1450.87789189635));
      categoryLineAnnotation0.equals(categoryLineAnnotation1);
      categoryLineAnnotation0.removeChangeListener(annotationChangeListener0);
      categoryLineAnnotation0.setValue1(3.0);
      categoryLineAnnotation0.getCategory1();
      categoryLineAnnotation0.hashCode();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn(",bottom=").when(paint1).toString();
      categoryLineAnnotation0.setPaint(paint1);
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setStroke(stroke1);
      categoryLineAnnotation0.setValue2((-1450.87789189635));
      categoryLineAnnotation0.getCategory2();
      categoryLineAnnotation0.hashCode();
      categoryLineAnnotation0.getPaint();
      CategoryLineAnnotation categoryLineAnnotation2 = (CategoryLineAnnotation)categoryLineAnnotation0.clone();
      categoryLineAnnotation2.setValue2(3.0);
      categoryLineAnnotation0.equals(categoryLineAnnotation2);
      categoryLineAnnotation0.setValue2(3.0);
      categoryLineAnnotation1.clone();
      categoryLineAnnotation1.getCategory2();
      assertEquals(3.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-1450.87789189635), categoryLineAnnotation1.getValue2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(stroke0).toString();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.0, comparable0, 0.0, paint0, stroke0);
      Stroke stroke1 = categoryLineAnnotation0.getStroke();
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setCategory2(comparable1);
      categoryLineAnnotation0.setStroke(stroke1);
      double double0 = categoryLineAnnotation0.getValue1();
      assertEquals(0.0, double0, 0.01);
      
      categoryLineAnnotation0.getStroke();
      Comparable<String> comparable2 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setCategory2(comparable2);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01);
  }
}
