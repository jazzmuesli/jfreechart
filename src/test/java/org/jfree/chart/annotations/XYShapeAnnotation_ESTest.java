/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:55:18 GMT 2019
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.PathIterator;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.annotations.XYShapeAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYShapeAnnotation_ESTest extends XYShapeAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0, stroke0, paint0, paint0);
      xYShapeAnnotation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0, stroke0, paint0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      doReturn((AxisLocation) null).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYShapeAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = null;
      try {
        xYShapeAnnotation0 = new XYShapeAnnotation((Shape) null, (Stroke) null, paint0, paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = null;
      try {
        xYShapeAnnotation0 = new XYShapeAnnotation((Shape) null, stroke0, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYShapeAnnotation xYShapeAnnotation0 = null;
      try {
        xYShapeAnnotation0 = new XYShapeAnnotation((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0);
      xYShapeAnnotation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0, (Stroke) null, paint0);
      xYShapeAnnotation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0);
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation1 = new XYShapeAnnotation(shape1, stroke0, paint0, paint0);
      boolean boolean0 = xYShapeAnnotation0.equals(xYShapeAnnotation1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0);
      boolean boolean0 = xYShapeAnnotation0.equals(xYShapeAnnotation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0);
      boolean boolean0 = xYShapeAnnotation0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getMaxX();
      doReturn(0.0).when(rectangle2D0).getMaxY();
      doReturn(0.0).when(rectangle2D0).getMinX();
      doReturn(0.0).when(rectangle2D0).getMinY();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn(rectangle2D0).when(shape0).getBounds2D();
      doReturn((PathIterator) null).when(shape0).getPathIterator(any(java.awt.geom.AffineTransform.class));
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0, stroke0, paint0, paint0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      doReturn(axisLocation0).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(valueAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYShapeAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D1, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Path2D$Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0);
      Object object0 = xYShapeAnnotation0.clone();
      boolean boolean0 = xYShapeAnnotation0.equals(object0);
      assertTrue(boolean0);
  }
}
