/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:08:42 GMT 2019
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.font.FontRenderContext;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CategoryTextAnnotation_ESTest extends CategoryTextAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation(") argument.", ") argument.", (-2362.391802463813));
      categoryTextAnnotation0.hashCode();
      assertEquals((-2362.391802463813), categoryTextAnnotation0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("o:Z#k|/(P?", "o:Z#k|/(P?", (-2902.0));
      categoryTextAnnotation0.setCategory(true);
      CategoryTextAnnotation categoryTextAnnotation1 = new CategoryTextAnnotation("o:Z#k|/(P?", true, 0.0F);
      boolean boolean0 = categoryTextAnnotation0.equals(categoryTextAnnotation1);
      assertFalse(categoryTextAnnotation1.equals((Object)categoryTextAnnotation0));
      assertFalse(boolean0);
      assertEquals((-2902.0), categoryTextAnnotation0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", "", (-758.9348815142873));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(37).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(2146745082).when(categoryDataset0).getColumnCount();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(categoryDataset0).when(categoryPlot0).getDataset();
      doReturn(axisLocation0).when(categoryPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(categoryPlot0).getOrientation();
      doReturn(axisLocation0).when(categoryPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(categoryAxis0).getCategoryJava2DCoordinate(any(org.jfree.chart.axis.CategoryAnchor.class) , anyInt() , anyInt() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(valueAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      categoryTextAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
      assertEquals((-758.9348815142873), categoryTextAnnotation0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("rxVH._8p2oC", "rxVH._8p2oC", (-313.5099949889315));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Font) null).when(graphics2D0).getFont();
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      doReturn((FontRenderContext) null).when(graphics2D0).getFontRenderContext();
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(37).when(categoryDataset0).getColumnCount();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(categoryDataset0).when(categoryPlot0).getDataset();
      doReturn(axisLocation0).when(categoryPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(categoryPlot0).getOrientation();
      doReturn(axisLocation0).when(categoryPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(categoryAxis0).getCategoryJava2DCoordinate(any(org.jfree.chart.axis.CategoryAnchor.class) , anyInt() , anyInt() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(valueAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      // Undeclared exception!
      try { 
        categoryTextAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", "", 1489.95962026);
      categoryTextAnnotation0.setValue(125.66);
      assertEquals(125.66, categoryTextAnnotation0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", "", (-758.9348815142873));
      boolean boolean0 = categoryTextAnnotation0.equals(categoryTextAnnotation0);
      assertEquals((-758.9348815142873), categoryTextAnnotation0.getValue(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("category", "category", 0.0);
      double double0 = categoryTextAnnotation0.getValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", "", 3519.022);
      double double0 = categoryTextAnnotation0.getValue();
      assertEquals(3519.022, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", "", (-758.9348815142873));
      // Undeclared exception!
      try { 
        categoryTextAnnotation0.setCategoryAnchor((CategoryAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", "", (-4408.306877714));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getColumnCount();
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(categoryDataset0).when(categoryPlot0).getDataset();
      doReturn((AxisLocation) null).when(categoryPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(categoryPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryTextAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = null;
      try {
        categoryTextAnnotation0 = new CategoryTextAnnotation((String) null, (Comparable) null, (-2513.97087555722));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("Qy}$ri]6g#L4JP7", "Qy}$ri]6g#L4JP7", (-1695.3374956));
      double double0 = categoryTextAnnotation0.getValue();
      assertEquals((-1695.3374956), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("v3Y~ ", "v3Y~ ", 1.0);
      Comparable comparable0 = categoryTextAnnotation0.getCategory();
      CategoryTextAnnotation categoryTextAnnotation1 = new CategoryTextAnnotation("v3Y~ ", comparable0, (-180.0));
      boolean boolean0 = categoryTextAnnotation0.equals(categoryTextAnnotation1);
      assertFalse(boolean0);
      assertFalse(categoryTextAnnotation1.equals((Object)categoryTextAnnotation0));
      assertEquals((-180.0), categoryTextAnnotation1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation(") argument.", ") argument.", (-2362.391802463813));
      Object object0 = categoryTextAnnotation0.clone();
      assertTrue(object0.equals((Object)categoryTextAnnotation0));
      
      CategoryAnchor categoryAnchor0 = CategoryAnchor.END;
      categoryTextAnnotation0.setCategoryAnchor(categoryAnchor0);
      boolean boolean0 = categoryTextAnnotation0.equals(object0);
      assertFalse(object0.equals((Object)categoryTextAnnotation0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", "", (-758.9348815142873));
      Comparable<CategoryTextAnnotation> comparable0 = (Comparable<CategoryTextAnnotation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryTextAnnotation categoryTextAnnotation1 = new CategoryTextAnnotation("generator", comparable0, (-1073.742659));
      boolean boolean0 = categoryTextAnnotation0.equals(categoryTextAnnotation1);
      assertEquals((-1073.742659), categoryTextAnnotation1.getValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", "", (-758.9348815142873));
      boolean boolean0 = categoryTextAnnotation0.equals("org.jfree.chart.event.PlotChangeEvent");
      assertEquals((-758.9348815142873), categoryTextAnnotation0.getValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", "", (-758.9348815142873));
      CategoryTextAnnotation categoryTextAnnotation1 = (CategoryTextAnnotation)categoryTextAnnotation0.clone();
      boolean boolean0 = categoryTextAnnotation0.equals(categoryTextAnnotation1);
      assertEquals((-758.9348815142873), categoryTextAnnotation1.getValue(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("poly", "poly", 0.0);
      CategoryTextAnnotation categoryTextAnnotation1 = new CategoryTextAnnotation("poly", 0.0, 0.0);
      boolean boolean0 = categoryTextAnnotation1.equals(categoryTextAnnotation0);
      assertFalse(boolean0);
      assertEquals(0.0, categoryTextAnnotation1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", "", 3519.022);
      // Undeclared exception!
      try { 
        categoryTextAnnotation0.setCategory((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", "", (-758.9348815142873));
      CategoryAnchor categoryAnchor0 = categoryTextAnnotation0.getCategoryAnchor();
      categoryTextAnnotation0.setCategoryAnchor(categoryAnchor0);
      assertEquals((-758.9348815142873), categoryTextAnnotation0.getValue(), 0.01);
  }
}
