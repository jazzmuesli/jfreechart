/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:25:51 GMT 2019
 */

package org.jfree.chart.title;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.geom.Rectangle2D;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BlockParams;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.ui.Size2D;
import org.jfree.chart.ui.VerticalAlignment;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.PieDataset;
import org.jfree.data.general.ValueDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LegendTitle_ESTest extends LegendTitle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart(piePlot3D0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      legendTitle0.setItemFont(piePlot3D0.DEFAULT_LABEL_FONT);
      Object object0 = legendTitle0.clone();
      legendTitle0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(valueDataset0).getGroup();
      MeterPlot meterPlot0 = new MeterPlot(valueDataset0);
      LegendTitle legendTitle0 = new LegendTitle(meterPlot0);
      LegendItemSource[] legendItemSourceArray0 = new LegendItemSource[8];
      legendTitle0.setSources(legendItemSourceArray0);
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      legendTitle0.setSortOrder(sortOrder0);
      // Undeclared exception!
      try { 
        legendTitle0.fetchLegendItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      LegendTitle legendTitle0 = new LegendTitle(categoryPlot0);
      LegendItemSource[] legendItemSourceArray0 = new LegendItemSource[8];
      legendItemSourceArray0[0] = (LegendItemSource) categoryPlot0;
      legendItemSourceArray0[1] = (LegendItemSource) categoryPlot0;
      legendTitle0.setSources(legendItemSourceArray0);
      // Undeclared exception!
      try { 
        legendTitle0.fetchLegendItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      LegendTitle legendTitle0 = new LegendTitle(combinedRangeCategoryPlot0);
      legendTitle0.setItemPaint(valueAxis0.DEFAULT_TICK_MARK_PAINT);
      legendTitle0.getItemPaint();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      LegendTitle legendTitle0 = new LegendTitle(combinedRangeCategoryPlot0);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      legendTitle0.setLegendItemGraphicEdge(rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PieDataset pieDataset0 = mock(PieDataset.class, new ViolatedAssumptionAnswer());
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      LegendTitle legendTitle0 = new LegendTitle(ringPlot0);
      LegendItemSource[] legendItemSourceArray0 = new LegendItemSource[0];
      legendTitle0.setSources(legendItemSourceArray0);
      legendTitle0.getSources();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      legendTitle0.setItemFont(jFreeChart0.DEFAULT_TITLE_FONT);
      legendTitle0.getItemFont();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart(piePlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      Paint paint0 = legendTitle0.getBackgroundPaint();
      assertEquals(1, paint0.getTransparency());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      LegendTitle legendTitle0 = new LegendTitle(categoryPlot0);
      // Undeclared exception!
      try { 
        legendTitle0.setSources((LegendItemSource[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'sources' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(valueDataset0);
      LegendTitle legendTitle0 = new LegendTitle(thermometerPlot0);
      // Undeclared exception!
      try { 
        legendTitle0.setSortOrder((SortOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CategoryItemRenderer categoryItemRenderer0 = mock(CategoryItemRenderer.class, new ViolatedAssumptionAnswer());
      doReturn((LegendItemCollection) null).when(categoryItemRenderer0).getLegendItems();
      CategoryPlot categoryPlot0 = new CategoryPlot(categoryDataset0, categoryAxis0, valueAxis0, categoryItemRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      // Undeclared exception!
      try { 
        legendTitle0.fetchLegendItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.LegendItemCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      doReturn(11).when(categoryDataset0).getRowCount();
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      LegendTitle legendTitle0 = new LegendTitle(multiplePiePlot0);
      // Undeclared exception!
      try { 
        legendTitle0.fetchLegendItems();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      LegendTitle legendTitle0 = new LegendTitle(combinedDomainXYPlot0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        legendTitle0.draw(graphics2D0, (Rectangle2D) null, (Object) "sS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PieDataset pieDataset0 = mock(PieDataset.class, new ViolatedAssumptionAnswer());
      PiePlot piePlot0 = new PiePlot(pieDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(piePlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      // Undeclared exception!
      try { 
        legendTitle0.draw((Graphics2D) null, (Rectangle2D) rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(valueDataset0);
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, verticalAlignment0, 1.0F, (-3231.4950731));
      LegendTitle legendTitle0 = new LegendTitle(thermometerPlot0, flowArrangement0, flowArrangement0);
      // Undeclared exception!
      try { 
        legendTitle0.createLegendItemBlock((LegendItem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      // Undeclared exception!
      try { 
        legendTitle0.arrange(graphics2D0, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(valueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      LegendTitle legendTitle0 = null;
      try {
        legendTitle0 = new LegendTitle(combinedRangeXYPlot0, (Arrangement) null, (Arrangement) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'arrangement' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(valueDataset0).getGroup();
      MeterPlot meterPlot0 = new MeterPlot(valueDataset0);
      LegendTitle legendTitle0 = new LegendTitle(meterPlot0);
      LegendTitle legendTitle1 = (LegendTitle)legendTitle0.clone();
      assertTrue(legendTitle1.equals((Object)legendTitle0));
      
      legendTitle1.setMargin((double) 10, (double) 10, (double) 10, (double) 3.0F);
      boolean boolean0 = legendTitle0.equals(legendTitle1);
      assertFalse(legendTitle1.equals((Object)legendTitle0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      LegendTitle legendTitle0 = new LegendTitle(combinedDomainXYPlot0);
      boolean boolean0 = legendTitle0.equals(combinedDomainXYPlot0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PieDataset pieDataset0 = mock(PieDataset.class, new ViolatedAssumptionAnswer());
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      LegendTitle legendTitle0 = new LegendTitle(ringPlot0);
      legendTitle0.setBackgroundPaint(ringPlot0.DEFAULT_LABEL_OUTLINE_PAINT);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)legendTitle0.getBounds();
      legendTitle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      LegendTitle legendTitle0 = new LegendTitle(combinedDomainXYPlot0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      BlockParams blockParams0 = new BlockParams();
      blockParams0.setGenerateEntities(true);
      legendTitle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float0, (Object) blockParams0);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      LegendTitle legendTitle0 = new LegendTitle(combinedDomainXYPlot0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      BlockParams blockParams0 = new BlockParams();
      legendTitle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float0, (Object) blockParams0);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PieDataset pieDataset0 = mock(PieDataset.class, new ViolatedAssumptionAnswer());
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      LegendTitle legendTitle0 = new LegendTitle(ringPlot0);
      LegendItem legendItem0 = new LegendItem("eM}id6?,J)7yX+&|I~", "eM}id6?,J)7yX+&|I~", "be2@s", "", ringPlot0.DEFAULT_LEGEND_ITEM_BOX, ringPlot0.DEFAULT_OUTLINE_STROKE, ringPlot0.DEFAULT_LABEL_SHADOW_PAINT);
      legendItem0.setLabelPaint(legendTitle0.DEFAULT_ITEM_PAINT);
      BlockContainer blockContainer0 = (BlockContainer)legendTitle0.createLegendItemBlock(legendItem0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PieDataset pieDataset0 = mock(PieDataset.class, new ViolatedAssumptionAnswer());
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      LegendTitle legendTitle0 = new LegendTitle(ringPlot0);
      LegendItem legendItem0 = new LegendItem("eM}id6?,J)7yX+&|I~", "eM}id6?,J)7yX+&|I~", "be2@s", "", ringPlot0.DEFAULT_LEGEND_ITEM_BOX, ringPlot0.DEFAULT_OUTLINE_STROKE, ringPlot0.DEFAULT_LABEL_SHADOW_PAINT);
      BlockContainer blockContainer0 = (BlockContainer)legendTitle0.createLegendItemBlock(legendItem0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(valueDataset0);
      Font font0 = thermometerPlot0.getValueFont();
      JFreeChart jFreeChart0 = new JFreeChart("5Jcz[!>v,dX&!o@eq", font0, thermometerPlot0, true);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      legendTitle0.fetchLegendItems();
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      LegendTitle legendTitle0 = new LegendTitle(combinedDomainXYPlot0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1.0F, valueAxis0.DEFAULT_RANGE, lengthConstraintType0, 1.0E-8, valueAxis0.DEFAULT_RANGE, lengthConstraintType0);
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      legendTitle0.setSortOrder(sortOrder0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = legendTitle0.arrange(graphics2D0, rectangleConstraint0);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(categoryDataset0).getRowKeys();
      doReturn(0).when(categoryDataset0).getRowCount();
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      LegendTitle legendTitle0 = new LegendTitle(multiplePiePlot0);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      legendTitle0.setPosition(rectangleEdge0);
      legendTitle0.fetchLegendItems();
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(valueDataset0).getGroup();
      MeterPlot meterPlot0 = new MeterPlot(valueDataset0);
      LegendTitle legendTitle0 = new LegendTitle(meterPlot0);
      RectangleInsets rectangleInsets0 = legendTitle0.getLegendItemGraphicPadding();
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(valueDataset0).getGroup();
      MeterPlot meterPlot0 = new MeterPlot(valueDataset0);
      LegendTitle legendTitle0 = new LegendTitle(meterPlot0);
      BlockContainer blockContainer0 = legendTitle0.getWrapper();
      assertNull(blockContainer0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(valueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      LegendTitle legendTitle0 = new LegendTitle(combinedDomainXYPlot0);
      legendTitle0.setLegendItemGraphicPadding(combinedDomainXYPlot0.DEFAULT_INSETS);
      assertTrue(legendTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(valueDataset0).getGroup();
      MeterPlot meterPlot0 = new MeterPlot(valueDataset0);
      LegendTitle legendTitle0 = new LegendTitle(meterPlot0);
      SortOrder sortOrder0 = legendTitle0.getSortOrder();
      assertEquals(SortOrder.ASCENDING, sortOrder0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(valueDataset0).getGroup();
      MeterPlot meterPlot0 = new MeterPlot(valueDataset0);
      LegendTitle legendTitle0 = new LegendTitle(meterPlot0);
      RectangleAnchor rectangleAnchor0 = legendTitle0.getLegendItemGraphicLocation();
      assertEquals(RectangleAnchor.CENTER, rectangleAnchor0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      legendTitle0.setLegendItemGraphicAnchor(rectangleAnchor0);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      LegendTitle legendTitle0 = new LegendTitle(combinedDomainXYPlot0);
      Font font0 = legendTitle0.getItemFont();
      assertEquals(0, font0.getStyle());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null);
      RectangleAnchor rectangleAnchor0 = legendTitle0.getLegendItemGraphicAnchor();
      legendTitle0.setLegendItemGraphicLocation(rectangleAnchor0);
      assertEquals(RectangleEdge.TOP, legendTitle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PieDataset pieDataset0 = mock(PieDataset.class, new ViolatedAssumptionAnswer());
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      LegendTitle legendTitle0 = new LegendTitle(ringPlot0);
      legendTitle0.setItemLabelPadding(ringPlot0.DEFAULT_INSETS);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null);
      // Undeclared exception!
      try { 
        legendTitle0.setItemPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PieDataset pieDataset0 = mock(PieDataset.class, new ViolatedAssumptionAnswer());
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      LegendTitle legendTitle0 = new LegendTitle(ringPlot0);
      LegendItemSource[] legendItemSourceArray0 = legendTitle0.getSources();
      assertEquals(1, legendItemSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PieDataset pieDataset0 = mock(PieDataset.class, new ViolatedAssumptionAnswer());
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      LegendTitle legendTitle0 = new LegendTitle(ringPlot0);
      RectangleInsets rectangleInsets0 = legendTitle0.getItemLabelPadding();
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null);
      Paint paint0 = legendTitle0.getBackgroundPaint();
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(valueDataset0).getGroup();
      MeterPlot meterPlot0 = new MeterPlot(valueDataset0);
      LegendTitle legendTitle0 = new LegendTitle(meterPlot0);
      RectangleEdge rectangleEdge0 = legendTitle0.getLegendItemGraphicEdge();
      assertEquals(RectangleEdge.LEFT, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(valueDataset0);
      Font font0 = thermometerPlot0.getValueFont();
      JFreeChart jFreeChart0 = new JFreeChart("5Jcz[!>v,dX&!o@eq", font0, thermometerPlot0, true);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      legendTitle0.setWrapper(blockContainer0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      legendTitle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float0, (Object) rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
  }
}
