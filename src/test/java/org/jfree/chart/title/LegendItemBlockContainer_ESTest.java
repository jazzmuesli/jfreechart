/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:30:44 GMT 2019
 */

package org.jfree.chart.title;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockFrame;
import org.jfree.chart.block.BlockParams;
import org.jfree.chart.title.LegendItemBlockContainer;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.data.general.Dataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LegendItemBlockContainer_ESTest extends LegendItemBlockContainer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Dataset dataset0 = mock(Dataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dataset0).toString();
      Comparable<Polygon> comparable0 = (Comparable<Polygon>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(arrangement0, dataset0, comparable0);
      Arrangement arrangement1 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      legendItemBlockContainer0.getURLText();
      LegendItemBlockContainer legendItemBlockContainer1 = new LegendItemBlockContainer(arrangement1, (Dataset) null, (Comparable) null);
      Object object0 = legendItemBlockContainer1.clone();
      legendItemBlockContainer0.clear();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = legendItemBlockContainer1.getBounds();
      legendItemBlockContainer0.draw(graphics2D0, rectangle2D0);
      legendItemBlockContainer0.add((Block) legendItemBlockContainer1, object0);
      legendItemBlockContainer0.getSeriesKey();
      legendItemBlockContainer1.add((Block) legendItemBlockContainer0);
      legendItemBlockContainer1.setURLText("VKr2W\"8&GpoLgz");
      legendItemBlockContainer0.getToolTipText();
      legendItemBlockContainer1.getURLText();
      legendItemBlockContainer0.getURLText();
      legendItemBlockContainer1.getSeriesKey();
      legendItemBlockContainer1.setToolTipText((String) null);
      legendItemBlockContainer1.setURLText("*zUJQI1z<_aAOx");
      legendItemBlockContainer1.setToolTipText("");
      legendItemBlockContainer0.getDataset();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        legendItemBlockContainer0.draw(graphics2D1, rectangle2D0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Comparable<Polygon> comparable0 = (Comparable<Polygon>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(arrangement0, (Dataset) null, comparable0);
      legendItemBlockContainer0.getSeriesKey();
      legendItemBlockContainer0.getSeriesKey();
      legendItemBlockContainer0.setToolTipText("o~MO4");
      legendItemBlockContainer0.setToolTipText("");
      legendItemBlockContainer0.getToolTipText();
      int int0 = legendItemBlockContainer0.getSeriesIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(arrangement0, (Dataset) null, comparable0);
      Arrangement arrangement1 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Comparable<Rectangle> comparable1 = (Comparable<Rectangle>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      LegendItemBlockContainer legendItemBlockContainer1 = new LegendItemBlockContainer(arrangement1, (Dataset) null, comparable1);
      legendItemBlockContainer1.getBlocks();
      legendItemBlockContainer0.add((Block) legendItemBlockContainer1, (Object) "org.jfree.chart.title.LegendItemBlockContainer");
      int int0 = legendItemBlockContainer0.getSeriesIndex();
      assertEquals(0, int0);
      
      legendItemBlockContainer0.getDataset();
      assertEquals(0, legendItemBlockContainer0.getSeriesIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Dataset dataset0 = mock(Dataset.class, new ViolatedAssumptionAnswer());
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(arrangement0, dataset0, (Comparable) null);
      legendItemBlockContainer0.setToolTipText("org.jfree.chart.title.LegendItemBlockContainer");
      legendItemBlockContainer0.setURLText("org.jfree.chart.title.LegendItemBlockContainer");
      legendItemBlockContainer0.setURLText("org.jfree.chart.title.LegendItemBlockContainer");
      String string0 = legendItemBlockContainer0.getToolTipText();
      assertEquals("org.jfree.chart.title.LegendItemBlockContainer", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Dataset dataset0 = mock(Dataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dataset0).toString();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(arrangement0, dataset0, comparable0);
      legendItemBlockContainer0.setURLText("=J7+Y3\"!");
      legendItemBlockContainer0.getSeriesKey();
      RectangleInsets rectangleInsets0 = legendItemBlockContainer0.getMargin();
      legendItemBlockContainer0.setMargin(rectangleInsets0);
      int int0 = legendItemBlockContainer0.getSeriesIndex();
      assertEquals(0, int0);
      
      legendItemBlockContainer0.getURLText();
      legendItemBlockContainer0.setToolTipText("=J7+Y3\"!");
      legendItemBlockContainer0.getURLText();
      legendItemBlockContainer0.getDataset();
      assertEquals(0, legendItemBlockContainer0.getSeriesIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Dataset dataset0 = mock(Dataset.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(arrangement0, dataset0, comparable0);
      Object object0 = legendItemBlockContainer0.clone();
      legendItemBlockContainer0.equals(object0);
      legendItemBlockContainer0.getSeriesKey();
      legendItemBlockContainer0.setToolTipText("");
      assertTrue(legendItemBlockContainer0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Dataset dataset0 = mock(Dataset.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(arrangement0, dataset0, comparable0);
      int int0 = legendItemBlockContainer0.getSeriesIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Dataset dataset0 = mock(Dataset.class, new ViolatedAssumptionAnswer());
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(arrangement0, dataset0, (Comparable) null);
      Comparable comparable0 = legendItemBlockContainer0.getSeriesKey();
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Dataset dataset0 = mock(Dataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dataset0).toString();
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(arrangement0, dataset0, (Comparable) null);
      Dataset dataset1 = legendItemBlockContainer0.getDataset();
      assertSame(dataset1, dataset0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Dataset dataset0 = mock(Dataset.class, new ViolatedAssumptionAnswer());
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(arrangement0, dataset0, (Comparable) null);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = legendItemBlockContainer0.getBounds();
      legendItemBlockContainer0.draw(graphics2D0, rectangle2D0);
      legendItemBlockContainer0.getSeriesIndex();
      legendItemBlockContainer0.clone();
      legendItemBlockContainer0.setToolTipText("WknrpLo\"");
      legendItemBlockContainer0.getURLText();
      legendItemBlockContainer0.setURLText("WknrpLo\"");
      legendItemBlockContainer0.setURLText("");
      legendItemBlockContainer0.setURLText("");
      legendItemBlockContainer0.getURLText();
      legendItemBlockContainer0.getURLText();
      Graphics2D graphics2D1 = null;
      // Undeclared exception!
      try { 
        legendItemBlockContainer0.draw((Graphics2D) null, rectangle2D0, (Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Dataset dataset0 = mock(Dataset.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(arrangement0, dataset0, comparable0);
      String string0 = legendItemBlockContainer0.getURLText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Dataset dataset0 = mock(Dataset.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(arrangement0, dataset0, comparable0);
      legendItemBlockContainer0.setToolTipText("");
      assertEquals(0, legendItemBlockContainer0.getSeriesIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Arrangement arrangement0 = null;
      Dataset dataset0 = mock(Dataset.class, new ViolatedAssumptionAnswer());
      Comparable<Polygon> comparable0 = (Comparable<Polygon>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      LegendItemBlockContainer legendItemBlockContainer0 = null;
      try {
        legendItemBlockContainer0 = new LegendItemBlockContainer((Arrangement) null, dataset0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'arrangement' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Dataset dataset0 = mock(Dataset.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(arrangement0, dataset0, comparable0);
      String string0 = legendItemBlockContainer0.getToolTipText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Dataset dataset0 = mock(Dataset.class, new ViolatedAssumptionAnswer());
      Comparable<BlockParams> comparable0 = (Comparable<BlockParams>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(arrangement0, dataset0, comparable0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = legendItemBlockContainer0.getBounds();
      Object object0 = legendItemBlockContainer0.draw(graphics2D0, rectangle2D0, (Object) graphics2D0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Dataset dataset0 = mock(Dataset.class, new ViolatedAssumptionAnswer());
      Comparable<Polygon> comparable0 = (Comparable<Polygon>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(arrangement0, dataset0, comparable0);
      legendItemBlockContainer0.setURLText("org.jfree.data.general.SeriesChangeEvent");
      assertEquals(0.0, legendItemBlockContainer0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Dataset dataset0 = mock(Dataset.class, new ViolatedAssumptionAnswer());
      Comparable<BlockParams> comparable0 = (Comparable<BlockParams>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(arrangement0, dataset0, comparable0);
      Comparable comparable1 = legendItemBlockContainer0.getSeriesKey();
      assertNotNull(comparable1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Dataset dataset0 = mock(Dataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dataset0).toString();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(arrangement0, dataset0, comparable0);
      Dataset dataset1 = legendItemBlockContainer0.getDataset();
      assertSame(dataset1, dataset0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Comparable<Rectangle> comparable0 = (Comparable<Rectangle>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(arrangement0, (Dataset) null, comparable0);
      assertEquals(0.0, legendItemBlockContainer0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("*gO|f4d=CSQk~ypct").when(comparable0).toString();
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(arrangement0, (Dataset) null, comparable0);
      RectangleInsets rectangleInsets0 = legendItemBlockContainer0.getPadding();
      legendItemBlockContainer0.setMargin(rectangleInsets0);
      Arrangement arrangement1 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      legendItemBlockContainer0.getToolTipText();
      LegendItemBlockContainer legendItemBlockContainer1 = new LegendItemBlockContainer(arrangement1, (Dataset) null, (Comparable) null);
      legendItemBlockContainer0.add((Block) legendItemBlockContainer1);
      legendItemBlockContainer0.getSeriesIndex();
      Comparable comparable1 = legendItemBlockContainer0.getSeriesKey();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = legendItemBlockContainer0.getBounds();
      legendItemBlockContainer0.draw(graphics2D0, rectangle2D0, (Object) comparable1);
      int int0 = legendItemBlockContainer0.getSeriesIndex();
      assertEquals(0, int0);
      
      legendItemBlockContainer0.getDataset();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      legendItemBlockContainer0.setPadding(rectangleInsets0);
      legendItemBlockContainer0.setToolTipText("rect");
      legendItemBlockContainer0.setURLText("PK58y");
      legendItemBlockContainer0.getToolTipText();
      legendItemBlockContainer0.getURLText();
      assertEquals(0, legendItemBlockContainer0.getSeriesIndex());
  }
}
