/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 20:54:07 GMT 2019
 */

package org.jfree.chart.title;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.text.AttributedCharacterIterator;
import java.util.Locale;
import javax.swing.table.JTableHeader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.text.TextFragment;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.ShortTextTitle;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.ui.VerticalAlignment;
import org.jfree.chart.util.UnitType;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextTitle_ESTest extends TextTitle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("#_q");
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale((-1871.229907817), (-108.56), color0);
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis("#_q", stringArray0);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(lookupPaintScale0, symbolAxis0);
      Paint paint0 = paintScaleLegend0.getBackgroundPaint();
      textTitle0.setPaint(paint0);
      textTitle0.hashCode();
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle(0);
      dateTitle0.setExpandToFitSpace(false);
      assertEquals(HorizontalAlignment.RIGHT, dateTitle0.getTextAlignment());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertFalse(dateTitle0.getExpandToFitSpace());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("");
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      shortTextTitle0.setPaint(xYErrorRenderer0.DEFAULT_PAINT);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      Paint paint0 = combinedDomainCategoryPlot0.getBackgroundPaint();
      shortTextTitle0.setPaint(paint0);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_BACKGROUND_PAINT;
      textTitle0.setPaint(color0);
      Color color1 = (Color)textTitle0.getPaint();
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals(255, color1.getGreen());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      dateTitle0.setTextAlignment(horizontalAlignment0);
      assertEquals(HorizontalAlignment.RIGHT, dateTitle0.getTextAlignment());
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      HorizontalAlignment horizontalAlignment0 = dateTitle0.getTextAlignment();
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertEquals(HorizontalAlignment.RIGHT, horizontalAlignment0);
      assertFalse(dateTitle0.getExpandToFitSpace());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.info;
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      CategoryMarker categoryMarker0 = new CategoryMarker("org.jfree.chart.axis.DateTickUnitType", systemColor0, basicStroke0);
      Font font0 = categoryMarker0.getLabelFont();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.axis.DateTickUnitType", font0, thermometerPlot0, false);
      TextTitle textTitle0 = jFreeChart0.getTitle();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, true, false, true);
      Rectangle rectangle0 = chartPanel0.getBounds();
      Rectangle2D rectangle2D0 = chartPanel0.scale(rectangle0);
      // Undeclared exception!
      try { 
        textTitle0.drawHorizontal((Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      textTitle0.setToolTipText("u{j~.xXq1'Bxk:+D");
      textTitle0.getToolTipText();
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("font");
      textTitle0.setToolTipText("");
      textTitle0.getToolTipText();
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      textTitle0.getText();
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertFalse(textTitle0.getExpandToFitSpace());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("");
      shortTextTitle0.getFont();
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("");
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      
      shortTextTitle0.setExpandToFitSpace(true);
      boolean boolean0 = shortTextTitle0.getExpandToFitSpace();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("Null 'text' argument.");
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart(multiplePiePlot0);
      shortTextTitle0.setBackgroundPaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      shortTextTitle0.getBackgroundPaint();
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals("Null 'text' argument.", shortTextTitle0.getText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      // Undeclared exception!
      try { 
        dateTitle0.setText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("Fr<M]7qBm&){|A/*l");
      // Undeclared exception!
      try { 
        textTitle0.setPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("stroke");
      // Undeclared exception!
      try { 
        shortTextTitle0.drawVertical((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      // Undeclared exception!
      try { 
        textTitle0.arrangeRR((Graphics2D) null, (Range) null, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Not yet implemented.", combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      Locale locale0 = chartPanel0.getLocale();
      Color color0 = Color.darkGray;
      DateTitle dateTitle0 = new DateTitle(0, locale0, jFreeChart0.DEFAULT_TITLE_FONT, color0);
      // Undeclared exception!
      try { 
        dateTitle0.arrangeNN((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      // Undeclared exception!
      try { 
        textTitle0.arrange((Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'c' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Font font0 = CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
      Color color0 = Color.DARK_GRAY;
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      TextTitle textTitle0 = null;
      try {
        textTitle0 = new TextTitle("A++,.Ptge7o;TB", font0, color0, rectangleEdge0, horizontalAlignment0, verticalAlignment0, (RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "\"()p@\"Q`vrWHsOo/";
      TextTitle textTitle0 = new TextTitle("\"()p@\"Q`vrWHsOo/");
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      textTitle0.draw((Graphics2D) null, rectangle2D0, (Object) string0);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertFalse(textTitle0.getExpandToFitSpace());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      Color color0 = (Color)Plot.DEFAULT_OUTLINE_PAINT;
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.8, 0.8, 0.8, 0.0);
      TextTitle textTitle0 = new TextTitle("XZ=X!;g69kEi(-2&\" b", font0, color0, rectangleEdge0, horizontalAlignment0, verticalAlignment0, rectangleInsets0);
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      // Undeclared exception!
      try { 
        textTitle0.arrange((Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      dateTitle0.setText("Wb6y:{]");
      assertEquals("Wb6y:{]", dateTitle0.getText());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Color color0 = new Color(12);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      TextBox textBox0 = new TextBox();
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      TextTitle textTitle0 = null;
      try {
        textTitle0 = new TextTitle("*zon q2o%=U@8xag1", (Font) null, color0, rectangleEdge0, horizontalAlignment0, verticalAlignment0, rectangleInsets0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("text");
      SystemColor systemColor0 = SystemColor.menu;
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      TextTitle textTitle0 = null;
      try {
        textTitle0 = new TextTitle((String) null, periodAxis0.DEFAULT_AXIS_LABEL_FONT, systemColor0, rectangleEdge0, horizontalAlignment0, verticalAlignment0, periodAxis0.DEFAULT_AXIS_LABEL_INSETS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      Paint paint0 = combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      dateTitle0.setBackgroundPaint(paint0);
      dateTitle0.hashCode();
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertEquals(HorizontalAlignment.RIGHT, dateTitle0.getTextAlignment());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("#_q");
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      TextTitle textTitle1 = (TextTitle)textTitle0.clone();
      assertTrue(textTitle1.equals((Object)textTitle0));
      
      textTitle1.setBackgroundPaint(extendedCategoryAxis0.DEFAULT_TICK_LABEL_PAINT);
      boolean boolean0 = textTitle0.equals(textTitle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("#_q");
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      textTitle0.setFont(extendedCategoryAxis0.DEFAULT_TICK_LABEL_FONT);
      TextTitle textTitle1 = new TextTitle("#_q", textTitle0.DEFAULT_FONT);
      boolean boolean0 = textTitle0.equals(textTitle1);
      assertFalse(textTitle1.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, textTitle1.getMaximumLinesToDisplay());
      assertFalse(boolean0);
      assertFalse(textTitle1.equals((Object)textTitle0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("#_q");
      TextTitle textTitle1 = (TextTitle)textTitle0.clone();
      boolean boolean0 = textTitle0.equals(textTitle1);
      assertFalse(textTitle1.getExpandToFitSpace());
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, textTitle1.getMaximumLinesToDisplay());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.LANGUAGE;
      boolean boolean0 = dateTitle0.equals(attributedCharacterIterator_Attribute0);
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertEquals(HorizontalAlignment.RIGHT, dateTitle0.getTextAlignment());
      assertFalse(boolean0);
      assertFalse(dateTitle0.getExpandToFitSpace());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("#_q");
      boolean boolean0 = textTitle0.equals(textTitle0);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(boolean0);
      assertFalse(textTitle0.getExpandToFitSpace());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("#_q");
      TextTitle textTitle1 = new TextTitle("");
      boolean boolean0 = textTitle0.equals(textTitle1);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, textTitle1.getMaximumLinesToDisplay());
      assertFalse(textTitle1.getExpandToFitSpace());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      // Undeclared exception!
      try { 
        dateTitle0.arrangeRN((Graphics2D) null, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      CategoryMarker categoryMarker0 = new CategoryMarker(verticalAlignment0);
      RectangleInsets rectangleInsets0 = categoryMarker0.getLabelOffset();
      DateTitle dateTitle0 = new DateTitle(0, locale0, candlestickRenderer0.DEFAULT_VALUE_LABEL_FONT, candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT, rectangleEdge0, horizontalAlignment0, verticalAlignment0, rectangleInsets0);
      Range range0 = ValueAxis.DEFAULT_RANGE;
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-975.5), range0, lengthConstraintType0, (-207), range0, lengthConstraintType0);
      // Undeclared exception!
      try { 
        dateTitle0.arrange((Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      Color color0 = (Color)Plot.DEFAULT_OUTLINE_PAINT;
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.8, 0.8, 0.8, 0.0);
      TextTitle textTitle0 = new TextTitle("XZ=X!;g69kEi(-2&\" b", font0, color0, rectangleEdge0, horizontalAlignment0, verticalAlignment0, rectangleInsets0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-159.5862), (-159.5862));
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      // Undeclared exception!
      try { 
        textTitle0.arrange((Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      // Undeclared exception!
      try { 
        dateTitle0.arrangeFN((Graphics2D) null, 90.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      // Undeclared exception!
      try { 
        textTitle0.arrangeFN((Graphics2D) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      Color color0 = (Color)Plot.DEFAULT_OUTLINE_PAINT;
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.8, 0.8, 0.8, 0.0);
      TextTitle textTitle0 = new TextTitle("XZ=X!;g69kEi(-2&\" b", font0, color0, rectangleEdge0, horizontalAlignment0, verticalAlignment0, rectangleInsets0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-159.5862), (-159.5862));
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      // Undeclared exception!
      try { 
        textTitle0.arrange((Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1770));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, (double) candlestickRenderer0.ZERO);
      // Undeclared exception!
      try { 
        textTitle0.arrange((Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      Color color0 = (Color)Plot.DEFAULT_OUTLINE_PAINT;
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.8, 0.8, 0.8, 0.0);
      TextTitle textTitle0 = new TextTitle("XZ=X!;g69kEi(-2&\" b", font0, color0, rectangleEdge0, horizontalAlignment0, verticalAlignment0, rectangleInsets0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-159.5862), (-159.5862));
      // Undeclared exception!
      try { 
        textTitle0.arrange((Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      CategoryMarker categoryMarker0 = new CategoryMarker(verticalAlignment0);
      RectangleInsets rectangleInsets0 = categoryMarker0.getLabelOffset();
      DateTitle dateTitle0 = new DateTitle(0, locale0, candlestickRenderer0.DEFAULT_VALUE_LABEL_FONT, candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT, rectangleEdge0, horizontalAlignment0, verticalAlignment0, rectangleInsets0);
      Range range0 = ValueAxis.DEFAULT_RANGE;
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-975.5), range0, lengthConstraintType0, (-207), range0, lengthConstraintType0);
      // Undeclared exception!
      try { 
        dateTitle0.arrange((Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("#_q");
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale((-1871.229907817), (-108.56), color0);
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis("#_q", stringArray0);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(lookupPaintScale0, symbolAxis0);
      Paint paint0 = paintScaleLegend0.getBackgroundPaint();
      textTitle0.setPaint(paint0);
      TextTitle textTitle1 = (TextTitle)textTitle0.clone();
      boolean boolean0 = textTitle0.equals(textTitle1);
      assertEquals(Integer.MAX_VALUE, textTitle1.getMaximumLinesToDisplay());
      assertFalse(textTitle1.getExpandToFitSpace());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      Paint paint0 = subCategoryAxis0.getTickLabelPaint();
      dateTitle0.setPaint(paint0);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertEquals(HorizontalAlignment.RIGHT, dateTitle0.getTextAlignment());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      NumberAxis numberAxis0 = new NumberAxis();
      dateTitle0.setFont(numberAxis0.DEFAULT_TICK_LABEL_FONT);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertEquals(HorizontalAlignment.RIGHT, dateTitle0.getTextAlignment());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("#_q");
      textTitle0.setFont(textTitle0.DEFAULT_FONT);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertFalse(textTitle0.getExpandToFitSpace());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("#_q");
      textTitle0.setText("#_q");
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Font font0 = TextTitle.DEFAULT_FONT;
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      TextTitle textTitle0 = null;
      try {
        textTitle0 = new TextTitle("ppWc", font0, (Paint) null, rectangleEdge0, horizontalAlignment0, verticalAlignment0, rectangleInsets0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextTitle textTitle0 = null;
      try {
        textTitle0 = new TextTitle("", (Font) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextTitle textTitle0 = null;
      try {
        textTitle0 = new TextTitle((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      DateTitle dateTitle1 = (DateTitle)dateTitle0.clone();
      boolean boolean0 = dateTitle0.equals(dateTitle1);
      assertEquals(Integer.MAX_VALUE, dateTitle1.getMaximumLinesToDisplay());
      assertFalse(dateTitle1.getExpandToFitSpace());
      assertTrue(boolean0);
      assertEquals(HorizontalAlignment.RIGHT, dateTitle1.getTextAlignment());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("Null 'text' argument.");
      boolean boolean0 = shortTextTitle0.getExpandToFitSpace();
      assertFalse(boolean0);
      assertEquals("Null 'text' argument.", shortTextTitle0.getText());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("Null 'text' argument.");
      shortTextTitle0.setMaximumLinesToDisplay(10);
      assertEquals(10, shortTextTitle0.getMaximumLinesToDisplay());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      Font font0 = dateTitle0.getFont();
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertTrue(font0.isPlain());
      assertEquals(HorizontalAlignment.RIGHT, dateTitle0.getTextAlignment());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      Color color0 = (Color)Plot.DEFAULT_OUTLINE_PAINT;
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.8, 0.8, 0.8, 0.0);
      TextTitle textTitle0 = new TextTitle("Null 'text' argument.", font0, color0, rectangleEdge0, horizontalAlignment0, verticalAlignment0, rectangleInsets0);
      JTableHeader jTableHeader0 = new JTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(506);
      textTitle0.draw((Graphics2D) null, (Rectangle2D) rectangle0);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals(HorizontalAlignment.RIGHT, textTitle0.getTextAlignment());
      assertFalse(textTitle0.getExpandToFitSpace());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      dateTitle0.getURLText();
      assertEquals(HorizontalAlignment.RIGHT, dateTitle0.getTextAlignment());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertFalse(dateTitle0.getExpandToFitSpace());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      dateTitle0.getToolTipText();
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertEquals(HorizontalAlignment.RIGHT, dateTitle0.getTextAlignment());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      int int0 = dateTitle0.getMaximumLinesToDisplay();
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertEquals(HorizontalAlignment.RIGHT, dateTitle0.getTextAlignment());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("Null 'text' argument.");
      Paint paint0 = shortTextTitle0.getBackgroundPaint();
      assertNull(paint0);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals("Null 'text' argument.", shortTextTitle0.getText());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      dateTitle0.getText();
      assertEquals(HorizontalAlignment.RIGHT, dateTitle0.getTextAlignment());
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      dateTitle0.setURLText("Goy=/vq");
      assertEquals(HorizontalAlignment.RIGHT, dateTitle0.getTextAlignment());
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
  }
}
