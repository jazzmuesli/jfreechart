/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:35:56 GMT 2019
 */

package org.jfree.chart.event;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLabelLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.event.AxisChangeEvent;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AxisChangeEvent_ESTest extends AxisChangeEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setVisible(false);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
      Axis axis0 = axisChangeEvent0.getAxis();
      assertEquals(0.0, axis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
      categoryAxis0.setTickMarksVisible(false);
      Axis axis0 = axisChangeEvent0.getAxis();
      assertTrue(axis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
      categoryAxis0.setTickLabelsVisible(false);
      Axis axis0 = axisChangeEvent0.getAxis();
      assertTrue(axis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
      categoryAxis0.setMinorTickMarksVisible(true);
      Axis axis0 = axisChangeEvent0.getAxis();
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis(", tooltip=");
      categoryAxis0.setAxisLineVisible(false);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
      Axis axis0 = axisChangeEvent0.getAxis();
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
      categoryAxis0.setTickMarkOutsideLength(0.0F);
      Axis axis0 = axisChangeEvent0.getAxis();
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
      categoryAxis0.setTickMarkOutsideLength((-1049.4652F));
      Axis axis0 = axisChangeEvent0.getAxis();
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
      categoryAxis0.setTickMarkInsideLength(0.5F);
      CategoryAxis categoryAxis1 = (CategoryAxis)axisChangeEvent0.getAxis();
      assertEquals(4, categoryAxis1.getCategoryLabelPositionOffset());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setTickMarkInsideLength((-221.1F));
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
      Axis axis0 = axisChangeEvent0.getAxis();
      assertTrue(axis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
      categoryAxis0.setMinorTickMarkOutsideLength(0.0F);
      Axis axis0 = axisChangeEvent0.getAxis();
      assertEquals(0.0F, axis0.getMinorTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setMinorTickMarkOutsideLength((-3246.0F));
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
      Axis axis0 = axisChangeEvent0.getAxis();
      assertTrue(axis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("org.jfree.chart.event.AxisChangeEvent");
      categoryAxis0.setMinorTickMarkInsideLength(3574.9717F);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
      CategoryAxis categoryAxis1 = (CategoryAxis)axisChangeEvent0.getAxis();
      assertEquals(0.05, categoryAxis1.getUpperMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
      categoryAxis0.setMinorTickMarkInsideLength((-4923.0F));
      Axis axis0 = axisChangeEvent0.getAxis();
      assertEquals(0.0, axis0.getFixedDimension(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
      categoryAxis0.setLabelAngle(2090.685);
      Axis axis0 = axisChangeEvent0.getAxis();
      assertTrue(axis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
      categoryAxis0.setLabelAngle((-480.0703741));
      Axis axis0 = axisChangeEvent0.getAxis();
      assertEquals(AxisLabelLocation.MIDDLE, axis0.getLabelLocation());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
      categoryAxis0.setFixedDimension(906.63003724112);
      CategoryAxis categoryAxis1 = (CategoryAxis)axisChangeEvent0.getAxis();
      assertEquals(4, categoryAxis1.getCategoryLabelPositionOffset());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setFixedDimension((-3342.393975));
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
      CategoryAxis categoryAxis1 = (CategoryAxis)axisChangeEvent0.getAxis();
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AxisChangeEvent axisChangeEvent0 = null;
      try {
        axisChangeEvent0 = new AxisChangeEvent((Axis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }
}
