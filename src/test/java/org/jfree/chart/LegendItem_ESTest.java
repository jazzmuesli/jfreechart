/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:29:30 GMT 2019
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.text.AttributedString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.LegendItem;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLabelLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.AreaRendererEndType;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.ui.GradientPaintTransformer;
import org.jfree.data.general.Dataset;
import org.jfree.data.general.DefaultValueDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LegendItem_ESTest extends LegendItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AttributedString attributedString0 = new AttributedString("");
      assertNotNull(attributedString0);
      
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Rectangle rectangle0 = polygon0.getBounds();
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertNotNull(defaultPolarItemRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultPolarItemRenderer0.lookupSeriesStroke((-1));
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      
      LegendItem legendItem0 = new LegendItem(attributedString0, "", (String) null, "", rectangle0, basicStroke0, defaultPolarItemRenderer0.DEFAULT_PAINT);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertNull(legendItem0.getToolTipText());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("", legendItem0.getLabel());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isShapeVisible());
      assertEquals("", legendItem0.getURLText());
      assertEquals("", legendItem0.getDescription());
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertNotNull(legendItem0);
      
      legendItem0.setOutlineStroke(basicStroke0);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertNull(legendItem0.getToolTipText());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("", legendItem0.getLabel());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isShapeVisible());
      assertEquals("", legendItem0.getURLText());
      assertEquals("", legendItem0.getDescription());
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(defaultPolarItemRenderer0);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("", color0);
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isShapeVisible());
      assertNull(legendItem0.getDescription());
      assertNull(legendItem0.getURLText());
      assertFalse(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertNull(legendItem0.getToolTipText());
      assertNotNull(legendItem0);
      
      legendItem0.setLineStroke(defaultPolarItemRenderer0.DEFAULT_OUTLINE_STROKE);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isShapeVisible());
      assertNull(legendItem0.getDescription());
      assertNull(legendItem0.getURLText());
      assertFalse(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertNull(legendItem0.getToolTipText());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertNotNull(defaultPolarItemRenderer0);
      
      Color color0 = (Color)defaultPolarItemRenderer0.getDefaultOutlinePaint();
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("", color0);
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertNull(legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertNull(legendItem0.getURLText());
      assertNull(legendItem0.getDescription());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("", legendItem0.getLabel());
      assertFalse(legendItem0.isLineVisible());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertNotNull(legendItem0);
      
      legendItem0.setLine(defaultPolarItemRenderer0.DEFAULT_SHAPE);
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertNull(legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertNull(legendItem0.getURLText());
      assertNull(legendItem0.getDescription());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("", legendItem0.getLabel());
      assertFalse(legendItem0.isLineVisible());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isShapeFilled());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertNotNull(defaultPolarItemRenderer0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultPolarItemRenderer0.lookupLegendShape(2282);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      LegendItem legendItem0 = new LegendItem("", "", "", "", rectangle2D_Double0, defaultPolarItemRenderer0.DEFAULT_OUTLINE_STROKE, defaultPolarItemRenderer0.DEFAULT_PAINT);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertFalse(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("", legendItem0.getURLText());
      assertEquals("", legendItem0.getDescription());
      assertFalse(legendItem0.isShapeFilled());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("", legendItem0.getLabel());
      assertTrue(legendItem0.isLineVisible());
      assertEquals("", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(legendItem0);
      
      boolean boolean0 = legendItem0.isShapeVisible();
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertFalse(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("", legendItem0.getURLText());
      assertEquals("", legendItem0.getDescription());
      assertFalse(legendItem0.isShapeFilled());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("", legendItem0.getLabel());
      assertTrue(legendItem0.isLineVisible());
      assertEquals("", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertNotNull(defaultPolarItemRenderer0);
      
      Line2D.Double line2D_Double0 = (Line2D.Double)defaultPolarItemRenderer0.getLegendLine();
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(7.0, line2D_Double0.x2, 0.01);
      assertEquals((-7.0), line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertNotNull(line2D_Double0);
      
      LegendItem legendItem0 = new LegendItem("transformer", "(!kvv,q[Pq4h=4", "transformer", "(!kvv,q[Pq4h=4", false, line2D_Double0, false, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT, true, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT, defaultPolarItemRenderer0.DEFAULT_OUTLINE_STROKE, false, line2D_Double0, defaultPolarItemRenderer0.DEFAULT_OUTLINE_STROKE, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("(!kvv,q[Pq4h=4", legendItem0.getURLText());
      assertEquals("(!kvv,q[Pq4h=4", legendItem0.getDescription());
      assertEquals("transformer", legendItem0.getToolTipText());
      assertFalse(legendItem0.isShapeVisible());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("transformer", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeFilled());
      assertEquals(7.0, line2D_Double0.x2, 0.01);
      assertEquals((-7.0), line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertNotNull(legendItem0);
      
      boolean boolean0 = legendItem0.isShapeOutlineVisible();
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("(!kvv,q[Pq4h=4", legendItem0.getURLText());
      assertEquals("(!kvv,q[Pq4h=4", legendItem0.getDescription());
      assertEquals("transformer", legendItem0.getToolTipText());
      assertFalse(legendItem0.isShapeVisible());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("transformer", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeFilled());
      assertEquals(7.0, line2D_Double0.x2, 0.01);
      assertEquals((-7.0), line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AttributedString attributedString0 = new AttributedString("");
      assertNotNull(attributedString0);
      
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Rectangle rectangle0 = polygon0.getBounds();
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertNotNull(defaultPolarItemRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultPolarItemRenderer0.lookupSeriesStroke((-1));
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      LegendItem legendItem0 = new LegendItem(attributedString0, "", (String) null, "", rectangle0, basicStroke0, defaultPolarItemRenderer0.DEFAULT_PAINT);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertFalse(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("", legendItem0.getURLText());
      assertEquals("", legendItem0.getDescription());
      assertFalse(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("", legendItem0.getLabel());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertNull(legendItem0.getToolTipText());
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertNotNull(legendItem0);
      
      boolean boolean0 = legendItem0.isShapeFilled();
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertFalse(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("", legendItem0.getURLText());
      assertEquals("", legendItem0.getDescription());
      assertFalse(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("", legendItem0.getLabel());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertNull(legendItem0.getToolTipText());
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AttributedString attributedString0 = new AttributedString("DSw0");
      assertNotNull(attributedString0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertNotNull(defaultPolarItemRenderer0);
      
      Line2D.Double line2D_Double0 = (Line2D.Double)defaultPolarItemRenderer0.getLegendLine();
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(7.0, line2D_Double0.x2, 0.01);
      assertEquals((-7.0), line2D_Double0.x1, 0.01);
      assertNotNull(line2D_Double0);
      
      LegendItem legendItem0 = new LegendItem(attributedString0, "DSw0", "stroke", "DSw0", true, line2D_Double0, true, defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_PAINT, false, defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_PAINT, defaultPolarItemRenderer0.DEFAULT_OUTLINE_STROKE, true, line2D_Double0, defaultPolarItemRenderer0.DEFAULT_OUTLINE_STROKE, defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("DSw0", legendItem0.getDescription());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertTrue(legendItem0.isLineVisible());
      assertEquals("DSw0", legendItem0.getLabel());
      assertEquals("stroke", legendItem0.getToolTipText());
      assertEquals("DSw0", legendItem0.getURLText());
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(7.0, line2D_Double0.x2, 0.01);
      assertEquals((-7.0), line2D_Double0.x1, 0.01);
      assertNotNull(legendItem0);
      
      boolean boolean0 = legendItem0.isLineVisible();
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("DSw0", legendItem0.getDescription());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertTrue(legendItem0.isLineVisible());
      assertEquals("DSw0", legendItem0.getLabel());
      assertEquals("stroke", legendItem0.getToolTipText());
      assertEquals("DSw0", legendItem0.getURLText());
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(7.0, line2D_Double0.x2, 0.01);
      assertEquals((-7.0), line2D_Double0.x1, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("\"$!oX6MyCT |");
      assertNull(legendItem0.getURLText());
      assertEquals("\"$!oX6MyCT |", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertNull(legendItem0.getDescription());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertNull(legendItem0.getToolTipText());
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertNotNull(legendItem0);
      
      String string0 = legendItem0.getURLText();
      assertNull(legendItem0.getURLText());
      assertEquals("\"$!oX6MyCT |", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertNull(legendItem0.getDescription());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertNull(legendItem0.getToolTipText());
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AttributedString attributedString0 = new AttributedString("");
      assertNotNull(attributedString0);
      
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Rectangle rectangle0 = polygon0.getBounds();
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(defaultPolarItemRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultPolarItemRenderer0.lookupSeriesStroke((-1));
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
      
      LegendItem legendItem0 = new LegendItem(attributedString0, "", (String) null, "", rectangle0, basicStroke0, defaultPolarItemRenderer0.DEFAULT_PAINT);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isShapeFilled());
      assertEquals("", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertNull(legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertFalse(legendItem0.isShapeVisible());
      assertEquals("", legendItem0.getURLText());
      assertTrue(legendItem0.isLineVisible());
      assertEquals("", legendItem0.getDescription());
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertNotNull(legendItem0);
      
      String string0 = legendItem0.getURLText();
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isShapeFilled());
      assertEquals("", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertNull(legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertFalse(legendItem0.isShapeVisible());
      assertEquals("", legendItem0.getURLText());
      assertTrue(legendItem0.isLineVisible());
      assertEquals("", legendItem0.getDescription());
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Color color0 = (Color)AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("", color0);
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertFalse(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertNull(legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertNull(legendItem0.getURLText());
      assertNull(legendItem0.getDescription());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertNotNull(legendItem0);
      
      String string0 = legendItem0.getToolTipText();
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertFalse(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertNull(legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertNull(legendItem0.getURLText());
      assertNull(legendItem0.getDescription());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(defaultPolarItemRenderer0);
      
      LegendItem legendItem0 = new LegendItem("stroke", "stroke", "B:T6vXbOI6(eCQpgE$", "stroke", (Shape) null, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT, defaultPolarItemRenderer0.DEFAULT_STROKE, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(legendItem0.isShapeVisible());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("B:T6vXbOI6(eCQpgE$", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("stroke", legendItem0.getDescription());
      assertEquals("stroke", legendItem0.getURLText());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("stroke", legendItem0.getLabel());
      assertNotNull(legendItem0);
      
      String string0 = legendItem0.getToolTipText();
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(legendItem0.isShapeVisible());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("B:T6vXbOI6(eCQpgE$", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("stroke", legendItem0.getDescription());
      assertEquals("stroke", legendItem0.getURLText());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("stroke", legendItem0.getLabel());
      assertEquals("B:T6vXbOI6(eCQpgE$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Color color0 = (Color)AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("", color0);
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals("", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertNull(legendItem0.getToolTipText());
      assertFalse(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertNull(legendItem0.getDescription());
      assertNull(legendItem0.getURLText());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertNotNull(legendItem0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)legendItem0.getShape();
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals("", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertNull(legendItem0.getToolTipText());
      assertFalse(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertNull(legendItem0.getDescription());
      assertNull(legendItem0.getURLText());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals(4.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-4.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(4.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-4.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(8.0, rectangle2D_Double0.height, 0.01);
      assertEquals(8.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-4.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-4.0), rectangle2D_Double0.x, 0.01);
      assertNotNull(rectangle2D_Double0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertNotNull(defaultPolarItemRenderer0);
      
      LegendItem legendItem0 = new LegendItem("stroke", "stroke", "B:T6vXbOI6(eCQpgE$", "stroke", (Shape) null, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT, defaultPolarItemRenderer0.DEFAULT_STROKE, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals("B:T6vXbOI6(eCQpgE$", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("stroke", legendItem0.getURLText());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("stroke", legendItem0.getDescription());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("stroke", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertNotNull(legendItem0);
      
      legendItem0.setSeriesIndex(641);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals("B:T6vXbOI6(eCQpgE$", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("stroke", legendItem0.getURLText());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("stroke", legendItem0.getDescription());
      assertEquals(641, legendItem0.getSeriesIndex());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("stroke", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeOutlineVisible());
      
      int int0 = legendItem0.getSeriesIndex();
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals("B:T6vXbOI6(eCQpgE$", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("stroke", legendItem0.getURLText());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("stroke", legendItem0.getDescription());
      assertEquals(641, legendItem0.getSeriesIndex());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("stroke", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals(641, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("GTi/<d~33G");
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("GTi/<d~33G", categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(categoryAxis0);
      
      BasicStroke basicStroke0 = (BasicStroke)categoryAxis0.getTickMarkStroke();
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("GTi/<d~33G", categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(basicStroke0);
      
      LegendItem legendItem0 = new LegendItem("h;J", "", "", "OrsonPDF is not present on the classpath.", (Shape) null, basicStroke0, categoryAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("GTi/<d~33G", categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals("h;J", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("OrsonPDF is not present on the classpath.", legendItem0.getURLText());
      assertFalse(legendItem0.isShapeVisible());
      assertEquals("", legendItem0.getDescription());
      assertEquals("", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(legendItem0);
      
      Shape shape0 = legendItem0.getLine();
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("GTi/<d~33G", categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals("h;J", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("OrsonPDF is not present on the classpath.", legendItem0.getURLText());
      assertFalse(legendItem0.isShapeVisible());
      assertEquals("", legendItem0.getDescription());
      assertEquals("", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNull(shape0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(defaultPolarItemRenderer0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultPolarItemRenderer0.lookupLegendShape(65535);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      LegendItem legendItem0 = new LegendItem("", "", "", "T#M8KZAvS", rectangle2D_Double0, defaultPolarItemRenderer0.DEFAULT_STROKE, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertFalse(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("T#M8KZAvS", legendItem0.getURLText());
      assertEquals("", legendItem0.getDescription());
      assertFalse(legendItem0.isShapeFilled());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertTrue(legendItem0.isLineVisible());
      assertEquals("", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("", legendItem0.getLabel());
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(legendItem0);
      
      legendItem0.setLabelPaint(defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertFalse(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("T#M8KZAvS", legendItem0.getURLText());
      assertEquals("", legendItem0.getDescription());
      assertFalse(legendItem0.isShapeFilled());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertTrue(legendItem0.isLineVisible());
      assertEquals("", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("", legendItem0.getLabel());
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      
      Color color0 = (Color)legendItem0.getLabelPaint();
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertFalse(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("T#M8KZAvS", legendItem0.getURLText());
      assertEquals("", legendItem0.getDescription());
      assertFalse(legendItem0.isShapeFilled());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertTrue(legendItem0.isLineVisible());
      assertEquals("", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("", legendItem0.getLabel());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AttributedString attributedString0 = new AttributedString("");
      assertNotNull(attributedString0);
      
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Rectangle rectangle0 = polygon0.getBounds();
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertNotNull(defaultPolarItemRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultPolarItemRenderer0.lookupSeriesStroke((-1));
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      LegendItem legendItem0 = new LegendItem(attributedString0, "", (String) null, "", rectangle0, basicStroke0, defaultPolarItemRenderer0.DEFAULT_PAINT);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, legendItem0.getDatasetIndex());
      assertNull(legendItem0.getToolTipText());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("", legendItem0.getLabel());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isShapeVisible());
      assertEquals("", legendItem0.getURLText());
      assertEquals("", legendItem0.getDescription());
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertNotNull(legendItem0);
      
      String string0 = legendItem0.getLabel();
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, legendItem0.getDatasetIndex());
      assertNull(legendItem0.getToolTipText());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("", legendItem0.getLabel());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isShapeVisible());
      assertEquals("", legendItem0.getURLText());
      assertEquals("", legendItem0.getDescription());
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Color color0 = (Color)AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("", color0);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertFalse(legendItem0.isLineVisible());
      assertNull(legendItem0.getURLText());
      assertNull(legendItem0.getDescription());
      assertNull(legendItem0.getToolTipText());
      assertEquals("", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isShapeVisible());
      assertNotNull(legendItem0);
      
      String string0 = legendItem0.getDescription();
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertFalse(legendItem0.isLineVisible());
      assertNull(legendItem0.getURLText());
      assertNull(legendItem0.getDescription());
      assertNull(legendItem0.getToolTipText());
      assertEquals("", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isShapeVisible());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(categoryAxis0);
      
      Color color0 = (Color)categoryAxis0.getTickMarkPaint();
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("TG).(PA^~>$", (String) null, "TG).(PA^~>$", "TG).(PA^~>$", rectangle0, color0);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertNull(legendItem0.getDescription());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("TG).(PA^~>$", legendItem0.getLabel());
      assertEquals("TG).(PA^~>$", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("TG).(PA^~>$", legendItem0.getURLText());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(legendItem0);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      assertTrue(defaultValueDataset0.getNotify());
      assertNotNull(defaultValueDataset0);
      
      legendItem0.setDataset(defaultValueDataset0);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertNull(legendItem0.getDescription());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("TG).(PA^~>$", legendItem0.getLabel());
      assertEquals("TG).(PA^~>$", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("TG).(PA^~>$", legendItem0.getURLText());
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      DefaultValueDataset defaultValueDataset1 = (DefaultValueDataset)legendItem0.getDataset();
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertNull(legendItem0.getDescription());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("TG).(PA^~>$", legendItem0.getLabel());
      assertEquals("TG).(PA^~>$", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("TG).(PA^~>$", legendItem0.getURLText());
      assertTrue(defaultValueDataset1.getNotify());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(defaultValueDataset1);
      assertSame(defaultValueDataset1, defaultValueDataset0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertNotNull(defaultPolarItemRenderer0);
      
      Line2D.Double line2D_Double0 = (Line2D.Double)defaultPolarItemRenderer0.getLegendLine();
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(7.0, line2D_Double0.x2, 0.01);
      assertEquals((-7.0), line2D_Double0.x1, 0.01);
      assertNotNull(line2D_Double0);
      
      LegendItem legendItem0 = new LegendItem("transformer", "(!kvv,q[Pq4h=4", "transformer", "(!kvv,q[Pq4h=4", false, line2D_Double0, false, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT, true, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT, defaultPolarItemRenderer0.DEFAULT_OUTLINE_STROKE, false, line2D_Double0, defaultPolarItemRenderer0.DEFAULT_OUTLINE_STROKE, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertEquals("(!kvv,q[Pq4h=4", legendItem0.getURLText());
      assertFalse(legendItem0.isLineVisible());
      assertFalse(legendItem0.isShapeFilled());
      assertEquals("(!kvv,q[Pq4h=4", legendItem0.getDescription());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals("transformer", legendItem0.getLabel());
      assertEquals("transformer", legendItem0.getToolTipText());
      assertFalse(legendItem0.isShapeVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(7.0, line2D_Double0.x2, 0.01);
      assertEquals((-7.0), line2D_Double0.x1, 0.01);
      assertNotNull(legendItem0);
      
      AttributedString attributedString0 = legendItem0.getAttributedLabel();
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertEquals("(!kvv,q[Pq4h=4", legendItem0.getURLText());
      assertFalse(legendItem0.isLineVisible());
      assertFalse(legendItem0.isShapeFilled());
      assertEquals("(!kvv,q[Pq4h=4", legendItem0.getDescription());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals("transformer", legendItem0.getLabel());
      assertEquals("transformer", legendItem0.getToolTipText());
      assertFalse(legendItem0.isShapeVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(7.0, line2D_Double0.x2, 0.01);
      assertEquals((-7.0), line2D_Double0.x1, 0.01);
      assertNull(attributedString0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertNotNull(defaultPolarItemRenderer0);
      
      LegendItem legendItem0 = new LegendItem("stroke", "stroke", "B:T6vXbOI6(eCQpgE$", "stroke", (Shape) null, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT, defaultPolarItemRenderer0.DEFAULT_STROKE, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals("B:T6vXbOI6(eCQpgE$", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("stroke", legendItem0.getURLText());
      assertEquals("stroke", legendItem0.getDescription());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("stroke", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertNotNull(legendItem0);
      
      // Undeclared exception!
      try { 
        legendItem0.setShape((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AttributedString attributedString0 = new AttributedString("DSw0");
      assertNotNull(attributedString0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertNotNull(defaultPolarItemRenderer0);
      
      Line2D.Double line2D_Double0 = (Line2D.Double)defaultPolarItemRenderer0.getLegendLine();
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(7.0, line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals((-7.0), line2D_Double0.x1, 0.01);
      assertNotNull(line2D_Double0);
      
      LegendItem legendItem0 = new LegendItem(attributedString0, "DSw0", "stroke", "DSw0", true, line2D_Double0, true, defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_PAINT, false, defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_PAINT, defaultPolarItemRenderer0.DEFAULT_OUTLINE_STROKE, true, line2D_Double0, defaultPolarItemRenderer0.DEFAULT_OUTLINE_STROKE, defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals("DSw0", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("stroke", legendItem0.getToolTipText());
      assertEquals("DSw0", legendItem0.getDescription());
      assertEquals("DSw0", legendItem0.getURLText());
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(7.0, line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals((-7.0), line2D_Double0.x1, 0.01);
      assertNotNull(legendItem0);
      
      // Undeclared exception!
      try { 
        legendItem0.setFillPaintTransformer((GradientPaintTransformer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'transformer' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("R(T\u0002~M1{");
      assertEquals(0, legendItem0.getSeriesIndex());
      assertTrue(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertNull(legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertNull(legendItem0.getURLText());
      assertEquals("R(T\u0002~M1{", legendItem0.getLabel());
      assertNull(legendItem0.getDescription());
      assertNotNull(legendItem0);
      
      // Undeclared exception!
      try { 
        legendItem0.setFillPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(categoryAxis0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(defaultPolarItemRenderer0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultPolarItemRenderer0.getDefaultShape();
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      AreaRenderer areaRenderer0 = new AreaRenderer();
      assertFalse(areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, areaRenderer0.getDefaultEntityRadius());
      assertTrue(areaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(areaRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(areaRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertTrue(areaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(areaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, areaRenderer0.getRowCount());
      assertFalse(areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(AreaRendererEndType.TAPER, areaRenderer0.getEndType());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, areaRenderer0.getPassCount());
      assertTrue(areaRenderer0.getDefaultCreateEntities());
      assertTrue(areaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(areaRenderer0.getDefaultSeriesVisible());
      assertNotNull(areaRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)areaRenderer0.getItemOutlineStroke(11, (-3066));
      assertFalse(areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, areaRenderer0.getDefaultEntityRadius());
      assertTrue(areaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(areaRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(areaRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertTrue(areaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(areaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, areaRenderer0.getRowCount());
      assertFalse(areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(AreaRendererEndType.TAPER, areaRenderer0.getEndType());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, areaRenderer0.getPassCount());
      assertTrue(areaRenderer0.getDefaultCreateEntities());
      assertTrue(areaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(areaRenderer0.getDefaultSeriesVisible());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem((AttributedString) null, "5>N@G", "", "stroke", true, rectangle2D_Double0, true, defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_PAINT, false, categoryAxis0.DEFAULT_AXIS_LABEL_PAINT, categoryAxis0.DEFAULT_AXIS_LINE_STROKE, true, defaultPolarItemRenderer0.DEFAULT_SHAPE, basicStroke0, defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Rectangle rectangle0 = polygon0.getBounds();
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      assertEquals(128, systemColor0.getBlue());
      assertEquals(128, systemColor0.getGreen());
      assertEquals((-8355712), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(128, systemColor0.getRed());
      assertNotNull(systemColor0);
      
      AreaRenderer areaRenderer0 = new AreaRenderer();
      assertTrue(areaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(areaRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertFalse(areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(areaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(areaRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1, areaRenderer0.getPassCount());
      assertEquals(3, areaRenderer0.getDefaultEntityRadius());
      assertFalse(areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(areaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(areaRenderer0.getDefaultCreateEntities());
      assertEquals(AreaRendererEndType.TAPER, areaRenderer0.getEndType());
      assertTrue(areaRenderer0.getDefaultSeriesVisible());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(areaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, areaRenderer0.getRowCount());
      assertNotNull(areaRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)areaRenderer0.getDefaultOutlineStroke();
      assertTrue(areaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(areaRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertFalse(areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(areaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(areaRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1, areaRenderer0.getPassCount());
      assertEquals(3, areaRenderer0.getDefaultEntityRadius());
      assertFalse(areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(areaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(areaRenderer0.getDefaultCreateEntities());
      assertEquals(AreaRendererEndType.TAPER, areaRenderer0.getEndType());
      assertTrue(areaRenderer0.getDefaultSeriesVisible());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(areaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, areaRenderer0.getRowCount());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertNotNull(basicStroke0);
      
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem((AttributedString) null, "a#{=0\"6.lm6IqPb=#", "a#{=0\"6.lm6IqPb=#", "a#{=0\"6.lm6IqPb=#", rectangle0, systemColor0, basicStroke0, areaRenderer0.DEFAULT_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("0.###");
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals("0.###", categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(categoryAxis0);
      
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Rectangle rectangle0 = polygon0.getBounds();
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertNotNull(rectangle0);
      
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem((AttributedString) null, "0.###", "line", "Po}!C_J}h2pqZyt", rectangle0, categoryAxis0.DEFAULT_AXIS_LINE_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Rectangle rectangle0 = (Rectangle)polygon0.getBounds2D();
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem("|HZ?<j*;Wed", "|HZ?<j*;Wed", "lineStroke", "lineStroke", true, rectangle0, true, (Paint) null, true, (Paint) null, (Stroke) null, true, rectangle0, (Stroke) null, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'fillPaint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Rectangle rectangle0 = polygon0.getBounds();
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertNotNull(rectangle0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertNotNull(defaultPolarItemRenderer0);
      
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem("*=xnaqw,z+~1W", "*=xnaqw,z+~1W", "p4,7;$6d%U~'S\"/\"Py'", "=blSaQ7J:Q~]r7hI'o#", rectangle0, (Stroke) null, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'lineStroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      assertTrue(areaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, areaRenderer0.getRowCount());
      assertTrue(areaRenderer0.getDefaultSeriesVisible());
      assertTrue(areaRenderer0.getDefaultCreateEntities());
      assertEquals(3, areaRenderer0.getDefaultEntityRadius());
      assertTrue(areaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(areaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(areaRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(areaRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertEquals(1, areaRenderer0.getPassCount());
      assertTrue(areaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(AreaRendererEndType.TAPER, areaRenderer0.getEndType());
      assertNotNull(areaRenderer0);
      
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem("linePaint", "linePaint", "linePaint", "linePaint", (Shape) null, (Paint) null, (Stroke) null, areaRenderer0.DEFAULT_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'fillPaint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertNotNull(defaultPolarItemRenderer0);
      
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem((String) null, (String) null, (String) null, (String) null, (Shape) null, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem("Ed'nzc<I!dzD", (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'fillPaint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AttributedString attributedString0 = new AttributedString("");
      assertNotNull(attributedString0);
      
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Rectangle rectangle0 = polygon0.getBounds();
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertNotNull(rectangle0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(defaultPolarItemRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultPolarItemRenderer0.lookupSeriesStroke((-1));
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertNotNull(basicStroke0);
      
      LegendItem legendItem0 = new LegendItem(attributedString0, "", (String) null, "", rectangle0, basicStroke0, defaultPolarItemRenderer0.DEFAULT_PAINT);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertNull(legendItem0.getToolTipText());
      assertFalse(legendItem0.isShapeFilled());
      assertEquals("", legendItem0.getURLText());
      assertFalse(legendItem0.isShapeVisible());
      assertEquals("", legendItem0.getDescription());
      assertEquals("", legendItem0.getLabel());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertNotNull(legendItem0);
      
      String string0 = legendItem0.getDescription();
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertNull(legendItem0.getToolTipText());
      assertFalse(legendItem0.isShapeFilled());
      assertEquals("", legendItem0.getURLText());
      assertFalse(legendItem0.isShapeVisible());
      assertEquals("", legendItem0.getDescription());
      assertEquals("", legendItem0.getLabel());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(defaultPolarItemRenderer0);
      
      LegendItem legendItem0 = new LegendItem("label", "", "label", "label", (Shape) null, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(legendItem0.isLineVisible());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("", legendItem0.getDescription());
      assertEquals("label", legendItem0.getURLText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals("label", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("label", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertNotNull(legendItem0);
      
      LegendItem legendItem1 = new LegendItem("", "label", "label", "", (Shape) null, defaultPolarItemRenderer0.DEFAULT_PAINT, defaultPolarItemRenderer0.DEFAULT_STROKE, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, legendItem1.getDatasetIndex());
      assertEquals("label", legendItem1.getDescription());
      assertFalse(legendItem1.isLineVisible());
      assertTrue(legendItem1.isShapeFilled());
      assertEquals("", legendItem1.getLabel());
      assertEquals("label", legendItem1.getToolTipText());
      assertTrue(legendItem1.isShapeVisible());
      assertTrue(legendItem1.isShapeOutlineVisible());
      assertEquals(0, legendItem1.getSeriesIndex());
      assertEquals("", legendItem1.getURLText());
      assertFalse(legendItem1.equals((Object)legendItem0));
      assertNotNull(legendItem1);
      
      boolean boolean0 = legendItem0.equals(legendItem1);
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(legendItem0.isLineVisible());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("", legendItem0.getDescription());
      assertEquals("label", legendItem0.getURLText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals("label", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("label", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals(0, legendItem1.getDatasetIndex());
      assertEquals("label", legendItem1.getDescription());
      assertFalse(legendItem1.isLineVisible());
      assertTrue(legendItem1.isShapeFilled());
      assertEquals("", legendItem1.getLabel());
      assertEquals("label", legendItem1.getToolTipText());
      assertTrue(legendItem1.isShapeVisible());
      assertTrue(legendItem1.isShapeOutlineVisible());
      assertEquals(0, legendItem1.getSeriesIndex());
      assertEquals("", legendItem1.getURLText());
      assertFalse(boolean0);
      assertFalse(legendItem0.equals((Object)legendItem1));
      assertFalse(legendItem1.equals((Object)legendItem0));
      assertNotSame(legendItem0, legendItem1);
      assertNotSame(legendItem1, legendItem0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Font font0 = Font.decode("");
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("", font0.getName());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertNotNull(font0);
      
      AffineTransform affineTransform0 = mock(AffineTransform.class, new ViolatedAssumptionAnswer());
      doReturn((AffineTransform) null, (AffineTransform) null).when(affineTransform0).createInverse();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getScaleX();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getScaleY();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getShearX();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getShearY();
      doReturn(0.0).when(affineTransform0).getTranslateX();
      doReturn(0.0).when(affineTransform0).getTranslateY();
      doReturn(0).when(affineTransform0).getType();
      doReturn(false, false, false, false).when(affineTransform0).isIdentity();
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      doReturn(affineTransform0).when(fontRenderContext0).getTransform();
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)font0.getStringBounds("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", fontRenderContext0);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("", font0.getName());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals((-4.154296875), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-11.138671875), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(203.4287109375, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(406.857421875, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(2.830078125, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(406.85742F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-11.138672F), rectangle2D_Float0.y, 0.01F);
      assertEquals(13.96875F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      Color color0 = Color.green;
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("", "3hv", "<^", "shape", rectangle2D_Float0, color0);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("", font0.getName());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals((-4.154296875), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-11.138671875), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(203.4287109375, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(406.857421875, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(2.830078125, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("shape", legendItem0.getURLText());
      assertEquals("<^", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertTrue(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("3hv", legendItem0.getDescription());
      assertEquals("", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals(406.85742F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-11.138672F), rectangle2D_Float0.y, 0.01F);
      assertEquals(13.96875F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertNotNull(legendItem0);
      
      LegendItem legendItem1 = (LegendItem)legendItem0.clone();
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("", font0.getName());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals((-4.154296875), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-11.138671875), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(203.4287109375, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(406.857421875, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(2.830078125, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("shape", legendItem0.getURLText());
      assertEquals("<^", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertTrue(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("3hv", legendItem0.getDescription());
      assertEquals("", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals("", legendItem1.getLabel());
      assertTrue(legendItem1.isShapeVisible());
      assertTrue(legendItem1.isShapeFilled());
      assertEquals("3hv", legendItem1.getDescription());
      assertEquals(0, legendItem1.getSeriesIndex());
      assertEquals("shape", legendItem1.getURLText());
      assertEquals(0, legendItem1.getDatasetIndex());
      assertFalse(legendItem1.isShapeOutlineVisible());
      assertEquals("<^", legendItem1.getToolTipText());
      assertFalse(legendItem1.isLineVisible());
      assertEquals(406.85742F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-11.138672F), rectangle2D_Float0.y, 0.01F);
      assertEquals(13.96875F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertTrue(legendItem1.equals((Object)legendItem0));
      assertNotNull(legendItem1);
      assertNotSame(legendItem0, legendItem1);
      assertNotSame(legendItem1, legendItem0);
      
      boolean boolean0 = legendItem0.equals(legendItem1);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("", font0.getName());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals((-4.154296875), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-11.138671875), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(203.4287109375, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(406.857421875, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(2.830078125, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("shape", legendItem0.getURLText());
      assertEquals("<^", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertTrue(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("3hv", legendItem0.getDescription());
      assertEquals("", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals("", legendItem1.getLabel());
      assertTrue(legendItem1.isShapeVisible());
      assertTrue(legendItem1.isShapeFilled());
      assertEquals("3hv", legendItem1.getDescription());
      assertEquals(0, legendItem1.getSeriesIndex());
      assertEquals("shape", legendItem1.getURLText());
      assertEquals(0, legendItem1.getDatasetIndex());
      assertFalse(legendItem1.isShapeOutlineVisible());
      assertEquals("<^", legendItem1.getToolTipText());
      assertFalse(legendItem1.isLineVisible());
      assertEquals(406.85742F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-11.138672F), rectangle2D_Float0.y, 0.01F);
      assertEquals(13.96875F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertTrue(boolean0);
      assertTrue(legendItem0.equals((Object)legendItem1));
      assertTrue(legendItem1.equals((Object)legendItem0));
      assertNotSame(legendItem0, legendItem1);
      assertNotSame(legendItem1, legendItem0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Font font0 = Font.decode("");
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals("", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertNotNull(font0);
      
      AffineTransform affineTransform0 = mock(AffineTransform.class, new ViolatedAssumptionAnswer());
      doReturn((AffineTransform) null, (AffineTransform) null).when(affineTransform0).createInverse();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getScaleX();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getScaleY();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getShearX();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getShearY();
      doReturn(0.0).when(affineTransform0).getTranslateX();
      doReturn(0.0).when(affineTransform0).getTranslateY();
      doReturn(0).when(affineTransform0).getType();
      doReturn(false, false, false, false).when(affineTransform0).isIdentity();
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      doReturn(affineTransform0).when(fontRenderContext0).getTransform();
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)font0.getStringBounds("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", fontRenderContext0);
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals("", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals((-11.138671875), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-4.154296875), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(203.4287109375, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(406.857421875, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(2.830078125, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(13.96875F, rectangle2D_Float0.height, 0.01F);
      assertEquals((-11.138672F), rectangle2D_Float0.y, 0.01F);
      assertEquals(406.85742F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      Color color0 = Color.green;
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("", "3hv", "<^", "shape", rectangle2D_Float0, color0);
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals("", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals((-11.138671875), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-4.154296875), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(203.4287109375, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(406.857421875, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(2.830078125, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertFalse(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("shape", legendItem0.getURLText());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("<^", legendItem0.getToolTipText());
      assertEquals("3hv", legendItem0.getDescription());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals("", legendItem0.getLabel());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(13.96875F, rectangle2D_Float0.height, 0.01F);
      assertEquals((-11.138672F), rectangle2D_Float0.y, 0.01F);
      assertEquals(406.85742F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(legendItem0);
      
      boolean boolean0 = legendItem0.equals(legendItem0);
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals("", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals((-11.138671875), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-4.154296875), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(203.4287109375, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(406.857421875, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(2.830078125, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertFalse(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("shape", legendItem0.getURLText());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("<^", legendItem0.getToolTipText());
      assertEquals("3hv", legendItem0.getDescription());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals("", legendItem0.getLabel());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(13.96875F, rectangle2D_Float0.height, 0.01F);
      assertEquals((-11.138672F), rectangle2D_Float0.y, 0.01F);
      assertEquals(406.85742F, rectangle2D_Float0.width, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertNotNull(rectangle0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(categoryAxis0);
      
      Color color0 = (Color)categoryAxis0.getTickMarkPaint();
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("TG).(PA^~>$", (String) null, "TG).(PA^~>$", "TG).(PA^~>$", rectangle0, color0);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals("TG).(PA^~>$", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals("TG).(PA^~>$", legendItem0.getURLText());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isLineVisible());
      assertNull(legendItem0.getDescription());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getLabel());
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(legendItem0);
      
      boolean boolean0 = legendItem0.equals((Object) null);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals("TG).(PA^~>$", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals("TG).(PA^~>$", legendItem0.getURLText());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isLineVisible());
      assertNull(legendItem0.getDescription());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getLabel());
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Color color0 = Color.LIGHT_GRAY;
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getRed());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getGreen());
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("ELDfR", color0);
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getRed());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getGreen());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("ELDfR", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertNull(legendItem0.getDescription());
      assertNull(legendItem0.getURLText());
      assertNull(legendItem0.getToolTipText());
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertNotNull(legendItem0);
      
      // Undeclared exception!
      try { 
        legendItem0.setOutlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(categoryAxis0);
      
      Color color0 = (Color)categoryAxis0.getTickMarkPaint();
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("TG).(PA^~>$", (String) null, "TG).(PA^~>$", "TG).(PA^~>$", rectangle0, color0);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getURLText());
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("TG).(PA^~>$", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getToolTipText());
      assertNull(legendItem0.getDescription());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(legendItem0);
      
      String string0 = legendItem0.getURLText();
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getURLText());
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("TG).(PA^~>$", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getToolTipText());
      assertNull(legendItem0.getDescription());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals("TG).(PA^~>$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Font font0 = Font.decode("");
      assertEquals("", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals(12, font0.getSize());
      assertFalse(font0.isBold());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertNotNull(font0);
      
      AffineTransform affineTransform0 = mock(AffineTransform.class, new ViolatedAssumptionAnswer());
      doReturn((AffineTransform) null, (AffineTransform) null).when(affineTransform0).createInverse();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getScaleX();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getScaleY();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getShearX();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getShearY();
      doReturn(0.0).when(affineTransform0).getTranslateX();
      doReturn(0.0).when(affineTransform0).getTranslateY();
      doReturn(0).when(affineTransform0).getType();
      doReturn(false, false, false, false).when(affineTransform0).isIdentity();
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      doReturn(affineTransform0).when(fontRenderContext0).getTransform();
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)font0.getStringBounds("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", fontRenderContext0);
      assertEquals("", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals(12, font0.getSize());
      assertFalse(font0.isBold());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertEquals((-4.154296875), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(2.830078125, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(203.4287109375, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(406.857421875, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-11.138671875), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-11.138672F), rectangle2D_Float0.y, 0.01F);
      assertEquals(13.96875F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(406.85742F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      Color color0 = Color.green;
      assertEquals(1, color0.getTransparency());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("", "3hv", "<^", "shape", rectangle2D_Float0, color0);
      assertEquals("", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals(12, font0.getSize());
      assertFalse(font0.isBold());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertEquals((-4.154296875), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(2.830078125, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(203.4287109375, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(406.857421875, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-11.138671875), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals("shape", legendItem0.getURLText());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("3hv", legendItem0.getDescription());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("", legendItem0.getLabel());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("<^", legendItem0.getToolTipText());
      assertEquals((-11.138672F), rectangle2D_Float0.y, 0.01F);
      assertEquals(13.96875F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(406.85742F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(legendItem0);
      
      Font font1 = legendItem0.getLabelFont();
      assertEquals("", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals(12, font0.getSize());
      assertFalse(font0.isBold());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertEquals((-4.154296875), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(2.830078125, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(203.4287109375, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(406.857421875, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-11.138671875), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals("shape", legendItem0.getURLText());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("3hv", legendItem0.getDescription());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("", legendItem0.getLabel());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("<^", legendItem0.getToolTipText());
      assertEquals((-11.138672F), rectangle2D_Float0.y, 0.01F);
      assertEquals(13.96875F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(406.85742F, rectangle2D_Float0.width, 0.01F);
      assertNull(font1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(categoryAxis0);
      
      Color color0 = (Color)categoryAxis0.getTickMarkPaint();
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("TG).(PA^~>$", (String) null, "TG).(PA^~>$", "TG).(PA^~>$", rectangle0, color0);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertNull(legendItem0.getDescription());
      assertEquals("TG).(PA^~>$", legendItem0.getURLText());
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("TG).(PA^~>$", legendItem0.getLabel());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getToolTipText());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(legendItem0);
      
      Dataset dataset0 = legendItem0.getDataset();
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertNull(legendItem0.getDescription());
      assertEquals("TG).(PA^~>$", legendItem0.getURLText());
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("TG).(PA^~>$", legendItem0.getLabel());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getToolTipText());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNull(dataset0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertNotNull(defaultPolarItemRenderer0);
      
      LegendItem legendItem0 = new LegendItem("stroke", "stroke", "B:T6vXbOI6(eCQpgE$", "stroke", (Shape) null, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT, defaultPolarItemRenderer0.DEFAULT_STROKE, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("B:T6vXbOI6(eCQpgE$", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("stroke", legendItem0.getURLText());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("stroke", legendItem0.getDescription());
      assertEquals("stroke", legendItem0.getLabel());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertNotNull(legendItem0);
      
      Shape shape0 = legendItem0.getShape();
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("B:T6vXbOI6(eCQpgE$", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("stroke", legendItem0.getURLText());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("stroke", legendItem0.getDescription());
      assertEquals("stroke", legendItem0.getLabel());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertNull(shape0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      assertTrue(areaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(areaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(areaRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(areaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, areaRenderer0.getRowCount());
      assertTrue(areaRenderer0.getDefaultSeriesVisible());
      assertEquals(1, areaRenderer0.getPassCount());
      assertTrue(areaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(areaRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertTrue(areaRenderer0.getDefaultCreateEntities());
      assertEquals(AreaRendererEndType.TAPER, areaRenderer0.getEndType());
      assertEquals(3, areaRenderer0.getDefaultEntityRadius());
      assertNotNull(areaRenderer0);
      
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem((AttributedString) null, "", "", "", areaRenderer0.DEFAULT_SHAPE, areaRenderer0.DEFAULT_OUTLINE_STROKE, areaRenderer0.DEFAULT_VALUE_LABEL_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertNotNull(defaultPolarItemRenderer0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultPolarItemRenderer0.lookupLegendShape(2282);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      LegendItem legendItem0 = new LegendItem("", "", "", "", rectangle2D_Double0, defaultPolarItemRenderer0.DEFAULT_OUTLINE_STROKE, defaultPolarItemRenderer0.DEFAULT_PAINT);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals("", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isLineVisible());
      assertEquals("", legendItem0.getDescription());
      assertFalse(legendItem0.isShapeVisible());
      assertEquals("", legendItem0.getURLText());
      assertFalse(legendItem0.isShapeFilled());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertNotNull(legendItem0);
      
      legendItem0.setDescription("G=4myD GAA+FCdj");
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals("", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isLineVisible());
      assertFalse(legendItem0.isShapeVisible());
      assertEquals("", legendItem0.getURLText());
      assertFalse(legendItem0.isShapeFilled());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("G=4myD GAA+FCdj", legendItem0.getDescription());
      assertEquals("", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertNotNull(defaultPolarItemRenderer0);
      
      LegendItem legendItem0 = new LegendItem("et2i-gs.a/]", "c&dPBw1ebGfF0w", "c&dPBw1ebGfF0w", "et2i-gs.a/]", (Shape) null, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT, defaultPolarItemRenderer0.DEFAULT_STROKE, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertEquals("c&dPBw1ebGfF0w", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeVisible());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals("et2i-gs.a/]", legendItem0.getURLText());
      assertEquals("c&dPBw1ebGfF0w", legendItem0.getDescription());
      assertEquals("et2i-gs.a/]", legendItem0.getLabel());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertNotNull(legendItem0);
      
      legendItem0.setShape(defaultPolarItemRenderer0.DEFAULT_SHAPE);
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertEquals("c&dPBw1ebGfF0w", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeVisible());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals("et2i-gs.a/]", legendItem0.getURLText());
      assertEquals("c&dPBw1ebGfF0w", legendItem0.getDescription());
      assertEquals("et2i-gs.a/]", legendItem0.getLabel());
      assertEquals(0, legendItem0.getSeriesIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Font font0 = Font.decode("");
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertEquals("", font0.getName());
      assertFalse(font0.isTransformed());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertNotNull(font0);
      
      AffineTransform affineTransform0 = mock(AffineTransform.class, new ViolatedAssumptionAnswer());
      doReturn((AffineTransform) null, (AffineTransform) null).when(affineTransform0).createInverse();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getScaleX();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getScaleY();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getShearX();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getShearY();
      doReturn(0.0).when(affineTransform0).getTranslateX();
      doReturn(0.0).when(affineTransform0).getTranslateY();
      doReturn(0).when(affineTransform0).getType();
      doReturn(false, false, false, false).when(affineTransform0).isIdentity();
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      doReturn(affineTransform0).when(fontRenderContext0).getTransform();
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)font0.getStringBounds("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", fontRenderContext0);
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertEquals("", font0.getName());
      assertFalse(font0.isTransformed());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(203.4287109375, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2.830078125, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(406.857421875, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-4.154296875), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-11.138671875), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(406.85742F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-11.138672F), rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(13.96875F, rectangle2D_Float0.height, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      Color color0 = Color.green;
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16711936), color0.getRGB());
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("", "3hv", "<^", "shape", rectangle2D_Float0, color0);
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertEquals("", font0.getName());
      assertFalse(font0.isTransformed());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(203.4287109375, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2.830078125, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(406.857421875, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-4.154296875), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-11.138671875), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16711936), color0.getRGB());
      assertEquals("", legendItem0.getLabel());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("3hv", legendItem0.getDescription());
      assertTrue(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("<^", legendItem0.getToolTipText());
      assertEquals("shape", legendItem0.getURLText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals(406.85742F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-11.138672F), rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(13.96875F, rectangle2D_Float0.height, 0.01F);
      assertNotNull(legendItem0);
      
      Comparable comparable0 = legendItem0.getSeriesKey();
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertEquals("", font0.getName());
      assertFalse(font0.isTransformed());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(203.4287109375, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2.830078125, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(406.857421875, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-4.154296875), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-11.138671875), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16711936), color0.getRGB());
      assertEquals("", legendItem0.getLabel());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("3hv", legendItem0.getDescription());
      assertTrue(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("<^", legendItem0.getToolTipText());
      assertEquals("shape", legendItem0.getURLText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals(406.85742F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-11.138672F), rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(13.96875F, rectangle2D_Float0.height, 0.01F);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertNotNull(defaultPolarItemRenderer0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultPolarItemRenderer0.lookupLegendShape(2282);
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      LegendItem legendItem0 = new LegendItem("", "", "", "", rectangle2D_Double0, defaultPolarItemRenderer0.DEFAULT_OUTLINE_STROKE, defaultPolarItemRenderer0.DEFAULT_PAINT);
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isShapeVisible());
      assertEquals("", legendItem0.getURLText());
      assertEquals("", legendItem0.getDescription());
      assertFalse(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("", legendItem0.getToolTipText());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("", legendItem0.getLabel());
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(legendItem0);
      
      legendItem0.setOutlinePaint(defaultPolarItemRenderer0.DEFAULT_PAINT);
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isShapeVisible());
      assertEquals("", legendItem0.getURLText());
      assertEquals("", legendItem0.getDescription());
      assertFalse(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("", legendItem0.getToolTipText());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("", legendItem0.getLabel());
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Font font0 = Font.decode("");
      assertEquals(0, font0.getStyle());
      assertEquals("", font0.getName());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12, font0.getSize());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertNotNull(font0);
      
      AffineTransform affineTransform0 = mock(AffineTransform.class, new ViolatedAssumptionAnswer());
      doReturn((AffineTransform) null, (AffineTransform) null).when(affineTransform0).createInverse();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getScaleX();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getScaleY();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getShearX();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getShearY();
      doReturn(0.0).when(affineTransform0).getTranslateX();
      doReturn(0.0).when(affineTransform0).getTranslateY();
      doReturn(0).when(affineTransform0).getType();
      doReturn(false, false, false, false).when(affineTransform0).isIdentity();
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      doReturn(affineTransform0).when(fontRenderContext0).getTransform();
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)font0.getStringBounds("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", fontRenderContext0);
      assertEquals(0, font0.getStyle());
      assertEquals("", font0.getName());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12, font0.getSize());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-4.154296875), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-11.138671875), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(2.830078125, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(203.4287109375, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(406.857421875, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(406.85742F, rectangle2D_Float0.width, 0.01F);
      assertEquals(13.96875F, rectangle2D_Float0.height, 0.01F);
      assertEquals((-11.138672F), rectangle2D_Float0.y, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      Color color0 = Color.green;
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("", "3hv", "<^", "shape", rectangle2D_Float0, color0);
      assertEquals(0, font0.getStyle());
      assertEquals("", font0.getName());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12, font0.getSize());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-4.154296875), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-11.138671875), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(2.830078125, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(203.4287109375, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(406.857421875, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertFalse(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("", legendItem0.getLabel());
      assertEquals("<^", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals("3hv", legendItem0.getDescription());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("shape", legendItem0.getURLText());
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(406.85742F, rectangle2D_Float0.width, 0.01F);
      assertEquals(13.96875F, rectangle2D_Float0.height, 0.01F);
      assertEquals((-11.138672F), rectangle2D_Float0.y, 0.01F);
      assertNotNull(legendItem0);
      
      Color color1 = (Color)legendItem0.getFillPaint();
      assertEquals(0, font0.getStyle());
      assertEquals("", font0.getName());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12, font0.getSize());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-4.154296875), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-11.138671875), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(2.830078125, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(203.4287109375, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(406.857421875, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertFalse(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("", legendItem0.getLabel());
      assertEquals("<^", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals("3hv", legendItem0.getDescription());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("shape", legendItem0.getURLText());
      assertEquals(255, color1.getGreen());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getBlue());
      assertEquals((-16711936), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(406.85742F, rectangle2D_Float0.width, 0.01F);
      assertEquals(13.96875F, rectangle2D_Float0.height, 0.01F);
      assertEquals((-11.138672F), rectangle2D_Float0.y, 0.01F);
      assertNotNull(color1);
      assertSame(color0, color1);
      assertSame(color1, color0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertNotNull(rectangle0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertNotNull(categoryAxis0);
      
      Color color0 = (Color)categoryAxis0.getTickMarkPaint();
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("TG).(PA^~>$", (String) null, "TG).(PA^~>$", "TG).(PA^~>$", rectangle0, color0);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getLabel());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getURLText());
      assertEquals("TG).(PA^~>$", legendItem0.getToolTipText());
      assertNull(legendItem0.getDescription());
      assertTrue(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertNotNull(legendItem0);
      
      legendItem0.setFillPaint(categoryAxis0.DEFAULT_TICK_MARK_PAINT);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getLabel());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getURLText());
      assertEquals("TG).(PA^~>$", legendItem0.getToolTipText());
      assertNull(legendItem0.getDescription());
      assertTrue(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isVisible());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(categoryAxis0);
      
      Color color0 = (Color)categoryAxis0.getTickMarkPaint();
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("TG).(PA^~>$", (String) null, "TG).(PA^~>$", "TG).(PA^~>$", rectangle0, color0);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals("TG).(PA^~>$", legendItem0.getLabel());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("TG).(PA^~>$", legendItem0.getURLText());
      assertEquals("TG).(PA^~>$", legendItem0.getToolTipText());
      assertNull(legendItem0.getDescription());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(legendItem0);
      
      Color color1 = (Color)legendItem0.getOutlinePaint();
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals("TG).(PA^~>$", legendItem0.getLabel());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("TG).(PA^~>$", legendItem0.getURLText());
      assertEquals("TG).(PA^~>$", legendItem0.getToolTipText());
      assertNull(legendItem0.getDescription());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals(0, color1.getGreen());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getBlue());
      assertEquals(1, color1.getTransparency());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(color1.equals((Object)color0));
      assertNotNull(color1);
      assertNotSame(color0, color1);
      assertNotSame(color1, color0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AttributedString attributedString0 = new AttributedString("");
      assertNotNull(attributedString0);
      
      Color color0 = Color.lightGray;
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getRed());
      assertEquals(192, color0.getBlue());
      assertEquals(192, color0.getGreen());
      assertEquals((-4144960), color0.getRGB());
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem(attributedString0, "", "", "", (Shape) null, color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getRed());
      assertEquals(192, color0.getBlue());
      assertEquals(192, color0.getGreen());
      assertEquals((-4144960), color0.getRGB());
      assertEquals("", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("", legendItem0.getURLText());
      assertEquals("", legendItem0.getDescription());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("", legendItem0.getToolTipText());
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertNotNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertNotNull(defaultPolarItemRenderer0);
      
      LegendItem legendItem0 = new LegendItem("label", "outlineStroke", "label", "label", (Shape) null, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("label", legendItem0.getURLText());
      assertEquals("outlineStroke", legendItem0.getDescription());
      assertEquals("label", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("label", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertNotNull(legendItem0);
      
      boolean boolean0 = legendItem0.isShapeOutlineVisible();
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("label", legendItem0.getURLText());
      assertEquals("outlineStroke", legendItem0.getDescription());
      assertEquals("label", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("label", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(67, 65535);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(32767.5, rectangle0.getCenterY(), 0.01);
      assertEquals(65535.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(67.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(67.0, rectangle0.getMaxX(), 0.01);
      assertEquals(33.5, rectangle0.getCenterX(), 0.01);
      assertEquals(65535.0, rectangle0.getHeight(), 0.01);
      assertEquals(67, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(65535, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis("eln&Xf");
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("eln&Xf", categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertNotNull(categoryAxis0);
      
      Color color0 = (Color)categoryAxis0.getTickLabelPaint((Comparable) 67);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("eln&Xf", categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("label", "eln&Xf", "eln&Xf", "label", true, rectangle0, true, color0, false, categoryAxis0.DEFAULT_AXIS_LINE_PAINT, categoryAxis0.DEFAULT_AXIS_LINE_STROKE, false, rectangle0, categoryAxis0.DEFAULT_TICK_MARK_STROKE, categoryAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(32767.5, rectangle0.getCenterY(), 0.01);
      assertEquals(65535.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(67.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(67.0, rectangle0.getMaxX(), 0.01);
      assertEquals(33.5, rectangle0.getCenterX(), 0.01);
      assertEquals(65535.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("eln&Xf", categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("label", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("label", legendItem0.getURLText());
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("eln&Xf", legendItem0.getToolTipText());
      assertEquals("eln&Xf", legendItem0.getDescription());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals(67, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(65535, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertNotNull(legendItem0);
      
      int int0 = legendItem0.getSeriesIndex();
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(32767.5, rectangle0.getCenterY(), 0.01);
      assertEquals(65535.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(67.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(67.0, rectangle0.getMaxX(), 0.01);
      assertEquals(33.5, rectangle0.getCenterX(), 0.01);
      assertEquals(65535.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("eln&Xf", categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("label", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("label", legendItem0.getURLText());
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("eln&Xf", legendItem0.getToolTipText());
      assertEquals("eln&Xf", legendItem0.getDescription());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals(67, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(65535, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertTrue(categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(categoryAxis0);
      
      Color color0 = (Color)categoryAxis0.getTickMarkPaint();
      assertTrue(categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("TG).(PA^~>$", (String) null, "TG).(PA^~>$", "TG).(PA^~>$", rectangle0, color0);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertFalse(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getURLText());
      assertNull(legendItem0.getDescription());
      assertEquals("TG).(PA^~>$", legendItem0.getToolTipText());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(legendItem0);
      
      legendItem0.setSeriesKey(true);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertFalse(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getURLText());
      assertNull(legendItem0.getDescription());
      assertEquals("TG).(PA^~>$", legendItem0.getToolTipText());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      Comparable comparable0 = legendItem0.getSeriesKey();
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertFalse(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getURLText());
      assertNull(legendItem0.getDescription());
      assertEquals("TG).(PA^~>$", legendItem0.getToolTipText());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(true, comparable0);
      assertNotNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("#\t0cP6FNI");
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals("#\t0cP6FNI", categoryAxis0.getLabel());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(categoryAxis0);
      
      AttributedString attributedString0 = categoryAxis0.createAttributedLabel("V&");
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals("#\t0cP6FNI", categoryAxis0.getLabel());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(attributedString0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(defaultPolarItemRenderer0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultPolarItemRenderer0.getDefaultShape();
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      LegendItem legendItem0 = new LegendItem(attributedString0, (String) null, "V&", "", rectangle2D_Double0, categoryAxis0.DEFAULT_TICK_LABEL_PAINT, categoryAxis0.DEFAULT_TICK_MARK_STROKE, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals("#\t0cP6FNI", categoryAxis0.getLabel());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("", legendItem0.getURLText());
      assertEquals("V&", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertNull(legendItem0.getDescription());
      assertEquals("V&", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(legendItem0);
      
      AttributedString attributedString1 = legendItem0.getAttributedLabel();
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals("#\t0cP6FNI", categoryAxis0.getLabel());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("", legendItem0.getURLText());
      assertEquals("V&", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertNull(legendItem0.getDescription());
      assertEquals("V&", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(attributedString1);
      assertSame(attributedString0, attributedString1);
      assertSame(attributedString1, attributedString0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("]~w&tl<acxG|FCB_<");
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals("]~w&tl<acxG|FCB_<", categoryAxis0.getLabel());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(categoryAxis0);
      
      AttributedString attributedString0 = categoryAxis0.createAttributedLabel("V&");
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals("]~w&tl<acxG|FCB_<", categoryAxis0.getLabel());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(attributedString0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertNotNull(defaultPolarItemRenderer0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultPolarItemRenderer0.getDefaultShape();
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      LegendItem legendItem0 = new LegendItem(attributedString0, (String) null, "V&", "", rectangle2D_Double0, categoryAxis0.DEFAULT_TICK_LABEL_PAINT, categoryAxis0.DEFAULT_TICK_MARK_STROKE, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals("]~w&tl<acxG|FCB_<", categoryAxis0.getLabel());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals("V&", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals("V&", legendItem0.getLabel());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("", legendItem0.getURLText());
      assertNull(legendItem0.getDescription());
      assertTrue(legendItem0.isShapeVisible());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertNotNull(legendItem0);
      
      boolean boolean0 = legendItem0.isShapeFilled();
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals("]~w&tl<acxG|FCB_<", categoryAxis0.getLabel());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals("V&", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals("V&", legendItem0.getLabel());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("", legendItem0.getURLText());
      assertNull(legendItem0.getDescription());
      assertTrue(legendItem0.isShapeVisible());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(67, 65535);
      assertEquals(67.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(33.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(32767.5, rectangle0.getCenterY(), 0.01);
      assertEquals(65535.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(65535.0, rectangle0.getHeight(), 0.01);
      assertEquals(67.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0, rectangle0.x);
      assertEquals(65535, rectangle0.height);
      assertEquals(67, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis("eln&Xf");
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals("eln&Xf", categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(categoryAxis0);
      
      Color color0 = (Color)categoryAxis0.getTickLabelPaint((Comparable) 67);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals("eln&Xf", categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("label", "eln&Xf", "eln&Xf", "label", true, rectangle0, true, color0, false, categoryAxis0.DEFAULT_AXIS_LINE_PAINT, categoryAxis0.DEFAULT_AXIS_LINE_STROKE, false, rectangle0, categoryAxis0.DEFAULT_TICK_MARK_STROKE, categoryAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertEquals(67.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(33.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(32767.5, rectangle0.getCenterY(), 0.01);
      assertEquals(65535.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(65535.0, rectangle0.getHeight(), 0.01);
      assertEquals(67.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals("eln&Xf", categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("eln&Xf", legendItem0.getDescription());
      assertTrue(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("label", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals("label", legendItem0.getURLText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("eln&Xf", legendItem0.getToolTipText());
      assertEquals(0, rectangle0.x);
      assertEquals(65535, rectangle0.height);
      assertEquals(67, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(legendItem0);
      
      int int0 = legendItem0.getDatasetIndex();
      assertEquals(67.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(33.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(32767.5, rectangle0.getCenterY(), 0.01);
      assertEquals(65535.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(65535.0, rectangle0.getHeight(), 0.01);
      assertEquals(67.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals("eln&Xf", categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("eln&Xf", legendItem0.getDescription());
      assertTrue(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("label", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals("label", legendItem0.getURLText());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("eln&Xf", legendItem0.getToolTipText());
      assertEquals(0, rectangle0.x);
      assertEquals(65535, rectangle0.height);
      assertEquals(67, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("GTi/<d~33G");
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("GTi/<d~33G", categoryAxis0.getLabel());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertNotNull(categoryAxis0);
      
      BasicStroke basicStroke0 = (BasicStroke)categoryAxis0.getTickMarkStroke();
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("GTi/<d~33G", categoryAxis0.getLabel());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertNotNull(basicStroke0);
      
      LegendItem legendItem0 = new LegendItem("h;J", "", "", "OrsonPDF is not present on the classpath.", (Shape) null, basicStroke0, categoryAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("GTi/<d~33G", categoryAxis0.getLabel());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals("OrsonPDF is not present on the classpath.", legendItem0.getURLText());
      assertFalse(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("", legendItem0.getDescription());
      assertFalse(legendItem0.isShapeFilled());
      assertEquals("h;J", legendItem0.getLabel());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("", legendItem0.getToolTipText());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertNotNull(legendItem0);
      
      legendItem0.setShapeVisible(true);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("GTi/<d~33G", categoryAxis0.getLabel());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals("OrsonPDF is not present on the classpath.", legendItem0.getURLText());
      assertTrue(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("", legendItem0.getDescription());
      assertFalse(legendItem0.isShapeFilled());
      assertEquals("h;J", legendItem0.getLabel());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("", legendItem0.getToolTipText());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertNotNull(rectangle0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(categoryAxis0);
      
      Color color0 = (Color)categoryAxis0.getTickMarkPaint();
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("TG).(PA^~>$", (String) null, "TG).(PA^~>$", "TG).(PA^~>$", rectangle0, color0);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertNull(legendItem0.getDescription());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getURLText());
      assertEquals("TG).(PA^~>$", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getLabel());
      assertFalse(legendItem0.isLineVisible());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(legendItem0);
      
      legendItem0.setToolTipText("org.jfree.chart.plot.PiePlot3D");
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertNull(legendItem0.getDescription());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getURLText());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals("org.jfree.chart.plot.PiePlot3D", legendItem0.getToolTipText());
      assertEquals("TG).(PA^~>$", legendItem0.getLabel());
      assertFalse(legendItem0.isLineVisible());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertNotNull(rectangle0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(categoryAxis0);
      
      Color color0 = (Color)categoryAxis0.getTickMarkPaint();
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("TG).(PA^~>$", (String) null, "TG).(PA^~>$", "TG).(PA^~>$", rectangle0, color0);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertNull(legendItem0.getDescription());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getURLText());
      assertEquals("TG).(PA^~>$", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("TG).(PA^~>$", legendItem0.getLabel());
      assertFalse(legendItem0.isLineVisible());
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(legendItem0);
      
      legendItem0.setLineVisible(true);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertNull(legendItem0.getDescription());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("TG).(PA^~>$", legendItem0.getURLText());
      assertEquals("TG).(PA^~>$", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("TG).(PA^~>$", legendItem0.getLabel());
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(67, 65535);
      assertEquals(67.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(32767.5, rectangle0.getCenterY(), 0.01);
      assertEquals(65535.0, rectangle0.getHeight(), 0.01);
      assertEquals(33.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(67.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(65535.0, rectangle0.getMaxY(), 0.01);
      assertEquals(65535, rectangle0.height);
      assertEquals(67, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertNotNull(rectangle0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis("eln&Xf");
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals("eln&Xf", categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(categoryAxis0);
      
      Color color0 = (Color)categoryAxis0.getTickLabelPaint((Comparable) 67);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals("eln&Xf", categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(color0);
      
      LegendItem legendItem0 = new LegendItem("label", "eln&Xf", "eln&Xf", "label", true, rectangle0, true, color0, false, categoryAxis0.DEFAULT_AXIS_LINE_PAINT, categoryAxis0.DEFAULT_AXIS_LINE_STROKE, false, rectangle0, categoryAxis0.DEFAULT_TICK_MARK_STROKE, categoryAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertEquals(67.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(32767.5, rectangle0.getCenterY(), 0.01);
      assertEquals(65535.0, rectangle0.getHeight(), 0.01);
      assertEquals(33.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(67.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(65535.0, rectangle0.getMaxY(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals("eln&Xf", categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals("label", legendItem0.getURLText());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("eln&Xf", legendItem0.getDescription());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("label", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("eln&Xf", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals(65535, rectangle0.height);
      assertEquals(67, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(legendItem0);
      
      BasicStroke basicStroke0 = (BasicStroke)legendItem0.getOutlineStroke();
      assertEquals(67.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(32767.5, rectangle0.getCenterY(), 0.01);
      assertEquals(65535.0, rectangle0.getHeight(), 0.01);
      assertEquals(33.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(67.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(65535.0, rectangle0.getMaxY(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals("eln&Xf", categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals("label", legendItem0.getURLText());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("eln&Xf", legendItem0.getDescription());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("label", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("eln&Xf", legendItem0.getToolTipText());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(65535, rectangle0.height);
      assertEquals(67, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(67, 65535);
      CategoryAxis categoryAxis0 = new CategoryAxis("eln&Xf");
      Paint paint0 = categoryAxis0.getTickLabelPaint((Comparable) 67);
      LegendItem legendItem0 = new LegendItem("label", "eln&Xf", "eln&Xf", "label", true, rectangle0, true, paint0, false, categoryAxis0.DEFAULT_AXIS_LINE_PAINT, categoryAxis0.DEFAULT_AXIS_LINE_STROKE, false, rectangle0, categoryAxis0.DEFAULT_TICK_MARK_STROKE, categoryAxis0.DEFAULT_AXIS_LINE_PAINT);
      String string0 = legendItem0.getLabel();
      assertEquals("eln&Xf", legendItem0.getToolTipText());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("label", legendItem0.getURLText());
      assertTrue(legendItem0.isShapeVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals("label", string0);
      assertEquals("eln&Xf", legendItem0.getDescription());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(67, 65535);
      CategoryAxis categoryAxis0 = new CategoryAxis("eln&Xf");
      Paint paint0 = categoryAxis0.getTickLabelPaint((Comparable) 67);
      LegendItem legendItem0 = new LegendItem("label", "eln&Xf", "eln&Xf", "label", true, rectangle0, true, paint0, false, categoryAxis0.DEFAULT_AXIS_LINE_PAINT, categoryAxis0.DEFAULT_AXIS_LINE_STROKE, false, rectangle0, categoryAxis0.DEFAULT_TICK_MARK_STROKE, categoryAxis0.DEFAULT_AXIS_LINE_PAINT);
      legendItem0.getLabelPaint();
      assertFalse(legendItem0.isLineVisible());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertEquals("label", legendItem0.getLabel());
      assertEquals("eln&Xf", legendItem0.getDescription());
      assertEquals("eln&Xf", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("label", legendItem0.getURLText());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Paint paint0 = categoryAxis0.getTickMarkPaint();
      LegendItem legendItem0 = new LegendItem("TG).(PA^~>$", (String) null, "TG).(PA^~>$", "TG).(PA^~>$", rectangle0, paint0);
      legendItem0.setDatasetIndex(456);
      assertEquals(456, legendItem0.getDatasetIndex());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      Dimension dimension0 = mock(Dimension.class, new ViolatedAssumptionAnswer());
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      Rectangle2D rectangle2D0 = rectangle0.getFrame();
      Color color0 = Color.green;
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Stroke stroke0 = categoryAxis0.getTickMarkStroke();
      LegendItem legendItem0 = new LegendItem("Q1Daw5.|{U", "qByG';1", "", "Q1Daw5.|{U", rectangle2D0, color0, stroke0, categoryAxis0.DEFAULT_AXIS_LINE_PAINT);
      legendItem0.setLinePaint(categoryAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertFalse(legendItem0.isLineVisible());
      assertEquals("Q1Daw5.|{U", legendItem0.getLabel());
      assertEquals("", legendItem0.getToolTipText());
      assertEquals("qByG';1", legendItem0.getDescription());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("Q1Daw5.|{U", legendItem0.getURLText());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Paint paint0 = categoryAxis0.getTickMarkPaint();
      LegendItem legendItem0 = new LegendItem("TG).(PA^~>$", (String) null, "TG).(PA^~>$", "TG).(PA^~>$", rectangle0, paint0);
      legendItem0.setLabelFont(categoryAxis0.DEFAULT_AXIS_LABEL_FONT);
      legendItem0.getLabelFont();
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertFalse(legendItem0.isLineVisible());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Paint paint0 = categoryAxis0.getTickMarkPaint();
      LegendItem legendItem0 = new LegendItem("TG).(PA^~>$", (String) null, "TG).(PA^~>$", "TG).(PA^~>$", rectangle0, paint0);
      GradientPaintTransformer gradientPaintTransformer0 = legendItem0.getFillPaintTransformer();
      legendItem0.setFillPaintTransformer(gradientPaintTransformer0);
      assertFalse(legendItem0.isLineVisible());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isShapeVisible());
      assertTrue(legendItem0.isShapeFilled());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Font font0 = Font.decode("");
      AffineTransform affineTransform0 = mock(AffineTransform.class, new ViolatedAssumptionAnswer());
      doReturn((AffineTransform) null, (AffineTransform) null).when(affineTransform0).createInverse();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getScaleX();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getScaleY();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getShearX();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getShearY();
      doReturn(0.0).when(affineTransform0).getTranslateX();
      doReturn(0.0).when(affineTransform0).getTranslateY();
      doReturn(0).when(affineTransform0).getType();
      doReturn(false, false, false, false).when(affineTransform0).isIdentity();
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      doReturn(affineTransform0).when(fontRenderContext0).getTransform();
      Rectangle2D rectangle2D0 = font0.getStringBounds("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", fontRenderContext0);
      Color color0 = Color.green;
      LegendItem legendItem0 = new LegendItem("", "3hv", "<^", "shape", rectangle2D0, color0);
      legendItem0.getLineStroke();
      assertEquals("", legendItem0.getLabel());
      assertEquals("3hv", legendItem0.getDescription());
      assertEquals("<^", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeVisible());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("shape", legendItem0.getURLText());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Font font0 = Font.decode("");
      AffineTransform affineTransform0 = mock(AffineTransform.class, new ViolatedAssumptionAnswer());
      doReturn((AffineTransform) null, (AffineTransform) null).when(affineTransform0).createInverse();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getScaleX();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getScaleY();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getShearX();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getShearY();
      doReturn(0.0).when(affineTransform0).getTranslateX();
      doReturn(0.0).when(affineTransform0).getTranslateY();
      doReturn(0).when(affineTransform0).getType();
      doReturn(false, false, false, false).when(affineTransform0).isIdentity();
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      doReturn(affineTransform0).when(fontRenderContext0).getTransform();
      Rectangle2D rectangle2D0 = font0.getStringBounds("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", fontRenderContext0);
      Color color0 = Color.green;
      LegendItem legendItem0 = new LegendItem("", "3hv", "<^", "shape", rectangle2D0, color0);
      assertEquals("shape", legendItem0.getURLText());
      
      legendItem0.setURLText("SFk*^Tw>]DQD");
      assertFalse(legendItem0.isLineVisible());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      LegendItem legendItem0 = new LegendItem("label", "outlineStroke", "label", "label", (Shape) null, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
      String string0 = legendItem0.getDescription();
      assertEquals("label", legendItem0.getLabel());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("label", legendItem0.getURLText());
      assertEquals("outlineStroke", string0);
      assertTrue(legendItem0.isShapeFilled());
      assertEquals("label", legendItem0.getToolTipText());
      assertTrue(legendItem0.isShapeVisible());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("g");
      // Undeclared exception!
      try { 
        legendItem0.setLineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      LegendItem legendItem0 = new LegendItem("et2i-gs.a/]", "c&dPBw1ebGfF0w", "c&dPBw1ebGfF0w", "et2i-gs.a/]", (Shape) null, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT, defaultPolarItemRenderer0.DEFAULT_STROKE, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
      // Undeclared exception!
      try { 
        legendItem0.setLine((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'line' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Font font0 = Font.decode("");
      AffineTransform affineTransform0 = mock(AffineTransform.class, new ViolatedAssumptionAnswer());
      doReturn((AffineTransform) null, (AffineTransform) null).when(affineTransform0).createInverse();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getScaleX();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getScaleY();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getShearX();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getShearY();
      doReturn(0.0).when(affineTransform0).getTranslateX();
      doReturn(0.0).when(affineTransform0).getTranslateY();
      doReturn(0).when(affineTransform0).getType();
      doReturn(false, false, false, false).when(affineTransform0).isIdentity();
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      doReturn(affineTransform0).when(fontRenderContext0).getTransform();
      Rectangle2D rectangle2D0 = font0.getStringBounds("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", fontRenderContext0);
      Color color0 = Color.green;
      LegendItem legendItem0 = new LegendItem("", "3hv", "<^", "shape", rectangle2D0, color0);
      legendItem0.getLine();
      assertEquals("", legendItem0.getLabel());
      assertEquals("3hv", legendItem0.getDescription());
      assertTrue(legendItem0.isShapeFilled());
      assertEquals("<^", legendItem0.getToolTipText());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("shape", legendItem0.getURLText());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertTrue(legendItem0.isShapeVisible());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Font font0 = Font.decode("");
      AffineTransform affineTransform0 = mock(AffineTransform.class, new ViolatedAssumptionAnswer());
      doReturn((AffineTransform) null, (AffineTransform) null).when(affineTransform0).createInverse();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getScaleX();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getScaleY();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getShearX();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getShearY();
      doReturn(0.0).when(affineTransform0).getTranslateX();
      doReturn(0.0).when(affineTransform0).getTranslateY();
      doReturn(0).when(affineTransform0).getType();
      doReturn(false, false, false, false).when(affineTransform0).isIdentity();
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      doReturn(affineTransform0).when(fontRenderContext0).getTransform();
      Rectangle2D rectangle2D0 = font0.getStringBounds("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", fontRenderContext0);
      Color color0 = Color.green;
      LegendItem legendItem0 = new LegendItem("", "3hv", "<^", "shape", rectangle2D0, color0);
      boolean boolean0 = legendItem0.isLineVisible();
      assertEquals("", legendItem0.getLabel());
      assertEquals("3hv", legendItem0.getDescription());
      assertTrue(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertFalse(boolean0);
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("shape", legendItem0.getURLText());
      assertEquals("<^", legendItem0.getToolTipText());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Shape shape0 = defaultPolarItemRenderer0.lookupLegendShape(2282);
      LegendItem legendItem0 = new LegendItem("", "", "", "", shape0, defaultPolarItemRenderer0.DEFAULT_OUTLINE_STROKE, defaultPolarItemRenderer0.DEFAULT_PAINT);
      legendItem0.getToolTipText();
      assertTrue(legendItem0.isLineVisible());
      assertFalse(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertFalse(legendItem0.isShapeVisible());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("#\t0cP6FNI");
      AttributedString attributedString0 = categoryAxis0.createAttributedLabel("V&");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Shape shape0 = defaultPolarItemRenderer0.getDefaultShape();
      LegendItem legendItem0 = new LegendItem(attributedString0, (String) null, "V&", "", shape0, categoryAxis0.DEFAULT_TICK_LABEL_PAINT, categoryAxis0.DEFAULT_TICK_MARK_STROKE, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
      Color color0 = (Color)legendItem0.getLinePaint();
      assertFalse(legendItem0.isLineVisible());
      assertTrue(legendItem0.isShapeFilled());
      assertTrue(legendItem0.isShapeVisible());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals(0, color0.getGreen());
      assertEquals("V&", legendItem0.getLabel());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Font font0 = Font.decode("");
      AffineTransform affineTransform0 = mock(AffineTransform.class, new ViolatedAssumptionAnswer());
      doReturn((AffineTransform) null, (AffineTransform) null).when(affineTransform0).createInverse();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getScaleX();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getScaleY();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getShearX();
      doReturn(0.0, 0.0, 0.0, 0.0).when(affineTransform0).getShearY();
      doReturn(0.0).when(affineTransform0).getTranslateX();
      doReturn(0.0).when(affineTransform0).getTranslateY();
      doReturn(0).when(affineTransform0).getType();
      doReturn(false, false, false, false).when(affineTransform0).isIdentity();
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      doReturn(affineTransform0).when(fontRenderContext0).getTransform();
      Rectangle2D rectangle2D0 = font0.getStringBounds("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", fontRenderContext0);
      Color color0 = Color.green;
      LegendItem legendItem0 = new LegendItem("", "3hv", "<^", "shape", rectangle2D0, color0);
      boolean boolean0 = legendItem0.isShapeVisible();
      assertTrue(boolean0);
      assertEquals("", legendItem0.getLabel());
      assertEquals("3hv", legendItem0.getDescription());
      assertTrue(legendItem0.isShapeFilled());
      assertFalse(legendItem0.isShapeOutlineVisible());
      assertFalse(legendItem0.isLineVisible());
      assertEquals("shape", legendItem0.getURLText());
      assertEquals("<^", legendItem0.getToolTipText());
  }
}
