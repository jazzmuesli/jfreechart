/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:59:29 GMT 2019
 */

package org.jfree.chart.labels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.labels.AbstractPieItemLabelGenerator;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractPieItemLabelGenerator_ESTest extends AbstractPieItemLabelGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("", numberFormat0, numberFormat0);
      DecimalFormat decimalFormat0 = (DecimalFormat)abstractPieItemLabelGenerator0.getPercentFormat();
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("", numberFormat0, numberFormat0);
      DecimalFormat decimalFormat0 = (DecimalFormat)abstractPieItemLabelGenerator0.getPercentFormat();
      assertEquals("", decimalFormat0.getNegativeSuffix());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      DecimalFormat decimalFormat0 = new DecimalFormat("Series index out of bounds");
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator(")f`V*A", choiceFormat0, decimalFormat0);
      NumberFormat numberFormat0 = abstractPieItemLabelGenerator0.getPercentFormat();
      assertEquals(Integer.MAX_VALUE, numberFormat0.getMaximumIntegerDigits());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat("EPES");
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("EPES", decimalFormat0, decimalFormat0);
      DecimalFormat decimalFormat1 = (DecimalFormat)abstractPieItemLabelGenerator0.getNumberFormat();
      assertEquals("", decimalFormat1.getPositiveSuffix());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = new Locale("", "", "d\"d<|u@+4(");
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("", numberFormat0, numberFormat0);
      DecimalFormat decimalFormat0 = (DecimalFormat)abstractPieItemLabelGenerator0.getNumberFormat();
      assertEquals("\u00A4 #,##0.00", decimalFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("yk}", numberFormat0, numberFormat0);
      NumberFormat numberFormat1 = abstractPieItemLabelGenerator0.getNumberFormat();
      assertSame(numberFormat1, numberFormat0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("", numberFormat0, numberFormat0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 5494);
      String string0 = abstractPieItemLabelGenerator0.generateSectionLabel(categoryToPieDataset0, "-12,740%");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = new Locale("");
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("EPES", numberFormat0, numberFormat0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      // Undeclared exception!
      try { 
        abstractPieItemLabelGenerator0.generateSectionLabel(defaultKeyedValuesDataset0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: 
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("", choiceFormat0, choiceFormat0);
      abstractPieItemLabelGenerator0.hashCode();
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(categoryDataset0).getRowKeys();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      // Undeclared exception!
      try { 
        abstractPieItemLabelGenerator0.generateSectionLabel(categoryToPieDataset0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("", numberFormat0, numberFormat0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      // Undeclared exception!
      try { 
        abstractPieItemLabelGenerator0.createItemArray(defaultKeyedValuesDataset0, "4*N1rn\"=%:R$5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: 4*N1rn\"=%:R$5
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator(",@EQ@n~o^", numberFormat0, numberFormat0);
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(categoryDataset0).getColumnKeys();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-2237));
      // Undeclared exception!
      try { 
        abstractPieItemLabelGenerator0.createItemArray(categoryToPieDataset0, tableOrder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("f^~", numberFormat0, numberFormat0);
      // Undeclared exception!
      try { 
        abstractPieItemLabelGenerator0.createItemArray((PieDataset) null, "f^~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("~ %'eK?x", numberFormat0, numberFormat0);
      try { 
        abstractPieItemLabelGenerator0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // org.jfree.chart.labels.AbstractPieItemLabelGenerator
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = null;
      try {
        abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("percentFormat", numberFormat0, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'percentFormat' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("{KbraG!/<<hfpUZd", numberFormat0, numberFormat0);
      boolean boolean0 = abstractPieItemLabelGenerator0.equals("{KbraG!/<<hfpUZd");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("f^~", numberFormat0, numberFormat0);
      String string0 = abstractPieItemLabelGenerator0.generateSectionLabel((PieDataset) null, "f^~");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("0oJluaa", numberFormat0, numberFormat0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Integer integer0 = new Integer(1629);
      defaultPieDataset0.setValue((Comparable) "0oJluaa", (Number) integer0);
      String string0 = abstractPieItemLabelGenerator0.generateSectionLabel(defaultPieDataset0, "0oJluaa");
      assertEquals("0oJluaa", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("{KbraG!/<<hfpUZd", numberFormat0, numberFormat0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Integer integer0 = new Integer(0);
      defaultPieDataset0.setValue((Comparable) "{KbraG!/<<hfpUZd", (Number) integer0);
      // Undeclared exception!
      try { 
        abstractPieItemLabelGenerator0.generateSectionLabel(defaultPieDataset0, "{KbraG!/<<hfpUZd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unmatched braces in the pattern.
         //
         verifyException("java.text.MessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.ITALIAN;
      locale0.clone();
      Locale locale1 = Locale.ENGLISH;
      locale0.getDisplayName(locale1);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("", numberFormat0, numberFormat0);
      abstractPieItemLabelGenerator0.getLabelFormat();
      abstractPieItemLabelGenerator0.hashCode();
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(categoryDataset0).getRowKeys();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 32);
      // Undeclared exception!
      try { 
        abstractPieItemLabelGenerator0.createItemArray(categoryToPieDataset0, "Italian");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("f^~", numberFormat0, numberFormat0);
      String string0 = abstractPieItemLabelGenerator0.getLabelFormat();
      assertEquals("f^~", string0);
  }
}
