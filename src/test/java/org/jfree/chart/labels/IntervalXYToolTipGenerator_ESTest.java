/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:48:21 GMT 2019
 */

package org.jfree.chart.labels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.labels.IntervalXYToolTipGenerator;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class IntervalXYToolTipGenerator_ESTest extends IntervalXYToolTipGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(0, 0, locale0);
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("r^j", dateFormat0, dateFormat0);
      XYSeries xYSeries0 = new XYSeries("{0}: ({1} - {2}), ({5} - {6})");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.generateToolTip(xYSeriesCollection0, 0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("{0}: ({1} - {2}), ({5} - {6})");
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.generateToolTip(defaultBoxAndWhiskerXYDataset0, 451, (-1516));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(0, 0);
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("", numberFormat0, dateFormat0);
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.createItemArray((XYDataset) null, 4, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.labels.IntervalXYToolTipGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat("j]/Dm7");
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("j]/Dm7", decimalFormat0, dateFormat0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.createItemArray(matrixSeriesCollection0, 0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator(">E+Q$UlD", numberFormat0, (DateFormat) null);
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.createItemArray(timeSeriesCollection0, 2693, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (2693).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator(")Mla", dateFormat0, dateFormat0);
      MockDate mockDate0 = new MockDate(1600, 1600, (-1), (-1), (-1));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(fixedMillisecond0);
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.createItemArray(simpleHistogramDataset0, (-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = null;
      try {
        intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("", (NumberFormat) null, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xFormat' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(3);
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = null;
      try {
        intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("", (NumberFormat) null, dateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xFormat' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = null;
      try {
        intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("x", dateFormat0, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'yFormat' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = null;
      try {
        intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator((String) null, (DateFormat) null, (DateFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatString' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("P{~u>J", numberFormat0, numberFormat0);
      assertEquals("P{~u>J", intervalXYToolTipGenerator0.getFormatString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      boolean boolean0 = intervalXYToolTipGenerator0.equals(xIntervalSeriesCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator();
      boolean boolean0 = intervalXYToolTipGenerator0.equals(intervalXYToolTipGenerator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("6O3'A", dateFormat0, dateFormat0);
      IntervalXYToolTipGenerator intervalXYToolTipGenerator1 = new IntervalXYToolTipGenerator();
      boolean boolean0 = intervalXYToolTipGenerator0.equals(intervalXYToolTipGenerator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("6O3'A", dateFormat0, dateFormat0);
      Date[] dateArray0 = new Date[1];
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      dateArray0[0] = date0;
      double[] doubleArray0 = new double[5];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("6O3'A", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      String string0 = intervalXYToolTipGenerator0.generateToolTip(defaultHighLowDataset0, 368, 0);
      assertEquals("6O3A", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.generateToolTip(xIntervalSeriesCollection0, 16, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XIntervalSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("Unknown key: ", (DateFormat) null, decimalFormat0);
      assertEquals("Unknown key: ", intervalXYToolTipGenerator0.getFormatString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator();
      IntervalXYToolTipGenerator intervalXYToolTipGenerator1 = (IntervalXYToolTipGenerator)intervalXYToolTipGenerator0.clone();
      assertEquals("null", intervalXYToolTipGenerator1.getNullYString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("6O3'A", dateFormat0, dateFormat0);
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[5];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("6O3'A", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.generateToolTip(defaultHighLowDataset0, 368, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }
}
