/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:59:30 GMT 2019
 */

package org.jfree.chart.labels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.data.DomainOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.XYBarDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCategoryItemLabelGenerator_ESTest extends AbstractCategoryItemLabelGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("B9=", numberFormat0);
      MockDateFormat.getDateInstance(0);
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      standardCategoryToolTipGenerator0.hashCode();
      standardCategoryToolTipGenerator0.equals("B9=");
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-3306.598474);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = (-3306.598474);
      doubleArray2[6] = 1.0;
      doubleArray2[7] = 1.0;
      doubleArray2[8] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = 0.8;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = Double.POSITIVE_INFINITY;
      doubleArray3[5] = (double) 0;
      doubleArray3[6] = 1.0;
      doubleArray3[7] = 1.0;
      doubleArray3[8] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (-2362.43);
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (-3306.598474);
      doubleArray4[5] = (-3306.598474);
      doubleArray4[6] = (double) 0;
      doubleArray4[7] = (-3306.598474);
      doubleArray4[8] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-3306.598474);
      doubleArray5[1] = (-3306.598474);
      doubleArray5[2] = (-3306.598474);
      doubleArray5[3] = (-3306.598474);
      doubleArray5[4] = (-2362.43);
      doubleArray5[5] = 1.0;
      doubleArray5[6] = 0.8;
      doubleArray5[7] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = (-819.4962812);
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 3, 3);
      // Undeclared exception!
      try { 
        standardCategoryToolTipGenerator0.generateToolTip(slidingCategoryDataset0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDateFormat.getTimeInstance();
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      Object object0 = new Object();
      boxAndWhiskerToolTipGenerator0.equals(object0);
      boxAndWhiskerToolTipGenerator0.equals((Object) null);
      Number[][] numberArray0 = new Number[2][9];
      Number[] numberArray1 = new Number[1];
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      int int0 = 0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      // Undeclared exception!
      try { 
        boxAndWhiskerToolTipGenerator0.generateLabelString(slidingCategoryDataset0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      ParsePosition parsePosition0 = new ParsePosition(1);
      int int0 = 193;
      parsePosition0.setErrorIndex(193);
      parsePosition0.setErrorIndex(1);
      numberFormat0.parse("", parsePosition0);
      String string0 = "_z2fkMU'`\\ma#`-)";
      StringBuffer stringBuffer0 = new StringBuffer("_z2fkMU'`ma#`-)");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      stringBuffer0.insert(1, (CharSequence) "_z2fkMU'`ma#`-)");
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1);
      numberFormat0.format((-889L), stringBuffer0, fieldPosition0);
      NumberFormat.getIntegerInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("", numberFormat0, numberFormat0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        standardCategoryItemLabelGenerator0.generateColumnLabel(defaultCategoryDataset0, 3270);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3270, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("0r!;6[&2~2E(", decimalFormat0, decimalFormat0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator1 = (StandardCategoryItemLabelGenerator)standardCategoryItemLabelGenerator0.clone();
      decimalFormat0.setNegativeSuffix("Key not found: ");
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getInstance();
      standardCategoryItemLabelGenerator0.equals(standardCategoryItemLabelGenerator1);
      standardCategoryItemLabelGenerator0.equals(simpleDateFormat0);
      standardCategoryItemLabelGenerator0.hashCode();
      String[] stringArray0 = new String[0];
      Number[][] numberArrayArray0 = null;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, stringArray0, (Number[][]) null, (Number[][]) null);
      int int0 = (-1090);
      // Undeclared exception!
      try { 
        standardCategoryItemLabelGenerator0.generateLabel(defaultIntervalCategoryDataset0, (-1090), (-1090));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat("formatter");
      ParsePosition parsePosition0 = new ParsePosition(1338);
      decimalFormat0.parseObject("%I)", parsePosition0);
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator("formatter", decimalFormat0);
      boxAndWhiskerToolTipGenerator0.getNumberFormat();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("B9=", numberFormat0);
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("nazC{e", dateFormat0);
      standardCategoryToolTipGenerator0.hashCode();
      standardCategoryToolTipGenerator0.equals("B9=");
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-3306.598474);
      doubleArray0[2] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = (-3306.598474);
      doubleArray2[5] = (-3306.598474);
      doubleArray2[6] = 1.0;
      doubleArray2[7] = 1.0;
      doubleArray2[8] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = 0.8;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = 1.0;
      doubleArray3[5] = (double) 0;
      doubleArray3[6] = 1.0;
      doubleArray3[7] = 1.0;
      doubleArray3[8] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (-2362.43);
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (-3306.598474);
      doubleArray4[5] = (-3306.598474);
      doubleArray4[6] = (double) 0;
      doubleArray4[7] = (-3306.598474);
      doubleArray4[8] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-3306.598474);
      doubleArray5[1] = (-3306.598474);
      doubleArray5[2] = (-3306.598474);
      doubleArray5[3] = (-3306.598474);
      doubleArray5[4] = (-2362.43);
      doubleArray5[5] = 1.0;
      doubleArray5[6] = 0.8;
      doubleArray5[7] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = (-819.4962812);
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 3, 3);
      // Undeclared exception!
      try { 
        standardCategoryToolTipGenerator0.generateToolTip(slidingCategoryDataset0, 0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("\"6zxrnEOzd'Q.R", numberFormat0);
      String[] stringArray0 = new String[0];
      Number[][] numberArray0 = new Number[2][7];
      Number[] numberArray1 = new Number[7];
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYTaskDataset0, 1538.0628164702);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYBarDataset0);
      standardCategoryItemLabelGenerator0.getNumberFormat();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("&3A1iG&+#S>TWTSK[A", dateFormat0);
      Object object0 = new Object();
      standardCategoryToolTipGenerator0.equals(object0);
      standardCategoryToolTipGenerator0.equals("&3A1iG&+#S>TWTSK[A");
      standardCategoryToolTipGenerator0.equals((Object) null);
      Number[][] numberArray0 = new Number[2][9];
      Number[] numberArray1 = new Number[1];
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Number number0 = xYTaskDataset0.getStartX(0, 0);
      numberArray1[0] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      numberArray2[0] = number0;
      numberArray2[1] = number0;
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTaskDataset0.datasetChanged(datasetChangeEvent0);
      numberArray2[2] = number0;
      numberArray2[3] = number0;
      numberArray2[4] = number0;
      numberArray2[5] = number0;
      numberArray2[6] = number0;
      numberArray2[7] = number0;
      numberArray2[8] = number0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      standardCategoryToolTipGenerator0.generateLabelString(slidingCategoryDataset0, 0, 0);
      standardCategoryToolTipGenerator0.createItemArray(defaultIntervalCategoryDataset0, 0, 0);
      // Undeclared exception!
      try { 
        standardCategoryToolTipGenerator0.createItemArray(slidingCategoryDataset0, 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("&3A1iG&+#S>TWTSK[A", dateFormat0);
      Object object0 = new Object();
      standardCategoryToolTipGenerator0.equals(object0);
      standardCategoryToolTipGenerator0.equals("&3A1iG&+#S>TWTSK[A");
      standardCategoryToolTipGenerator0.equals((Object) null);
      Number[][] numberArray0 = new Number[2][9];
      Number[] numberArray1 = new Number[1];
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Number number0 = xYTaskDataset0.getStartX(0, 0);
      numberArray1[0] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      numberArray2[0] = number0;
      numberArray2[1] = number0;
      numberArray2[2] = number0;
      numberArray2[3] = number0;
      numberArray2[4] = number0;
      numberArray2[5] = number0;
      numberArray2[6] = number0;
      numberArray2[8] = number0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      standardCategoryToolTipGenerator0.generateLabelString(slidingCategoryDataset0, 0, 0);
      standardCategoryToolTipGenerator0.getLabelFormat();
      // Undeclared exception!
      try { 
        standardCategoryToolTipGenerator0.generateToolTip(slidingCategoryDataset0, 0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("&3A1iG&+#S>TWTSK[A", dateFormat0);
      Object object0 = new Object();
      standardCategoryToolTipGenerator0.equals(object0);
      standardCategoryToolTipGenerator0.equals("&3A1iG&+#S>TWTSK[A");
      standardCategoryToolTipGenerator0.equals((Object) null);
      Number[][] numberArray0 = new Number[2][9];
      Number[] numberArray1 = new Number[1];
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Number number0 = xYTaskDataset0.getStartX(0, 0);
      numberArray1[0] = number0;
      Number[] numberArray2 = new Number[9];
      numberArray2[0] = number0;
      numberArray2[1] = number0;
      numberArray2[2] = number0;
      numberArray2[3] = number0;
      numberArray2[4] = number0;
      numberArray2[5] = number0;
      numberArray2[6] = number0;
      numberArray2[7] = number0;
      numberArray2[8] = number0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      standardCategoryToolTipGenerator0.generateLabelString(slidingCategoryDataset0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      CategoryDataset categoryDataset0 = null;
      int int0 = 7;
      String string0 = BoxAndWhiskerToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT;
      Object object0 = boxAndWhiskerToolTipGenerator0.clone();
      boxAndWhiskerToolTipGenerator0.equals(object0);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      int int1 = 202;
      // Undeclared exception!
      try { 
        intervalCategoryItemLabelGenerator0.generateLabelString((CategoryDataset) null, 7, 202);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      numberFormat0.format(0.5);
      locale0.getDisplayName();
      ParsePosition parsePosition0 = new ParsePosition((-1012));
      parsePosition0.setErrorIndex((-1012));
      numberFormat0.parse("z$e|/cT9[;", parsePosition0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("x", numberFormat0, numberFormat0);
      standardCategoryItemLabelGenerator0.getNumberFormat();
      // Undeclared exception!
      try { 
        standardCategoryItemLabelGenerator0.generateLabel((CategoryDataset) null, (-1), 800);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-1308.4438878045114);
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-1308.4438878045114);
      doubleArray3[2] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (-1308.4438878045114);
      doubleArray5[5] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (-1049.23624);
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = (-1308.4438878045114);
      doubleArray6[7] = 0.0;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      boxAndWhiskerToolTipGenerator0.generateRowLabel(defaultIntervalCategoryDataset0, 0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("{2}", dateFormat0);
      intervalCategoryToolTipGenerator0.equals((Object) null);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator1 = new IntervalCategoryItemLabelGenerator();
      intervalCategoryToolTipGenerator0.equals(intervalCategoryItemLabelGenerator1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "({0}, {1}) = {3} - {4}";
      stringArray0[1] = "({0}, {1}) = {3} - {4}";
      stringArray0[2] = "({0}, {1}) = {2}";
      stringArray0[3] = "({0}, {1}) = {3} - {4}";
      stringArray0[4] = "({0}, {1}) = {3} - {4}";
      Number[][] numberArray0 = new Number[0][5];
      Number[][] numberArray1 = new Number[0][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray1);
      // Undeclared exception!
      try { 
        intervalCategoryToolTipGenerator0.createItemArray(defaultIntervalCategoryDataset0, (-448), (-51));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.clone();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("", numberFormat0);
      standardCategoryItemLabelGenerator0.clone();
      NumberFormat.getInstance();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "{2}";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "{2}";
      stringArray0[5] = "";
      stringArray0[6] = "{2}";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      int int0 = (-1);
      int int1 = 643;
      // Undeclared exception!
      try { 
        standardCategoryItemLabelGenerator0.generateLabelString(defaultIntervalCategoryDataset0, (-1), 643);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getInstance();
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertNotNull(simpleDateFormat0);
      
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("}9", simpleDateFormat0);
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("}9", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryToolTipGenerator0);
      
      SimpleDateFormat simpleDateFormat1 = (SimpleDateFormat)intervalCategoryToolTipGenerator0.getDateFormat();
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("}9", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toPattern());
      assertTrue(simpleDateFormat1.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toLocalizedPattern());
      assertSame(simpleDateFormat0, simpleDateFormat1);
      assertSame(simpleDateFormat1, simpleDateFormat0);
      assertNotNull(simpleDateFormat1);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals("\u00A4 #,##0.00", decimalFormat0.toPattern());
      assertEquals("\u00A4 #,##0.00", decimalFormat0.toLocalizedPattern());
      assertEquals("\u00A4 ", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-\u00A4 ", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertNotNull(decimalFormat0);
      
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", decimalFormat0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals("\u00A4 #,##0.00", decimalFormat0.toPattern());
      assertEquals("\u00A4 #,##0.00", decimalFormat0.toLocalizedPattern());
      assertEquals("\u00A4 ", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-\u00A4 ", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator0);
      
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.8;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 892.967888419;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 2972.3628624;
      doubleArray1[5] = (-4490.0);
      doubleArray1[6] = (-846.39363);
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-4490.0);
      doubleArray3[3] = 2972.3628624;
      doubleArray3[4] = (-846.39363);
      doubleArray3[5] = (-846.39363);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 2972.3628624;
      doubleArray4[2] = 2972.3628624;
      doubleArray4[3] = 0.8;
      doubleArray4[4] = 892.967888419;
      doubleArray4[5] = (-846.39363);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 0.8;
      doubleArray5[1] = 2972.3628624;
      doubleArray5[2] = (-4490.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = 0.8;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (-846.39363);
      doubleArray6[3] = (-846.39363);
      doubleArray6[4] = (-846.39363);
      doubleArray6[5] = 0.0;
      doubleArray6[6] = (-846.39363);
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        boxAndWhiskerToolTipGenerator0.createItemArray(defaultIntervalCategoryDataset0, 127, 127);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      assertEquals("({0}, {1}) = {2}", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(standardCategoryToolTipGenerator0);
      
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-4199.98762);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1904.8055354);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-2499.1798997817295);
      doubleArray1[5] = 0.8;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.8;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-2499.1798997817295);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-4199.98762);
      doubleArray2[6] = (-2499.1798997817295);
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-4199.98762);
      doubleArray3[1] = 1745.54872385232;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.8;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 1745.54872385232;
      doubleArray5[6] = (-1904.8055354);
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      String string0 = standardCategoryToolTipGenerator0.generateColumnLabel(defaultIntervalCategoryDataset0, 0);
      assertEquals("({0}, {1}) = {2}", standardCategoryToolTipGenerator0.getLabelFormat());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(string0);
      assertEquals(5, doubleArray0.length);
      
      String string1 = standardCategoryToolTipGenerator0.getLabelFormat();
      assertEquals("({0}, {1}) = {2}", string1);
      assertEquals("({0}, {1}) = {2}", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = standardCategoryToolTipGenerator0.equals("({0}, {1}) = {2}");
      assertFalse(boolean0);
      assertEquals("({0}, {1}) = {2}", standardCategoryToolTipGenerator0.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      assertEquals("({0}, {1}) = {2}", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(standardCategoryToolTipGenerator0);
      
      CategoryDataset categoryDataset0 = null;
      int int0 = 127;
      // Undeclared exception!
      try { 
        standardCategoryToolTipGenerator0.generateRowLabel((CategoryDataset) null, 127);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.labels.AbstractCategoryItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertNotNull(decimalFormat0);
      
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("", decimalFormat0);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(standardCategoryItemLabelGenerator0);
      
      Number[][] numberArray0 = new Number[0][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, (Number[][]) null);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, numberArray0.length);
      
      // Undeclared exception!
      try { 
        standardCategoryItemLabelGenerator0.createItemArray(defaultIntervalCategoryDataset0, 2130, 29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getDateTimeInstance();
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertNotNull(simpleDateFormat0);
      
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("", simpleDateFormat0);
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(standardCategoryItemLabelGenerator0);
      
      double[][] doubleArray0 = new double[0][1];
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator1 = (StandardCategoryItemLabelGenerator)standardCategoryItemLabelGenerator0.clone();
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertEquals("", standardCategoryItemLabelGenerator1.getLabelFormat());
      assertNotSame(standardCategoryItemLabelGenerator0, standardCategoryItemLabelGenerator1);
      assertNotSame(standardCategoryItemLabelGenerator1, standardCategoryItemLabelGenerator0);
      assertNotNull(standardCategoryItemLabelGenerator1);
      assertTrue(standardCategoryItemLabelGenerator1.equals((Object)standardCategoryItemLabelGenerator0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = standardCategoryItemLabelGenerator0.equals(simpleDateFormat0);
      assertFalse(boolean0);
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotSame(standardCategoryItemLabelGenerator0, standardCategoryItemLabelGenerator1);
      assertTrue(standardCategoryItemLabelGenerator0.equals((Object)standardCategoryItemLabelGenerator1));
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        standardCategoryItemLabelGenerator0.generateLabelString(defaultIntervalCategoryDataset0, (-979), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator0);
      
      CategoryDataset categoryDataset0 = null;
      int int0 = 7;
      // Undeclared exception!
      try { 
        boxAndWhiskerToolTipGenerator0.generateColumnLabel((CategoryDataset) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.labels.AbstractCategoryItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      assertEquals("{2}", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(standardCategoryItemLabelGenerator0);
      
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 2860.256722871584;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1911.728714567;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2555.62157524;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1911.728714567;
      doubleArray2[1] = 1911.728714567;
      doubleArray2[2] = (-2384.9);
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 2555.62157524;
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        standardCategoryItemLabelGenerator0.generateRowLabel(defaultIntervalCategoryDataset0, 1258);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryToolTipGenerator0);
      
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray3[4] = Double.POSITIVE_INFINITY;
      doubleArray3[5] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray4[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 6, 0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        intervalCategoryToolTipGenerator0.createItemArray(slidingCategoryDataset0, 0, 3043);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3049
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getTimeInstance();
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertNotNull(simpleDateFormat0);
      
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("&3A1iG&+#S>TWTSK[A", simpleDateFormat0);
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("&3A1iG&+#S>TWTSK[A", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(standardCategoryToolTipGenerator0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = standardCategoryToolTipGenerator0.equals(object0);
      assertFalse(boolean0);
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("&3A1iG&+#S>TWTSK[A", standardCategoryToolTipGenerator0.getLabelFormat());
      
      boolean boolean1 = standardCategoryToolTipGenerator0.equals("&3A1iG&+#S>TWTSK[A");
      assertFalse(boolean1);
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("&3A1iG&+#S>TWTSK[A", standardCategoryToolTipGenerator0.getLabelFormat());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = standardCategoryToolTipGenerator0.equals((Object) null);
      assertFalse(boolean2);
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("&3A1iG&+#S>TWTSK[A", standardCategoryToolTipGenerator0.getLabelFormat());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Number[][] numberArray0 = new Number[2][9];
      Number[] numberArray1 = new Number[1];
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, xYTaskDataset0.getDomainOrder());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertNotNull(xYTaskDataset0);
      
      Double double0 = (Double)xYTaskDataset0.getStartX(0, 0);
      assertEquals((-0.4), (double)double0, 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, xYTaskDataset0.getDomainOrder());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertNotNull(double0);
      
      numberArray1[0] = (Number) double0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) double0;
      numberArray2[1] = (Number) double0;
      numberArray2[2] = (Number) double0;
      numberArray2[3] = (Number) double0;
      numberArray2[4] = (Number) double0;
      numberArray2[5] = (Number) double0;
      numberArray2[6] = (Number) double0;
      numberArray2[7] = (Number) double0;
      numberArray2[8] = (Number) double0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, numberArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      assertEquals(2, numberArray0.length);
      
      String string0 = standardCategoryToolTipGenerator0.generateLabelString(slidingCategoryDataset0, 0, 0);
      assertEquals("&3A1iG&+#S>TWTSK[A", string0);
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("&3A1iG&+#S>TWTSK[A", standardCategoryToolTipGenerator0.getLabelFormat());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(string0);
      assertEquals(2, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertNotNull(decimalFormat0);
      
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("B9=", decimalFormat0);
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("B9=", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(standardCategoryItemLabelGenerator0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getDateInstance(0);
      assertEquals("EEEE, MMMM d, yyyy", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("EEEE, MMMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertNotNull(simpleDateFormat0);
      
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("nazC{e", simpleDateFormat0);
      assertEquals("EEEE, MMMM d, yyyy", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("EEEE, MMMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertEquals("nazC{e", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(standardCategoryToolTipGenerator0);
      
      boolean boolean0 = standardCategoryToolTipGenerator0.equals("B9=");
      assertFalse(boolean0);
      assertEquals("EEEE, MMMM d, yyyy", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("EEEE, MMMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertEquals("nazC{e", standardCategoryToolTipGenerator0.getLabelFormat());
      
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-3306.598474);
      doubleArray1[5] = (-3306.598474);
      doubleArray1[6] = 1.0;
      doubleArray1[7] = 1.0;
      doubleArray1[8] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 0.8;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = 1.0;
      doubleArray2[7] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-2362.43);
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (-3306.598474);
      doubleArray3[5] = (-3306.598474);
      doubleArray3[6] = (double) 0;
      doubleArray3[7] = (-3306.598474);
      doubleArray3[8] = 1.0;
      doubleArray0[3] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-3306.598474);
      doubleArray4[1] = (-3306.598474);
      doubleArray4[2] = (-3306.598474);
      doubleArray4[3] = (-3306.598474);
      doubleArray4[4] = (-2362.43);
      doubleArray4[5] = 1.0;
      doubleArray4[6] = 0.8;
      doubleArray4[7] = 0.0;
      doubleArray0[4] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 0.0;
      doubleArray3[7] = (double) 0;
      doubleArray5[2] = (-819.4962812);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 3, 3);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(3, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertNotNull(slidingCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        standardCategoryToolTipGenerator0.generateToolTip(slidingCategoryDataset0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unmatched braces in the pattern.
         //
         verifyException("java.text.MessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      assertEquals("({0}, {1}) = {2}", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(standardCategoryToolTipGenerator0);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.8;
      doubleArray1[1] = (-1659.3);
      doubleArray1[2] = 1158.2560855139434;
      doubleArray1[3] = (-2712.9496341064882);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-2100.504504240489);
      doubleArray1[6] = (-919.0996);
      doubleArray1[7] = (-1.0);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      int int0 = 1224;
      // Undeclared exception!
      try { 
        standardCategoryToolTipGenerator0.generateColumnLabel(defaultIntervalCategoryDataset0, 1224);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1224
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      assertEquals("({0}, {1}) = {2}", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(standardCategoryToolTipGenerator0);
      
      DateFormat dateFormat0 = standardCategoryToolTipGenerator0.getDateFormat();
      assertEquals("({0}, {1}) = {2}", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNull(dateFormat0);
      
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator0);
      
      boolean boolean0 = standardCategoryToolTipGenerator0.equals(boxAndWhiskerToolTipGenerator0);
      assertFalse(boolean0);
      assertEquals("({0}, {1}) = {2}", standardCategoryToolTipGenerator0.getLabelFormat());
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-34.550844594555);
      doubleArray1[1] = (-34.550844594555);
      doubleArray1[2] = (-1392.8709269);
      doubleArray1[3] = (-34.550844594555);
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1392.8709269);
      doubleArray2[1] = (-34.550844594555);
      doubleArray2[2] = (-34.550844594555);
      doubleArray2[3] = (-34.550844594555);
      doubleArray2[4] = (-1392.8709269);
      doubleArray2[5] = (-34.550844594555);
      doubleArray2[6] = (-1392.8709269);
      doubleArray2[7] = (-34.550844594555);
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-34.550844594555);
      doubleArray3[1] = (-34.550844594555);
      doubleArray3[2] = (-34.550844594555);
      doubleArray3[3] = (-1392.8709269);
      doubleArray0[3] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray0[4] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-1392.8709269);
      doubleArray5[1] = (-34.550844594555);
      doubleArray5[2] = (-1392.8709269);
      doubleArray5[3] = (-34.550844594555);
      doubleArray5[4] = (-34.550844594555);
      doubleArray5[5] = (-1392.8709269);
      doubleArray0[5] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-34.550844594555);
      doubleArray6[1] = (-34.550844594555);
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (-1392.8709269);
      doubleArray6[4] = (-1392.8709269);
      doubleArray6[5] = (-1392.8709269);
      doubleArray0[6] = doubleArray6;
      double[] doubleArray7 = new double[4];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = 3277.26791718;
      doubleArray7[1] = (-1392.8709269);
      doubleArray7[2] = 0.0;
      doubleArray7[3] = (-34.550844594555);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        standardCategoryToolTipGenerator0.generateColumnLabel(defaultIntervalCategoryDataset0, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("NT$", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("-NT$", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertNotNull(decimalFormat0);
      
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("", decimalFormat0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("NT$", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("-NT$", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(standardCategoryItemLabelGenerator0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = standardCategoryItemLabelGenerator0.equals(object0);
      assertFalse(boolean0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("NT$", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("-NT$", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", standardCategoryItemLabelGenerator0.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryToolTipGenerator0);
      
      String string0 = intervalCategoryToolTipGenerator0.getLabelFormat();
      assertEquals("({0}, {1}) = {3} - {4}", string0);
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(string0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getDateInstance();
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertNotNull(simpleDateFormat0);
      
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator1 = new IntervalCategoryToolTipGenerator("({0}, {1}) = {3} - {4}", simpleDateFormat0);
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator1.getLabelFormat());
      assertNotNull(intervalCategoryToolTipGenerator1);
      assertFalse(intervalCategoryToolTipGenerator1.equals((Object)intervalCategoryToolTipGenerator0));
      
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = 1.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 1.0;
      doubleArray4[6] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      Object[] objectArray0 = intervalCategoryToolTipGenerator1.createItemArray(defaultIntervalCategoryDataset0, 0, 0);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator1.getLabelFormat());
      assertNotSame(intervalCategoryToolTipGenerator1, intervalCategoryToolTipGenerator0);
      assertNotNull(objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(intervalCategoryToolTipGenerator1.equals((Object)intervalCategoryToolTipGenerator0));
      
      boolean boolean0 = intervalCategoryToolTipGenerator0.equals(intervalCategoryToolTipGenerator1);
      assertFalse(boolean0);
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator1.getLabelFormat());
      assertNotSame(intervalCategoryToolTipGenerator0, intervalCategoryToolTipGenerator1);
      assertNotSame(intervalCategoryToolTipGenerator1, intervalCategoryToolTipGenerator0);
      assertFalse(intervalCategoryToolTipGenerator0.equals((Object)intervalCategoryToolTipGenerator1));
      assertFalse(intervalCategoryToolTipGenerator1.equals((Object)intervalCategoryToolTipGenerator0));
      
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator2 = (IntervalCategoryToolTipGenerator)intervalCategoryToolTipGenerator1.clone();
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator1.getLabelFormat());
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator2.getLabelFormat());
      assertNotSame(intervalCategoryToolTipGenerator1, intervalCategoryToolTipGenerator0);
      assertNotSame(intervalCategoryToolTipGenerator1, intervalCategoryToolTipGenerator2);
      assertNotSame(intervalCategoryToolTipGenerator2, intervalCategoryToolTipGenerator0);
      assertNotSame(intervalCategoryToolTipGenerator2, intervalCategoryToolTipGenerator1);
      assertNotNull(intervalCategoryToolTipGenerator2);
      assertFalse(intervalCategoryToolTipGenerator1.equals((Object)intervalCategoryToolTipGenerator0));
      assertFalse(intervalCategoryToolTipGenerator2.equals((Object)intervalCategoryToolTipGenerator0));
      assertTrue(intervalCategoryToolTipGenerator2.equals((Object)intervalCategoryToolTipGenerator1));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertNotNull(decimalFormat0);
      
      Locale locale0 = new Locale("");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayLanguage();
      assertEquals("", string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertNotNull(string0);
      
      DecimalFormat decimalFormat1 = (DecimalFormat)NumberFormat.getPercentInstance(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals(0, decimalFormat1.getMaximumFractionDigits());
      assertEquals("%", decimalFormat1.getNegativeSuffix());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals("#,##0%", decimalFormat1.toPattern());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals("#,##0%", decimalFormat1.toLocalizedPattern());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertEquals("%", decimalFormat1.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals(100, decimalFormat1.getMultiplier());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertNotSame(decimalFormat1, decimalFormat0);
      assertNotNull(decimalFormat1);
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      
      decimalFormat0.setParseBigDecimal(false);
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertNotSame(decimalFormat0, decimalFormat1);
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("", decimalFormat0);
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(standardCategoryItemLabelGenerator0);
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      
      String string1 = standardCategoryItemLabelGenerator0.getLabelFormat();
      assertEquals("", string1);
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotSame(decimalFormat0, decimalFormat1);
      assertNotNull(string1);
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertTrue(string1.equals((Object)string0));
      
      standardCategoryItemLabelGenerator0.hashCode();
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotSame(decimalFormat0, decimalFormat1);
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator0);
      
      boxAndWhiskerToolTipGenerator0.hashCode();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      
      boolean boolean0 = boxAndWhiskerToolTipGenerator0.equals("");
      assertFalse(boolean0);
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("OkIIIz3oy-;@GA", decimalFormat1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals(0, decimalFormat1.getMaximumFractionDigits());
      assertEquals("%", decimalFormat1.getNegativeSuffix());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals("#,##0%", decimalFormat1.toPattern());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals("#,##0%", decimalFormat1.toLocalizedPattern());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertEquals("%", decimalFormat1.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals(100, decimalFormat1.getMultiplier());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals("OkIIIz3oy-;@GA", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryItemLabelGenerator0);
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      
      CategoryDataset categoryDataset0 = null;
      int int0 = (-1853);
      // Undeclared exception!
      try { 
        intervalCategoryItemLabelGenerator0.createItemArray((CategoryDataset) null, (-1853), (-1853));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.labels.IntervalCategoryItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getTimeInstance();
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertNotNull(simpleDateFormat0);
      
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("", simpleDateFormat0);
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryToolTipGenerator0);
      
      NumberFormat numberFormat0 = intervalCategoryToolTipGenerator0.getNumberFormat();
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNull(numberFormat0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      int int0 = 5;
      // Undeclared exception!
      try { 
        intervalCategoryToolTipGenerator0.generateLabelString(defaultCategoryDataset0, 5, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = new Locale(" ;O*", "+y~!+");
      assertEquals(" ;o*_+Y~!+", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("+Y~!+", locale0.getCountry());
      assertEquals(" ;o*", locale0.getLanguage());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance(locale0);
      assertEquals(" ;o*_+Y~!+", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("+Y~!+", locale0.getCountry());
      assertEquals(" ;o*", locale0.getLanguage());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertNotNull(decimalFormat0);
      
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("+y~!+", decimalFormat0);
      assertEquals(" ;o*_+Y~!+", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("+Y~!+", locale0.getCountry());
      assertEquals(" ;o*", locale0.getLanguage());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("+y~!+", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryToolTipGenerator0);
      
      DecimalFormat decimalFormat1 = (DecimalFormat)intervalCategoryToolTipGenerator0.getNumberFormat();
      assertEquals(" ;o*_+Y~!+", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("+Y~!+", locale0.getCountry());
      assertEquals(" ;o*", locale0.getLanguage());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("+y~!+", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertSame(decimalFormat0, decimalFormat1);
      assertSame(decimalFormat1, decimalFormat0);
      assertNotNull(decimalFormat1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getDateInstance();
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertNotNull(simpleDateFormat0);
      
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("&1 C9|Z9`O^}G%E$`Cd", simpleDateFormat0);
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("&1 C9|Z9`O^}G%E$`Cd", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(standardCategoryItemLabelGenerator0);
      
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("{2}", simpleDateFormat0);
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("{2}", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryToolTipGenerator0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        standardCategoryItemLabelGenerator0.createItemArray(defaultCategoryDataset0, 0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertNotNull(decimalFormat0);
      
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator("", decimalFormat0);
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator0);
      
      decimalFormat0.setGroupingUsed(false);
      assertEquals("###0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("###0.###", decimalFormat0.toPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        boxAndWhiskerToolTipGenerator0.generateLabelString(defaultCategoryDataset0, (-909), (-909));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getTimeInstance();
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertNotNull(simpleDateFormat0);
      
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("", simpleDateFormat0);
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(standardCategoryToolTipGenerator0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        standardCategoryToolTipGenerator0.generateRowLabel(defaultCategoryDataset0, 229);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 229, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getInstance();
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertNotNull(simpleDateFormat0);
      
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("percentFormatter", simpleDateFormat0);
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("percentFormatter", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(standardCategoryToolTipGenerator0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        standardCategoryToolTipGenerator0.generateLabelString(defaultCategoryDataset0, 0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      assertEquals("{2}", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(standardCategoryItemLabelGenerator0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 3076, 3076);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(3076, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3076, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        standardCategoryItemLabelGenerator0.generateRowLabel(slidingCategoryDataset0, (-274));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertNotNull(decimalFormat0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      FieldPosition fieldPosition0 = new FieldPosition(1595);
      assertEquals(1595, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals("java.text.FieldPosition[field=1595,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertNotNull(fieldPosition0);
      
      fieldPosition0.setBeginIndex((-1));
      assertEquals((-1), fieldPosition0.getBeginIndex());
      assertEquals(1595, fieldPosition0.getField());
      assertEquals("java.text.FieldPosition[field=1595,attribute=null,beginIndex=-1,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getEndIndex());
      
      fieldPosition0.setBeginIndex(1595);
      assertEquals(1595, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals("java.text.FieldPosition[field=1595,attribute=null,beginIndex=1595,endIndex=0]", fieldPosition0.toString());
      assertEquals(1595, fieldPosition0.getBeginIndex());
      
      StringBuffer stringBuffer1 = decimalFormat0.format((-1L), stringBuffer0, fieldPosition0);
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-1", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
      assertEquals(1595, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals("java.text.FieldPosition[field=1595,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(2, stringBuffer1.length());
      assertEquals("-1", stringBuffer1.toString());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("$;mM<1b|dWML#_?zH", decimalFormat0);
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("$;mM<1b|dWML#_?zH", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(standardCategoryToolTipGenerator0);
      
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator1 = (StandardCategoryToolTipGenerator)standardCategoryToolTipGenerator0.clone();
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("$;mM<1b|dWML#_?zH", standardCategoryToolTipGenerator0.getLabelFormat());
      assertEquals("$;mM<1b|dWML#_?zH", standardCategoryToolTipGenerator1.getLabelFormat());
      assertNotSame(standardCategoryToolTipGenerator0, standardCategoryToolTipGenerator1);
      assertNotSame(standardCategoryToolTipGenerator1, standardCategoryToolTipGenerator0);
      assertNotNull(standardCategoryToolTipGenerator1);
      assertTrue(standardCategoryToolTipGenerator1.equals((Object)standardCategoryToolTipGenerator0));
      
      boolean boolean0 = standardCategoryToolTipGenerator0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("$;mM<1b|dWML#_?zH", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNotSame(standardCategoryToolTipGenerator0, standardCategoryToolTipGenerator1);
      assertTrue(standardCategoryToolTipGenerator0.equals((Object)standardCategoryToolTipGenerator1));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator0);
      
      boxAndWhiskerToolTipGenerator0.hashCode();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryItemLabelGenerator0);
      
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator1 = (BoxAndWhiskerToolTipGenerator)boxAndWhiskerToolTipGenerator0.clone();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator1.getLabelFormat());
      assertNotSame(boxAndWhiskerToolTipGenerator0, boxAndWhiskerToolTipGenerator1);
      assertNotSame(boxAndWhiskerToolTipGenerator1, boxAndWhiskerToolTipGenerator0);
      assertNotNull(boxAndWhiskerToolTipGenerator1);
      assertTrue(boxAndWhiskerToolTipGenerator1.equals((Object)boxAndWhiskerToolTipGenerator0));
      
      boolean boolean0 = intervalCategoryItemLabelGenerator0.equals(boxAndWhiskerToolTipGenerator1);
      assertFalse(boolean0);
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator1.getLabelFormat());
      assertNotSame(boxAndWhiskerToolTipGenerator0, boxAndWhiskerToolTipGenerator1);
      assertNotSame(boxAndWhiskerToolTipGenerator1, boxAndWhiskerToolTipGenerator0);
      assertTrue(boxAndWhiskerToolTipGenerator0.equals((Object)boxAndWhiskerToolTipGenerator1));
      assertTrue(boxAndWhiskerToolTipGenerator1.equals((Object)boxAndWhiskerToolTipGenerator0));
      
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator1 = (IntervalCategoryItemLabelGenerator)intervalCategoryItemLabelGenerator0.clone();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator1.getLabelFormat());
      assertNotSame(intervalCategoryItemLabelGenerator0, intervalCategoryItemLabelGenerator1);
      assertNotSame(intervalCategoryItemLabelGenerator1, intervalCategoryItemLabelGenerator0);
      assertNotNull(intervalCategoryItemLabelGenerator1);
      assertTrue(intervalCategoryItemLabelGenerator1.equals((Object)intervalCategoryItemLabelGenerator0));
      
      boxAndWhiskerToolTipGenerator0.hashCode();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotSame(boxAndWhiskerToolTipGenerator0, boxAndWhiskerToolTipGenerator1);
      assertTrue(boxAndWhiskerToolTipGenerator0.equals((Object)boxAndWhiskerToolTipGenerator1));
      
      boolean boolean1 = intervalCategoryItemLabelGenerator0.equals((Object) null);
      assertFalse(boolean1);
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertNotSame(intervalCategoryItemLabelGenerator0, intervalCategoryItemLabelGenerator1);
      assertTrue(intervalCategoryItemLabelGenerator0.equals((Object)intervalCategoryItemLabelGenerator1));
      assertTrue(boolean1 == boolean0);
      
      String string0 = boxAndWhiskerToolTipGenerator0.getLabelFormat();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", string0);
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotSame(boxAndWhiskerToolTipGenerator0, boxAndWhiskerToolTipGenerator1);
      assertNotNull(string0);
      assertTrue(boxAndWhiskerToolTipGenerator0.equals((Object)boxAndWhiskerToolTipGenerator1));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getDateInstance();
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertNotNull(simpleDateFormat0);
      
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("", simpleDateFormat0);
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertEquals("", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(standardCategoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryToolTipGenerator0);
      
      String string0 = intervalCategoryToolTipGenerator0.getLabelFormat();
      assertEquals("({0}, {1}) = {3} - {4}", string0);
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(string0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getDateInstance();
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertNotNull(simpleDateFormat0);
      
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator1 = new IntervalCategoryToolTipGenerator("({0}, {1}) = {3} - {4}", simpleDateFormat0);
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator1.getLabelFormat());
      assertNotNull(intervalCategoryToolTipGenerator1);
      assertFalse(intervalCategoryToolTipGenerator1.equals((Object)intervalCategoryToolTipGenerator0));
      
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[3];
      intervalCategoryToolTipGenerator1.hashCode();
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator1.getLabelFormat());
      assertNotSame(intervalCategoryToolTipGenerator1, intervalCategoryToolTipGenerator0);
      assertFalse(intervalCategoryToolTipGenerator1.equals((Object)intervalCategoryToolTipGenerator0));
      
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 0.0;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (-1.0);
      doubleArray4[3] = 1.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 1.0;
      doubleArray4[6] = 0.0;
      doubleArray0[3] = doubleArray4;
      doubleArray0[4] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = intervalCategoryToolTipGenerator0.equals(intervalCategoryToolTipGenerator1);
      assertFalse(boolean0);
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator1.getLabelFormat());
      assertNotSame(intervalCategoryToolTipGenerator0, intervalCategoryToolTipGenerator1);
      assertNotSame(intervalCategoryToolTipGenerator1, intervalCategoryToolTipGenerator0);
      assertFalse(intervalCategoryToolTipGenerator0.equals((Object)intervalCategoryToolTipGenerator1));
      assertFalse(intervalCategoryToolTipGenerator1.equals((Object)intervalCategoryToolTipGenerator0));
      
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator2 = (IntervalCategoryToolTipGenerator)intervalCategoryToolTipGenerator1.clone();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator2.getLabelFormat());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator1.getLabelFormat());
      assertNotSame(intervalCategoryToolTipGenerator2, intervalCategoryToolTipGenerator0);
      assertNotSame(intervalCategoryToolTipGenerator2, intervalCategoryToolTipGenerator1);
      assertNotSame(intervalCategoryToolTipGenerator1, intervalCategoryToolTipGenerator0);
      assertNotSame(intervalCategoryToolTipGenerator1, intervalCategoryToolTipGenerator2);
      assertNotNull(intervalCategoryToolTipGenerator2);
      assertTrue(intervalCategoryToolTipGenerator2.equals((Object)intervalCategoryToolTipGenerator1));
      assertFalse(intervalCategoryToolTipGenerator2.equals((Object)intervalCategoryToolTipGenerator0));
      assertFalse(intervalCategoryToolTipGenerator1.equals((Object)intervalCategoryToolTipGenerator0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertNotNull(decimalFormat0);
      
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("t+Ua~\"oqBX#Q% 2S? ", decimalFormat0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("t+Ua~\"oqBX#Q% 2S? ", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(standardCategoryItemLabelGenerator0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        standardCategoryItemLabelGenerator0.generateRowLabel(defaultCategoryDataset0, (-1313));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      int int0 = (-1313);
      String string0 = StandardCategoryItemLabelGenerator.DEFAULT_LABEL_FORMAT_STRING;
      assertEquals("{2}", string0);
      assertNotNull(string0);
      
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = null;
      try {
        intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("{2}", (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getTimeInstance();
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertNotNull(simpleDateFormat0);
      
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      assertEquals("({0}, {1}) = {2}", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(standardCategoryToolTipGenerator0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Number[][] numberArray0 = new Number[2][9];
      Number[] numberArray1 = new Number[1];
      int int0 = 0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, numberArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      assertEquals(2, numberArray0.length);
      
      String string0 = standardCategoryToolTipGenerator0.generateLabelString(slidingCategoryDataset0, 0, 0);
      assertEquals("({0}, {1}) = {2}", standardCategoryToolTipGenerator0.getLabelFormat());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(string0);
      assertEquals(2, numberArray0.length);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertNotNull(decimalFormat0);
      
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator("({0}, {1}) = {2}", decimalFormat0);
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("({0}, {1}) = {2}", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator0);
      
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator1 = (BoxAndWhiskerToolTipGenerator)boxAndWhiskerToolTipGenerator0.clone();
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("({0}, {1}) = {2}", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertEquals("({0}, {1}) = {2}", boxAndWhiskerToolTipGenerator1.getLabelFormat());
      assertNotSame(boxAndWhiskerToolTipGenerator0, boxAndWhiskerToolTipGenerator1);
      assertNotSame(boxAndWhiskerToolTipGenerator1, boxAndWhiskerToolTipGenerator0);
      assertNotNull(boxAndWhiskerToolTipGenerator1);
      assertTrue(boxAndWhiskerToolTipGenerator1.equals((Object)boxAndWhiskerToolTipGenerator0));
      
      boolean boolean0 = standardCategoryToolTipGenerator0.equals(boxAndWhiskerToolTipGenerator1);
      assertFalse(boolean0);
      assertEquals("({0}, {1}) = {2}", standardCategoryToolTipGenerator0.getLabelFormat());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("({0}, {1}) = {2}", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertEquals("({0}, {1}) = {2}", boxAndWhiskerToolTipGenerator1.getLabelFormat());
      assertNotSame(boxAndWhiskerToolTipGenerator0, boxAndWhiskerToolTipGenerator1);
      assertNotSame(boxAndWhiskerToolTipGenerator1, boxAndWhiskerToolTipGenerator0);
      assertTrue(boxAndWhiskerToolTipGenerator0.equals((Object)boxAndWhiskerToolTipGenerator1));
      assertTrue(boxAndWhiskerToolTipGenerator1.equals((Object)boxAndWhiskerToolTipGenerator0));
      
      System.setCurrentTimeMillis((-2132L));
      String string1 = StandardCategoryToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT_STRING;
      assertEquals("({0}, {1}) = {2}", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      DateFormat dateFormat0 = boxAndWhiskerToolTipGenerator0.getDateFormat();
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("({0}, {1}) = {2}", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotSame(boxAndWhiskerToolTipGenerator0, boxAndWhiskerToolTipGenerator1);
      assertNull(dateFormat0);
      assertTrue(boxAndWhiskerToolTipGenerator0.equals((Object)boxAndWhiskerToolTipGenerator1));
      
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("9Tj2RZ8P3$", decimalFormat0, decimalFormat0);
      assertEquals("9Tj2RZ8P3$", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertNotNull(standardCategoryItemLabelGenerator0);
      
      // Undeclared exception!
      try { 
        standardCategoryToolTipGenerator0.generateToolTip(defaultIntervalCategoryDataset0, 0, (-2013265917));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2013265917
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getTimeInstance();
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertNotNull(simpleDateFormat0);
      
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("&3A1iG&+#S>TWTSK[A", simpleDateFormat0);
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("&3A1iG&+#S>TWTSK[A", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(standardCategoryToolTipGenerator0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = standardCategoryToolTipGenerator0.equals("&3A1iG&+#S>TWTSK[A");
      assertFalse(boolean0);
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("&3A1iG&+#S>TWTSK[A", standardCategoryToolTipGenerator0.getLabelFormat());
      
      boolean boolean1 = standardCategoryToolTipGenerator0.equals((Object) null);
      assertFalse(boolean1);
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("&3A1iG&+#S>TWTSK[A", standardCategoryToolTipGenerator0.getLabelFormat());
      assertTrue(boolean1 == boolean0);
      
      Number[][] numberArray0 = new Number[2][9];
      Number[] numberArray1 = new Number[1];
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, xYTaskDataset0.getDomainOrder());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      Double double0 = (Double)xYTaskDataset0.getStartX(0, 0);
      assertEquals((-0.4), (double)double0, 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, xYTaskDataset0.getDomainOrder());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(double0);
      
      numberArray1[0] = (Number) double0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[1] = (Number) double0;
      numberArray2[2] = (Number) double0;
      numberArray2[3] = (Number) double0;
      numberArray2[5] = (Number) double0;
      numberArray2[6] = (Number) double0;
      numberArray2[7] = (Number) double0;
      numberArray2[8] = (Number) double0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, numberArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertNotNull(slidingCategoryDataset0);
      assertEquals(2, numberArray0.length);
      
      String string0 = standardCategoryToolTipGenerator0.generateLabelString(slidingCategoryDataset0, 0, 0);
      assertEquals("&3A1iG&+#S>TWTSK[A", string0);
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("&3A1iG&+#S>TWTSK[A", standardCategoryToolTipGenerator0.getLabelFormat());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertNotNull(string0);
      assertEquals(2, numberArray0.length);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertNotNull(decimalFormat0);
      
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator("({0}, {1}) = {2}", decimalFormat0);
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("({0}, {1}) = {2}", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator0);
      
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator1 = (BoxAndWhiskerToolTipGenerator)boxAndWhiskerToolTipGenerator0.clone();
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("({0}, {1}) = {2}", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertEquals("({0}, {1}) = {2}", boxAndWhiskerToolTipGenerator1.getLabelFormat());
      assertNotSame(boxAndWhiskerToolTipGenerator0, boxAndWhiskerToolTipGenerator1);
      assertNotSame(boxAndWhiskerToolTipGenerator1, boxAndWhiskerToolTipGenerator0);
      assertNotNull(boxAndWhiskerToolTipGenerator1);
      assertTrue(boxAndWhiskerToolTipGenerator1.equals((Object)boxAndWhiskerToolTipGenerator0));
      
      String string1 = boxAndWhiskerToolTipGenerator0.getLabelFormat();
      assertEquals("({0}, {1}) = {2}", string1);
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("({0}, {1}) = {2}", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotSame(boxAndWhiskerToolTipGenerator0, boxAndWhiskerToolTipGenerator1);
      assertNotNull(string1);
      assertTrue(boxAndWhiskerToolTipGenerator0.equals((Object)boxAndWhiskerToolTipGenerator1));
      assertFalse(string1.equals((Object)string0));
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getRowCount());
      assertTrue(defaultIntervalCategoryDataset1.getNotify());
      assertEquals(1, defaultIntervalCategoryDataset1.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(1, doubleArray0.length);
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("&3A1iG&+#S>TWTSK[A", dateFormat0);
      Object object0 = new Object();
      standardCategoryToolTipGenerator0.equals("&3A1iG&+#S>TWTSK[A");
      standardCategoryToolTipGenerator0.equals((Object) null);
      Number[][] numberArray0 = new Number[2][9];
      Number[] numberArray1 = new Number[1];
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Number number0 = xYTaskDataset0.getStartX(0, 0);
      numberArray1[0] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      numberArray2[0] = number0;
      numberArray2[1] = number0;
      numberArray2[2] = number0;
      numberArray2[3] = number0;
      numberArray2[5] = number0;
      numberArray2[6] = number0;
      numberArray2[7] = number0;
      numberArray2[3] = number0;
      numberArray0[1] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      standardCategoryToolTipGenerator0.generateLabelString(slidingCategoryDataset0, 0, 0);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator("({0}, {1}) = {2}", numberFormat0);
      Object object1 = boxAndWhiskerToolTipGenerator0.clone();
      standardCategoryToolTipGenerator0.equals(object1);
      boxAndWhiskerToolTipGenerator0.getLabelFormat();
      double[][] doubleArray0 = new double[1][7];
      boxAndWhiskerToolTipGenerator0.generateLabelString(defaultIntervalCategoryDataset0, 0, 0);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      // Undeclared exception!
      try { 
        intervalCategoryItemLabelGenerator0.createItemArray(slidingCategoryDataset0, (-1766639711), (-1766639711));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      Object object0 = intervalCategoryItemLabelGenerator0.clone();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      intervalCategoryItemLabelGenerator0.equals(object0);
      intervalCategoryItemLabelGenerator0.equals(dateFormat0);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator1 = new IntervalCategoryItemLabelGenerator("", dateFormat0);
      object0.equals(intervalCategoryItemLabelGenerator0);
      intervalCategoryItemLabelGenerator1.equals((Object) null);
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("{2}");
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator1 = new IntervalCategoryToolTipGenerator("({0}, {1}) = {3} - {4}", choiceFormat0);
      Locale locale0 = Locale.forLanguageTag("({0}, {1}) = {3} - {4}");
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat(";", decimalFormatSymbols0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unquoted special character ';' in pattern \";\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      intervalCategoryToolTipGenerator0.clone();
      intervalCategoryToolTipGenerator0.hashCode();
      intervalCategoryToolTipGenerator0.clone();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator1 = new IntervalCategoryToolTipGenerator();
      intervalCategoryToolTipGenerator0.clone();
      double[][] doubleArray0 = new double[4][6];
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (-2409.2486127791435);
      doubleArray1[4] = (double) 1;
      doubleArray0[3] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      intervalCategoryToolTipGenerator0.generateColumnLabel(defaultIntervalCategoryDataset0, 1);
      // Undeclared exception!
      try { 
        intervalCategoryToolTipGenerator0.generateColumnLabel(defaultIntervalCategoryDataset0, (-878));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -878
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("B9=", numberFormat0);
      MockDateFormat.getDateInstance(0);
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      standardCategoryToolTipGenerator0.hashCode();
      standardCategoryToolTipGenerator0.equals("B9=");
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-3306.598474);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 0.8;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = 1.0;
      doubleArray2[7] = 1.0;
      doubleArray2[8] = 0.0;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-2362.43);
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (-3306.598474);
      doubleArray3[5] = (-3306.598474);
      doubleArray3[6] = (double) 0;
      doubleArray3[7] = (-3306.598474);
      doubleArray3[8] = 1.0;
      doubleArray0[3] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (-3306.598474);
      doubleArray4[1] = (-3306.598474);
      doubleArray4[2] = (-3306.598474);
      doubleArray4[3] = (-3306.598474);
      doubleArray4[4] = (-2362.43);
      doubleArray4[5] = 1.0;
      doubleArray4[6] = 0.8;
      doubleArray4[7] = 0.0;
      doubleArray0[4] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (double) 0;
      doubleArray5[2] = (-819.4962812);
      doubleArray0[5] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 3, 3);
      // Undeclared exception!
      try { 
        standardCategoryToolTipGenerator0.generateToolTip(slidingCategoryDataset0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }
}
