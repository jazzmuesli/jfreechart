/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 20:40:49 GMT 2019
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartTheme;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLabelLocation;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.labels.SymbolicXYItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.DefaultDrawingSupplier;
import org.jfree.chart.plot.DialShape;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PieLabelLinkStyle;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.category.BarPainter;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.GradientXYBarPainter;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer2;
import org.jfree.chart.renderer.xy.XYBarPainter;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.chart.util.Rotation;
import org.jfree.chart.util.SortOrder;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.XYBarDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StandardChartTheme_ESTest extends StandardChartTheme_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("0x6681CC", true);
      PeriodAxis periodAxis0 = new PeriodAxis("0x6681CC");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(periodAxis0);
      combinedRangeCategoryPlot0.clearDomainAxes();
      standardChartTheme0.applyToCategoryPlot(combinedRangeCategoryPlot0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      DateAxis dateAxis0 = new DateAxis();
      standardChartTheme0.applyToValueAxis(dateAxis0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("+!t<");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      standardChartTheme0.applyToThermometerPlot(thermometerPlot0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("m v*VO&5oNp\")q=W<O");
      String[] stringArray0 = new String[2];
      SymbolAxis symbolAxis0 = new SymbolAxis("m v*VO&5oNp\")q=W<O", stringArray0);
      standardChartTheme0.applyToSymbolAxis(symbolAxis0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("0x0036CC", false);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      standardChartTheme0.applyToSpiderWebPlot(spiderWebPlot0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("+!t<");
      PeriodAxis periodAxis0 = new PeriodAxis("+!t<");
      standardChartTheme0.applyToPeriodAxis(periodAxis0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", false);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      standardChartTheme0.applyToFastScatterPlot(fastScatterPlot0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.annotations.TextAnnotation", true);
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      standardChartTheme0.applyToBlockContainer(blockContainer0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = (StandardChartTheme)StandardChartTheme.createJFreeTheme();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      standardChartTheme0.applyToPiePlot(ringPlot0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("+bb&?dZmFe?CH", true);
      MeterPlot meterPlot0 = new MeterPlot();
      standardChartTheme0.setLegendItemPaint(meterPlot0.DEFAULT_OUTLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("0xFFBFBF", false);
      Paint paint0 = standardChartTheme0.getRangeGridlinePaint();
      standardChartTheme0.setGridBandPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      Font font0 = standardChartTheme0.getLargeFont();
      standardChartTheme0.setExtraLargeFont(font0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("lX|", true);
      SystemColor systemColor0 = SystemColor.menu;
      standardChartTheme0.setErrorIndicatorPaint(systemColor0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme(" 8dv~o:|vJ_c&IvUJ", false);
      Paint paint0 = standardChartTheme0.getLegendBackgroundPaint();
      standardChartTheme0.setChartBackgroundPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", true);
      standardChartTheme0.getName();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", true);
      // Undeclared exception!
      try { 
        standardChartTheme0.setXYBarPainter((XYBarPainter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'painter' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("supplier", false);
      // Undeclared exception!
      try { 
        standardChartTheme0.setTickLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("c>vOW");
      // Undeclared exception!
      try { 
        standardChartTheme0.setThermometerPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("JU", true);
      // Undeclared exception!
      try { 
        standardChartTheme0.setSubtitlePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("JFreeSVG library is not present.", true);
      // Undeclared exception!
      try { 
        standardChartTheme0.setSmallFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("'a0r0)&", true);
      // Undeclared exception!
      try { 
        standardChartTheme0.setShadowPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("~$ck");
      // Undeclared exception!
      try { 
        standardChartTheme0.setRegularFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("!S1N=FVprB:N^P", false);
      // Undeclared exception!
      try { 
        standardChartTheme0.setPlotOutlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = (StandardChartTheme)StandardChartTheme.createJFreeTheme();
      // Undeclared exception!
      try { 
        standardChartTheme0.setPlotBackgroundPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("x)PDww", false);
      // Undeclared exception!
      try { 
        standardChartTheme0.setLargeFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("+PN=uv.ltyl", true);
      // Undeclared exception!
      try { 
        standardChartTheme0.setItemLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("To>;EE2b]D");
      // Undeclared exception!
      try { 
        standardChartTheme0.setGridBandAlternatePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", true);
      // Undeclared exception!
      try { 
        standardChartTheme0.setDrawingSupplier((DrawingSupplier) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'supplier' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("0E0", true);
      // Undeclared exception!
      try { 
        standardChartTheme0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("oz0Y'7", false);
      // Undeclared exception!
      try { 
        standardChartTheme0.setCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("dxbP3{w&3W>");
      // Undeclared exception!
      try { 
        standardChartTheme0.setAxisOffset((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("}uR&r}");
      // Undeclared exception!
      try { 
        standardChartTheme0.setAxisLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Q3LJ[\"\"V|Rz", false);
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToXYPlot((XYPlot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", true);
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToXYItemRenderer((XYItemRenderer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'renderer' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("style");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToXYAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("BS|~?Bw1dz", true);
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToValueAxis((ValueAxis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToThermometerPlot((ThermometerPlot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme(")Mn5S*FrzzYEd.;");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToSymbolAxis((SymbolAxis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("vkmv");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToPolarPlot((PolarPlot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToPlot((Plot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToPeriodAxis((PeriodAxis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("PvWJ}6kF");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToMultiplePiePlot((MultiplePiePlot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("The 'directory' argument is not a directory.");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToMeterPlot((MeterPlot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("JLk.^a-v:", false);
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToFastScatterPlot((FastScatterPlot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("5i:J9g7d^0");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToCategoryPlot((CategoryPlot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("(?UhV7.VueQ)|?zz<bt", false);
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToCategoryItemRenderer((CategoryItemRenderer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'renderer' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = (StandardChartTheme)StandardChartTheme.createDarknessTheme();
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToCategoryAxis((CategoryAxis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("m v*VO&5oNp\")q=W<O");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToBlockContainer((BlockContainer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("$VALUES", false);
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToAbstractRenderer((AbstractRenderer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("offset", true);
      // Undeclared exception!
      try { 
        standardChartTheme0.apply((JFreeChart) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = null;
      try {
        standardChartTheme0 = new StandardChartTheme((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'name' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = null;
      try {
        standardChartTheme0 = new StandardChartTheme((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'name' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("plot");
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      standardChartTheme0.apply(jFreeChart0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("+!t<");
      standardChartTheme0.getDrawingSupplier();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("0BpS");
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      standardChartTheme0.equals(minMaxCategoryRenderer0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Series index out of bounds");
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", (-1.5707963267948966), 1270.5323498623573, 0.2);
      standardChartTheme0.applyToXYAnnotation(xYPointerAnnotation0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("d)hkXP;A3z=.+~%k");
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-736.8252283), 90.0, (-736.8252283), 90.0);
      standardChartTheme0.applyToXYAnnotation(xYBoxAnnotation0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Y");
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(0.0);
      standardChartTheme0.applyToXYItemRenderer(stackedXYBarRenderer0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("xwE,W(Q#");
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      standardChartTheme0.applyToCategoryItemRenderer(minMaxCategoryRenderer0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.annotations.TextAnnotation", true);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      standardChartTheme0.applyToCategoryItemRenderer(statisticalBarRenderer0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(true, false);
      deviationRenderer0.setAutoPopulateSeriesPaint(false);
      standardChartTheme0.applyToAbstractRenderer(deviationRenderer0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", true);
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      standardChartTheme0.applyToCategoryAxis(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme(" 8dv~o:|vJ_c&IvUJ", false);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultTableXYDataset0, (-90.0));
      DateAxis dateAxis0 = new DateAxis("0xFFFF7F");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYBarDataset0, dateAxis0, defaultPolarItemRenderer0);
      standardChartTheme0.applyToPolarPlot(polarPlot0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("plot");
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      Paint paint0 = standardChartTheme0.getRangeGridlinePaint();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      DateAxis dateAxis0 = new DateAxis("plot");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(jFreeChart0.DEFAULT_BACKGROUND_PAINT, paint0, false);
      XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, dateAxis0, dateAxis0, xYDifferenceRenderer0);
      standardChartTheme0.applyToXYPlot(xYPlot0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("z. W<;8(");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      standardChartTheme0.applyToXYPlot(combinedDomainXYPlot0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = (StandardChartTheme)StandardChartTheme.createDarknessTheme();
      assertNotNull(standardChartTheme0);
      assertEquals("Darkness", standardChartTheme0.getName());
      assertEquals(PieLabelLinkStyle.CUBIC_CURVE, standardChartTheme0.getLabelLinkStyle());
      assertFalse(standardChartTheme0.isShadowVisible());
      
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertNotNull(subCategoryAxis0);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      
      standardChartTheme0.applyToCategoryPlot(combinedDomainCategoryPlot0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals("Darkness", standardChartTheme0.getName());
      assertEquals(PieLabelLinkStyle.CUBIC_CURVE, standardChartTheme0.getLabelLinkStyle());
      assertFalse(standardChartTheme0.isShadowVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", true);
      assertNotNull(standardChartTheme0);
      assertFalse(standardChartTheme0.isShadowVisible());
      assertEquals("", standardChartTheme0.getName());
      assertEquals(PieLabelLinkStyle.CUBIC_CURVE, standardChartTheme0.getLabelLinkStyle());
      
      PolarPlot polarPlot0 = new PolarPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(polarPlot0);
      assertFalse(polarPlot0.isSubplot());
      assertNull(polarPlot0.getNoDataMessage());
      assertTrue(polarPlot0.isOutlineVisible());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertFalse(polarPlot0.isCounterClockwise());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(polarPlot0.isDomainZoomable());
      assertTrue(polarPlot0.isNotify());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(20, polarPlot0.getMargin());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertTrue(polarPlot0.isRangeZoomable());
      
      standardChartTheme0.applyToPlot(polarPlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(standardChartTheme0.isShadowVisible());
      assertEquals("", standardChartTheme0.getName());
      assertEquals(PieLabelLinkStyle.CUBIC_CURVE, standardChartTheme0.getLabelLinkStyle());
      assertFalse(polarPlot0.isSubplot());
      assertNull(polarPlot0.getNoDataMessage());
      assertTrue(polarPlot0.isOutlineVisible());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(PlotOrientation.HORIZONTAL, polarPlot0.getOrientation());
      assertFalse(polarPlot0.isCounterClockwise());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(polarPlot0.isDomainZoomable());
      assertTrue(polarPlot0.isNotify());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(20, polarPlot0.getMargin());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertTrue(polarPlot0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("JLk.^a-v:", false);
      assertNotNull(standardChartTheme0);
      assertEquals("JLk.^a-v:", standardChartTheme0.getName());
      assertEquals(PieLabelLinkStyle.CUBIC_CURVE, standardChartTheme0.getLabelLinkStyle());
      assertFalse(standardChartTheme0.isShadowVisible());
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertNotNull(spiderWebPlot0);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      
      standardChartTheme0.applyToPlot(spiderWebPlot0);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals("JLk.^a-v:", standardChartTheme0.getName());
      assertEquals(PieLabelLinkStyle.CUBIC_CURVE, standardChartTheme0.getLabelLinkStyle());
      assertFalse(standardChartTheme0.isShadowVisible());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      assertNotNull(standardChartTheme0);
      assertEquals(PieLabelLinkStyle.CUBIC_CURVE, standardChartTheme0.getLabelLinkStyle());
      assertEquals("", standardChartTheme0.getName());
      assertFalse(standardChartTheme0.isShadowVisible());
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertNotNull(thermometerPlot0);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.fetchElementHintingFlag());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, thermometerPlot0.getOrientation());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      
      standardChartTheme0.applyToPlot(thermometerPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(PieLabelLinkStyle.CUBIC_CURVE, standardChartTheme0.getLabelLinkStyle());
      assertEquals("", standardChartTheme0.getName());
      assertFalse(standardChartTheme0.isShadowVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.fetchElementHintingFlag());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, thermometerPlot0.getOrientation());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("+bb&?dZmFe?CH", true);
      assertNotNull(standardChartTheme0);
      assertEquals(PieLabelLinkStyle.CUBIC_CURVE, standardChartTheme0.getLabelLinkStyle());
      assertFalse(standardChartTheme0.isShadowVisible());
      assertEquals("+bb&?dZmFe?CH", standardChartTheme0.getName());
      
      MeterPlot meterPlot0 = new MeterPlot();
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(meterPlot0);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertFalse(meterPlot0.isSubplot());
      assertTrue(meterPlot0.isNotify());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      
      standardChartTheme0.applyToPlot(meterPlot0);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(PieLabelLinkStyle.CUBIC_CURVE, standardChartTheme0.getLabelLinkStyle());
      assertFalse(standardChartTheme0.isShadowVisible());
      assertEquals("+bb&?dZmFe?CH", standardChartTheme0.getName());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertFalse(meterPlot0.isSubplot());
      assertTrue(meterPlot0.isNotify());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", false);
      assertNotNull(standardChartTheme0);
      assertFalse(standardChartTheme0.isShadowVisible());
      assertEquals(PieLabelLinkStyle.CUBIC_CURVE, standardChartTheme0.getLabelLinkStyle());
      assertEquals("", standardChartTheme0.getName());
      
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(fastScatterPlot0);
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertFalse(fastScatterPlot0.isRangePannable());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.fetchElementHintingFlag());
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertTrue(fastScatterPlot0.isNotify());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(PlotOrientation.VERTICAL, fastScatterPlot0.getOrientation());
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertFalse(fastScatterPlot0.isSubplot());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      
      standardChartTheme0.applyToPlot(fastScatterPlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(standardChartTheme0.isShadowVisible());
      assertEquals(PieLabelLinkStyle.CUBIC_CURVE, standardChartTheme0.getLabelLinkStyle());
      assertEquals("", standardChartTheme0.getName());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertFalse(fastScatterPlot0.isRangePannable());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.fetchElementHintingFlag());
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertTrue(fastScatterPlot0.isNotify());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(PlotOrientation.VERTICAL, fastScatterPlot0.getOrientation());
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertFalse(fastScatterPlot0.isSubplot());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme(",Pn.LCIjCe'+X7", true);
      assertNotNull(standardChartTheme0);
      assertFalse(standardChartTheme0.isShadowVisible());
      assertEquals(PieLabelLinkStyle.CUBIC_CURVE, standardChartTheme0.getLabelLinkStyle());
      assertEquals(",Pn.LCIjCe'+X7", standardChartTheme0.getName());
      
      Integer integer0 = (Integer)Plot.ZERO;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) integer0);
      assertNotNull(defaultValueDataset0);
      assertTrue(defaultValueDataset0.getNotify());
      
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(compassPlot0);
      assertTrue(defaultValueDataset0.getNotify());
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      
      standardChartTheme0.applyToPlot(compassPlot0);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(standardChartTheme0.isShadowVisible());
      assertEquals(PieLabelLinkStyle.CUBIC_CURVE, standardChartTheme0.getLabelLinkStyle());
      assertEquals(",Pn.LCIjCe'+X7", standardChartTheme0.getName());
      assertTrue(defaultValueDataset0.getNotify());
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", false);
      PeriodAxis periodAxis0 = new PeriodAxis("J`malF2iC4ZH-:");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(periodAxis0);
      standardChartTheme0.applyToPlot(combinedRangeCategoryPlot0);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("painter", true);
      EmptyBlock emptyBlock0 = new EmptyBlock(197.274, 4.0);
      standardChartTheme0.applyToBlock(emptyBlock0);
      assertEquals("painter", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("ZOOM_IN_BOTH", false);
      String[] stringArray0 = new String[8];
      SymbolAxis symbolAxis0 = new SymbolAxis("ZOOM_IN_BOTH", stringArray0);
      LabelBlock labelBlock0 = new LabelBlock("ZOOM_IN_BOTH", symbolAxis0.DEFAULT_TICK_LABEL_FONT, symbolAxis0.DEFAULT_GRID_BAND_PAINT);
      standardChartTheme0.applyToBlock(labelBlock0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("d)hkXP;A3z=.+~%k");
      CompositeTitle compositeTitle0 = new CompositeTitle();
      standardChartTheme0.applyToTitle(compositeTitle0);
      assertEquals(HorizontalAlignment.CENTER, compositeTitle0.getHorizontalAlignment());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      PaintScale paintScale0 = xYBlockRenderer0.getPaintScale();
      LogAxis logAxis0 = new LogAxis("l3<q5Y}D1");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, logAxis0);
      standardChartTheme0.applyToBlock(paintScaleLegend0);
      assertEquals("", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("z. W<;8(");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LegendTitle legendTitle0 = new LegendTitle(combinedDomainXYPlot0);
      ColumnArrangement columnArrangement0 = new ColumnArrangement(legendTitle0.DEFAULT_HORIZONTAL_ALIGNMENT, legendTitle0.DEFAULT_VERTICAL_ALIGNMENT, 0.0, 1.0F);
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      legendTitle0.setWrapper(blockContainer0);
      standardChartTheme0.applyToBlock(legendTitle0);
      assertEquals(PieLabelLinkStyle.CUBIC_CURVE, standardChartTheme0.getLabelLinkStyle());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = (StandardChartTheme)StandardChartTheme.createDarknessTheme();
      SymbolicXYItemLabelGenerator symbolicXYItemLabelGenerator0 = new SymbolicXYItemLabelGenerator();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getDateInstance(0);
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(simpleDateFormat0, "", "", "+q<xLgb");
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(symbolicXYItemLabelGenerator0, timeSeriesURLGenerator0);
      LegendTitle legendTitle0 = new LegendTitle(xYAreaRenderer2_0);
      standardChartTheme0.applyToTitle(legendTitle0);
      assertEquals("Darkness", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("0BpS");
      standardChartTheme0.applyToTitle((Title) null);
      assertEquals("0BpS", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("2E3z9c%");
      TextTitle textTitle0 = new TextTitle();
      standardChartTheme0.applyToTitle(textTitle0);
      assertEquals(PieLabelLinkStyle.CUBIC_CURVE, standardChartTheme0.getLabelLinkStyle());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("paint", false);
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("Q01zC(", stringArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(symbolAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      standardChartTheme0.apply(jFreeChart0);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.StandardChartTheme", false);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      standardChartTheme0.setRegularFont(cyclicXYItemRenderer0.DEFAULT_VALUE_LABEL_FONT);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("0BpS");
      Color color0 = (Color)standardChartTheme0.getTitlePaint();
      assertEquals(0, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("vkmv");
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      standardChartTheme0.setItemLabelPaint(xYBarRenderer0.DEFAULT_PAINT);
      assertEquals((-1.0), xYBarRenderer0.getBarAlignmentFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      Paint paint0 = standardChartTheme0.getChartBackgroundPaint();
      standardChartTheme0.setAxisLabelPaint(paint0);
      assertEquals(1, paint0.getTransparency());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("JLk.^a-v:", false);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      standardChartTheme0.setLegendBackgroundPaint(spiderWebPlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("d)hkXP;A3z=.+~%k");
      Color color0 = (Color)standardChartTheme0.getThermometerPaint();
      assertEquals(255, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.StandardChartTheme", false);
      standardChartTheme0.setShadowVisible(true);
      assertTrue(standardChartTheme0.isShadowVisible());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("offset");
      // Undeclared exception!
      try { 
        standardChartTheme0.setChartBackgroundPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("plot");
      Color color0 = (Color)standardChartTheme0.getLabelLinkPaint();
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("m v*VO&5oNp\")q=W<O");
      PieLabelLinkStyle pieLabelLinkStyle0 = PieLabelLinkStyle.CUBIC_CURVE;
      standardChartTheme0.setLabelLinkStyle(pieLabelLinkStyle0);
      assertEquals(PieLabelLinkStyle.CUBIC_CURVE, standardChartTheme0.getLabelLinkStyle());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("nT-89i#^");
      // Undeclared exception!
      try { 
        standardChartTheme0.setErrorIndicatorPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", true);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      standardChartTheme0.setShadowPaint(thermometerPlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = (StandardChartTheme)StandardChartTheme.createJFreeTheme();
      standardChartTheme0.isShadowVisible();
      assertEquals("JFree", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("m v*VO&5oNp\")q=W<O");
      Paint paint0 = standardChartTheme0.getGridBandPaint();
      assertEquals(3, paint0.getTransparency());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.StandardChartTheme", false);
      Paint[] paintArray0 = new Paint[1];
      Stroke[] strokeArray0 = new Stroke[0];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier(paintArray0, paintArray0, paintArray0, strokeArray0, strokeArray0, (Shape[]) null);
      standardChartTheme0.setDrawingSupplier(defaultDrawingSupplier0);
      assertEquals("org.jfree.chart.StandardChartTheme", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.StandardChartTheme", false);
      Color color0 = (Color)standardChartTheme0.getCrosshairPaint();
      assertEquals(0, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = (StandardChartTheme)StandardChartTheme.createDarknessTheme();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      standardChartTheme0.setTitlePaint(combinedDomainCategoryPlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals("Darkness", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("7D>/]\"gT\"\"e");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToSpiderWebPlot((SpiderWebPlot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme(",Pn.LCIjCe'+X7", true);
      Color color0 = (Color)standardChartTheme0.getErrorIndicatorPaint();
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("(?UhV7.VueQ)|?zz<bt", false);
      Color color0 = Color.GRAY;
      standardChartTheme0.setThermometerPaint(color0);
      assertEquals(255, color0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.StandardChartTheme", false);
      XYBarPainter xYBarPainter0 = standardChartTheme0.getXYBarPainter();
      assertNotNull(xYBarPainter0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("XpK", false);
      // Undeclared exception!
      try { 
        standardChartTheme0.setExtraLargeFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(taskSeriesCollection0);
      standardChartTheme0.applyToMultiplePiePlot(multiplePiePlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = (StandardChartTheme)StandardChartTheme.createJFreeTheme();
      Color color0 = (Color)standardChartTheme0.getAxisLabelPaint();
      standardChartTheme0.setPlotOutlinePaint(color0);
      assertEquals("JFree", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", true);
      PieLabelLinkStyle pieLabelLinkStyle0 = standardChartTheme0.getLabelLinkStyle();
      assertEquals(PieLabelLinkStyle.CUBIC_CURVE, pieLabelLinkStyle0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Font font0 = thermometerPlot0.getValueFont();
      standardChartTheme0.setSmallFont(font0);
      assertFalse(font0.hasLayoutAttributes());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", true);
      Paint paint0 = standardChartTheme0.getItemLabelPaint();
      assertEquals(1, paint0.getTransparency());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      Paint paint0 = standardChartTheme0.getChartBackgroundPaint();
      standardChartTheme0.setTickLabelPaint(paint0);
      assertEquals(PieLabelLinkStyle.CUBIC_CURVE, standardChartTheme0.getLabelLinkStyle());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme(",Pn.LCIjCe'+X7", true);
      Font font0 = standardChartTheme0.getExtraLargeFont();
      assertEquals("Tahoma", font0.getName());
      assertEquals(20, font0.getSize());
      assertEquals(1, font0.getStyle());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = (StandardChartTheme)StandardChartTheme.createJFreeTheme();
      GradientXYBarPainter gradientXYBarPainter0 = new GradientXYBarPainter((-1.0), 1.0F, 0.0);
      standardChartTheme0.setXYBarPainter(gradientXYBarPainter0);
      assertEquals("JFree", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      standardChartTheme0.setPlotBackgroundPaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(3, ThermometerPlot.BULB);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme(" 8dv~o:|vJ_c&IvUJ", false);
      RectangleInsets rectangleInsets0 = standardChartTheme0.getAxisOffset();
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", true);
      Color color0 = (Color)standardChartTheme0.getLegendItemPaint();
      assertEquals(255, color0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("m v*VO&5oNp\")q=W<O");
      BarPainter barPainter0 = standardChartTheme0.getBarPainter();
      standardChartTheme0.setBarPainter(barPainter0);
      assertFalse(standardChartTheme0.isShadowVisible());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.StandardChartTheme", false);
      Color color0 = (Color)standardChartTheme0.getSubtitlePaint();
      standardChartTheme0.setGridBandAlternatePaint(color0);
      assertEquals(0, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("JLk.^a-v:", false);
      Font font0 = standardChartTheme0.getRegularFont();
      assertEquals("Tahoma", font0.getName());
      assertEquals(0, font0.getStyle());
      assertEquals(12, font0.getSize());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = (StandardChartTheme)StandardChartTheme.createJFreeTheme();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      standardChartTheme0.setSubtitlePaint(ringPlot0.DEFAULT_LABEL_BACKGROUND_PAINT);
      assertEquals("JFree", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.StandardChartTheme", false);
      MeterPlot meterPlot0 = new MeterPlot();
      standardChartTheme0.setLargeFont(meterPlot0.DEFAULT_LABEL_FONT);
      assertEquals(PieLabelLinkStyle.CUBIC_CURVE, standardChartTheme0.getLabelLinkStyle());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme(",Pn.LCIjCe'+X7", true);
      Paint paint0 = standardChartTheme0.getPlotOutlinePaint();
      assertEquals(1, paint0.getTransparency());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("[size=", false);
      // Undeclared exception!
      try { 
        standardChartTheme0.setGridBandPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("style");
      MeterPlot meterPlot0 = new MeterPlot();
      standardChartTheme0.setAxisOffset(meterPlot0.DEFAULT_INSETS);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.needle.ShipNeedle", true);
      Color color0 = (Color)standardChartTheme0.getDomainGridlinePaint();
      assertEquals((-1), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("+!t<");
      Paint paint0 = standardChartTheme0.getShadowPaint();
      assertEquals(1, paint0.getTransparency());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("(?UhV7.VueQ)|?zz<bt", false);
      Color color0 = Color.GRAY;
      standardChartTheme0.setCrosshairPaint(color0);
      assertEquals(255, color0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", false);
      // Undeclared exception!
      try { 
        standardChartTheme0.setLegendItemPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.needle.ShipNeedle", true);
      Color color0 = (Color)standardChartTheme0.getBaselinePaint();
      standardChartTheme0.setRangeGridlinePaint(color0);
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("style");
      Color color0 = (Color)standardChartTheme0.getSubtitlePaint();
      standardChartTheme0.setLabelLinkPaint(color0);
      assertEquals(0, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("7D>/]\"gT\"\"e");
      RingPlot ringPlot0 = new RingPlot();
      standardChartTheme0.setDomainGridlinePaint(ringPlot0.DEFAULT_LABEL_SHADOW_PAINT);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("0BpS");
      Font font0 = standardChartTheme0.getSmallFont();
      assertEquals("Tahoma", font0.getName());
      assertEquals(10, font0.getSize());
      assertTrue(font0.isPlain());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("paint", false);
      Color color0 = (Color)standardChartTheme0.getTickLabelPaint();
      assertEquals(64, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = (StandardChartTheme)StandardChartTheme.createJFreeTheme();
      Short short0 = new Short((short)0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) short0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      standardChartTheme0.applyToMeterPlot(meterPlot0);
      assertEquals("JFree", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      Paint paint0 = standardChartTheme0.getGridBandAlternatePaint();
      assertEquals(2, paint0.getTransparency());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("0BpS");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.lookupSeriesPaint(7);
      standardChartTheme0.setBaselinePaint(paint0);
      assertEquals(PieLabelLinkStyle.CUBIC_CURVE, standardChartTheme0.getLabelLinkStyle());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", true);
      Object object0 = standardChartTheme0.clone();
      assertNotSame(standardChartTheme0, object0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("}v&fzy:^\"}Wv> s-P!");
      Color color0 = (Color)standardChartTheme0.getPlotBackgroundPaint();
      assertEquals(192, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("plot");
      String string0 = standardChartTheme0.getName();
      assertEquals("plot", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ChartTheme chartTheme0 = StandardChartTheme.createLegacyTheme();
      assertNotNull(chartTheme0);
  }
}
