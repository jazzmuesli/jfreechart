/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:10:58 GMT 2019
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Paint;
import java.awt.RadialGradientPaint;
import java.awt.SystemColor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.PaintMap;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PaintMap_ESTest extends PaintMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      PaintMap paintMap1 = new PaintMap();
      assertTrue(paintMap1.equals((Object)paintMap0));
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Color color0 = Color.ORANGE;
      paintMap1.put(comparable0, color0);
      boolean boolean0 = paintMap0.equals(paintMap1);
      assertFalse(paintMap1.equals((Object)paintMap0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      SystemColor systemColor0 = SystemColor.text;
      paintMap0.put("HL9['JviOH\"", systemColor0);
      SystemColor systemColor1 = (SystemColor)paintMap0.getPaint("HL9['JviOH\"");
      assertEquals(192, systemColor1.getGreen());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      // Undeclared exception!
      try { 
        paintMap0.put((Comparable) null, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      // Undeclared exception!
      try { 
        paintMap0.getPaint((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      PaintMap paintMap1 = new PaintMap();
      assertTrue(paintMap1.equals((Object)paintMap0));
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Color color0 = Color.ORANGE;
      paintMap1.put(comparable0, color0);
      Comparable<RadialGradientPaint> comparable1 = (Comparable<RadialGradientPaint>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      paintMap0.put(comparable1, color0);
      boolean boolean0 = paintMap0.equals(paintMap1);
      assertFalse(paintMap1.equals((Object)paintMap0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      Integer integer0 = Integer.getInteger("", 0);
      paintMap0.put(integer0, (Paint) null);
      Object object0 = paintMap0.clone();
      boolean boolean0 = paintMap0.equals(object0);
      assertNotSame(object0, paintMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      PaintMap paintMap1 = new PaintMap();
      assertTrue(paintMap1.equals((Object)paintMap0));
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Color color0 = Color.ORANGE;
      paintMap1.put(comparable0, color0);
      boolean boolean0 = paintMap1.equals(paintMap0);
      assertFalse(paintMap1.equals((Object)paintMap0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      boolean boolean0 = paintMap0.equals(paintMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      SystemColor systemColor0 = SystemColor.text;
      boolean boolean0 = paintMap0.equals(systemColor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      boolean boolean0 = paintMap0.containsKey("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = paintMap0.getPaint(comparable0);
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      Integer integer0 = Integer.getInteger("", 0);
      paintMap0.put(integer0, (Paint) null);
      boolean boolean0 = paintMap0.containsKey(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      paintMap0.clear();
  }
}
