/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:17:16 GMT 2019
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.SampleModel;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.time.Instant;
import java.time.Period;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalUnit;
import java.util.Date;
import javax.print.attribute.standard.JobHoldUntil;
import javax.swing.DebugGraphics;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.javax.swing.MockSpinnerDateModel;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.ChartUtils;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.DateTickUnitType;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.imagemap.ToolTipTagFragmentGenerator;
import org.jfree.chart.imagemap.URLTagFragmentGenerator;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ChartUtils_ESTest extends ChartUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("Z/x").when(file0).getAbsolutePath();
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsJPEG(file0, 220.93823F, jFreeChart0, 0, (-4123));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'quality' must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.encoders.SunJPEGEncoderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("").when(file0).getAbsolutePath();
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      int int0 = (-970);
      try { 
        ChartUtils.saveChartAsPNG(file0, jFreeChart0, 15, (-970));
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("`Qk}S2t`0 zvm/.K").when(file0).getAbsolutePath();
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      int int0 = 2930;
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsPNG(file0, jFreeChart0, 0, 2930, chartRenderingInfo0, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      String string0 = ChartUtils.getImageMap("Q$m4tRrgQ%U}", chartRenderingInfo0, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
      assertNotNull(string0);
      assertEquals("<map id=\"Q$m4tRrgQ%U}\" name=\"Q$m4tRrgQ%U}\">\n</map>", string0);
      
      PrintStream printStream0 = DebugGraphics.logStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(printStream0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1266.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("<map id=\"Q$m4tRrgQ%U}\" name=\"Q$m4tRrgQ%U}\">\n</map>", combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 609, (-1), 10, 500, (-1), 10, true, true, false, false, true, false, true);
      JFreeChart jFreeChart1 = chartPanel0.getChart();
      // Undeclared exception!
      ChartUtils.writeChartAsPNG((OutputStream) filterOutputStream0, jFreeChart1, 1064, 15, (ChartRenderingInfo) null, false, (-447));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      boolean boolean0 = false;
      ChartUtils.writeImageMap(printWriter0, "=*/4KgLER)rQXMX", chartRenderingInfo0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("=*/4KgLER)rQXMX");
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultKeyedValuesDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(piePlot3D0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 2, 2, (-1896), 152, 53, (-248), false, true, true, false, false, true);
      JFreeChart jFreeChart1 = chartPanel0.getChart();
      ChartPanel chartPanel1 = new ChartPanel(jFreeChart1, 39, (-1896), 300, 2627, 53, 10, true, false, true, false, true, true, false);
      ChartRenderingInfo chartRenderingInfo1 = chartPanel1.getChartRenderingInfo();
      ChartUtils.writeChartAsPNG((OutputStream) mockPrintStream0, jFreeChart1, 15, 768, chartRenderingInfo1);
      // Undeclared exception!
      try { 
        ChartUtils.writeBufferedImageAsJPEG((OutputStream) mockPrintStream0, 360.15753F, bufferedImage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'quality' must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.encoders.SunJPEGEncoderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("").when(file0).getAbsolutePath();
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = null;
      try { 
        ChartUtils.saveChartAsJPEG(file0, (-474.0F), jFreeChart0, 15, 15, (ChartRenderingInfo) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      ChartUtils.writeScaledChartAsPNG(outputStream0, jFreeChart0, 15, 1, 15, 15);
      OutputStream outputStream1 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn((SampleModel) null).when(bufferedImage0).getSampleModel();
      doReturn(0).when(bufferedImage0).getType();
      // Undeclared exception!
      try { 
        ChartUtils.writeBufferedImageAsPNG(outputStream1, bufferedImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ChartUtils.isOrsonPDFAvailable();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn(1968).when(bufferedImage0).getType();
      boolean boolean0 = true;
      int int0 = 3635;
      // Undeclared exception!
      try { 
        ChartUtils.writeBufferedImageAsPNG(outputStream0, bufferedImage0, true, 3635);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1968
         //
         verifyException("javax.imageio.ImageTypeSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      // Undeclared exception!
      try { 
        ChartUtils.writeScaledChartAsPNG(outputStream0, jFreeChart0, 15, 1, 1, (-352));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (15) and height (-352) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1585, 618);
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      JFreeChart jFreeChart1 = new JFreeChart(":aFk%T/^UY", jFreeChart0.DEFAULT_TITLE_FONT, waferMapPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart1, (-2640), (-2640), 10, (-2640), 1, 1, false, false, false, false, false, true);
      JFreeChart jFreeChart2 = chartPanel0.getChart();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      EntityCollection entityCollection0 = chartRenderingInfo1.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo2 = new ChartRenderingInfo(entityCollection0);
      // Undeclared exception!
      try { 
        ChartUtils.writeChartAsPNG((OutputStream) pipedOutputStream0, jFreeChart2, (-1), (-676), chartRenderingInfo2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-1) and height (-676) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.getImageMap("The 'alpha' value ust be in the range 0.0f to 1.0f", (ChartRenderingInfo) null, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.imagemap.ImageMapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      ColorModel colorModel0 = mock(ColorModel.class, new ViolatedAssumptionAnswer());
      SampleModel sampleModel0 = mock(SampleModel.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      ChartUtils.getImageMap("-G:0-2d7", chartRenderingInfo0);
      int int0 = 2;
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(bufferedImage0).getHeight();
      doReturn(0).when(bufferedImage0).getMinX();
      doReturn(0).when(bufferedImage0).getMinY();
      doReturn(sampleModel0).when(bufferedImage0).getSampleModel();
      doReturn(2).when(bufferedImage0).getType();
      doReturn(0).when(bufferedImage0).getWidth();
      // Undeclared exception!
      try { 
        ChartUtils.writeBufferedImageAsPNG(outputStream0, bufferedImage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      ColorModel colorModel0 = mock(ColorModel.class, new ViolatedAssumptionAnswer());
      SampleModel sampleModel0 = mock(SampleModel.class, new ViolatedAssumptionAnswer());
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn(98).when(bufferedImage0).getType();
      // Undeclared exception!
      try { 
        ChartUtils.writeBufferedImageAsPNG(outputStream0, bufferedImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 98
         //
         verifyException("javax.imageio.ImageTypeSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.getImageMap((String) null, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'input' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      ChartUtils.writeImageMap(printWriter0, "HI", chartRenderingInfo0, false);
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo1).getEntityCollection();
      ChartUtils.getImageMap("png", chartRenderingInfo1);
      ChartRenderingInfo chartRenderingInfo2 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo2).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.writeImageMap((PrintWriter) null, "<map id=\"png\" name=\"png\">\n</map>", chartRenderingInfo2, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsJPEG(file0, 0.0F, (JFreeChart) null, (-1), (-1), chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsJPEG(file0, jFreeChart0, 15, 0, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.writeBufferedImageAsPNG(outputStream0, (BufferedImage) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputStream outputStream0 = null;
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.writeBufferedImageAsJPEG((OutputStream) null, bufferedImage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'outputStream' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsJPEG(file0, 0.0F, jFreeChart0, 15, 0, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      ChartUtils.writeImageMap(printWriter0, ":WGO7Cl^WW!<B", chartRenderingInfo0, false);
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo1).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      ChartUtils.getImageMap(":WGO7Cl^WW!<B", chartRenderingInfo1, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      int int0 = 1732;
      // Undeclared exception!
      try { 
        ChartUtils.writeChartAsJPEG(outputStream0, 0.75F, jFreeChart0, 15, 1732);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.writeBufferedImageAsJPEG(outputStream0, bufferedImage0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn((SampleModel) null).when(bufferedImage0).getSampleModel();
      doReturn(0).when(bufferedImage0).getType();
      // Undeclared exception!
      try { 
        ChartUtils.writeBufferedImageAsPNG(outputStream0, bufferedImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputStream outputStream0 = null;
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      int int0 = 2;
      // Undeclared exception!
      try { 
        ChartUtils.writeBufferedImageAsPNG((OutputStream) null, bufferedImage0, true, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'outputStream' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ChartUtils.isOrsonPDFAvailable();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn((SampleModel) null).when(bufferedImage0).getSampleModel();
      doReturn(0).when(bufferedImage0).getType();
      boolean boolean0 = true;
      int int0 = 3635;
      // Undeclared exception!
      try { 
        ChartUtils.writeBufferedImageAsPNG(outputStream0, bufferedImage0, true, 3635);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsJPEG(file0, jFreeChart0, 192, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.writeBufferedImageAsJPEG(outputStream0, 0.0F, bufferedImage0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      int int0 = (-784);
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsPNG((File) null, jFreeChart0, (-784), (-357), chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'file' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsPNG(file0, jFreeChart0, 2, 15, chartRenderingInfo0, true, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = null;
      int int0 = (-2291);
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsJPEG(file0, (JFreeChart) null, (-2291), (-2291), chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ChartUtils.isOrsonPDFAvailable();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsPNG(file0, (JFreeChart) null, 1307, 2380, chartRenderingInfo0, false, 2380);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = null;
      // Undeclared exception!
      try { 
        ChartUtils.writeScaledChartAsPNG(outputStream0, (JFreeChart) null, (-4942), (-4942), (-4942), (-4942));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsPNG(file0, jFreeChart0, 0, 15, chartRenderingInfo0, true, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ChartUtils.isOrsonPDFAvailable();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.writeChartAsPNG(outputStream0, jFreeChart0, 15, (-1406), chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.writeScaledChartAsPNG(outputStream0, jFreeChart0, 15, 128, 15, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (225) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = null;
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsPNG(file0, jFreeChart0, 0, 150, (ChartRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JFreeChart jFreeChart0 = null;
      // Undeclared exception!
      try { 
        ChartUtils.applyCurrentTheme((JFreeChart) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      ChartUtils.writeImageMap(printWriter0, "','", chartRenderingInfo0, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
      PrintWriter printWriter1 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo1 = null;
      // Undeclared exception!
      try { 
        ChartUtils.writeImageMap(printWriter1, (String) null, (ChartRenderingInfo) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'input' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsJPEG(file0, 2.0F, (JFreeChart) null, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputStream outputStream0 = null;
      JFreeChart jFreeChart0 = null;
      int int0 = (-980);
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      int int1 = 0;
      // Undeclared exception!
      try { 
        ChartUtils.writeChartAsPNG((OutputStream) null, (JFreeChart) null, (-980), (-980), chartRenderingInfo0, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'out' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      int int0 = (-306);
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.writeChartAsJPEG(outputStream0, jFreeChart0, (-306), (-306), chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      String string0 = ChartUtils.getImageMap("", chartRenderingInfo0, (ToolTipTagFragmentGenerator) null, uRLTagFragmentGenerator0);
      assertNotNull(string0);
      assertEquals("<map id=\"\" name=\"\">\n</map>", string0);
      
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo1).getEntityCollection();
      URLTagFragmentGenerator uRLTagFragmentGenerator1 = null;
      ChartUtils.writeImageMap(printWriter0, "<map id=\"\" name=\"\">\n</map>", chartRenderingInfo1, (ToolTipTagFragmentGenerator) null, (URLTagFragmentGenerator) null);
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Plot) null).when(jFreeChart0).getPlot();
      doReturn(0).when(jFreeChart0).getSubtitleCount();
      doReturn((TextTitle) null).when(jFreeChart0).getTitle();
      ChartUtils.applyCurrentTheme(jFreeChart0);
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart1 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      int int0 = 1064;
      int int1 = 778;
      // Undeclared exception!
      ChartUtils.writeScaledChartAsPNG(outputStream0, jFreeChart1, 2, 1064, 1064, 778);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = null;
      int int0 = 1273;
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsJPEG(file0, (JFreeChart) null, 1273, 1273);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      ChartUtils.writeImageMap(printWriter0, "chart", chartRenderingInfo0, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsJPEG(file0, 0.0F, jFreeChart0, 1140, 379);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn((SampleModel) null).when(bufferedImage0).getSampleModel();
      doReturn(0).when(bufferedImage0).getType();
      // Undeclared exception!
      try { 
        ChartUtils.encodeAsPNG(bufferedImage0, true, 25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = ChartUtils.isJFreeSVGAvailable();
      assertFalse(boolean0);
      
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn((SampleModel) null).when(bufferedImage0).getSampleModel();
      doReturn(0).when(bufferedImage0).getType();
      // Undeclared exception!
      try { 
        ChartUtils.encodeAsPNG(bufferedImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      String string0 = ChartUtils.getImageMap("org.jfree.chart.ChartUtils", chartRenderingInfo0);
      assertNotNull(string0);
      assertEquals("<map id=\"org.jfree.chart.ChartUtils\" name=\"org.jfree.chart.ChartUtils\">\n</map>", string0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.writeBufferedImageAsJPEG(outputStream0, 0.0F, bufferedImage0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.writeChartAsJPEG(outputStream0, 0.0F, jFreeChart0, 0, 1744, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn((SampleModel) null).when(bufferedImage0).getSampleModel();
      doReturn(0).when(bufferedImage0).getType();
      // Undeclared exception!
      try { 
        ChartUtils.encodeAsPNG(bufferedImage0, false, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn((SampleModel) null).when(bufferedImage0).getSampleModel();
      doReturn(0).when(bufferedImage0).getType();
      // Undeclared exception!
      try { 
        ChartUtils.encodeAsPNG(bufferedImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      String string0 = ChartUtils.getImageMap("tR'a<xUyk+x)m.CH", chartRenderingInfo0);
      assertNotNull(string0);
      assertEquals("<map id=\"tR&#39;a&lt;xUyk+x)m.CH\" name=\"tR&#39;a&lt;xUyk+x)m.CH\">\n</map>", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      int int0 = 2398;
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsJPEG(file0, 0.0F, jFreeChart0, 2398, (-2897));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.getImageMap((String) null, chartRenderingInfo0, (ToolTipTagFragmentGenerator) null, uRLTagFragmentGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'input' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      ChartUtils.writeImageMap(printWriter0, "jpeg", chartRenderingInfo0, false);
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.writeChartAsPNG(outputStream0, jFreeChart0, 15, 15, chartRenderingInfo1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = ChartUtils.isJFreeSVGAvailable();
      assertFalse(boolean0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      // Undeclared exception!
      try { 
        ChartUtils.writeChartAsPNG(outputStream0, jFreeChart0, 15, 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Plot) null).when(jFreeChart0).getPlot();
      doReturn(0).when(jFreeChart0).getSubtitleCount();
      doReturn((TextTitle) null).when(jFreeChart0).getTitle();
      ChartUtils.applyCurrentTheme(jFreeChart0);
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart1 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart1).createBufferedImage(anyInt() , anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      // Undeclared exception!
      try { 
        ChartUtils.writeChartAsPNG(outputStream0, jFreeChart1, 15, 158, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChartUtils.applyCurrentTheme((JFreeChart) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsJPEG(file0, 0.0F, jFreeChart0, 1, (-1051), (ChartRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsJPEG((File) null, 0.9F, jFreeChart0, 15, 50);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'file' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      ChartUtils.writeImageMap(printWriter0, "+BLr=P+w;T#W0YXU(,`", chartRenderingInfo0, false);
      PrintWriter printWriter1 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo1).getEntityCollection();
      ChartUtils.writeImageMap(printWriter1, "+BLr=P+w;T#W0YXU(,`", chartRenderingInfo1, false);
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.writeBufferedImageAsJPEG(outputStream0, (-1887.5F), bufferedImage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'quality' must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.encoders.SunJPEGEncoderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      // Undeclared exception!
      try { 
        ChartUtils.writeImageMap((PrintWriter) null, "", chartRenderingInfo0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.imagemap.ImageMapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.writeBufferedImageAsJPEG(outputStream0, 0.0F, (BufferedImage) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      boolean boolean0 = ChartUtils.isJFreeSVGAvailable();
      assertFalse(boolean0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      // Undeclared exception!
      try { 
        ChartUtils.writeChartAsJPEG(outputStream0, jFreeChart0, 15, 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsJPEG(file0, jFreeChart0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      File file0 = null;
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsPNG((File) null, jFreeChart0, 0, 0, chartRenderingInfo0, false, (-30));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'file' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = ChartUtils.isJFreeSVGAvailable();
      assertFalse(boolean0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      int int0 = (-2265);
      // Undeclared exception!
      try { 
        ChartUtils.writeChartAsJPEG(outputStream0, jFreeChart0, 674, (-2265));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      File file0 = null;
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsJPEG((File) null, jFreeChart0, 15, 15, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'file' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile((String) null, "?gJ/lvI");
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-3297), (-1180));
      slidingCategoryDataset0.getUnderlyingDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsPNG((File) mockFile0, jFreeChart0, (-142), 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-142) and height (15) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn((SampleModel) null).when(bufferedImage0).getSampleModel();
      doReturn(0).when(bufferedImage0).getType();
      // Undeclared exception!
      try { 
        ChartUtils.writeBufferedImageAsPNG(outputStream0, bufferedImage0, false, 138);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      // Undeclared exception!
      try { 
        ChartUtils.writeScaledChartAsPNG(outputStream0, jFreeChart0, 15, 0, 15, 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (225) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      int int0 = 0;
      // Undeclared exception!
      try { 
        ChartUtils.writeChartAsPNG(outputStream0, jFreeChart0, 481, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      int int0 = (-970);
      // Undeclared exception!
      try { 
        ChartUtils.saveChartAsPNG(file0, jFreeChart0, 15, (-970));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      // Undeclared exception!
      try { 
        ChartUtils.writeChartAsJPEG(outputStream0, (-178.6433F), jFreeChart0, 15, 1990);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'quality' must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.encoders.SunJPEGEncoderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      OutputStream outputStream0 = null;
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ChartUtils.writeChartAsPNG((OutputStream) null, jFreeChart0, 15, 15, true, 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'out' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      int int0 = 0;
      // Undeclared exception!
      try { 
        ChartUtils.writeChartAsPNG(outputStream0, jFreeChart0, 1768, 1768, chartRenderingInfo0, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
