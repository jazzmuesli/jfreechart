/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:11:47 GMT 2019
 */

package org.jfree.chart.urls;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.urls.StandardPieURLGenerator;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.PieDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StandardPieURLGenerator_ESTest extends StandardPieURLGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator("7Nr.w)2rs:tijb", "");
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      // Undeclared exception!
      try { 
        standardPieURLGenerator0.generateURL(defaultKeyedValuesDataset0, (Comparable) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = null;
      try {
        standardPieURLGenerator0 = new StandardPieURLGenerator((String) null, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'prefix' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = null;
      try {
        standardPieURLGenerator0 = new StandardPieURLGenerator("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'categoryParamName' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = null;
      try {
        standardPieURLGenerator0 = new StandardPieURLGenerator((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'prefix' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator("L=AqBx6qiH");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator();
      StandardPieURLGenerator standardPieURLGenerator1 = new StandardPieURLGenerator();
      boolean boolean0 = standardPieURLGenerator0.equals(standardPieURLGenerator1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator("UTF-8", ">M_~m/_Y[Bsa^B4D", "UTF-8");
      StandardPieURLGenerator standardPieURLGenerator1 = new StandardPieURLGenerator("UTF-8", "KL&v2%[++JiGMjz +");
      boolean boolean0 = standardPieURLGenerator0.equals(standardPieURLGenerator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator();
      boolean boolean0 = standardPieURLGenerator0.equals("L=AqBx6qiH");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator("UTF-8", ">M_~m/_Y[Bsa^B4D", "UTF-8");
      boolean boolean0 = standardPieURLGenerator0.equals(standardPieURLGenerator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator();
      StandardPieURLGenerator standardPieURLGenerator1 = new StandardPieURLGenerator("b79&'M7?\"W2`g;", "b79&'M7?\"W2`g;");
      boolean boolean0 = standardPieURLGenerator0.equals(standardPieURLGenerator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator("org.jfree.chart.urls.StandardPieURLGenerator", "org.jfree.chart.urls.StandardPieURLGenerator", (String) null);
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1937156660));
      String string0 = standardPieURLGenerator0.generateURL(categoryToPieDataset0, "org.jfree.chart.urls.StandardPieURLGenerator", 128);
      assertEquals("org.jfree.chart.urls.StandardPieURLGenerator?org.jfree.chart.urls.StandardPieURLGenerator=java.lang.String%400000000004", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator("b79&'M7?\"W2`g;", "b79&'M7?\"W2`g;");
      Comparable<StandardPieURLGenerator> comparable0 = (Comparable<StandardPieURLGenerator>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      String string0 = standardPieURLGenerator0.generateURL((PieDataset) null, comparable0, 0);
      assertEquals("b79&'M7?\"W2`g;&amp;b79&'M7?\"W2`g;=codegen.java.lang.Comparable%24MockitoMock%2433251098%400000000002&amp;pieIndex=0", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator("NP-zyN%NJGu.-k*", "NP-zyN%NJGu.-k*");
      StandardPieURLGenerator standardPieURLGenerator1 = new StandardPieURLGenerator("NP-zyN%NJGu.-k*", "NP-zyN%NJGu.-k*", "NP-zyN%NJGu.-k*");
      boolean boolean0 = standardPieURLGenerator0.equals(standardPieURLGenerator1);
      assertFalse(boolean0);
  }
}
