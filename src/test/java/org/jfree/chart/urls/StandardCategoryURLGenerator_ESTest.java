/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:04:22 GMT 2019
 */

package org.jfree.chart.urls;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StandardCategoryURLGenerator_ESTest extends StandardCategoryURLGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-2169), (-5449));
      // Undeclared exception!
      try { 
        standardCategoryURLGenerator0.generateURL(slidingCategoryDataset0, (-3291), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("c?&5zym4R");
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        standardCategoryURLGenerator0.generateURL(defaultCategoryDataset0, 0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("=", "=", "");
      Comparable<String>[] comparableArray0 = (Comparable<String>[]) Array.newInstance(Comparable.class, 0);
      Number[][] numberArray0 = new Number[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        standardCategoryURLGenerator0.generateURL(defaultIntervalCategoryDataset0, 0, (-552));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("Range(double, double): require lower (");
      Number[][] numberArray0 = new Number[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        standardCategoryURLGenerator0.generateURL(defaultIntervalCategoryDataset0, 0, 2187);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2187
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = null;
      try {
        standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("org.jfree.data.gantt.TaskSeriesCollection", "Dpe=wR;]L", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'categoryParameterName' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = null;
      try {
        standardCategoryURLGenerator0 = new StandardCategoryURLGenerator((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'prefix' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      standardCategoryURLGenerator0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("", "", "Index outside valid range.");
      StandardCategoryURLGenerator standardCategoryURLGenerator1 = new StandardCategoryURLGenerator("", "", "");
      boolean boolean0 = standardCategoryURLGenerator0.equals(standardCategoryURLGenerator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("<pXg9Q,2ih", "<pXg9Q,2ih", "<pXg9Q,2ih");
      StandardCategoryURLGenerator standardCategoryURLGenerator1 = new StandardCategoryURLGenerator("<pXg9Q,2ih");
      boolean boolean0 = standardCategoryURLGenerator0.equals(standardCategoryURLGenerator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("<pXg9Q,2ih", "<pXg9Q,2ih", "<pXg9Q,2ih");
      StandardCategoryURLGenerator standardCategoryURLGenerator1 = new StandardCategoryURLGenerator();
      boolean boolean0 = standardCategoryURLGenerator0.equals(standardCategoryURLGenerator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      StandardCategoryURLGenerator standardCategoryURLGenerator1 = new StandardCategoryURLGenerator();
      boolean boolean0 = standardCategoryURLGenerator0.equals(standardCategoryURLGenerator1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      boolean boolean0 = standardCategoryURLGenerator0.equals(standardCategoryURLGenerator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("org.jfree.data.gantt.TaskSeriesCollection");
      boolean boolean0 = standardCategoryURLGenerator0.equals("org.jfree.data.gantt.TaskSeriesCollection");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("index.html?series=java.lang.String%400000000006&amp;category=java.lang.String%400000000007");
      String string0 = standardCategoryURLGenerator0.generateURL(defaultIntervalCategoryDataset0, 0, 0);
      assertEquals("index.html?series=java.lang.String%400000000006&amp;category=java.lang.String%400000000007&amp;series=java.lang.String%400000000004&amp;category=java.lang.String%400000000005", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      double[][] doubleArray0 = new double[2][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      String string0 = standardCategoryURLGenerator0.generateURL(slidingCategoryDataset0, 0, 0);
      assertEquals("index.html?series=java.lang.String%400000000007&amp;category=java.lang.String%400000000008", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("<pXg9Q,2ih", "<pXg9Q,2ih", "<pXg9Q,2ih");
      Object object0 = standardCategoryURLGenerator0.clone();
      assertNotSame(object0, standardCategoryURLGenerator0);
  }
}
