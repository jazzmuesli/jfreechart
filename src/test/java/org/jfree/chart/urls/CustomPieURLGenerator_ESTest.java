/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:55:58 GMT 2019
 */

package org.jfree.chart.urls;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.urls.CustomPieURLGenerator;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class CustomPieURLGenerator_ESTest extends CustomPieURLGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      CustomPieURLGenerator customPieURLGenerator1 = new CustomPieURLGenerator();
      assertTrue(customPieURLGenerator1.equals((Object)customPieURLGenerator0));
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      customPieURLGenerator1.addURLs(hashMap0);
      boolean boolean0 = customPieURLGenerator0.equals(customPieURLGenerator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      boolean boolean0 = customPieURLGenerator0.equals(customPieURLGenerator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      HashMap<CustomPieURLGenerator, String> hashMap0 = new HashMap<CustomPieURLGenerator, String>();
      hashMap0.put(customPieURLGenerator0, (String) null);
      customPieURLGenerator0.addURLs(hashMap0);
      int int0 = customPieURLGenerator0.getURLCount(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put((Integer) null, "80,/*&?5_");
      customPieURLGenerator0.addURLs(hashMap0);
      String string0 = customPieURLGenerator0.getURL((Comparable) null, 0);
      assertEquals("80,/*&?5_", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      HashMap<CustomPieURLGenerator, String> hashMap0 = new HashMap<CustomPieURLGenerator, String>();
      customPieURLGenerator0.addURLs(hashMap0);
      int int0 = customPieURLGenerator0.getListCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      // Undeclared exception!
      try { 
        customPieURLGenerator0.getURLCount(3242);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3242, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      // Undeclared exception!
      try { 
        customPieURLGenerator0.getURLCount((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        customPieURLGenerator0.getURL(comparable0, (-4102));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4102
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1223));
      hashMap0.put(integer0, integer0);
      customPieURLGenerator0.addURLs(hashMap0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      // Undeclared exception!
      try { 
        customPieURLGenerator0.generateURL(defaultKeyedValuesDataset0, integer0, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.jfree.chart.urls.CustomPieURLGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      // Undeclared exception!
      try { 
        customPieURLGenerator0.generateURL(defaultKeyedValuesDataset0, (Comparable) null, (-164));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -164
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      customPieURLGenerator0.addURLs(hashMap0);
      hashMap0.put((String) null, (String) null);
      Object object0 = customPieURLGenerator0.clone();
      // Undeclared exception!
      try { 
        customPieURLGenerator0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("TaskSeriesCollection.remove(): index outside valid range.", customPieURLGenerator0);
      customPieURLGenerator0.addURLs(hashMap0);
      Object object0 = customPieURLGenerator0.clone();
      // Undeclared exception!
      try { 
        customPieURLGenerator0.equals(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.urls.CustomPieURLGenerator cannot be cast to java.lang.String
         //
         verifyException("org.jfree.chart.urls.CustomPieURLGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      customPieURLGenerator0.addURLs((Map) null);
      // Undeclared exception!
      try { 
        customPieURLGenerator0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.urls.CustomPieURLGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      HashMap<CustomPieURLGenerator, String> hashMap0 = new HashMap<CustomPieURLGenerator, String>();
      hashMap0.put(customPieURLGenerator0, (String) null);
      customPieURLGenerator0.addURLs(hashMap0);
      // Undeclared exception!
      try { 
        customPieURLGenerator0.clone();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.urls.CustomPieURLGenerator cannot be cast to java.lang.String
         //
         verifyException("org.jfree.chart.urls.CustomPieURLGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      customPieURLGenerator0.addURLs(hashMap0);
      String string0 = customPieURLGenerator0.getURL(0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      Integer integer0 = new Integer((-3));
      String string0 = customPieURLGenerator0.getURL(integer0, 1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      int int0 = customPieURLGenerator0.getListCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put((Integer) null, "");
      customPieURLGenerator0.addURLs(hashMap0);
      Object object0 = customPieURLGenerator0.clone();
      boolean boolean0 = customPieURLGenerator0.equals(object0);
      assertNotSame(object0, customPieURLGenerator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      CustomPieURLGenerator customPieURLGenerator1 = new CustomPieURLGenerator();
      assertTrue(customPieURLGenerator1.equals((Object)customPieURLGenerator0));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      customPieURLGenerator1.addURLs(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Integer integer0 = new Integer((-3));
      hashMap1.put(customPieURLGenerator1, integer0);
      customPieURLGenerator0.addURLs(hashMap1);
      boolean boolean0 = customPieURLGenerator0.equals(customPieURLGenerator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      CustomPieURLGenerator customPieURLGenerator1 = new CustomPieURLGenerator();
      assertTrue(customPieURLGenerator1.equals((Object)customPieURLGenerator0));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      customPieURLGenerator1.addURLs(hashMap0);
      boolean boolean0 = customPieURLGenerator1.equals(customPieURLGenerator0);
      assertFalse(customPieURLGenerator1.equals((Object)customPieURLGenerator0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      boolean boolean0 = customPieURLGenerator0.equals(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      HashMap<CustomPieURLGenerator, String> hashMap0 = new HashMap<CustomPieURLGenerator, String>();
      customPieURLGenerator0.addURLs(hashMap0);
      customPieURLGenerator0.addURLs((Map) null);
      customPieURLGenerator0.addURLs((Map) null);
      Comparable<CustomPieURLGenerator> comparable0 = (Comparable<CustomPieURLGenerator>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      String string0 = customPieURLGenerator0.getURL(comparable0, 2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1223));
      customPieURLGenerator0.addURLs(hashMap0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      String string0 = customPieURLGenerator0.generateURL(defaultKeyedValuesDataset0, integer0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      customPieURLGenerator0.addURLs(hashMap0);
      int int0 = customPieURLGenerator0.getURLCount(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      HashMap<CustomPieURLGenerator, String> hashMap0 = new HashMap<CustomPieURLGenerator, String>();
      customPieURLGenerator0.addURLs(hashMap0);
      customPieURLGenerator0.addURLs((Map) null);
      customPieURLGenerator0.addURLs((Map) null);
      int int0 = customPieURLGenerator0.getURLCount(2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      String string0 = customPieURLGenerator0.generateURL(defaultKeyedValuesDataset0, comparable0, 0);
      assertNull(string0);
  }
}
