/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:17:32 GMT 2019
 */

package org.jfree.chart.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Shape;
import java.awt.geom.PathIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.entity.TitleEntity;
import org.jfree.chart.imagemap.ToolTipTagFragmentGenerator;
import org.jfree.chart.imagemap.URLTagFragmentGenerator;
import org.jfree.chart.title.Title;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TitleEntity_ESTest extends TitleEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      TitleEntity titleEntity0 = new TitleEntity(shape0, title0);
      assertNotNull(titleEntity0);
      assertNull(titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      
      TitleEntity titleEntity1 = (TitleEntity)titleEntity0.clone();
      assertTrue(titleEntity1.equals((Object)titleEntity0));
      assertNotNull(titleEntity1);
      assertNull(titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity1.getURLText());
      assertEquals("poly", titleEntity1.getShapeType());
      assertNull(titleEntity1.getToolTipText());
      assertNotSame(titleEntity0, titleEntity1);
      assertNotSame(titleEntity1, titleEntity0);
      
      titleEntity1.setToolTipText("xbXD<l~rm(");
      assertFalse(titleEntity0.equals((Object)titleEntity1));
      assertFalse(titleEntity1.equals((Object)titleEntity0));
      assertNull(titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity1.getURLText());
      assertEquals("xbXD<l~rm(", titleEntity1.getToolTipText());
      assertEquals("poly", titleEntity1.getShapeType());
      assertNotSame(titleEntity0, titleEntity1);
      assertNotSame(titleEntity1, titleEntity0);
      
      boolean boolean0 = titleEntity0.equals(titleEntity1);
      assertFalse(titleEntity0.equals((Object)titleEntity1));
      assertFalse(titleEntity1.equals((Object)titleEntity0));
      assertFalse(boolean0);
      assertNull(titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity1.getURLText());
      assertEquals("xbXD<l~rm(", titleEntity1.getToolTipText());
      assertEquals("poly", titleEntity1.getShapeType());
      assertNotSame(titleEntity0, titleEntity1);
      assertNotSame(titleEntity1, titleEntity0);
      
      String string0 = "";
      titleEntity0.setURLText("");
      assertFalse(titleEntity0.equals((Object)titleEntity1));
      assertNull(titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertEquals("", titleEntity0.getURLText());
      assertNotSame(titleEntity0, titleEntity1);
      
      TitleEntity titleEntity2 = (TitleEntity)titleEntity0.clone();
      assertFalse(titleEntity0.equals((Object)titleEntity1));
      assertFalse(titleEntity2.equals((Object)titleEntity1));
      assertTrue(titleEntity2.equals((Object)titleEntity0));
      assertNotNull(titleEntity2);
      assertNull(titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertEquals("", titleEntity0.getURLText());
      assertEquals("", titleEntity2.getURLText());
      assertNull(titleEntity2.getToolTipText());
      assertEquals("poly", titleEntity2.getShapeType());
      assertNotSame(titleEntity0, titleEntity1);
      assertNotSame(titleEntity0, titleEntity2);
      assertNotSame(titleEntity2, titleEntity1);
      assertNotSame(titleEntity2, titleEntity0);
      
      TitleEntity titleEntity3 = (TitleEntity)titleEntity0.clone();
      assertFalse(titleEntity0.equals((Object)titleEntity1));
      assertTrue(titleEntity0.equals((Object)titleEntity2));
      assertFalse(titleEntity3.equals((Object)titleEntity1));
      assertTrue(titleEntity3.equals((Object)titleEntity0));
      assertTrue(titleEntity3.equals((Object)titleEntity2));
      assertNotNull(titleEntity3);
      assertNull(titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertEquals("", titleEntity0.getURLText());
      assertEquals("", titleEntity3.getURLText());
      assertEquals("poly", titleEntity3.getShapeType());
      assertNull(titleEntity3.getToolTipText());
      assertNotSame(titleEntity0, titleEntity1);
      assertNotSame(titleEntity0, titleEntity3);
      assertNotSame(titleEntity0, titleEntity2);
      assertNotSame(titleEntity3, titleEntity2);
      assertNotSame(titleEntity3, titleEntity1);
      assertNotSame(titleEntity3, titleEntity0);
      
      PathIterator pathIterator0 = mock(PathIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(pathIterator0).currentSegment(any(float[].class));
      doReturn(false, false, false, false, false).when(pathIterator0).isDone();
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn(pathIterator0).when(shape1).getPathIterator(any(java.awt.geom.AffineTransform.class) , anyDouble());
      titleEntity0.setURLText("title");
      assertFalse(titleEntity0.equals((Object)titleEntity1));
      assertFalse(titleEntity0.equals((Object)titleEntity3));
      assertFalse(titleEntity0.equals((Object)titleEntity2));
      assertNull(titleEntity0.getToolTipText());
      assertEquals("title", titleEntity0.getURLText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertNotSame(titleEntity0, titleEntity1);
      assertNotSame(titleEntity0, titleEntity3);
      assertNotSame(titleEntity0, titleEntity2);
      
      String string1 = titleEntity3.toString();
      assertFalse(titleEntity0.equals((Object)titleEntity1));
      assertFalse(titleEntity0.equals((Object)titleEntity3));
      assertFalse(titleEntity0.equals((Object)titleEntity2));
      assertFalse(titleEntity3.equals((Object)titleEntity1));
      assertTrue(titleEntity3.equals((Object)titleEntity2));
      assertFalse(titleEntity3.equals((Object)titleEntity0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("TitleEntity: tooltip = null", string1);
      assertNotNull(string1);
      assertNull(titleEntity0.getToolTipText());
      assertEquals("title", titleEntity0.getURLText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertEquals("", titleEntity3.getURLText());
      assertEquals("poly", titleEntity3.getShapeType());
      assertNull(titleEntity3.getToolTipText());
      assertNotSame(titleEntity0, titleEntity1);
      assertNotSame(titleEntity0, titleEntity3);
      assertNotSame(titleEntity0, titleEntity2);
      assertNotSame(titleEntity3, titleEntity2);
      assertNotSame(titleEntity3, titleEntity1);
      assertNotSame(titleEntity3, titleEntity0);
      
      titleEntity0.setArea(shape1);
      assertFalse(titleEntity0.equals((Object)titleEntity1));
      assertFalse(titleEntity0.equals((Object)titleEntity3));
      assertFalse(titleEntity0.equals((Object)titleEntity2));
      assertNull(titleEntity0.getToolTipText());
      assertEquals("title", titleEntity0.getURLText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertNotSame(titleEntity0, titleEntity1);
      assertNotSame(titleEntity0, titleEntity3);
      assertNotSame(titleEntity0, titleEntity2);
      
      titleEntity0.setURLText("");
      assertFalse(titleEntity0.equals((Object)titleEntity1));
      assertFalse(titleEntity0.equals((Object)titleEntity3));
      assertFalse(titleEntity0.equals((Object)titleEntity2));
      assertNull(titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertEquals("", titleEntity0.getURLText());
      assertNotSame(titleEntity0, titleEntity1);
      assertNotSame(titleEntity0, titleEntity3);
      assertNotSame(titleEntity0, titleEntity2);
      
      // Undeclared exception!
      titleEntity0.getShapeCoords();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PathIterator pathIterator0 = mock(PathIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(pathIterator0).currentSegment(any(float[].class));
      doReturn(false, false, false, false, false).when(pathIterator0).isDone();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn(pathIterator0).when(shape0).getPathIterator(any(java.awt.geom.AffineTransform.class) , anyDouble());
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      TitleEntity titleEntity0 = new TitleEntity(shape0, title0);
      assertNotNull(titleEntity0);
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity0.getToolTipText());
      
      titleEntity0.hashCode();
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity0.getToolTipText());
      
      TitleEntity titleEntity1 = (TitleEntity)titleEntity0.clone();
      assertTrue(titleEntity1.equals((Object)titleEntity0));
      assertNotNull(titleEntity1);
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity1.getShapeType());
      assertNull(titleEntity1.getURLText());
      assertNull(titleEntity1.getToolTipText());
      assertNotSame(titleEntity0, titleEntity1);
      assertNotSame(titleEntity1, titleEntity0);
      
      String string0 = "title";
      titleEntity0.setToolTipText("title");
      assertFalse(titleEntity0.equals((Object)titleEntity1));
      assertEquals("title", titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNotSame(titleEntity0, titleEntity1);
      
      titleEntity0.hashCode();
      assertFalse(titleEntity0.equals((Object)titleEntity1));
      assertEquals("title", titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNotSame(titleEntity0, titleEntity1);
      
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = titleEntity0.equals(titleEntity0);
      assertFalse(titleEntity0.equals((Object)titleEntity1));
      assertTrue(boolean0);
      assertEquals("title", titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNotSame(titleEntity0, titleEntity1);
      
      // Undeclared exception!
      titleEntity0.getImageMapAreaTag(toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      TitleEntity titleEntity0 = new TitleEntity(shape0, title0, " href=\"");
      assertNotNull(titleEntity0);
      assertNull(titleEntity0.getURLText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertEquals(" href=\"", titleEntity0.getToolTipText());
      
      TitleEntity titleEntity1 = (TitleEntity)titleEntity0.clone();
      assertTrue(titleEntity1.equals((Object)titleEntity0));
      assertNotNull(titleEntity1);
      assertNull(titleEntity0.getURLText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertEquals(" href=\"", titleEntity0.getToolTipText());
      assertEquals(" href=\"", titleEntity1.getToolTipText());
      assertEquals("poly", titleEntity1.getShapeType());
      assertNull(titleEntity1.getURLText());
      assertNotSame(titleEntity0, titleEntity1);
      assertNotSame(titleEntity1, titleEntity0);
      
      titleEntity0.setToolTipText(" href=\"");
      assertTrue(titleEntity0.equals((Object)titleEntity1));
      assertNull(titleEntity0.getURLText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertEquals(" href=\"", titleEntity0.getToolTipText());
      assertNotSame(titleEntity0, titleEntity1);
      
      Shape shape1 = null;
      Title title1 = mock(Title.class, new ViolatedAssumptionAnswer());
      TitleEntity titleEntity2 = null;
      try {
        titleEntity2 = new TitleEntity((Shape) null, title1, " href=\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'area' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = null;
      Title title0 = null;
      TitleEntity titleEntity0 = null;
      try {
        titleEntity0 = new TitleEntity((Shape) null, (Title) null, "wD}6qcd", "wD}6qcd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'area' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      TitleEntity titleEntity0 = new TitleEntity(shape0, title0);
      assertNotNull(titleEntity0);
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      
      String string0 = titleEntity0.toString();
      assertEquals("TitleEntity: tooltip = null", string0);
      assertNotNull(string0);
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      TitleEntity titleEntity0 = new TitleEntity(shape0, title0, "");
      assertNotNull(titleEntity0);
      assertNull(titleEntity0.getURLText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertEquals("", titleEntity0.getToolTipText());
      
      boolean boolean0 = titleEntity0.equals((Object) null);
      assertFalse(boolean0);
      assertNull(titleEntity0.getURLText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertEquals("", titleEntity0.getToolTipText());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(title0).toString();
      TitleEntity titleEntity0 = new TitleEntity(shape0, title0, "", "");
      assertNotNull(titleEntity0);
      assertEquals("", titleEntity0.getURLText());
      assertEquals("", titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      titleEntity0.setToolTipText("");
      assertEquals("", titleEntity0.getURLText());
      assertEquals("", titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      
      titleEntity0.setURLText("TitleEntity: ");
      assertEquals("", titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertEquals("TitleEntity: ", titleEntity0.getURLText());
      
      titleEntity0.setArea(shape1);
      assertEquals("", titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertEquals("TitleEntity: ", titleEntity0.getURLText());
      
      titleEntity0.setURLText("");
      assertEquals("", titleEntity0.getURLText());
      assertEquals("", titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      
      TitleEntity titleEntity1 = (TitleEntity)titleEntity0.clone();
      assertTrue(titleEntity1.equals((Object)titleEntity0));
      assertNotNull(titleEntity1);
      assertEquals("", titleEntity0.getURLText());
      assertEquals("", titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertEquals("poly", titleEntity1.getShapeType());
      assertEquals("", titleEntity1.getURLText());
      assertEquals("", titleEntity1.getToolTipText());
      assertNotSame(titleEntity0, titleEntity1);
      assertNotSame(titleEntity1, titleEntity0);
      
      String string0 = titleEntity0.toString();
      assertTrue(titleEntity0.equals((Object)titleEntity1));
      assertEquals("TitleEntity: tooltip = ", string0);
      assertNotNull(string0);
      assertEquals("", titleEntity0.getURLText());
      assertEquals("", titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertNotSame(titleEntity0, titleEntity1);
      
      TitleEntity titleEntity2 = (TitleEntity)titleEntity0.clone();
      assertTrue(titleEntity0.equals((Object)titleEntity1));
      assertTrue(titleEntity2.equals((Object)titleEntity0));
      assertTrue(titleEntity2.equals((Object)titleEntity1));
      assertNotNull(titleEntity2);
      assertEquals("", titleEntity0.getURLText());
      assertEquals("", titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertEquals("", titleEntity2.getURLText());
      assertEquals("", titleEntity2.getToolTipText());
      assertEquals("poly", titleEntity2.getShapeType());
      assertNotSame(titleEntity0, titleEntity2);
      assertNotSame(titleEntity0, titleEntity1);
      assertNotSame(titleEntity2, titleEntity1);
      assertNotSame(titleEntity2, titleEntity0);
      
      TitleEntity titleEntity3 = (TitleEntity)titleEntity0.clone();
      assertTrue(titleEntity0.equals((Object)titleEntity1));
      assertTrue(titleEntity0.equals((Object)titleEntity2));
      assertTrue(titleEntity3.equals((Object)titleEntity0));
      assertTrue(titleEntity3.equals((Object)titleEntity1));
      assertTrue(titleEntity3.equals((Object)titleEntity2));
      assertNotNull(titleEntity3);
      assertEquals("", titleEntity0.getURLText());
      assertEquals("", titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertEquals("", titleEntity3.getURLText());
      assertEquals("poly", titleEntity3.getShapeType());
      assertEquals("", titleEntity3.getToolTipText());
      assertNotSame(titleEntity0, titleEntity3);
      assertNotSame(titleEntity0, titleEntity2);
      assertNotSame(titleEntity0, titleEntity1);
      assertNotSame(titleEntity3, titleEntity2);
      assertNotSame(titleEntity3, titleEntity0);
      assertNotSame(titleEntity3, titleEntity1);
      
      Title title1 = titleEntity0.getTitle();
      assertTrue(titleEntity0.equals((Object)titleEntity1));
      assertTrue(titleEntity0.equals((Object)titleEntity3));
      assertTrue(titleEntity0.equals((Object)titleEntity2));
      assertFalse(title1.visible);
      assertNotNull(title1);
      assertEquals("", titleEntity0.getURLText());
      assertEquals("", titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertEquals(0.0, title1.getWidth(), 0.01);
      assertFalse(title1.isVisible());
      assertFalse(title1.getNotify());
      assertEquals(0.0, title1.getHeight(), 0.01);
      assertNull(title1.getHorizontalAlignment());
      assertEquals(0.0, title1.getContentYOffset(), 0.01);
      assertNull(title1.getID());
      assertNull(title1.getPosition());
      assertNull(title1.getVerticalAlignment());
      assertEquals(0.0, title1.getContentXOffset(), 0.01);
      assertNotSame(titleEntity0, titleEntity3);
      assertNotSame(titleEntity0, titleEntity2);
      assertNotSame(titleEntity0, titleEntity1);
      assertSame(title1, title0);
      
      String string1 = titleEntity0.toString();
      assertTrue(titleEntity0.equals((Object)titleEntity1));
      assertTrue(titleEntity0.equals((Object)titleEntity3));
      assertTrue(titleEntity0.equals((Object)titleEntity2));
      assertTrue(string1.equals((Object)string0));
      assertEquals("TitleEntity: tooltip = ", string1);
      assertNotNull(string1);
      assertEquals("", titleEntity0.getURLText());
      assertEquals("", titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertNotSame(titleEntity0, titleEntity3);
      assertNotSame(titleEntity0, titleEntity2);
      assertNotSame(titleEntity0, titleEntity1);
      
      String string2 = titleEntity0.toString();
      assertTrue(titleEntity0.equals((Object)titleEntity1));
      assertTrue(titleEntity0.equals((Object)titleEntity3));
      assertTrue(titleEntity0.equals((Object)titleEntity2));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("TitleEntity: tooltip = ", string2);
      assertNotNull(string2);
      assertEquals("", titleEntity0.getURLText());
      assertEquals("", titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertNotSame(titleEntity0, titleEntity3);
      assertNotSame(titleEntity0, titleEntity2);
      assertNotSame(titleEntity0, titleEntity1);
      
      titleEntity0.hashCode();
      assertTrue(titleEntity0.equals((Object)titleEntity1));
      assertTrue(titleEntity0.equals((Object)titleEntity3));
      assertTrue(titleEntity0.equals((Object)titleEntity2));
      assertEquals("", titleEntity0.getURLText());
      assertEquals("", titleEntity0.getToolTipText());
      assertEquals("poly", titleEntity0.getShapeType());
      assertNotSame(titleEntity0, titleEntity3);
      assertNotSame(titleEntity0, titleEntity2);
      assertNotSame(titleEntity0, titleEntity1);
      
      TitleEntity titleEntity4 = null;
      try {
        titleEntity4 = new TitleEntity((Shape) null, title1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'area' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(title0).toString();
      TitleEntity titleEntity0 = new TitleEntity(shape0, title0);
      assertNotNull(titleEntity0);
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity0.getToolTipText());
      
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      titleEntity0.setArea(shape1);
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity0.getToolTipText());
      
      String string0 = titleEntity0.toString();
      assertEquals("TitleEntity: tooltip = null", string0);
      assertNotNull(string0);
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity0.getToolTipText());
      
      Title title1 = titleEntity0.getTitle();
      assertFalse(title1.visible);
      assertNotNull(title1);
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity0.getToolTipText());
      assertNull(title1.getPosition());
      assertEquals(0.0, title1.getHeight(), 0.01);
      assertEquals(0.0, title1.getContentXOffset(), 0.01);
      assertEquals(0.0, title1.getWidth(), 0.01);
      assertEquals(0.0, title1.getContentYOffset(), 0.01);
      assertNull(title1.getID());
      assertNull(title1.getHorizontalAlignment());
      assertFalse(title1.getNotify());
      assertNull(title1.getVerticalAlignment());
      assertFalse(title1.isVisible());
      assertSame(title1, title0);
      
      String string1 = titleEntity0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("TitleEntity: tooltip = null", string1);
      assertNotNull(string1);
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity0.getToolTipText());
      
      titleEntity0.hashCode();
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity0.getToolTipText());
      
      Shape shape2 = mock(Shape.class, new ViolatedAssumptionAnswer());
      TitleEntity titleEntity1 = new TitleEntity(shape2, title1, "TitleEntity: tooltip = null");
      assertFalse(titleEntity1.equals((Object)titleEntity0));
      assertFalse(title1.visible);
      assertNotNull(titleEntity1);
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity0.getToolTipText());
      assertNull(title1.getPosition());
      assertEquals(0.0, title1.getHeight(), 0.01);
      assertEquals(0.0, title1.getContentXOffset(), 0.01);
      assertEquals(0.0, title1.getWidth(), 0.01);
      assertEquals(0.0, title1.getContentYOffset(), 0.01);
      assertNull(title1.getID());
      assertNull(title1.getHorizontalAlignment());
      assertFalse(title1.getNotify());
      assertNull(title1.getVerticalAlignment());
      assertFalse(title1.isVisible());
      assertEquals("TitleEntity: tooltip = null", titleEntity1.getToolTipText());
      assertNull(titleEntity1.getURLText());
      assertEquals("poly", titleEntity1.getShapeType());
      
      boolean boolean0 = titleEntity0.equals(titleEntity1);
      assertFalse(titleEntity0.equals((Object)titleEntity1));
      assertFalse(titleEntity1.equals((Object)titleEntity0));
      assertFalse(title1.visible);
      assertFalse(boolean0);
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity0.getToolTipText());
      assertNull(title1.getPosition());
      assertEquals(0.0, title1.getHeight(), 0.01);
      assertEquals(0.0, title1.getContentXOffset(), 0.01);
      assertEquals(0.0, title1.getWidth(), 0.01);
      assertEquals(0.0, title1.getContentYOffset(), 0.01);
      assertNull(title1.getID());
      assertNull(title1.getHorizontalAlignment());
      assertFalse(title1.getNotify());
      assertNull(title1.getVerticalAlignment());
      assertFalse(title1.isVisible());
      assertEquals("TitleEntity: tooltip = null", titleEntity1.getToolTipText());
      assertNull(titleEntity1.getURLText());
      assertEquals("poly", titleEntity1.getShapeType());
      assertNotSame(titleEntity0, titleEntity1);
      assertSame(title1, title0);
      assertNotSame(titleEntity1, titleEntity0);
      
      Title title2 = titleEntity1.getTitle();
      assertFalse(titleEntity0.equals((Object)titleEntity1));
      assertFalse(titleEntity1.equals((Object)titleEntity0));
      assertFalse(title1.visible);
      assertFalse(title2.visible);
      assertNotNull(title2);
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity0.getToolTipText());
      assertNull(title1.getPosition());
      assertEquals(0.0, title1.getHeight(), 0.01);
      assertEquals(0.0, title1.getContentXOffset(), 0.01);
      assertEquals(0.0, title1.getWidth(), 0.01);
      assertEquals(0.0, title1.getContentYOffset(), 0.01);
      assertNull(title1.getID());
      assertNull(title1.getHorizontalAlignment());
      assertFalse(title1.getNotify());
      assertNull(title1.getVerticalAlignment());
      assertFalse(title1.isVisible());
      assertEquals("TitleEntity: tooltip = null", titleEntity1.getToolTipText());
      assertNull(titleEntity1.getURLText());
      assertEquals("poly", titleEntity1.getShapeType());
      assertNull(title2.getPosition());
      assertFalse(title2.getNotify());
      assertEquals(0.0, title2.getContentYOffset(), 0.01);
      assertNull(title2.getID());
      assertNull(title2.getVerticalAlignment());
      assertEquals(0.0, title2.getHeight(), 0.01);
      assertNull(title2.getHorizontalAlignment());
      assertEquals(0.0, title2.getWidth(), 0.01);
      assertFalse(title2.isVisible());
      assertEquals(0.0, title2.getContentXOffset(), 0.01);
      assertNotSame(titleEntity0, titleEntity1);
      assertSame(title1, title0);
      assertSame(title1, title2);
      assertNotSame(titleEntity1, titleEntity0);
      assertSame(title2, title0);
      assertSame(title2, title1);
      
      Shape shape3 = mock(Shape.class, new ViolatedAssumptionAnswer());
      String string2 = titleEntity0.toString();
      assertFalse(titleEntity0.equals((Object)titleEntity1));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("TitleEntity: tooltip = null", string2);
      assertNotNull(string2);
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity0.getToolTipText());
      assertNotSame(titleEntity0, titleEntity1);
      
      TitleEntity titleEntity2 = new TitleEntity(shape3, title1, "TitleEntity: tooltip = null");
      assertFalse(titleEntity0.equals((Object)titleEntity1));
      assertFalse(titleEntity2.equals((Object)titleEntity1));
      assertFalse(titleEntity2.equals((Object)titleEntity0));
      assertFalse(title1.visible);
      assertNotNull(titleEntity2);
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity0.getToolTipText());
      assertNull(title1.getPosition());
      assertEquals(0.0, title1.getHeight(), 0.01);
      assertEquals(0.0, title1.getContentXOffset(), 0.01);
      assertEquals(0.0, title1.getWidth(), 0.01);
      assertEquals(0.0, title1.getContentYOffset(), 0.01);
      assertNull(title1.getID());
      assertNull(title1.getHorizontalAlignment());
      assertFalse(title1.getNotify());
      assertNull(title1.getVerticalAlignment());
      assertFalse(title1.isVisible());
      assertEquals("TitleEntity: tooltip = null", titleEntity2.getToolTipText());
      assertEquals("poly", titleEntity2.getShapeType());
      assertNull(titleEntity2.getURLText());
      
      boolean boolean1 = titleEntity2.equals(title1);
      assertTrue(boolean1 == boolean0);
      assertFalse(titleEntity0.equals((Object)titleEntity2));
      assertFalse(titleEntity0.equals((Object)titleEntity1));
      assertFalse(titleEntity2.equals((Object)titleEntity1));
      assertFalse(titleEntity2.equals((Object)titleEntity0));
      assertFalse(title1.visible);
      assertFalse(boolean1);
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity0.getToolTipText());
      assertNull(title1.getPosition());
      assertEquals(0.0, title1.getHeight(), 0.01);
      assertEquals(0.0, title1.getContentXOffset(), 0.01);
      assertEquals(0.0, title1.getWidth(), 0.01);
      assertEquals(0.0, title1.getContentYOffset(), 0.01);
      assertNull(title1.getID());
      assertNull(title1.getHorizontalAlignment());
      assertFalse(title1.getNotify());
      assertNull(title1.getVerticalAlignment());
      assertFalse(title1.isVisible());
      assertEquals("TitleEntity: tooltip = null", titleEntity2.getToolTipText());
      assertEquals("poly", titleEntity2.getShapeType());
      assertNull(titleEntity2.getURLText());
      assertNotSame(titleEntity0, titleEntity2);
      assertNotSame(titleEntity0, titleEntity1);
      assertSame(title1, title0);
      assertSame(title1, title2);
      assertNotSame(titleEntity2, titleEntity1);
      assertNotSame(titleEntity2, titleEntity0);
      
      boolean boolean2 = titleEntity0.equals(titleEntity2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(titleEntity0.equals((Object)titleEntity2));
      assertFalse(titleEntity0.equals((Object)titleEntity1));
      assertFalse(titleEntity2.equals((Object)titleEntity1));
      assertFalse(titleEntity2.equals((Object)titleEntity0));
      assertFalse(title1.visible);
      assertFalse(boolean2);
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity0.getToolTipText());
      assertNull(title1.getPosition());
      assertEquals(0.0, title1.getHeight(), 0.01);
      assertEquals(0.0, title1.getContentXOffset(), 0.01);
      assertEquals(0.0, title1.getWidth(), 0.01);
      assertEquals(0.0, title1.getContentYOffset(), 0.01);
      assertNull(title1.getID());
      assertNull(title1.getHorizontalAlignment());
      assertFalse(title1.getNotify());
      assertNull(title1.getVerticalAlignment());
      assertFalse(title1.isVisible());
      assertEquals("TitleEntity: tooltip = null", titleEntity2.getToolTipText());
      assertEquals("poly", titleEntity2.getShapeType());
      assertNull(titleEntity2.getURLText());
      assertNotSame(titleEntity0, titleEntity2);
      assertNotSame(titleEntity0, titleEntity1);
      assertSame(title1, title0);
      assertSame(title1, title2);
      assertNotSame(titleEntity2, titleEntity1);
      assertNotSame(titleEntity2, titleEntity0);
      
      String string3 = titleEntity1.toString();
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(titleEntity0.equals((Object)titleEntity2));
      assertFalse(titleEntity0.equals((Object)titleEntity1));
      assertFalse(titleEntity1.equals((Object)titleEntity0));
      assertFalse(titleEntity1.equals((Object)titleEntity2));
      assertFalse(title1.visible);
      assertEquals("TitleEntity: tooltip = TitleEntity: tooltip = null", string3);
      assertNotNull(string3);
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity0.getToolTipText());
      assertNull(title1.getPosition());
      assertEquals(0.0, title1.getHeight(), 0.01);
      assertEquals(0.0, title1.getContentXOffset(), 0.01);
      assertEquals(0.0, title1.getWidth(), 0.01);
      assertEquals(0.0, title1.getContentYOffset(), 0.01);
      assertNull(title1.getID());
      assertNull(title1.getHorizontalAlignment());
      assertFalse(title1.getNotify());
      assertNull(title1.getVerticalAlignment());
      assertFalse(title1.isVisible());
      assertEquals("TitleEntity: tooltip = null", titleEntity1.getToolTipText());
      assertNull(titleEntity1.getURLText());
      assertEquals("poly", titleEntity1.getShapeType());
      assertNotSame(titleEntity0, titleEntity2);
      assertNotSame(titleEntity0, titleEntity1);
      assertSame(title1, title0);
      assertSame(title1, title2);
      assertNotSame(titleEntity1, titleEntity0);
      assertNotSame(titleEntity1, titleEntity2);
      
      String string4 = titleEntity2.toString();
      assertFalse(titleEntity0.equals((Object)titleEntity2));
      assertFalse(titleEntity0.equals((Object)titleEntity1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(titleEntity2.equals((Object)titleEntity1));
      assertFalse(titleEntity2.equals((Object)titleEntity0));
      assertFalse(title1.visible);
      assertEquals("TitleEntity: tooltip = TitleEntity: tooltip = null", string4);
      assertNotNull(string4);
      assertEquals("poly", titleEntity0.getShapeType());
      assertNull(titleEntity0.getURLText());
      assertNull(titleEntity0.getToolTipText());
      assertNull(title1.getPosition());
      assertEquals(0.0, title1.getHeight(), 0.01);
      assertEquals(0.0, title1.getContentXOffset(), 0.01);
      assertEquals(0.0, title1.getWidth(), 0.01);
      assertEquals(0.0, title1.getContentYOffset(), 0.01);
      assertNull(title1.getID());
      assertNull(title1.getHorizontalAlignment());
      assertFalse(title1.getNotify());
      assertNull(title1.getVerticalAlignment());
      assertFalse(title1.isVisible());
      assertEquals("TitleEntity: tooltip = null", titleEntity2.getToolTipText());
      assertEquals("poly", titleEntity2.getShapeType());
      assertNull(titleEntity2.getURLText());
      assertNotSame(titleEntity0, titleEntity2);
      assertNotSame(titleEntity0, titleEntity1);
      assertSame(title1, title0);
      assertSame(title1, title2);
      assertNotSame(titleEntity2, titleEntity1);
      assertNotSame(titleEntity2, titleEntity0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(title0).toString();
      TitleEntity titleEntity0 = new TitleEntity(shape0, title0);
      Object object0 = titleEntity0.clone();
      titleEntity0.equals(object0);
      titleEntity0.getTitle();
      titleEntity0.getTitle();
      titleEntity0.hashCode();
      titleEntity0.setURLText("SansSerif");
      Object object1 = titleEntity0.clone();
      assertTrue(object1.equals((Object)titleEntity0));
      
      titleEntity0.setURLText("e}=TgfKuc@6%EVap6f");
      titleEntity0.hashCode();
      boolean boolean0 = titleEntity0.equals(object1);
      assertFalse(boolean0);
      
      Title title1 = titleEntity0.getTitle();
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      TitleEntity titleEntity1 = new TitleEntity(shape1, title1, "SansSerif");
      titleEntity0.equals(titleEntity1);
      titleEntity1.toString();
      titleEntity1.clone();
      titleEntity0.clone();
      boolean boolean1 = titleEntity1.equals("TitleEntity: tooltip = SansSerif");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(title0).toString();
      TitleEntity titleEntity0 = new TitleEntity(shape0, title0, "KB/~$ZIK9g?+#^x|", "xO2@o]TS0M");
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      titleEntity0.setArea(shape1);
      Object object0 = titleEntity0.clone();
      Title title1 = titleEntity0.getTitle();
      Shape shape2 = mock(Shape.class, new ViolatedAssumptionAnswer());
      TitleEntity titleEntity1 = new TitleEntity(shape2, title1, (String) null, (String) null);
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      titleEntity1.getImageMapAreaTag(toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
      titleEntity1.hashCode();
      boolean boolean0 = titleEntity0.equals(titleEntity1);
      assertFalse(boolean0);
      
      titleEntity0.hashCode();
      boolean boolean1 = titleEntity0.equals("");
      String string0 = titleEntity0.toString();
      assertEquals("TitleEntity: tooltip = KB/~$ZIK9g?+#^x|", string0);
      
      Object object1 = titleEntity0.clone();
      boolean boolean2 = titleEntity0.equals(object1);
      assertFalse(boolean2 == boolean1);
      assertTrue(titleEntity0.equals((Object)object0));
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      TitleEntity titleEntity0 = new TitleEntity(shape0, title0);
      Object object0 = titleEntity0.clone();
      boolean boolean0 = titleEntity0.equals(object0);
      assertTrue(boolean0);
      
      titleEntity0.hashCode();
      assertTrue(titleEntity0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PathIterator pathIterator0 = mock(PathIterator.class, new ViolatedAssumptionAnswer());
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Title title1 = mock(Title.class, new ViolatedAssumptionAnswer());
      Shape shape2 = mock(Shape.class, new ViolatedAssumptionAnswer());
  }
}
