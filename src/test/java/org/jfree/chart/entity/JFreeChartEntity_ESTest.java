/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:17:58 GMT 2019
 */

package org.jfree.chart.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.entity.JFreeChartEntity;
import org.jfree.chart.plot.Plot;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class JFreeChartEntity_ESTest extends JFreeChartEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      Rectangle rectangle0 = new Rectangle(point0);
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("x\"Q^A*?MD#&~nRrQh", (Font) null, plot0, false);
      jFreeChart0.setNotify(false);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(rectangle0, jFreeChart0);
      JFreeChart jFreeChart1 = jFreeChartEntity0.getChart();
      assertFalse(jFreeChart1.getElementHinting());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("}Nog17))U8)^H'N/20", plot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(plot0.DEFAULT_LEGEND_ITEM_CIRCLE, jFreeChart0);
      jFreeChart0.setBorderVisible(true);
      JFreeChart jFreeChart1 = jFreeChartEntity0.getChart();
      assertFalse(jFreeChart1.getElementHinting());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      Rectangle rectangle0 = new Rectangle(point0);
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("x\"Q^A*?MD#&~nRrQh", (Font) null, plot0, false);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(rectangle0, jFreeChart0);
      jFreeChart0.setBackgroundImageAlpha(0);
      JFreeChart jFreeChart1 = jFreeChartEntity0.getChart();
      assertEquals(0, jFreeChart1.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("}Nog17))U8)^H'N/20", plot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(plot0.DEFAULT_LEGEND_ITEM_CIRCLE, jFreeChart0);
      jFreeChart0.setAntiAlias(false);
      JFreeChart jFreeChart1 = jFreeChartEntity0.getChart();
      assertNull(jFreeChart1.getID());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-737), (-737), (-2097), (-737));
      JFreeChartEntity jFreeChartEntity0 = null;
      try {
        jFreeChartEntity0 = new JFreeChartEntity(rectangle0, (JFreeChart) null, "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      JFreeChartEntity jFreeChartEntity0 = null;
      try {
        jFreeChartEntity0 = new JFreeChartEntity(rectangle0, (JFreeChart) null, "]#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JFreeChartEntity jFreeChartEntity0 = null;
      try {
        jFreeChartEntity0 = new JFreeChartEntity((Shape) null, (JFreeChart) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'area' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("x\"Q^A*?MD#&~nRrQh", font0, plot0, false);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(plot0.DEFAULT_LEGEND_ITEM_BOX, jFreeChart0, "");
      assertNull(jFreeChartEntity0.getURLText());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("x\"Q^A*?MD#&~nRrQh", font0, plot0, false);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(plot0.DEFAULT_LEGEND_ITEM_BOX, jFreeChart0, "Save_as", "x\"Q^A*?MD#&~nRrQh");
      assertEquals("x\"Q^A*?MD#&~nRrQh", jFreeChartEntity0.getURLText());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      Rectangle rectangle0 = new Rectangle(point0);
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("Null 'image' argument.", (Font) null, plot0, false);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(rectangle0, jFreeChart0);
      Object object0 = jFreeChartEntity0.clone();
      boolean boolean0 = jFreeChartEntity0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("}Nog17))U8)^H*N/220", plot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(plot0.DEFAULT_LEGEND_ITEM_CIRCLE, jFreeChart0);
      JFreeChartEntity jFreeChartEntity1 = (JFreeChartEntity)jFreeChartEntity0.clone();
      assertTrue(jFreeChartEntity1.equals((Object)jFreeChartEntity0));
      
      jFreeChartEntity1.setToolTipText("tooltip = ");
      boolean boolean0 = jFreeChartEntity0.equals(jFreeChartEntity1);
      assertFalse(jFreeChartEntity1.equals((Object)jFreeChartEntity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("}Nog17))U8)^H*N/220", plot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(plot0.DEFAULT_LEGEND_ITEM_CIRCLE, jFreeChart0);
      JFreeChartEntity jFreeChartEntity1 = new JFreeChartEntity(polygon0, jFreeChart0);
      boolean boolean0 = jFreeChartEntity0.equals(jFreeChartEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("}Nog17))U8)^H*N/220", plot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(plot0.DEFAULT_LEGEND_ITEM_CIRCLE, jFreeChart0);
      boolean boolean0 = jFreeChartEntity0.equals("tooltip = ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      Rectangle rectangle0 = new Rectangle(point0);
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("Null 'image' argument.", (Font) null, plot0, false);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(rectangle0, jFreeChart0);
      boolean boolean0 = jFreeChartEntity0.equals(jFreeChartEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      Rectangle rectangle0 = new Rectangle(point0);
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("Null 'image' argument.", (Font) null, plot0, false);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(rectangle0, jFreeChart0);
      JFreeChartEntity jFreeChartEntity1 = (JFreeChartEntity)jFreeChartEntity0.clone();
      assertTrue(jFreeChartEntity1.equals((Object)jFreeChartEntity0));
      
      jFreeChartEntity1.setURLText("Null 'image' argument.");
      boolean boolean0 = jFreeChartEntity0.equals(jFreeChartEntity1);
      assertFalse(jFreeChartEntity1.equals((Object)jFreeChartEntity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      Rectangle rectangle0 = new Rectangle(point0);
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("Null 'image' argument.", (Font) null, plot0, false);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(rectangle0, jFreeChart0);
      jFreeChartEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      Rectangle rectangle0 = new Rectangle(point0);
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("x\"Q^A*?MD#&~nRrQh", (Font) null, plot0, false);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(rectangle0, jFreeChart0);
      String string0 = jFreeChartEntity0.toString();
      assertEquals("JFreeChartEntity: tooltip = null", string0);
  }
}
