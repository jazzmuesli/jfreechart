/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:16:38 GMT 2019
 */

package org.jfree.chart.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Shape;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.entity.AxisEntity;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AxisEntity_ESTest extends AxisEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      AxisEntity axisEntity0 = null;
      try {
        axisEntity0 = new AxisEntity((Shape) null, axis0, "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'area' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      AxisEntity axisEntity0 = null;
      try {
        axisEntity0 = new AxisEntity((Shape) null, axis0, "AxisEntity: tooltip = ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'area' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      AxisEntity axisEntity0 = null;
      try {
        axisEntity0 = new AxisEntity((Shape) null, axis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'area' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      AxisEntity axisEntity0 = new AxisEntity(shape0, axis0, "g9Y");
      assertEquals("poly", axisEntity0.getShapeType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      AxisEntity axisEntity0 = new AxisEntity(shape0, axis0);
      Object object0 = axisEntity0.clone();
      boolean boolean0 = axisEntity0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      AxisEntity axisEntity0 = new AxisEntity(shape0, axis0);
      Object object0 = axisEntity0.clone();
      assertTrue(object0.equals((Object)axisEntity0));
      
      axisEntity0.setToolTipText("orientation");
      boolean boolean0 = axisEntity0.equals(object0);
      assertFalse(object0.equals((Object)axisEntity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      doReturn("kX4g:d>}g]YOf-OI").when(axis0).toString();
      AxisEntity axisEntity0 = new AxisEntity(shape0, axis0);
      Axis axis1 = axisEntity0.getAxis();
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      AxisEntity axisEntity1 = new AxisEntity(shape1, axis1, "AxisEntity: tooltip = null", "C`g");
      boolean boolean0 = axisEntity0.equals(axisEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      AxisEntity axisEntity0 = new AxisEntity(shape0, axis0);
      boolean boolean0 = axisEntity0.equals(axisEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(axis0).toString();
      AxisEntity axisEntity0 = new AxisEntity(shape0, axis0);
      Axis axis1 = axisEntity0.getAxis();
      boolean boolean0 = axisEntity0.equals(axis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      AxisEntity axisEntity0 = new AxisEntity(shape0, axis0);
      String string0 = axisEntity0.toString();
      assertEquals("AxisEntity: tooltip = null", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      AxisEntity axisEntity0 = new AxisEntity(shape0, axis0);
      Object object0 = axisEntity0.clone();
      assertTrue(object0.equals((Object)axisEntity0));
      
      axisEntity0.setURLText("3\"7;+{j41SY2>");
      boolean boolean0 = axisEntity0.equals(object0);
      assertFalse(object0.equals((Object)axisEntity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      AxisEntity axisEntity0 = new AxisEntity(shape0, axis0, "", "date");
      axisEntity0.hashCode();
  }
}
