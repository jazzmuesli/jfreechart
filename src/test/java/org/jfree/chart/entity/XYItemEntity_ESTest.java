/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:21:29 GMT 2019
 */

package org.jfree.chart.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.entity.XYItemEntity;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class XYItemEntity_ESTest extends XYItemEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYItemEntity xYItemEntity0 = new XYItemEntity(rectangle0, xYDataset0, 0, (-500), "HUchCI2AJ#GO=n*f.^", "HUchCI2AJ#GO=n*f.^");
      XYItemEntity xYItemEntity1 = (XYItemEntity)xYItemEntity0.clone();
      assertEquals((-500), xYItemEntity1.getItem());
      
      xYItemEntity1.setItem(0);
      boolean boolean0 = xYItemEntity0.equals(xYItemEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYItemEntity xYItemEntity0 = new XYItemEntity(rectangle2D0, xYDataset0, 1, 2914, "XYItemEntity: series = ", "XYItemEntity: series = ");
      Object object0 = xYItemEntity0.clone();
      assertEquals(1, xYItemEntity0.getSeriesIndex());
      
      xYItemEntity0.setSeriesIndex(2914);
      boolean boolean0 = xYItemEntity0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[1];
      Polygon polygon0 = new Polygon(intArray0, intArray0, 0);
      XYItemEntity xYItemEntity0 = new XYItemEntity(polygon0, (XYDataset) null, 2015, 2015, "UEfuW", "org.jfree.data.xy.YIntervalSeriesCollection");
      int int0 = xYItemEntity0.getSeriesIndex();
      assertEquals(2015, xYItemEntity0.getItem());
      assertEquals(2015, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYItemEntity xYItemEntity0 = new XYItemEntity(polygon0, xYDataset0, (-1488), 37, "seriesKey", "y");
      int int0 = xYItemEntity0.getSeriesIndex();
      assertEquals((-1488), int0);
      assertEquals(37, xYItemEntity0.getItem());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYItemEntity xYItemEntity0 = new XYItemEntity(rectangle2D0, xYDataset0, 1, 2914, "XYItemEntity: series = ", "XYItemEntity: series = ");
      int int0 = xYItemEntity0.getItem();
      assertEquals(2914, int0);
      assertEquals(1, xYItemEntity0.getSeriesIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYItemEntity xYItemEntity0 = new XYItemEntity(polygon0, xYDataset0, 0, (-2784), "org.jfree.chart.entity.XYItemEntity", "org.jfree.chart.entity.XYItemEntity");
      int int0 = xYItemEntity0.getItem();
      assertEquals((-2784), int0);
      assertEquals(0, xYItemEntity0.getSeriesIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYItemEntity xYItemEntity0 = new XYItemEntity(rectangle0, xYDataset0, 0, (-500), "HUchCI2AJ#GO=n*f.^", "HUchCI2AJ#GO=n*f.^");
      xYItemEntity0.setDataset((XYDataset) null);
      xYItemEntity0.getDataset();
      assertEquals(0, xYItemEntity0.getSeriesIndex());
      assertEquals((-500), xYItemEntity0.getItem());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYItemEntity xYItemEntity0 = null;
      try {
        xYItemEntity0 = new XYItemEntity((Shape) null, xYDataset0, (-1079), 1283, (String) null, " :`H>[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'area' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xYDataset0).toString();
      XYItemEntity xYItemEntity0 = new XYItemEntity(rectangle0, xYDataset0, 0, (-500), "HUchCI2AJ#GO=n*f.^", "HUchCI2AJ#GO=n*f.^");
      xYItemEntity0.getDataset();
      assertEquals(0, xYItemEntity0.getSeriesIndex());
      assertEquals((-500), xYItemEntity0.getItem());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYItemEntity xYItemEntity0 = new XYItemEntity(rectangle0, xYDataset0, 0, (-500), "HUchCI2AJ#GO=n*f.^", "HUchCI2AJ#GO=n*f.^");
      int int0 = xYItemEntity0.getSeriesIndex();
      assertEquals(0, int0);
      assertEquals((-500), xYItemEntity0.getItem());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYItemEntity xYItemEntity0 = new XYItemEntity(rectangle0, xYDataset0, 0, 10, "HUchCI2AJ#GO=n*f.^", "HUchCI2AJ#GO=n*f.^");
      XYItemEntity xYItemEntity1 = (XYItemEntity)xYItemEntity0.clone();
      boolean boolean0 = xYItemEntity0.equals(xYItemEntity1);
      assertEquals(0, xYItemEntity1.getSeriesIndex());
      assertTrue(boolean0);
      assertEquals(10, xYItemEntity1.getItem());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYItemEntity xYItemEntity0 = new XYItemEntity(rectangle2D0, xYDataset0, 1, 0, "GMgI~i/ZU7W,DDJ)[N/", "GMgI~i/ZU7W,DDJ)[N/");
      Object object0 = xYItemEntity0.clone();
      assertEquals(1, xYItemEntity0.getSeriesIndex());
      
      xYItemEntity0.setSeriesIndex(0);
      boolean boolean0 = xYItemEntity0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYItemEntity xYItemEntity0 = new XYItemEntity(rectangle0, xYDataset0, 0, 10, "HUchCI2AJ#GO=n*f.^", "HUchCI2AJ#GO=n*f.^");
      XYItemEntity xYItemEntity1 = new XYItemEntity(rectangle0, (XYDataset) null, 0, 0, "HUchCI2AJ#GO=n*f.^", "XYItemEntity: series = 0, item = 0, dataset = fb");
      boolean boolean0 = xYItemEntity0.equals(xYItemEntity1);
      assertEquals(10, xYItemEntity0.getItem());
      assertFalse(boolean0);
      assertEquals(0, xYItemEntity0.getSeriesIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYItemEntity xYItemEntity0 = new XYItemEntity(rectangle0, xYDataset0, 0, 10, "HUchCI2AJ#GO=n*f.^", "HUchCI2AJ#GO=n*f.^");
      boolean boolean0 = xYItemEntity0.equals("XYItemEntity: series = 0, item = 0, dataset = fb");
      assertFalse(boolean0);
      assertEquals(10, xYItemEntity0.getItem());
      assertEquals(0, xYItemEntity0.getSeriesIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYItemEntity xYItemEntity0 = new XYItemEntity(rectangle0, xYDataset0, 0, 10, "HUchCI2AJ#GO=n*f.^", "HUchCI2AJ#GO=n*f.^");
      boolean boolean0 = xYItemEntity0.equals(xYItemEntity0);
      assertEquals(10, xYItemEntity0.getItem());
      assertEquals(0, xYItemEntity0.getSeriesIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYItemEntity xYItemEntity0 = new XYItemEntity(rectangle0, xYDataset0, 0, 10, "HUchCI2AJ#GO=n*f.^", "HUchCI2AJ#GO=n*f.^");
      XYItemEntity xYItemEntity1 = (XYItemEntity)xYItemEntity0.clone();
      assertEquals(10, xYItemEntity1.getItem());
      
      xYItemEntity1.setItem(0);
      boolean boolean0 = xYItemEntity0.equals(xYItemEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("fb", "fb").when(xYDataset0).toString();
      XYItemEntity xYItemEntity0 = new XYItemEntity(rectangle0, xYDataset0, 0, 10, "HUchCI2AJ#GO=n*f.^", "HUchCI2AJ#GO=n*f.^");
      String string0 = xYItemEntity0.toString();
      assertEquals("XYItemEntity: series = 0, item = 10, dataset = fb", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYItemEntity xYItemEntity0 = new XYItemEntity(rectangle0, xYDataset0, 0, 0, "0Op", "");
      int int0 = xYItemEntity0.getItem();
      assertEquals(0, xYItemEntity0.getSeriesIndex());
      assertEquals(0, int0);
  }
}
