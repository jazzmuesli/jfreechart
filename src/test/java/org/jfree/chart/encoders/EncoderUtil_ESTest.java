/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:35:45 GMT 2019
 */

package org.jfree.chart.encoders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.SampleModel;
import java.io.OutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.encoders.EncoderUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EncoderUtil_ESTest extends EncoderUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn((SampleModel) null).when(bufferedImage0).getSampleModel();
      doReturn(0).when(bufferedImage0).getType();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.writeBufferedImage(bufferedImage0, "png", outputStream0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.writeBufferedImage(bufferedImage0, "jpeg", outputStream0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn(2544).when(bufferedImage0).getType();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.writeBufferedImage(bufferedImage0, "png", outputStream0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2544
         //
         verifyException("javax.imageio.ImageTypeSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.writeBufferedImage(bufferedImage0, "jpeg", outputStream0, 0.0F, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn((SampleModel) null).when(bufferedImage0).getSampleModel();
      doReturn(0).when(bufferedImage0).getType();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.writeBufferedImage(bufferedImage0, "png", outputStream0, (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.writeBufferedImage(bufferedImage0, "jpeg", outputStream0, 0.0F);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn(1725).when(bufferedImage0).getType();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.writeBufferedImage(bufferedImage0, "png", outputStream0, (-1.0F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1725
         //
         verifyException("javax.imageio.ImageTypeSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.writeBufferedImage(bufferedImage0, "jpeg", outputStream0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.encode(bufferedImage0, "jpeg", true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn((SampleModel) null).when(bufferedImage0).getSampleModel();
      doReturn(0).when(bufferedImage0).getType();
      // Undeclared exception!
      try { 
        EncoderUtil.encode(bufferedImage0, "png", (-1.0F), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn((SampleModel) null).when(bufferedImage0).getSampleModel();
      doReturn(0).when(bufferedImage0).getType();
      // Undeclared exception!
      try { 
        EncoderUtil.encode(bufferedImage0, "png");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.encode(bufferedImage0, "jpeg");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.writeBufferedImage(bufferedImage0, (String) null, outputStream0, 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported image format - null
         //
         verifyException("org.jfree.chart.encoders.ImageEncoderFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.encode(bufferedImage0, "", (-34.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported image format - 
         //
         verifyException("org.jfree.chart.encoders.ImageEncoderFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.encode(bufferedImage0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported image format - 
         //
         verifyException("org.jfree.chart.encoders.ImageEncoderFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.encode(bufferedImage0, "M!%~qcd,C>DM)]Oq>", 0.0F, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported image format - M!%~qcd,C>DM)]Oq>
         //
         verifyException("org.jfree.chart.encoders.ImageEncoderFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.writeBufferedImage(bufferedImage0, "", outputStream0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported image format - 
         //
         verifyException("org.jfree.chart.encoders.ImageEncoderFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.encode(bufferedImage0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported image format - 
         //
         verifyException("org.jfree.chart.encoders.ImageEncoderFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.writeBufferedImage(bufferedImage0, "=w$/NrRw6;", outputStream0, 1.0F, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported image format - =w$/NrRw6;
         //
         verifyException("org.jfree.chart.encoders.ImageEncoderFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EncoderUtil encoderUtil0 = new EncoderUtil();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.writeBufferedImage(bufferedImage0, "", outputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported image format - 
         //
         verifyException("org.jfree.chart.encoders.ImageEncoderFactory", e);
      }
  }
}
