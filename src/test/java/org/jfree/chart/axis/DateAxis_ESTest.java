/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 20:37:53 GMT 2019
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.DirectColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.RescaleOp;
import java.math.BigInteger;
import java.net.URL;
import java.text.AttributedCharacterIterator;
import java.text.AttributedString;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.Format;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.event.TreeExpansionListener;
import javax.swing.plaf.basic.BasicTextPaneUI;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.multi.MultiListUI;
import javax.swing.plaf.multi.MultiTextUI;
import javax.swing.table.JTableHeader;
import javax.swing.text.DefaultCaret;
import javax.swing.text.Element;
import javax.swing.text.GapContent;
import javax.swing.text.JTextComponent;
import javax.swing.text.PasswordView;
import javax.swing.text.PlainDocument;
import javax.swing.text.Position;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLabelLocation;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickMarkPosition;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.DateTickUnitType;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberTickUnitSource;
import org.jfree.chart.axis.TickUnits;
import org.jfree.chart.axis.Timeline;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.date.SerialDate;
import org.jfree.chart.date.SpreadsheetDate;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.ChartChangeEventType;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.ui.Size2D;
import org.jfree.chart.ui.VerticalAlignment;
import org.jfree.chart.util.SortOrder;
import org.jfree.chart.util.TableOrder;
import org.jfree.chart.util.UnitType;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.DateRange;
import org.jfree.data.time.Month;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DateAxis_ESTest extends DateAxis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          DateAxis dateAxis0 = new DateAxis();
          HashMap<Format.Field, Month> hashMap0 = new HashMap<Format.Field, Month>(500);
          FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ziz");
          Font font0 = dateAxis0.DEFAULT_AXIS_LABEL_FONT.deriveFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
          dateAxis0.setTickLabelFont(font0);
          dateAxis0.getMinimumDate();
          MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
          JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
          multiplePiePlot0.setBackgroundImageAlignment(15);
          BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 1530);
          Graphics2D graphics2D0 = bufferedImage0.createGraphics();
          Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(15, (-5.0F), 1.0F, 0.0F);
          Rectangle2D rectangle2D0 = rectangle2D_Float0.getBounds2D();
          rectangle2D0.setFrame(263.3813953439231, (-327.55657889), (double) (-1), 0.0);
          RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
          rectangle2D0.intersects((Rectangle2D) rectangle2D_Float0);
          dateAxis0.refreshTicksVertical(graphics2D0, rectangle2D0, rectangleEdge0);
          dateAxis0.java2DToValue((-2192.747263005584), rectangle2D0, rectangleEdge0);
          Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
          ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
          PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
          // Undeclared exception!
          dateAxis0.refreshTicksHorizontal(graphics2D0, rectangle2D_Double0, rectangleEdge0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.zoomRange(1396.4076059, 1396.4076059);
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MINUTE;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 500);
      Date date0 = dateAxis0.calculateLowestVisibleTickValue(dateTickUnit0);
      dateAxis0.getTickMarkPosition();
      DateAxis.createStandardDateTickUnits();
      DateAxis.createStandardDateTickUnits();
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      CategoryAxis categoryAxis0 = new CategoryAxis("({0}, {1}) = {3} - {4}");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      Plot plot0 = combinedDomainCategoryPlot0.getRootPlot();
      dateAxis0.removeChangeListener(plot0);
      dateAxis0.equals(dateFormat0);
      dateAxis0.getDateFormatOverride();
      dateAxis0.nextStandardDate(date0, dateTickUnit0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      HashMap<Format.Field, Month> hashMap0 = new HashMap<Format.Field, Month>(500);
      boolean boolean0 = Axis.DEFAULT_TICK_MARKS_VISIBLE;
      Font font0 = dateAxis0.DEFAULT_AXIS_LABEL_FONT.deriveFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
      dateAxis0.setTickLabelFont(font0);
      dateAxis0.getMinimumDate();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      multiplePiePlot0.setBackgroundImageAlignment(15);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 1530);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(15, (-5.0F), 1.0F, 0.0F);
      Rectangle2D rectangle2D0 = rectangle2D_Float0.getBounds2D();
      rectangle2D0.setFrame(264.35965, (-327.55657889), (double) (-1), 0.0);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      rectangle2D0.intersects((Rectangle2D) rectangle2D_Float0);
      // Undeclared exception!
      dateAxis0.refreshTicksVertical(graphics2D0, rectangle2D0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "range");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid sql generated.  PieDataSet requires 2 columns only");
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.getTickUnit();
      dateAxis0.getTimeZone();
      dateAxis0.getTickMarkPosition();
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("range", meterPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(461, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Size2D size2D0 = new Size2D();
      Line2D.Float line2D_Float0 = new Line2D.Float(10.0F, 0, (-1), 10);
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      dateAxis0.selectVerticalAutoTickUnit(graphics2D0, rectangle2D0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("org.jfree.data.time.DateRange");
      Locale locale0 = dateAxis0.getLocale();
      FileSystemHandling.shouldAllThrowIOExceptions();
      dateAxis0.zoomRange((-3905.5287861797806), (-3905.5287861797806));
      dateAxis0.setUpperMargin((-3905.5287861797806));
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      dateTickUnit0.equals(locale0);
      dateTickUnit0.valueToString(6262.57580066);
      Date date0 = dateAxis0.calculateHighestVisibleTickValue(dateTickUnit0);
      locale0.stripExtensions();
      dateAxis0.getTimeZone();
      dateAxis0.setMinimumDate(date0);
      DirectColorModel directColorModel0 = null;
      try {
        directColorModel0 = new DirectColorModel(500, 500, 498, 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Noncontiguous red mask (1f4
         //
         verifyException("java.awt.image.PackedColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("GsR@8k");
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.YEAR;
      DateFormat dateFormat0 = DateFormat.getInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 500, dateFormat0);
      dateAxis0.calculateHighestVisibleTickValue(dateTickUnit0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      Rectangle2D rectangle2D0 = rectangle0.getBounds2D();
      rectangle2D_Double0.height = 10.0;
      rectangle0.add(180.0, (-4255.38));
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      dateAxis0.valueToJava2D(0.0F, rectangle2D0, rectangleEdge0);
      dateAxis0.configure();
      MockDate mockDate0 = new MockDate();
      dateAxis0.setMinimumDate(mockDate0);
      dateAxis0.zoomRange(2.0, (-1.0));
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      dateAxis0.equals(mockDateFormat0);
      RectangleEdge rectangleEdge1 = RectangleEdge.TOP;
      dateAxis0.java2DToValue((-4255.38), rectangle0, rectangleEdge1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis((String) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        dateAxis0.selectVerticalAutoTickUnit((Graphics2D) null, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.zoomRange(1396.4076059, 1396.4076059);
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MONTH;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 500);
      Date date0 = dateAxis0.calculateLowestVisibleTickValue(dateTickUnit0);
      dateAxis0.getTickMarkPosition();
      DateAxis.createStandardDateTickUnits();
      DateAxis.createStandardDateTickUnits();
      CategoryAxis categoryAxis0 = new CategoryAxis("({0}, {1}) = {3} - {4}");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = (CombinedDomainCategoryPlot)combinedDomainCategoryPlot0.getRootPlot();
      combinedDomainCategoryPlot1.setRangeZeroBaselineStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      dateAxis0.removeChangeListener(combinedDomainCategoryPlot1);
      dateAxis0.getDateFormatOverride();
      dateAxis0.nextStandardDate(date0, dateTickUnit0);
      JFreeChart jFreeChart0 = new JFreeChart("({0}, {1}) = {3} - {4}", combinedDomainCategoryPlot1);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(484, 480, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)roundRectangle2D_Double0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      dateAxis0.selectHorizontalAutoTickUnit(sunGraphics2D0, rectangle2D_Double0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      DateAxis dateAxis0 = new DateAxis("");
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float();
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      dateAxis0.java2DToValue(1.0, rectangle2D0, rectangleEdge0);
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      Date date0 = dateAxis0.calculateHighestVisibleTickValue(dateTickUnit0);
      dateAxis0.setVisible(false);
      dateAxis0.previousStandardDate(date0, dateTickUnit0);
      dateAxis0.isHiddenValue((-3924L));
      dateAxis0.calculateLowestVisibleTickValue(dateTickUnit0);
      long long0 = 2547L;
      System.setCurrentTimeMillis(2547L);
      dateAxis0.java2DToValue(0.0F, rectangle2D0, rectangleEdge0);
      dateAxis0.calculateLowestVisibleTickValue(dateTickUnit0);
      dateAxis0.calculateHighestVisibleTickValue(dateTickUnit0);
      RectangleEdge rectangleEdge1 = RectangleEdge.RIGHT;
      // Undeclared exception!
      try { 
        dateAxis0.selectHorizontalAutoTickUnit((Graphics2D) null, rectangle2D0, rectangleEdge1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.clone();
      LogAxis logAxis0 = new LogAxis();
      logAxis0.getNumberFormatOverride();
      NumberTickUnitSource numberTickUnitSource0 = new NumberTickUnitSource(true, (NumberFormat) null);
      dateAxis0.setStandardTickUnits(numberTickUnitSource0);
      dateAxis0.zoomRange(1967.5085, (-2115.8366782436456));
      JTableHeader jTableHeader0 = new JTableHeader();
      Rectangle rectangle0 = new Rectangle(500, 500, 500, (-5));
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      dateAxis0.valueToJava2D(0.4, rectangle0, rectangleEdge0);
      dateAxis0.getDateFormatOverride();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(488, 31, 0.05);
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("D\"v`y^$#r", waferMapPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10, 2.0, (-10.0), chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      Rectangle2D rectangle2D0 = dateAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = RectangleEdge.BOTTOM;
      dateAxis0.selectAutoTickUnit(graphics2D0, rectangle2D0, rectangleEdge1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertNotNull(dateAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      dateAxis0.zoomRange(1396.4076059, 1396.4076059);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(1397.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(1396.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MONTH;
      assertEquals(2, dateTickUnitType0.getCalendarField());
      assertEquals("DateTickUnitType.MONTH", dateTickUnitType0.toString());
      assertNotNull(dateTickUnitType0);
      
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 500);
      assertEquals(2, dateTickUnitType0.getCalendarField());
      assertEquals("DateTickUnitType.MONTH", dateTickUnitType0.toString());
      assertEquals(500, dateTickUnit0.getMultiple());
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals(1.3392E12, dateTickUnit0.getSize(), 0.01);
      assertEquals(2, dateTickUnit0.getCalendarField());
      assertEquals(500, dateTickUnit0.getRollMultiple());
      assertNotNull(dateTickUnit0);
      
      Date date0 = dateAxis0.calculateLowestVisibleTickValue(dateTickUnit0);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(1397.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(1396.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(2, dateTickUnitType0.getCalendarField());
      assertEquals("DateTickUnitType.MONTH", dateTickUnitType0.toString());
      assertEquals(500, dateTickUnit0.getMultiple());
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals(1.3392E12, dateTickUnit0.getSize(), 0.01);
      assertEquals(2, dateTickUnit0.getCalendarField());
      assertEquals(500, dateTickUnit0.getRollMultiple());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      DateTickMarkPosition dateTickMarkPosition0 = dateAxis0.getTickMarkPosition();
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(1397.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(1396.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(DateTickMarkPosition.START, dateTickMarkPosition0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      TickUnits tickUnits0 = (TickUnits)DateAxis.createStandardDateTickUnits();
      assertEquals(40, tickUnits0.size());
      assertNotNull(tickUnits0);
      
      TickUnits tickUnits1 = (TickUnits)DateAxis.createStandardDateTickUnits();
      assertTrue(tickUnits1.equals((Object)tickUnits0));
      assertEquals(40, tickUnits1.size());
      assertNotSame(tickUnits1, tickUnits0);
      assertNotNull(tickUnits1);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getTimeInstance();
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertNotNull(simpleDateFormat0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis("({0}, {1}) = {3} - {4}");
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals("({0}, {1}) = {3} - {4}", categoryAxis0.getLabel());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNotNull(categoryAxis0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals("({0}, {1}) = {3} - {4}", categoryAxis0.getLabel());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = (CombinedDomainCategoryPlot)combinedDomainCategoryPlot0.getRootPlot();
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals("({0}, {1}) = {3} - {4}", categoryAxis0.getLabel());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainCrosshairVisible());
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot1.getDomainGridlinePosition());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot1.getOrientation());
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainCategoryPlot1.isNotify());
      assertTrue(combinedDomainCategoryPlot1.isRangeZoomable());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot1.getDatasetRenderingOrder());
      assertEquals(1, combinedDomainCategoryPlot1.getRendererCount());
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot1.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot1.getCrosshairDatasetIndex());
      assertFalse(combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot1.isDomainPannable());
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot1.isRangePannable());
      assertEquals(1, combinedDomainCategoryPlot1.getRangeAxisCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot1.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot1.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getColumnRenderingOrder());
      assertTrue(combinedDomainCategoryPlot1.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot1.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot0);
      assertNotNull(combinedDomainCategoryPlot1);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      dateAxis0.removeChangeListener(combinedDomainCategoryPlot1);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(1397.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(1396.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals("({0}, {1}) = {3} - {4}", categoryAxis0.getLabel());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainCrosshairVisible());
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot1.getDomainGridlinePosition());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot1.getOrientation());
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainCategoryPlot1.isNotify());
      assertTrue(combinedDomainCategoryPlot1.isRangeZoomable());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot1.getDatasetRenderingOrder());
      assertEquals(1, combinedDomainCategoryPlot1.getRendererCount());
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot1.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot1.getCrosshairDatasetIndex());
      assertFalse(combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot1.isDomainPannable());
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot1.isRangePannable());
      assertEquals(1, combinedDomainCategoryPlot1.getRangeAxisCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot1.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot1.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getColumnRenderingOrder());
      assertTrue(combinedDomainCategoryPlot1.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot1.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      boolean boolean0 = dateAxis0.equals(simpleDateFormat0);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(1397.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(1396.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertFalse(boolean0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      DateFormat dateFormat0 = dateAxis0.getDateFormatOverride();
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(1397.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(1396.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertNull(dateFormat0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      Date date1 = dateAxis0.nextStandardDate(date0, dateTickUnit0);
      assertTrue(date1.equals((Object)date0));
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(1397.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(1396.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(2, dateTickUnitType0.getCalendarField());
      assertEquals("DateTickUnitType.MONTH", dateTickUnitType0.toString());
      assertEquals(500, dateTickUnit0.getMultiple());
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals(1.3392E12, dateTickUnit0.getSize(), 0.01);
      assertEquals(2, dateTickUnit0.getCalendarField());
      assertEquals(500, dateTickUnit0.getRollMultiple());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertNotSame(date0, date1);
      assertNotSame(date1, date0);
      assertNotNull(date1);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      dateAxis0.calculateLowestVisibleTickValue(dateTickUnit0);
      dateAxis0.setMinimumDate(date0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      HashMap<Format.Field, Month> hashMap0 = new HashMap<Format.Field, Month>(500);
      dateAxis0.DEFAULT_AXIS_LABEL_FONT.deriveFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
      dateAxis0.getMinimumDate();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(15, (-5.0F), 1.0F, 0.0F);
      Rectangle2D rectangle2D0 = rectangle2D_Float0.getBounds2D();
      rectangle2D0.setFrame(264.35965, (-327.55657889), (double) (-1), 0.0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      rectangle2D0.intersects((Rectangle2D) rectangle2D_Float0);
      dateAxis0.refreshTicksVertical(graphics2D0, rectangle2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = RectangleEdge.BOTTOM;
      dateAxis0.java2DToValue(1.0F, rectangle2D_Float0, rectangleEdge1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("GsR@8k");
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.YEAR;
      DateFormat dateFormat0 = DateFormat.getInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 500, dateFormat0);
      dateAxis0.calculateHighestVisibleTickValue(dateTickUnit0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      Rectangle2D rectangle2D0 = rectangle0.getBounds2D();
      rectangle2D_Double0.height = 10.0;
      rectangle0.add(180.0, (-4255.38));
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      dateAxis0.valueToJava2D(2.0, rectangle2D0, rectangleEdge0);
      dateAxis0.configure();
      MockDate mockDate0 = new MockDate();
      dateAxis0.setMinimumDate(mockDate0);
      dateAxis0.zoomRange(2.0, (-1.0));
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      dateAxis0.equals(mockDateFormat0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis((String) null);
      dateAxis0.clone();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      dateAxis0.java2DToValue(2.0, rectangle2D_Double0, rectangleEdge0);
      int int0 = 456;
      int int1 = (-366);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byte byte0 = (byte) (-25);
      byteArray0[1] = (byte) (-25);
      byte byte1 = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte) (-41);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-70);
      byteArray1[1] = (byte) (-40);
      byteArray1[2] = (byte)39;
      byteArray1[3] = (byte) (-37);
      byteArray1[4] = (byte)67;
      byteArray1[5] = (byte) (-40);
      byteArray1[6] = (byte)39;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(456, (-366), byteArray0, byteArray1, byteArray1, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      HashMap<Format.Field, Month> hashMap0 = new HashMap<Format.Field, Month>(500);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ziz");
      Font font0 = dateAxis0.DEFAULT_AXIS_LABEL_FONT.deriveFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
      dateAxis0.setTickLabelFont(font0);
      dateAxis0.getMinimumDate();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 1530);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(15, (-5.0F), 1.0F, 0.0F);
      Rectangle2D rectangle2D0 = rectangle2D_Float0.getBounds2D();
      rectangle2D0.setFrame(264.35965, (-327.55657889), (double) (-1), 0.0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      rectangle2D0.intersects((Rectangle2D) rectangle2D_Float0);
      dateAxis0.refreshTicksVertical(graphics2D0, rectangle2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = RectangleEdge.BOTTOM;
      dateAxis0.java2DToValue((-2226.995609607963), rectangle2D0, rectangleEdge1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("GsR@8k");
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MILLISECOND;
      DateFormat dateFormat0 = DateFormat.getInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 500, dateFormat0);
      dateAxis0.calculateHighestVisibleTickValue(dateTickUnit0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      Rectangle2D rectangle2D0 = rectangle0.getBounds2D();
      rectangle2D_Double0.height = 10.0;
      rectangle0.add(180.0, (-4255.38));
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      dateAxis0.valueToJava2D(2.0, rectangle2D0, rectangleEdge0);
      dateAxis0.configure();
      MockDate mockDate0 = new MockDate();
      dateAxis0.setMinimumDate(mockDate0);
      dateAxis0.zoomRange(2.0, 17.751533119179907);
      dateAxis0.isHiddenValue(1000L);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)125;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      System.setCurrentTimeMillis((-1L));
      DateAxis dateAxis0 = new DateAxis("XYItemEntity: series = ");
      dateAxis0.zoomRange((-2023.7586088550925), (byte) (-39));
      dateAxis0.autoAdjustRange();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis((String) null);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNotNull(dateAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(5, dateTickUnit0.getCalendarField());
      assertEquals(8.64E7, dateTickUnit0.getSize(), 0.01);
      assertEquals(1, dateTickUnit0.getMultiple());
      assertEquals(1, dateTickUnit0.getRollMultiple());
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertNotNull(dateTickUnit0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      Date date0 = dateAxis0.calculateHighestVisibleTickValue(dateTickUnit0);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(5, dateTickUnit0.getCalendarField());
      assertEquals(8.64E7, dateTickUnit0.getSize(), 0.01);
      assertEquals(1, dateTickUnit0.getMultiple());
      assertEquals(1, dateTickUnit0.getRollMultiple());
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertNotNull(date0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      Date date1 = dateAxis0.calculateHighestVisibleTickValue(dateTickUnit0);
      assertTrue(date1.equals((Object)date0));
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(5, dateTickUnit0.getCalendarField());
      assertEquals(8.64E7, dateTickUnit0.getSize(), 0.01);
      assertEquals(1, dateTickUnit0.getMultiple());
      assertEquals(1, dateTickUnit0.getRollMultiple());
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date1.toString());
      assertNotSame(date1, date0);
      assertNotNull(date1);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Point point0 = new Point(500, 500);
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(dimension0);
      Rectangle rectangle0 = new Rectangle(point0, dimension1);
      Rectangle rectangle1 = new Rectangle(rectangle0);
      Rectangle2D rectangle2D0 = rectangle2D_Float0.createIntersection(rectangle1);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      // Undeclared exception!
      try { 
        dateAxis0.refreshTicksHorizontal((Graphics2D) null, rectangle2D0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      HashMap<Format.Field, Month> hashMap0 = new HashMap<Format.Field, Month>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ziz");
      Font font0 = dateAxis0.DEFAULT_AXIS_LABEL_FONT.deriveFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
      dateAxis0.setTickLabelFont(font0);
      dateAxis0.getMinimumDate();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 1530);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(15, (-5.0F), 1.0F, 0.0F);
      Rectangle2D rectangle2D0 = rectangle2D_Float0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      dateAxis0.refreshTicksVertical(graphics2D0, rectangle2D0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("x}7");
      dateAxis0.getLocale();
      dateAxis0.getTimeZone();
      dateAxis0.setTimeline((Timeline) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.autoAdjustRange();
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
      dateAxis0.setDateFormatOverride(dateFormat0);
      Locale locale0 = Locale.UK;
      dateAxis0.setLocale(locale0);
      dateAxis0.clone();
      dateAxis0.configure();
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-892);
      floatArray0[1] = (float) 0;
      floatArray0[2] = 0.0F;
      Kernel kernel0 = new Kernel(0, (-892), floatArray0);
      ConvolveOp convolveOp0 = new ConvolveOp(kernel0);
      int int0 = (-566);
      int int1 = 168;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)110;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-892), 0, byteArray0, (byte) (-42), false, (byte) (-42));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("GsR@8k");
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MILLISECOND;
      DateFormat dateFormat0 = DateFormat.getInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 500, dateFormat0);
      dateAxis0.calculateLowestVisibleTickValue(dateTickUnit0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      Rectangle2D rectangle2D0 = rectangle0.getBounds2D();
      rectangle2D_Double0.height = 10.0;
      rectangle0.add(180.0, (-4255.38));
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      dateAxis0.valueToJava2D(2.0, rectangle2D0, rectangleEdge0);
      dateAxis0.configure();
      MockDate mockDate0 = new MockDate();
      dateAxis0.setMinimumDate(mockDate0);
      dateAxis0.zoomRange(2.0, (-1.0));
      // Undeclared exception!
      try { 
        dateAxis0.selectHorizontalAutoTickUnit((Graphics2D) null, rectangle2D0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("GsR@8k");
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MILLISECOND;
      DateFormat dateFormat0 = DateFormat.getInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 500, dateFormat0);
      dateAxis0.calculateHighestVisibleTickValue(dateTickUnit0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      Rectangle2D rectangle2D0 = rectangle0.getBounds2D();
      rectangle2D_Double0.height = 10.0;
      rectangle0.add(180.0, (-4255.38));
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      dateAxis0.valueToJava2D(2.0, rectangle2D0, rectangleEdge0);
      dateAxis0.configure();
      MockDate mockDate0 = new MockDate();
      dateAxis0.setMinimumDate(mockDate0);
      dateAxis0.zoomRange(2.0, (-1.0));
      RectangleEdge rectangleEdge1 = RectangleEdge.RIGHT;
      dateAxis0.dateToJava2D(mockDate0, rectangle2D0, rectangleEdge1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4), "Fkn");
      Locale locale0 = Locale.CANADA_FRENCH;
      DateAxis dateAxis0 = new DateAxis("Fkn", simpleTimeZone0, locale0);
      locale0.getDisplayVariant();
      DateAxis dateAxis1 = new DateAxis("");
      Date date0 = dateAxis1.getMinimumDate();
      Point point0 = new Point(10, 500);
      Point point1 = new Point(point0);
      Dimension dimension0 = new Dimension(500, (-4));
      Rectangle rectangle0 = new Rectangle(point1, dimension0);
      Rectangle2D rectangle2D0 = dateAxis0.DEFAULT_AXIS_LABEL_INSETS.createOutsetRectangle((Rectangle2D) rectangle0);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      dateAxis0.dateToJava2D(date0, rectangle2D0, rectangleEdge0);
      dateAxis1.getTimeline();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.clone();
      dateAxis0.clone();
      dateAxis0.autoAdjustRange();
      MockDate mockDate0 = new MockDate(0L);
      double double0 = 4.9E-324;
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double((-332.0), 8.0, 4.9E-324, (-2086.30009212), (-332.0), 0.0F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      dateAxis0.dateToJava2D(mockDate0, rectangle2D0, rectangleEdge0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, (-297));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (10) and height (-297) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.getDisplayName();
      Locale locale0 = Locale.CHINESE;
      DateAxis.createStandardDateTickUnits(timeZone0, locale0);
      DateAxis dateAxis0 = new DateAxis();
      PiePlot piePlot0 = new PiePlot();
      piePlot0.setLabelShadowPaint(dateAxis0.DEFAULT_TICK_MARK_PAINT);
      RectangleInsets rectangleInsets0 = piePlot0.getSimpleLabelOffset();
      dateAxis0.setLabelInsets(rectangleInsets0, true);
      Timeline timeline0 = dateAxis0.getTimeline();
      dateAxis0.setTimeline(timeline0);
      dateAxis0.clone();
      Date date0 = dateAxis0.getMaximumDate();
      dateAxis0.setMaximumDate(date0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("`9c9!??ro0'");
      Date date0 = dateAxis0.getMaximumDate();
      dateAxis0.setMaximumDate(date0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.DAY;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 23);
      dateTickUnit0.toString();
      dateAxis0.setTickUnit(dateTickUnit0, false, false);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      MockDate mockDate0 = new MockDate();
      dateAxis0.setMinimumDate(mockDate0);
      dateAxis0.getTickUnit();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) dateAxis0;
      JTree jTree0 = new JTree(objectArray0);
      jTree0.getAnchorSelectionPath();
      jTree0.getPathBounds((TreePath) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      // Undeclared exception!
      try { 
        dateAxis0.java2DToValue(1770.49, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)17;
      byte byte0 = (byte)99;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-77);
      byte byte1 = (byte) (-24);
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.KOREA;
      locale0.getDisplayVariant(locale1);
      // Undeclared exception!
      try { 
        DateAxis.createStandardDateTickUnits((TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      Date date0 = dateAxis0.getMinimumDate();
      BasicTextPaneUI basicTextPaneUI0 = new BasicTextPaneUI();
      Position.Bias position_Bias0 = Position.Bias.Forward;
      dateAxis0.setMinimumDate(date0);
      dateAxis0.configure();
      Date date1 = dateAxis0.calculateLowestVisibleTickValue(dateTickUnit0);
      dateAxis0.previousStandardDate(date1, dateTickUnit0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "date";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "date");
      DateAxis dateAxis0 = new DateAxis("MV=|9xc;QY");
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.HOUR;
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 500, dateFormat0);
      dateTickUnit0.valueToString(500);
      Date date0 = dateAxis0.calculateHighestVisibleTickValue(dateTickUnit0);
      dateAxis0.nextStandardDate(date0, dateTickUnit0);
      TimeZone timeZone0 = TimeZone.getTimeZone("date");
      Locale locale0 = new Locale("hz*J");
      DateAxis.createStandardDateTickUnits(timeZone0, locale0);
      TimeZone timeZone1 = null;
      Locale locale1 = null;
      try {
        locale1 = new Locale((String) null, "MV=|9xc;QY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      MockDate mockDate0 = new MockDate();
      dateAxis0.setMinimumDate(mockDate0);
      dateAxis0.getTickUnit();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) dateAxis0;
      JTree jTree0 = new JTree(objectArray0);
      jTree0.getAnchorSelectionPath();
      jTree0.getPathBounds((TreePath) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      // Undeclared exception!
      try { 
        dateAxis0.java2DToValue(1770.49, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MONTH;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 500);
      dateTickUnit0.equals(dateTickUnitType0);
      dateAxis0.calculateHighestVisibleTickValue(dateTickUnit0);
      DateTickUnitType dateTickUnitType1 = DateTickUnitType.MINUTE;
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("]W]N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'N'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      dateTickUnit0.toString();
      // Undeclared exception!
      try { 
        dateAxis0.previousStandardDate((Date) null, dateTickUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "";
      DateAxis dateAxis0 = new DateAxis("");
      // Undeclared exception!
      try { 
        dateAxis0.setLocale((Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.resizeRange(4.5);
      Graphics2D graphics2D0 = null;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0F, 0.0, 0.0, 0.0);
      rectangle2D_Double0.clone();
      dateAxis0.setRightArrow(rectangle2D_Double0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      // Undeclared exception!
      try { 
        dateAxis0.selectHorizontalAutoTickUnit((Graphics2D) null, defaultCaret0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("3JD yDP!'oXhZ'Kv");
      dateAxis0.clone();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("3JD yDP!'oXhZ'Kv");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(2258);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      dateAxis0.setMaximumDate(date0);
      int[] intArray0 = new int[7];
      intArray0[0] = 500;
      intArray0[1] = 500;
      intArray0[2] = (-1430);
      intArray0[3] = 500;
      intArray0[4] = 500;
      intArray0[5] = (-1430);
      intArray0[6] = 500;
      BigInteger bigInteger0 = BigInteger.ONE;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-1430), 500, intArray0, (-1430), (-1430), bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      JTable jTable0 = new JTable(stack0, stack0);
      Color color0 = jTable0.getSelectionBackground();
      dateAxis0.setAxisLinePaint(color0);
      boolean boolean0 = false;
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      // Undeclared exception!
      try { 
        dateAxis0.setRange(range0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A positive range length is required: [Jan 1, 1970 12:00:00 AM --> Jan 1, 1970 12:00:00 AM]
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, " E", 0, 0, (-685), 0, 2297, 0, 2297, 2297);
      Locale locale0 = new Locale(" E", " E", " E");
      DateAxis dateAxis0 = new DateAxis(" E", simpleTimeZone0, locale0);
      dateAxis0.hashCode();
      dateAxis0.getTimeZone();
      Graphics2D graphics2D0 = null;
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      JTree jTree0 = new JTree((Hashtable<?, ?>) null);
      jTree0.addTreeExpansionListener((TreeExpansionListener) null);
      TreePath treePath0 = null;
      try {
        treePath0 = new TreePath((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path in TreePath must be non null and not empty.
         //
         verifyException("javax.swing.tree.TreePath", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Date date0 = dateAxis0.getMinimumDate();
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      int int0 = 59;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 59);
      dateAxis0.nextStandardDate(date0, dateTickUnit0);
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        DateFormat.getDateTimeInstance(11, 11, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 11
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("e[>(jHf^XZ#RjA\"B\"4");
      dateAxis0.setTickLabelsVisible(false);
      TimeZone timeZone0 = TimeZone.getDefault();
      dateAxis0.setTimeZone(timeZone0);
      DateRange dateRange0 = new DateRange();
      dateAxis0.setRange((Range) dateRange0, false, false);
      dateAxis0.clone();
      Graphics2D graphics2D0 = null;
      int int0 = 1889;
      StringCharacterIterator stringCharacterIterator0 = null;
      try {
        stringCharacterIterator0 = new StringCharacterIterator("e[>(jHf^XZ#RjA\"B\"4", 1889);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid position
         //
         verifyException("java.text.StringCharacterIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      dateAxis0.setDateFormatOverride(dateFormat0);
      // Undeclared exception!
      try { 
        dateAxis0.setMinimumDate((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'date' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis((String) null);
      boolean boolean0 = true;
      dateAxis0.setAutoTickUnitSelection(true, true);
      MockDate mockDate0 = new MockDate();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      boolean boolean1 = false;
      statisticalLineAndShapeRenderer0.setUseFillPaint(false);
      statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) null);
      // Undeclared exception!
      try { 
        dateAxis0.setRange((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.CANADA;
      DateAxis.createStandardDateTickUnits(timeZone0, locale0);
      DateAxis dateAxis0 = new DateAxis("7${@", timeZone0, locale0);
      dateAxis0.setUpperMargin((-975.627));
      Object object0 = dateAxis0.clone();
      dateAxis0.equals(object0);
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("7${@", piePlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(0.0F, 2.0F, renderingHints0);
      BufferedImage bufferedImage0 = null;
      int int0 = (-813);
      // Undeclared exception!
      try { 
        ColorSpace.getInstance((-813));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis((String) null);
      TimeZone timeZone0 = TimeZone.getDefault();
      dateAxis0.setTimeZone(timeZone0);
      PolarPlot polarPlot0 = new PolarPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Rectangle2D.union(rectangle2D_Float0, rectangle2D_Float0, rectangle2D_Float0);
      Point point0 = polarPlot0.translateToJava2D(0.0F, 500, dateAxis0, rectangle2D_Float0);
      Rectangle rectangle0 = new Rectangle(point0);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      dateAxis0.valueToJava2D(497.0, rectangle0, rectangleEdge0);
      dateAxis0.zoomRange(10000, 10.0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Stack<Locale> stack0 = new Stack<Locale>();
      Locale.lookup(arrayList0, stack0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat((String) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = ".&}rBYC!].\\nc#iD7u";
      DateAxis dateAxis0 = new DateAxis(".&}rBYC!].\nc#iD7u");
      Range range0 = Range.shift((Range) dateAxis0.DEFAULT_DATE_RANGE, 2.0, true);
      dateAxis0.fireChangeEvent();
      range0.toString();
      dateAxis0.setRange(range0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        dateAxis0.valueToJava2D((-2359.3), (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("~il~$&pUs");
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      dateAxis0.setDateFormatOverride(dateFormat0);
      double double0 = 1086.3681143930237;
      dateAxis0.setAutoRangeMinimumSize(1086.3681143930237, true);
      dateAxis0.isHiddenValue(1L);
      dateAxis0.setRange(1.0, 6262.57580066);
      Date date0 = dateAxis0.getMinimumDate();
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MILLISECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 500, dateFormat0);
      Date date1 = dateAxis0.previousStandardDate(date0, dateTickUnit0);
      dateAxis0.getMinimumDate();
      dateAxis0.configure();
      // Undeclared exception!
      try { 
        dateAxis0.setRange(date0, date1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'lower' < 'upper'.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      dateAxis0.setRange((Range) dateRange0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("|FhK$%!DJPjD");
      dateAxis0.clone();
      // Undeclared exception!
      try { 
        dateAxis0.nextStandardDate((Date) null, (DateTickUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.getMinimumDate();
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      Date date0 = dateAxis0.calculateLowestVisibleTickValue(dateTickUnit0);
      BasicTextPaneUI basicTextPaneUI0 = new BasicTextPaneUI();
      Position.Bias position_Bias0 = Position.Bias.Forward;
      dateAxis0.setMinimumDate(date0);
      dateAxis0.configure();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.UK;
      DateAxis dateAxis0 = new DateAxis("9v&XfT)n{?j*ip`;", timeZone0, locale0);
      timeZone0.toZoneId();
      DateTickMarkPosition dateTickMarkPosition0 = DateTickMarkPosition.END;
      dateAxis0.setTickMarkPosition(dateTickMarkPosition0);
      ZoneId.from(zoneOffset0);
      dateAxis0.setRange((double) 0, 1.0E-8);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(500, 1746, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 0
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("IivNs6Bak]|");
      // Undeclared exception!
      try { 
        dateAxis0.setRange((Date) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = null;
      DateAxis dateAxis0 = new DateAxis((String) null);
      dateAxis0.pan(0.0);
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      dateAxis0.getMaximumDate();
      Graphics2D graphics2D0 = null;
      dateAxis0.pan(1396.4076059);
      dateTickUnit0.dateToString(dateAxis0.DEFAULT_ANCHOR_DATE);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-1811.486395), 1.0E-100, 2.0, 0.0);
      rectangle2D_Double0.width = 1.0E-8;
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      // Undeclared exception!
      try { 
        dateAxis0.selectAutoTickUnit((Graphics2D) null, rectangle2D_Double0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DateAxis dateAxis0 = new DateAxis("org.jfree.chart.axis.LogarithmicAxis", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(500, 500, 500, 500, (-1));
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.HOUR;
      mockDate0.after(dateAxis0.DEFAULT_ANCHOR_DATE);
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 500);
      dateTickUnit0.dateToString(mockDate0);
      dateAxis0.previousStandardDate(mockDate0, dateTickUnit0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      dateAxis0.getDateFormatOverride();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 500);
      RingPlot ringPlot0 = new RingPlot(categoryToPieDataset0);
      Font font0 = ringPlot0.getCenterTextFont();
      dateAxis0.setTickLabelFont(font0);
      dateAxis0.setAutoRangeMinimumSize(4970.6245468, false);
      dateAxis0.setRangeAboutValue(0.0, 2499.08);
      dateAxis0.autoAdjustRange();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.getDataRange(dateAxis0);
      // Undeclared exception!
      try { 
        dateAxis0.setRange((Range) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      Graphics2D graphics2D0 = null;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      standardEntityCollection0.getEntities();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      // Undeclared exception!
      try { 
        dateAxis0.refreshTicksVertical((Graphics2D) null, rectangle2D0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      dateAxis0.clone();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("5#n9\"r\"Y>,3;/S");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      Rectangle2D rectangle2D0 = rectangle2D_Double0.createUnion(rectangle0);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      dateAxis0.valueToJava2D(0.0, rectangle2D0, rectangleEdge0);
      dateAxis0.getTickUnit();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(498, "5#n9\"r\"Y>,3;/S", 0, 529, (-1), 0, 0, 0, 500, 529, (-575));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day 529
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.ITALIAN;
      DateAxis dateAxis0 = new DateAxis("7,1e)", timeZone0, locale0);
      dateAxis0.setTimeZone(timeZone0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("<Z_)Gq'u6|?T.");
      dateAxis0.autoAdjustRange();
      dateAxis0.isHiddenValue((-496L));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Date date0 = dateAxis0.getMaximumDate();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      // Undeclared exception!
      try { 
        dateAxis0.dateToJava2D(date0, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      GapContent gapContent0 = new GapContent(500);
      PlainDocument plainDocument0 = new PlainDocument(gapContent0);
      Element element0 = plainDocument0.getParagraphElement(500);
      PasswordView passwordView0 = new PasswordView(element0);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      plainDocument0.getLength();
      JFreeChart jFreeChart0 = new JFreeChart("bQ@x=jBRN }|Z|", piePlot3D0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(200);
      Date date0 = spreadsheetDate0.toDate();
      SerialDate.stringToMonthCode("");
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      Date date1 = dateAxis0.previousStandardDate(date0, dateTickUnit0);
      MockDate mockDate0 = new MockDate(777L);
      // Undeclared exception!
      try { 
        dateAxis0.setRange(date1, (Date) mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'lower' < 'upper'.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      MockDate mockDate0 = (MockDate)DateAxis.DEFAULT_ANCHOR_DATE;
      // Undeclared exception!
      try { 
        dateAxis0.setRange((Date) mockDate0, (Date) mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'lower' < 'upper'.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateAxis.createStandardDateTickUnits();
      DateAxis dateAxis0 = new DateAxis();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = rectangle2D_Double0.getFrame();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      dateAxis0.java2DToValue(1485.2400239, rectangle2D0, rectangleEdge0);
      dateAxis0.setVerticalTickLabels(true);
      dateAxis0.getTickMarkPosition();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.getTickMarkPosition();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("locale");
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      dateAxis0.setDateFormatOverride(dateFormat0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.US;
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      DateAxis dateAxis0 = new DateAxis("3hK):MZ-{d>_=", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertTrue(dateAxis0.isAutoRange());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals("3hK):MZ-{d>_=", dateAxis0.getLabel());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNotNull(dateAxis0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      
      // Undeclared exception!
      try { 
        dateAxis0.calculateLowestVisibleTickValue((DateTickUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.getMinimumDate();
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      dateAxis0.calculateLowestVisibleTickValue(dateTickUnit0);
      BasicTextPaneUI basicTextPaneUI0 = new BasicTextPaneUI();
      String string0 = null;
      JTextArea jTextArea0 = new JTextArea((String) null);
      Position.Bias position_Bias0 = Position.Bias.Forward;
      // Undeclared exception!
      try { 
        basicTextPaneUI0.modelToView((JTextComponent) jTextArea0, 1062, position_Bias0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicTextUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 255;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(255, "]z<d.z8Yo");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("]z<d.z8Yo", simpleTimeZone0.getID());
      assertEquals(255, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=]z<d.z8Yo,offset=255,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      int int1 = 0;
      String string0 = simpleTimeZone0.getDisplayName(false, 0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("]z<d.z8Yo", simpleTimeZone0.getID());
      assertEquals(255, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=]z<d.z8Yo,offset=255,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(string0);
      assertEquals("GMT+00:00", string0);
      
      Locale locale0 = Locale.UK;
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      DateAxis dateAxis0 = new DateAxis("]z<d.z8Yo", simpleTimeZone0, locale0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("]z<d.z8Yo", simpleTimeZone0.getID());
      assertEquals(255, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=]z<d.z8Yo,offset=255,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("]z<d.z8Yo", dateAxis0.getLabel());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNotNull(dateAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("]z<d.z8Yo", simpleTimeZone0.getID());
      assertEquals(255, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=]z<d.z8Yo,offset=255,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("]z<d.z8Yo", dateAxis0.getLabel());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(8.64E7, dateTickUnit0.getSize(), 0.01);
      assertEquals(5, dateTickUnit0.getCalendarField());
      assertEquals(1, dateTickUnit0.getRollMultiple());
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals(1, dateTickUnit0.getMultiple());
      assertNotNull(dateTickUnit0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      dateAxis0.setTickUnit(dateTickUnit0, true, true);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("]z<d.z8Yo", simpleTimeZone0.getID());
      assertEquals(255, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=]z<d.z8Yo,offset=255,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isAutoTickUnitSelection());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("]z<d.z8Yo", dateAxis0.getLabel());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(8.64E7, dateTickUnit0.getSize(), 0.01);
      assertEquals(5, dateTickUnit0.getCalendarField());
      assertEquals(1, dateTickUnit0.getRollMultiple());
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals(1, dateTickUnit0.getMultiple());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      // Undeclared exception!
      try { 
        simpleTimeZone0.setEndRule(500, 255, (-3486), 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month 500
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("l`ZW7wMJ#!2Z");
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals("l`ZW7wMJ#!2Z", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNotNull(dateAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      dateAxis0.setMinorTickMarkInsideLength(0.0F);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals("l`ZW7wMJ#!2Z", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      boolean boolean0 = dateAxis0.equals("l`ZW7wMJ#!2Z");
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals("l`ZW7wMJ#!2Z", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(boolean0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals("", dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNotNull(dateAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      dateAxis0.zoomRange(0.1, 0.1);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals("", dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      Date date0 = null;
      MultiListUI multiListUI0 = new MultiListUI();
      assertNotNull(multiListUI0);
      
      JList<CombinedDomainXYPlot> jList0 = new JList<CombinedDomainXYPlot>();
      assertFalse(jList0.getIgnoreRepaint());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusCycleRoot());
      assertNotNull(jList0);
      
      // Undeclared exception!
      try { 
        multiListUI0.getCellBounds(jList0, 500, 500);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertNotNull(dateAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(dateAxis0);
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(ChartChangeEventType.GENERAL, axisChangeEvent0.getType());
      assertNotNull(axisChangeEvent0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      dateAxis0.notifyListeners(axisChangeEvent0);
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(ChartChangeEventType.GENERAL, axisChangeEvent0.getType());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      DateAxis dateAxis1 = new DateAxis();
      assertTrue(dateAxis1.equals((Object)dateAxis0));
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertEquals(2.0, dateAxis1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis1.isNegativeArrowVisible());
      assertFalse(dateAxis1.isInverted());
      assertEquals(0.05, dateAxis1.getLowerMargin(), 0.01);
      assertEquals(2.0F, dateAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertTrue(dateAxis1.isAxisLineVisible());
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis1.getLabelLocation());
      assertFalse(dateAxis1.isMinorTickMarksVisible());
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertEquals(1.0, dateAxis1.getUpperBound(), 0.01);
      assertTrue(dateAxis1.isVisible());
      assertTrue(dateAxis1.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis1.getFixedAutoRange(), 0.01);
      assertEquals(0.0, dateAxis1.getFixedDimension(), 0.01);
      assertFalse(dateAxis1.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis1.getLowerBound(), 0.01);
      assertEquals(0, dateAxis1.getMinorTickCount());
      assertNull(dateAxis1.getLabel());
      assertFalse(dateAxis1.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis1.isAutoRange());
      assertEquals(0.05, dateAxis1.getUpperMargin(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis1.getTickMarkPosition());
      assertNotNull(dateAxis1);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      
      Timeline timeline0 = dateAxis1.getTimeline();
      assertTrue(dateAxis1.equals((Object)dateAxis0));
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertEquals(2.0, dateAxis1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis1.isNegativeArrowVisible());
      assertFalse(dateAxis1.isInverted());
      assertEquals(0.05, dateAxis1.getLowerMargin(), 0.01);
      assertEquals(2.0F, dateAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertTrue(dateAxis1.isAxisLineVisible());
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis1.getLabelLocation());
      assertFalse(dateAxis1.isMinorTickMarksVisible());
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertEquals(1.0, dateAxis1.getUpperBound(), 0.01);
      assertTrue(dateAxis1.isVisible());
      assertTrue(dateAxis1.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis1.getFixedAutoRange(), 0.01);
      assertEquals(0.0, dateAxis1.getFixedDimension(), 0.01);
      assertFalse(dateAxis1.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis1.getLowerBound(), 0.01);
      assertEquals(0, dateAxis1.getMinorTickCount());
      assertNull(dateAxis1.getLabel());
      assertFalse(dateAxis1.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis1.isAutoRange());
      assertEquals(0.05, dateAxis1.getUpperMargin(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis1.getTickMarkPosition());
      assertNotSame(dateAxis1, dateAxis0);
      assertNotNull(timeline0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      
      dateAxis0.setTimeline(timeline0);
      assertTrue(dateAxis0.equals((Object)dateAxis1));
      assertTrue(dateAxis1.equals((Object)dateAxis0));
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertEquals(2.0, dateAxis1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis1.isNegativeArrowVisible());
      assertFalse(dateAxis1.isInverted());
      assertEquals(0.05, dateAxis1.getLowerMargin(), 0.01);
      assertEquals(2.0F, dateAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertTrue(dateAxis1.isAxisLineVisible());
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis1.getLabelLocation());
      assertFalse(dateAxis1.isMinorTickMarksVisible());
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertEquals(1.0, dateAxis1.getUpperBound(), 0.01);
      assertTrue(dateAxis1.isVisible());
      assertTrue(dateAxis1.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis1.getFixedAutoRange(), 0.01);
      assertEquals(0.0, dateAxis1.getFixedDimension(), 0.01);
      assertFalse(dateAxis1.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis1.getLowerBound(), 0.01);
      assertEquals(0, dateAxis1.getMinorTickCount());
      assertNull(dateAxis1.getLabel());
      assertFalse(dateAxis1.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis1.isAutoRange());
      assertEquals(0.05, dateAxis1.getUpperMargin(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis1.getTickMarkPosition());
      assertNotSame(dateAxis0, dateAxis1);
      assertNotSame(dateAxis1, dateAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      
      Locale locale0 = dateAxis0.getLocale();
      assertTrue(dateAxis0.equals((Object)dateAxis1));
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertNotSame(dateAxis0, dateAxis1);
      assertNotNull(locale0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      TimeZone timeZone0 = dateAxis1.getTimeZone();
      assertTrue(dateAxis1.equals((Object)dateAxis0));
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertEquals(2.0, dateAxis1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis1.isNegativeArrowVisible());
      assertFalse(dateAxis1.isInverted());
      assertEquals(0.05, dateAxis1.getLowerMargin(), 0.01);
      assertEquals(2.0F, dateAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertTrue(dateAxis1.isAxisLineVisible());
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis1.getLabelLocation());
      assertFalse(dateAxis1.isMinorTickMarksVisible());
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertEquals(1.0, dateAxis1.getUpperBound(), 0.01);
      assertTrue(dateAxis1.isVisible());
      assertTrue(dateAxis1.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis1.getFixedAutoRange(), 0.01);
      assertEquals(0.0, dateAxis1.getFixedDimension(), 0.01);
      assertFalse(dateAxis1.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis1.getLowerBound(), 0.01);
      assertEquals(0, dateAxis1.getMinorTickCount());
      assertNull(dateAxis1.getLabel());
      assertFalse(dateAxis1.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis1.isAutoRange());
      assertEquals(0.05, dateAxis1.getUpperMargin(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis1.getTickMarkPosition());
      assertEquals("GMT", timeZone0.getID());
      assertNotSame(dateAxis1, dateAxis0);
      assertNotNull(timeZone0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TickUnits tickUnits0 = (TickUnits)DateAxis.createStandardDateTickUnits();
      assertEquals(40, tickUnits0.size());
      assertNotNull(tickUnits0);
      
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertNotNull(dateAxis0);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      CompassPlot compassPlot0 = new CompassPlot();
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertNotNull(compassPlot0);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      
      dateAxis0.setPlot(compassPlot0);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MONTH;
      assertEquals("DateTickUnitType.MONTH", dateTickUnitType0.toString());
      assertEquals(2, dateTickUnitType0.getCalendarField());
      assertNotNull(dateTickUnitType0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getTimeInstance();
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertNotNull(simpleDateFormat0);
      
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 3950, simpleDateFormat0);
      assertEquals("DateTickUnitType.MONTH", dateTickUnitType0.toString());
      assertEquals(2, dateTickUnitType0.getCalendarField());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals(3950, dateTickUnit0.getRollMultiple());
      assertEquals(3950, dateTickUnit0.getMultiple());
      assertEquals(2, dateTickUnit0.getCalendarField());
      assertEquals(1.057968E13, dateTickUnit0.getSize(), 0.01);
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertNotNull(dateTickUnit0);
      
      // Undeclared exception!
      try { 
        dateAxis0.calculateHighestVisibleTickValue(dateTickUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DateAxis dateAxis0 = null;
      try {
        dateAxis0 = new DateAxis("Requires 'lower' < 'upper'.", (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNotNull(dateAxis0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      Date date0 = dateAxis0.getMinimumDate();
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertNotNull(date0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      AttributedString attributedString0 = dateAxis0.getAttributedLabel();
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(attributedString0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      dateAxis0.setTickMarkOutsideLength(0.0F);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null);
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(RectangleEdge.TOP, legendTitle0.getPosition());
      assertTrue(legendTitle0.isVisible());
      assertTrue(legendTitle0.getNotify());
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertNull(legendTitle0.getID());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertNotNull(legendTitle0);
      assertTrue(legendTitle0.visible);
      
      RectangleInsets rectangleInsets0 = legendTitle0.getItemLabelPadding();
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(RectangleEdge.TOP, legendTitle0.getPosition());
      assertTrue(legendTitle0.isVisible());
      assertTrue(legendTitle0.getNotify());
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertNull(legendTitle0.getID());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertNotNull(rectangleInsets0);
      assertTrue(legendTitle0.visible);
      
      dateAxis0.setTickLabelInsets(rectangleInsets0);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(RectangleEdge.TOP, legendTitle0.getPosition());
      assertTrue(legendTitle0.isVisible());
      assertTrue(legendTitle0.getNotify());
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertNull(legendTitle0.getID());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(legendTitle0.visible);
      
      // Undeclared exception!
      try { 
        dateAxis0.setRange(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'lower' < 'upper'.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNotNull(dateAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      
      Date date0 = dateAxis0.getMinimumDate();
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertNotNull(date0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("5SQk0=>z;L($1_@q");
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("5SQk0=>z;L($1_@q", dateAxis0.getLabel());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNotNull(dateAxis0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      DateAxis dateAxis1 = (DateAxis)dateAxis0.clone();
      assertTrue(dateAxis1.equals((Object)dateAxis0));
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("5SQk0=>z;L($1_@q", dateAxis0.getLabel());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertFalse(dateAxis1.isInverted());
      assertEquals(2.0F, dateAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("5SQk0=>z;L($1_@q", dateAxis1.getLabel());
      assertEquals(2.0, dateAxis1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis1.getTickMarkPosition());
      assertTrue(dateAxis1.isAutoRange());
      assertFalse(dateAxis1.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis1.getMinorTickCount());
      assertEquals(0.0, dateAxis1.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis1.getUpperMargin(), 0.01);
      assertTrue(dateAxis1.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis1.getFixedDimension(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis1.getLabelLocation());
      assertTrue(dateAxis1.isVisible());
      assertEquals(0.0, dateAxis1.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis1.isVerticalTickLabels());
      assertFalse(dateAxis1.isMinorTickMarksVisible());
      assertTrue(dateAxis1.isTickMarksVisible());
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis1.getLowerMargin(), 0.01);
      assertFalse(dateAxis1.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis1.getUpperBound(), 0.01);
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertTrue(dateAxis1.isAxisLineVisible());
      assertNotSame(dateAxis0, dateAxis1);
      assertNotSame(dateAxis1, dateAxis0);
      assertNotNull(dateAxis1);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      
      // Undeclared exception!
      try { 
        dateAxis0.setRange(0.0, (-1.5707963267948966));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'lower' < 'upper'.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNotNull(dateAxis0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      dateAxis0.setRange(0.0, 1740.88502955);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertNull(dateAxis0.getLabel());
      assertEquals(1740.88502955, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNotNull(dateAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      dateAxis0.configure();
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TickUnits tickUnits0 = (TickUnits)DateAxis.createStandardDateTickUnits();
      assertEquals(40, tickUnits0.size());
      assertNotNull(tickUnits0);
      
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertNotNull(dateAxis0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      
      Timeline timeline0 = dateAxis0.getTimeline();
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertNotNull(timeline0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      
      dateAxis0.setTimeline(timeline0);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals("", dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNotNull(dateAxis0);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals("", dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(5, dateTickUnit0.getCalendarField());
      assertEquals(1, dateTickUnit0.getRollMultiple());
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals(1, dateTickUnit0.getMultiple());
      assertEquals(8.64E7, dateTickUnit0.getSize(), 0.01);
      assertNotNull(dateTickUnit0);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      dateAxis0.setTickUnit(dateTickUnit0);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals("", dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(5, dateTickUnit0.getCalendarField());
      assertEquals(1, dateTickUnit0.getRollMultiple());
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals(1, dateTickUnit0.getMultiple());
      assertEquals(8.64E7, dateTickUnit0.getSize(), 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      MockDate mockDate0 = new MockDate((-605), 182, 940, (-7), 107, (-7));
      assertNotNull(mockDate0);
      
      MultiTextUI multiTextUI0 = new MultiTextUI();
      assertNotNull(multiTextUI0);
      
      JTextField jTextField0 = new JTextField("org.jfree.chart.axis.DateAxis");
      assertFalse(jTextField0.getIgnoreRepaint());
      assertFalse(jTextField0.isFocusTraversalPolicyProvider());
      assertFalse(jTextField0.isFocusCycleRoot());
      assertTrue(jTextField0.getFocusTraversalKeysEnabled());
      assertFalse(jTextField0.isFocusTraversalPolicySet());
      assertNotNull(jTextField0);
      
      Position.Bias position_Bias0 = Position.Bias.Forward;
      assertNotNull(position_Bias0);
      
      // Undeclared exception!
      try { 
        multiTextUI0.modelToView((JTextComponent) jTextField0, 182, position_Bias0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("q=e]!]z");
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals("q=e]!]z", dateAxis0.getLabel());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertNotNull(dateAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      dateAxis0.setLocale(locale0);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals("q=e]!]z", dateAxis0.getLabel());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNotNull(dateAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      dateAxis0.hashCode();
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      DateAxis dateAxis1 = new DateAxis();
      assertFalse(dateAxis1.equals((Object)dateAxis0));
      assertTrue(dateAxis1.isTickMarksVisible());
      assertFalse(dateAxis1.isInverted());
      assertTrue(dateAxis1.isAxisLineVisible());
      assertEquals(0.0F, dateAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis1.getUpperBound(), 0.01);
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertFalse(dateAxis1.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis1.getLowerMargin(), 0.01);
      assertEquals(2.0, dateAxis1.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis1.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis1.getLowerBound(), 0.01);
      assertEquals(0, dateAxis1.getMinorTickCount());
      assertFalse(dateAxis1.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis1.getFixedDimension(), 0.01);
      assertNull(dateAxis1.getLabel());
      assertTrue(dateAxis1.isAutoRange());
      assertFalse(dateAxis1.isMinorTickMarksVisible());
      assertTrue(dateAxis1.isAutoTickUnitSelection());
      assertEquals(DateTickMarkPosition.START, dateAxis1.getTickMarkPosition());
      assertEquals(0.05, dateAxis1.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis1.getLabelLocation());
      assertTrue(dateAxis1.isVisible());
      assertEquals(0.0, dateAxis1.getFixedAutoRange(), 0.01);
      assertNotNull(dateAxis1);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      Timeline timeline0 = dateAxis1.getTimeline();
      assertFalse(dateAxis1.equals((Object)dateAxis0));
      assertTrue(dateAxis1.isTickMarksVisible());
      assertFalse(dateAxis1.isInverted());
      assertTrue(dateAxis1.isAxisLineVisible());
      assertEquals(0.0F, dateAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis1.getUpperBound(), 0.01);
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertFalse(dateAxis1.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis1.getLowerMargin(), 0.01);
      assertEquals(2.0, dateAxis1.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis1.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis1.getLowerBound(), 0.01);
      assertEquals(0, dateAxis1.getMinorTickCount());
      assertFalse(dateAxis1.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis1.getFixedDimension(), 0.01);
      assertNull(dateAxis1.getLabel());
      assertTrue(dateAxis1.isAutoRange());
      assertFalse(dateAxis1.isMinorTickMarksVisible());
      assertTrue(dateAxis1.isAutoTickUnitSelection());
      assertEquals(DateTickMarkPosition.START, dateAxis1.getTickMarkPosition());
      assertEquals(0.05, dateAxis1.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis1.getLabelLocation());
      assertTrue(dateAxis1.isVisible());
      assertEquals(0.0, dateAxis1.getFixedAutoRange(), 0.01);
      assertNotSame(dateAxis1, dateAxis0);
      assertNotNull(timeline0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      dateAxis0.setTimeline(timeline0);
      assertFalse(dateAxis0.equals((Object)dateAxis1));
      assertFalse(dateAxis1.equals((Object)dateAxis0));
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertFalse(dateAxis1.isInverted());
      assertTrue(dateAxis1.isAxisLineVisible());
      assertEquals(0.0F, dateAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis1.getUpperBound(), 0.01);
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertFalse(dateAxis1.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis1.getLowerMargin(), 0.01);
      assertEquals(2.0, dateAxis1.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis1.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis1.getLowerBound(), 0.01);
      assertEquals(0, dateAxis1.getMinorTickCount());
      assertFalse(dateAxis1.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis1.getFixedDimension(), 0.01);
      assertNull(dateAxis1.getLabel());
      assertTrue(dateAxis1.isAutoRange());
      assertFalse(dateAxis1.isMinorTickMarksVisible());
      assertTrue(dateAxis1.isAutoTickUnitSelection());
      assertEquals(DateTickMarkPosition.START, dateAxis1.getTickMarkPosition());
      assertEquals(0.05, dateAxis1.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis1.getLabelLocation());
      assertTrue(dateAxis1.isVisible());
      assertEquals(0.0, dateAxis1.getFixedAutoRange(), 0.01);
      assertNotSame(dateAxis0, dateAxis1);
      assertNotSame(dateAxis1, dateAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      // Undeclared exception!
      try { 
        dateAxis0.setTimeZone((TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNotNull(dateAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      boolean boolean0 = dateAxis0.isHiddenValue(0L);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNotNull(dateAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      
      Locale locale0 = dateAxis0.getLocale();
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNotNull(dateAxis0);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      
      DateAxis dateAxis1 = (DateAxis)dateAxis0.clone();
      assertTrue(dateAxis1.equals((Object)dateAxis0));
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis1.getLabel());
      assertEquals(0.0, dateAxis1.getLowerBound(), 0.01);
      assertEquals(0, dateAxis1.getMinorTickCount());
      assertTrue(dateAxis1.isVisible());
      assertTrue(dateAxis1.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis1.getFixedDimension(), 0.01);
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis1.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis1.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis1.isAxisLineVisible());
      assertFalse(dateAxis1.isNegativeArrowVisible());
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis1.getLabelLocation());
      assertFalse(dateAxis1.isMinorTickMarksVisible());
      assertEquals(2.0F, dateAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis1.isInverted());
      assertEquals(1.0, dateAxis1.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis1.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertFalse(dateAxis1.isVerticalTickLabels());
      assertEquals(0.05, dateAxis1.getUpperMargin(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis1.getTickMarkPosition());
      assertTrue(dateAxis1.isAutoRange());
      assertFalse(dateAxis1.isPositiveArrowVisible());
      assertNotSame(dateAxis0, dateAxis1);
      assertNotSame(dateAxis1, dateAxis0);
      assertNotNull(dateAxis1);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      LogAxis logAxis0 = new LogAxis();
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertNotNull(logAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      NumberFormat numberFormat0 = logAxis0.getNumberFormatOverride();
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertNull(numberFormat0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      NumberTickUnitSource numberTickUnitSource0 = new NumberTickUnitSource(true, (NumberFormat) null);
      assertNotNull(numberTickUnitSource0);
      
      dateAxis0.setStandardTickUnits(numberTickUnitSource0);
      assertFalse(dateAxis0.equals((Object)dateAxis1));
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNotSame(dateAxis0, dateAxis1);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      
      JTableHeader jTableHeader0 = new JTableHeader();
      assertFalse(jTableHeader0.getIgnoreRepaint());
      assertFalse(jTableHeader0.isFocusTraversalPolicyProvider());
      assertFalse(jTableHeader0.isFocusCycleRoot());
      assertFalse(jTableHeader0.isFocusTraversalPolicySet());
      assertTrue(jTableHeader0.getFocusTraversalKeysEnabled());
      assertNotNull(jTableHeader0);
      
      Rectangle rectangle0 = jTableHeader0.getHeaderRect((-5));
      assertFalse(jTableHeader0.getIgnoreRepaint());
      assertFalse(jTableHeader0.isFocusTraversalPolicyProvider());
      assertFalse(jTableHeader0.isFocusCycleRoot());
      assertFalse(jTableHeader0.isFocusTraversalPolicySet());
      assertTrue(jTableHeader0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis((String) null);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertNotNull(dateAxis0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(1, dateTickUnit0.getRollMultiple());
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals(8.64E7, dateTickUnit0.getSize(), 0.01);
      assertEquals(1, dateTickUnit0.getMultiple());
      assertEquals(5, dateTickUnit0.getCalendarField());
      assertNotNull(dateTickUnit0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      // Undeclared exception!
      try { 
        dateAxis0.setRange(2033.6119679441242, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'lower' < 'upper'.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          DateAxis dateAxis0 = new DateAxis();
          assertFalse(dateAxis0.isVerticalTickLabels());
          assertTrue(dateAxis0.isTickLabelsVisible());
          assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
          assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
          assertTrue(dateAxis0.isAxisLineVisible());
          assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
          assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
          assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
          assertTrue(dateAxis0.isAutoTickUnitSelection());
          assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
          assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
          assertFalse(dateAxis0.isNegativeArrowVisible());
          assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
          assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
          assertTrue(dateAxis0.isTickMarksVisible());
          assertFalse(dateAxis0.isMinorTickMarksVisible());
          assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
          assertTrue(dateAxis0.isAutoRange());
          assertFalse(dateAxis0.isPositiveArrowVisible());
          assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
          assertEquals(0, dateAxis0.getMinorTickCount());
          assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
          assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
          assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
          assertNull(dateAxis0.getLabel());
          assertFalse(dateAxis0.isInverted());
          assertTrue(dateAxis0.isVisible());
          assertNotNull(dateAxis0);
          assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
          assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
          assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
          assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
          assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
          assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
          assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
          assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
          assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
          assertFalse(ValueAxis.DEFAULT_INVERTED);
          assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
          assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
          assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
          
          HashMap<Format.Field, Month> hashMap0 = new HashMap<Format.Field, Month>(500);
          assertTrue(hashMap0.isEmpty());
          assertEquals(0, hashMap0.size());
          assertNotNull(hashMap0);
          
          boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ziz");
          assertFalse(boolean0);
          
          Font font0 = dateAxis0.DEFAULT_AXIS_LABEL_FONT.deriveFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
          assertFalse(dateAxis0.isVerticalTickLabels());
          assertTrue(dateAxis0.isTickLabelsVisible());
          assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
          assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
          assertTrue(dateAxis0.isAxisLineVisible());
          assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
          assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
          assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
          assertTrue(dateAxis0.isAutoTickUnitSelection());
          assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
          assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
          assertFalse(dateAxis0.isNegativeArrowVisible());
          assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
          assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
          assertTrue(dateAxis0.isTickMarksVisible());
          assertFalse(dateAxis0.isMinorTickMarksVisible());
          assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
          assertTrue(dateAxis0.isAutoRange());
          assertFalse(dateAxis0.isPositiveArrowVisible());
          assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
          assertEquals(0, dateAxis0.getMinorTickCount());
          assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
          assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
          assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
          assertNull(dateAxis0.getLabel());
          assertFalse(dateAxis0.isInverted());
          assertTrue(dateAxis0.isVisible());
          assertTrue(hashMap0.isEmpty());
          assertEquals(0, hashMap0.size());
          assertEquals(12, font0.getSize());
          assertEquals(12.0F, font0.getSize2D(), 0.01F);
          assertEquals(0, font0.getStyle());
          assertFalse(font0.hasLayoutAttributes());
          assertFalse(font0.isBold());
          assertFalse(font0.isTransformed());
          assertTrue(font0.isPlain());
          assertFalse(font0.isItalic());
          assertFalse(font0.hasUniformLineMetrics());
          assertEquals("SansSerif", font0.getName());
          assertNotNull(font0);
          assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
          assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
          assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
          assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
          assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
          assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
          assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
          assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
          assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
          assertFalse(ValueAxis.DEFAULT_INVERTED);
          assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
          assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
          assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
          
          dateAxis0.setTickLabelFont(font0);
          assertFalse(dateAxis0.isVerticalTickLabels());
          assertTrue(dateAxis0.isTickLabelsVisible());
          assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
          assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
          assertTrue(dateAxis0.isAxisLineVisible());
          assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
          assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
          assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
          assertTrue(dateAxis0.isAutoTickUnitSelection());
          assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
          assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
          assertFalse(dateAxis0.isNegativeArrowVisible());
          assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
          assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
          assertTrue(dateAxis0.isTickMarksVisible());
          assertFalse(dateAxis0.isMinorTickMarksVisible());
          assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
          assertTrue(dateAxis0.isAutoRange());
          assertFalse(dateAxis0.isPositiveArrowVisible());
          assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
          assertEquals(0, dateAxis0.getMinorTickCount());
          assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
          assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
          assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
          assertNull(dateAxis0.getLabel());
          assertFalse(dateAxis0.isInverted());
          assertTrue(dateAxis0.isVisible());
          assertTrue(hashMap0.isEmpty());
          assertEquals(0, hashMap0.size());
          assertEquals(12, font0.getSize());
          assertEquals(12.0F, font0.getSize2D(), 0.01F);
          assertEquals(0, font0.getStyle());
          assertFalse(font0.hasLayoutAttributes());
          assertFalse(font0.isBold());
          assertFalse(font0.isTransformed());
          assertTrue(font0.isPlain());
          assertFalse(font0.isItalic());
          assertFalse(font0.hasUniformLineMetrics());
          assertEquals("SansSerif", font0.getName());
          assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
          assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
          assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
          assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
          assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
          assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
          assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
          assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
          assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
          assertFalse(ValueAxis.DEFAULT_INVERTED);
          assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
          assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
          assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
          
          Date date0 = dateAxis0.getMinimumDate();
          assertFalse(dateAxis0.isVerticalTickLabels());
          assertTrue(dateAxis0.isTickLabelsVisible());
          assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
          assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
          assertTrue(dateAxis0.isAxisLineVisible());
          assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
          assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
          assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
          assertTrue(dateAxis0.isAutoTickUnitSelection());
          assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
          assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
          assertFalse(dateAxis0.isNegativeArrowVisible());
          assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
          assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
          assertTrue(dateAxis0.isTickMarksVisible());
          assertFalse(dateAxis0.isMinorTickMarksVisible());
          assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
          assertTrue(dateAxis0.isAutoRange());
          assertFalse(dateAxis0.isPositiveArrowVisible());
          assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
          assertEquals(0, dateAxis0.getMinorTickCount());
          assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
          assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
          assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
          assertNull(dateAxis0.getLabel());
          assertFalse(dateAxis0.isInverted());
          assertTrue(dateAxis0.isVisible());
          assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
          assertNotNull(date0);
          assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
          assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
          assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
          assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
          assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
          assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
          assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
          assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
          assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
          assertFalse(ValueAxis.DEFAULT_INVERTED);
          assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
          assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
          assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
          
          MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
          assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
          assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
          assertNull(multiplePiePlot0.getNoDataMessage());
          assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
          assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
          assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
          assertTrue(multiplePiePlot0.isNotify());
          assertFalse(multiplePiePlot0.isSubplot());
          assertTrue(multiplePiePlot0.isOutlineVisible());
          assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
          assertFalse(multiplePiePlot0.fetchElementHintingFlag());
          assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
          assertNotNull(multiplePiePlot0);
          assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
          assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
          assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
          assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
          
          JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
          assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
          assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
          assertNull(multiplePiePlot0.getNoDataMessage());
          assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
          assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
          assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
          assertTrue(multiplePiePlot0.isNotify());
          assertFalse(multiplePiePlot0.isSubplot());
          assertTrue(multiplePiePlot0.isOutlineVisible());
          assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
          assertFalse(multiplePiePlot0.fetchElementHintingFlag());
          assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
          assertFalse(jFreeChart0.isBorderVisible());
          assertNull(jFreeChart0.getID());
          assertTrue(jFreeChart0.getAntiAlias());
          assertEquals(0, jFreeChart0.getSubtitleCount());
          assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
          assertTrue(jFreeChart0.isNotify());
          assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
          assertFalse(jFreeChart0.getElementHinting());
          assertNotNull(jFreeChart0);
          assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
          assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
          assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
          assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
          assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
          assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
          
          multiplePiePlot0.setBackgroundImageAlignment(15);
          assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
          assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
          assertNull(multiplePiePlot0.getNoDataMessage());
          assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
          assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
          assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
          assertTrue(multiplePiePlot0.isNotify());
          assertFalse(multiplePiePlot0.isSubplot());
          assertTrue(multiplePiePlot0.isOutlineVisible());
          assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
          assertFalse(multiplePiePlot0.fetchElementHintingFlag());
          assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
          assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
          assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
          assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
          assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
          
          BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 1530);
          assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
          assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
          assertNull(multiplePiePlot0.getNoDataMessage());
          assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
          assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
          assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
          assertTrue(multiplePiePlot0.isNotify());
          assertFalse(multiplePiePlot0.isSubplot());
          assertTrue(multiplePiePlot0.isOutlineVisible());
          assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
          assertFalse(multiplePiePlot0.fetchElementHintingFlag());
          assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
          assertFalse(jFreeChart0.isBorderVisible());
          assertNull(jFreeChart0.getID());
          assertTrue(jFreeChart0.getAntiAlias());
          assertEquals(0, jFreeChart0.getSubtitleCount());
          assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
          assertTrue(jFreeChart0.isNotify());
          assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
          assertFalse(jFreeChart0.getElementHinting());
          assertEquals(0, bufferedImage0.getMinY());
          assertEquals(1, bufferedImage0.getNumXTiles());
          assertEquals(0, bufferedImage0.getMinX());
          assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
          assertEquals(0, bufferedImage0.getTileGridXOffset());
          assertEquals(1530, bufferedImage0.getTileHeight());
          assertEquals(1530, bufferedImage0.getHeight());
          assertTrue(bufferedImage0.hasTileWriters());
          assertEquals(3, bufferedImage0.getTransparency());
          assertFalse(bufferedImage0.isAlphaPremultiplied());
          assertEquals(500, bufferedImage0.getWidth());
          assertEquals(1, bufferedImage0.getNumYTiles());
          assertEquals(500, bufferedImage0.getTileWidth());
          assertEquals(0, bufferedImage0.getMinTileX());
          assertEquals(0, bufferedImage0.getTileGridYOffset());
          assertEquals(2, bufferedImage0.getType());
          assertEquals(0, bufferedImage0.getMinTileY());
          assertNotNull(bufferedImage0);
          assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
          assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
          assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
          assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
          assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
          assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
          
          SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
          assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
          assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
          assertNull(multiplePiePlot0.getNoDataMessage());
          assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
          assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
          assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
          assertTrue(multiplePiePlot0.isNotify());
          assertFalse(multiplePiePlot0.isSubplot());
          assertTrue(multiplePiePlot0.isOutlineVisible());
          assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
          assertFalse(multiplePiePlot0.fetchElementHintingFlag());
          assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
          assertFalse(jFreeChart0.isBorderVisible());
          assertNull(jFreeChart0.getID());
          assertTrue(jFreeChart0.getAntiAlias());
          assertEquals(0, jFreeChart0.getSubtitleCount());
          assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
          assertTrue(jFreeChart0.isNotify());
          assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
          assertFalse(jFreeChart0.getElementHinting());
          assertEquals(0, bufferedImage0.getMinY());
          assertEquals(1, bufferedImage0.getNumXTiles());
          assertEquals(0, bufferedImage0.getMinX());
          assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
          assertEquals(0, bufferedImage0.getTileGridXOffset());
          assertEquals(1530, bufferedImage0.getTileHeight());
          assertEquals(1530, bufferedImage0.getHeight());
          assertTrue(bufferedImage0.hasTileWriters());
          assertEquals(3, bufferedImage0.getTransparency());
          assertFalse(bufferedImage0.isAlphaPremultiplied());
          assertEquals(500, bufferedImage0.getWidth());
          assertEquals(1, bufferedImage0.getNumYTiles());
          assertEquals(500, bufferedImage0.getTileWidth());
          assertEquals(0, bufferedImage0.getMinTileX());
          assertEquals(0, bufferedImage0.getTileGridYOffset());
          assertEquals(2, bufferedImage0.getType());
          assertEquals(0, bufferedImage0.getMinTileY());
          assertNotNull(sunGraphics2D0);
          assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
          assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
          assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
          assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
          assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
          assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
          assertEquals(0, sunGraphics2D0.transformState);
          assertEquals(0, sunGraphics2D0.renderHint);
          assertEquals(0, sunGraphics2D0.paintState);
          assertEquals(0, sunGraphics2D0.strokeHint);
          assertEquals(1, sunGraphics2D0.interpolationType);
          assertEquals(0, sunGraphics2D0.textAntialiasHint);
          assertEquals(140, sunGraphics2D0.lcdTextContrast);
          assertEquals(0, sunGraphics2D0.transY);
          assertEquals(0, sunGraphics2D0.transX);
          assertEquals((-1), sunGraphics2D0.pixel);
          assertEquals((-1), sunGraphics2D0.eargb);
          assertEquals(0, sunGraphics2D0.clipState);
          assertEquals(0, sunGraphics2D0.constrainY);
          assertEquals(0, sunGraphics2D0.constrainX);
          assertEquals(1, sunGraphics2D0.antialiasHint);
          assertEquals(0, sunGraphics2D0.compositeState);
          assertEquals(0, sunGraphics2D0.strokeState);
          
          Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(15, (-5.0F), 1.0F, 0.0F);
          assertEquals((-5.0), rectangle2D_Float0.getCenterY(), 0.01);
          assertEquals((-5.0), rectangle2D_Float0.getMinY(), 0.01);
          assertEquals(15.0, rectangle2D_Float0.getMinX(), 0.01);
          assertEquals((-5.0), rectangle2D_Float0.getMaxY(), 0.01);
          assertEquals(16.0, rectangle2D_Float0.getMaxX(), 0.01);
          assertEquals(15.5, rectangle2D_Float0.getCenterX(), 0.01);
          assertNotNull(rectangle2D_Float0);
          assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
          assertEquals(15.0F, rectangle2D_Float0.x, 0.01F);
          assertEquals((-5.0F), rectangle2D_Float0.y, 0.01F);
          assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
          
          Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)rectangle2D_Float0.getBounds2D();
          assertTrue(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
          assertEquals((-5.0), rectangle2D_Float0.getCenterY(), 0.01);
          assertEquals((-5.0), rectangle2D_Float0.getMinY(), 0.01);
          assertEquals(15.0, rectangle2D_Float0.getMinX(), 0.01);
          assertEquals((-5.0), rectangle2D_Float0.getMaxY(), 0.01);
          assertEquals(16.0, rectangle2D_Float0.getMaxX(), 0.01);
          assertEquals(15.5, rectangle2D_Float0.getCenterX(), 0.01);
          assertEquals((-5.0), rectangle2D_Float1.getCenterY(), 0.01);
          assertEquals(15.5, rectangle2D_Float1.getCenterX(), 0.01);
          assertEquals(15.0, rectangle2D_Float1.getMinX(), 0.01);
          assertEquals((-5.0), rectangle2D_Float1.getMaxY(), 0.01);
          assertEquals(16.0, rectangle2D_Float1.getMaxX(), 0.01);
          assertEquals((-5.0), rectangle2D_Float1.getMinY(), 0.01);
          assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
          assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
          assertNotNull(rectangle2D_Float1);
          assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
          assertEquals(15.0F, rectangle2D_Float0.x, 0.01F);
          assertEquals((-5.0F), rectangle2D_Float0.y, 0.01F);
          assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
          assertEquals(1.0F, rectangle2D_Float1.width, 0.01F);
          assertEquals((-5.0F), rectangle2D_Float1.y, 0.01F);
          assertEquals(15.0F, rectangle2D_Float1.x, 0.01F);
          assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
          
          rectangle2D_Float1.setFrame(264.35965, (-327.55657889), (double) (-1), 0.0);
          assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
          assertFalse(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
          assertEquals((-5.0), rectangle2D_Float0.getCenterY(), 0.01);
          assertEquals((-5.0), rectangle2D_Float0.getMinY(), 0.01);
          assertEquals(15.0, rectangle2D_Float0.getMinX(), 0.01);
          assertEquals((-5.0), rectangle2D_Float0.getMaxY(), 0.01);
          assertEquals(16.0, rectangle2D_Float0.getMaxX(), 0.01);
          assertEquals(15.5, rectangle2D_Float0.getCenterX(), 0.01);
          assertEquals((-327.55657958984375), rectangle2D_Float1.getMaxY(), 0.01);
          assertEquals((-327.55657958984375), rectangle2D_Float1.getMinY(), 0.01);
          assertEquals((-327.55657958984375), rectangle2D_Float1.getCenterY(), 0.01);
          assertEquals(264.3596496582031, rectangle2D_Float1.getMinX(), 0.01);
          assertEquals(263.8596496582031, rectangle2D_Float1.getCenterX(), 0.01);
          assertEquals(263.3596496582031, rectangle2D_Float1.getMaxX(), 0.01);
          assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
          assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
          assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
          assertEquals(15.0F, rectangle2D_Float0.x, 0.01F);
          assertEquals((-5.0F), rectangle2D_Float0.y, 0.01F);
          assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
          assertEquals(264.35965F, rectangle2D_Float1.x, 0.01F);
          assertEquals((-1.0F), rectangle2D_Float1.width, 0.01F);
          assertEquals((-327.55658F), rectangle2D_Float1.y, 0.01F);
          assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
          
          RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
          boolean boolean1 = rectangle2D_Float1.intersects((Rectangle2D) rectangle2D_Float0);
          assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
          assertFalse(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
          assertTrue(boolean1 == boolean0);
          assertEquals((-5.0), rectangle2D_Float0.getCenterY(), 0.01);
          assertEquals((-5.0), rectangle2D_Float0.getMinY(), 0.01);
          assertEquals(15.0, rectangle2D_Float0.getMinX(), 0.01);
          assertEquals((-5.0), rectangle2D_Float0.getMaxY(), 0.01);
          assertEquals(16.0, rectangle2D_Float0.getMaxX(), 0.01);
          assertEquals(15.5, rectangle2D_Float0.getCenterX(), 0.01);
          assertEquals((-327.55657958984375), rectangle2D_Float1.getMaxY(), 0.01);
          assertEquals((-327.55657958984375), rectangle2D_Float1.getMinY(), 0.01);
          assertEquals((-327.55657958984375), rectangle2D_Float1.getCenterY(), 0.01);
          assertEquals(264.3596496582031, rectangle2D_Float1.getMinX(), 0.01);
          assertEquals(263.8596496582031, rectangle2D_Float1.getCenterX(), 0.01);
          assertEquals(263.3596496582031, rectangle2D_Float1.getMaxX(), 0.01);
          assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
          assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
          assertFalse(boolean1);
          assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
          assertEquals(15.0F, rectangle2D_Float0.x, 0.01F);
          assertEquals((-5.0F), rectangle2D_Float0.y, 0.01F);
          assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
          assertEquals(264.35965F, rectangle2D_Float1.x, 0.01F);
          assertEquals((-1.0F), rectangle2D_Float1.width, 0.01F);
          assertEquals((-327.55658F), rectangle2D_Float1.y, 0.01F);
          assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
          
          List list0 = dateAxis0.refreshTicksVertical(sunGraphics2D0, rectangle2D_Float1, rectangleEdge0);
          assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
          assertFalse(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
          assertEquals(0, list0.size());
          assertTrue(list0.isEmpty());
          assertFalse(dateAxis0.isVerticalTickLabels());
          assertTrue(dateAxis0.isTickLabelsVisible());
          assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
          assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
          assertTrue(dateAxis0.isAxisLineVisible());
          assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
          assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
          assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
          assertTrue(dateAxis0.isAutoTickUnitSelection());
          assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
          assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
          assertFalse(dateAxis0.isNegativeArrowVisible());
          assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
          assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
          assertTrue(dateAxis0.isTickMarksVisible());
          assertFalse(dateAxis0.isMinorTickMarksVisible());
          assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
          assertTrue(dateAxis0.isAutoRange());
          assertFalse(dateAxis0.isPositiveArrowVisible());
          assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
          assertEquals(0, dateAxis0.getMinorTickCount());
          assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
          assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
          assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
          assertNull(dateAxis0.getLabel());
          assertFalse(dateAxis0.isInverted());
          assertTrue(dateAxis0.isVisible());
          assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
          assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
          assertNull(multiplePiePlot0.getNoDataMessage());
          assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
          assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
          assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
          assertTrue(multiplePiePlot0.isNotify());
          assertFalse(multiplePiePlot0.isSubplot());
          assertTrue(multiplePiePlot0.isOutlineVisible());
          assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
          assertFalse(multiplePiePlot0.fetchElementHintingFlag());
          assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
          assertFalse(jFreeChart0.isBorderVisible());
          assertNull(jFreeChart0.getID());
          assertTrue(jFreeChart0.getAntiAlias());
          assertEquals(0, jFreeChart0.getSubtitleCount());
          assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
          assertTrue(jFreeChart0.isNotify());
          assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
          assertFalse(jFreeChart0.getElementHinting());
          assertEquals(0, bufferedImage0.getMinY());
          assertEquals(1, bufferedImage0.getNumXTiles());
          assertEquals(0, bufferedImage0.getMinX());
          assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
          assertEquals(0, bufferedImage0.getTileGridXOffset());
          assertEquals(1530, bufferedImage0.getTileHeight());
          assertEquals(1530, bufferedImage0.getHeight());
          assertTrue(bufferedImage0.hasTileWriters());
          assertEquals(3, bufferedImage0.getTransparency());
          assertFalse(bufferedImage0.isAlphaPremultiplied());
          assertEquals(500, bufferedImage0.getWidth());
          assertEquals(1, bufferedImage0.getNumYTiles());
          assertEquals(500, bufferedImage0.getTileWidth());
          assertEquals(0, bufferedImage0.getMinTileX());
          assertEquals(0, bufferedImage0.getTileGridYOffset());
          assertEquals(2, bufferedImage0.getType());
          assertEquals(0, bufferedImage0.getMinTileY());
          assertEquals((-5.0), rectangle2D_Float0.getCenterY(), 0.01);
          assertEquals((-5.0), rectangle2D_Float0.getMinY(), 0.01);
          assertEquals(15.0, rectangle2D_Float0.getMinX(), 0.01);
          assertEquals((-5.0), rectangle2D_Float0.getMaxY(), 0.01);
          assertEquals(16.0, rectangle2D_Float0.getMaxX(), 0.01);
          assertEquals(15.5, rectangle2D_Float0.getCenterX(), 0.01);
          assertEquals((-327.55657958984375), rectangle2D_Float1.getMaxY(), 0.01);
          assertEquals((-327.55657958984375), rectangle2D_Float1.getMinY(), 0.01);
          assertEquals((-327.55657958984375), rectangle2D_Float1.getCenterY(), 0.01);
          assertEquals(264.3596496582031, rectangle2D_Float1.getMinX(), 0.01);
          assertEquals(263.8596496582031, rectangle2D_Float1.getCenterX(), 0.01);
          assertEquals(263.3596496582031, rectangle2D_Float1.getMaxX(), 0.01);
          assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
          assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
          assertNotNull(list0);
          assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
          assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
          assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
          assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
          assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
          assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
          assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
          assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
          assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
          assertFalse(ValueAxis.DEFAULT_INVERTED);
          assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
          assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
          assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
          assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
          assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
          assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
          assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
          assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
          assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
          assertEquals(0, sunGraphics2D0.transformState);
          assertEquals(0, sunGraphics2D0.renderHint);
          assertEquals(0, sunGraphics2D0.paintState);
          assertEquals(0, sunGraphics2D0.strokeHint);
          assertEquals(1, sunGraphics2D0.interpolationType);
          assertEquals(0, sunGraphics2D0.textAntialiasHint);
          assertEquals(140, sunGraphics2D0.lcdTextContrast);
          assertEquals(0, sunGraphics2D0.transY);
          assertEquals(0, sunGraphics2D0.transX);
          assertEquals((-1), sunGraphics2D0.pixel);
          assertEquals((-1), sunGraphics2D0.eargb);
          assertEquals(0, sunGraphics2D0.clipState);
          assertEquals(0, sunGraphics2D0.constrainY);
          assertEquals(0, sunGraphics2D0.constrainX);
          assertEquals(1, sunGraphics2D0.antialiasHint);
          assertEquals(0, sunGraphics2D0.compositeState);
          assertEquals(0, sunGraphics2D0.strokeState);
          assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
          assertEquals(15.0F, rectangle2D_Float0.x, 0.01F);
          assertEquals((-5.0F), rectangle2D_Float0.y, 0.01F);
          assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
          assertEquals(264.35965F, rectangle2D_Float1.x, 0.01F);
          assertEquals((-1.0F), rectangle2D_Float1.width, 0.01F);
          assertEquals((-327.55658F), rectangle2D_Float1.y, 0.01F);
          assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
          
          RectangleEdge rectangleEdge1 = RectangleEdge.BOTTOM;
          double double0 = dateAxis0.java2DToValue((-2192.747263005584), rectangle2D_Float1, rectangleEdge1);
          assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
          assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
          assertFalse(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
          assertFalse(dateAxis0.isVerticalTickLabels());
          assertTrue(dateAxis0.isTickLabelsVisible());
          assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
          assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
          assertTrue(dateAxis0.isAxisLineVisible());
          assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
          assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
          assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
          assertTrue(dateAxis0.isAutoTickUnitSelection());
          assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
          assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
          assertFalse(dateAxis0.isNegativeArrowVisible());
          assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
          assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
          assertTrue(dateAxis0.isTickMarksVisible());
          assertFalse(dateAxis0.isMinorTickMarksVisible());
          assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
          assertTrue(dateAxis0.isAutoRange());
          assertFalse(dateAxis0.isPositiveArrowVisible());
          assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
          assertEquals(0, dateAxis0.getMinorTickCount());
          assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
          assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
          assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
          assertNull(dateAxis0.getLabel());
          assertFalse(dateAxis0.isInverted());
          assertTrue(dateAxis0.isVisible());
          assertEquals((-5.0), rectangle2D_Float0.getCenterY(), 0.01);
          assertEquals((-5.0), rectangle2D_Float0.getMinY(), 0.01);
          assertEquals(15.0, rectangle2D_Float0.getMinX(), 0.01);
          assertEquals((-5.0), rectangle2D_Float0.getMaxY(), 0.01);
          assertEquals(16.0, rectangle2D_Float0.getMaxX(), 0.01);
          assertEquals(15.5, rectangle2D_Float0.getCenterX(), 0.01);
          assertEquals((-327.55657958984375), rectangle2D_Float1.getMaxY(), 0.01);
          assertEquals((-327.55657958984375), rectangle2D_Float1.getMinY(), 0.01);
          assertEquals((-327.55657958984375), rectangle2D_Float1.getCenterY(), 0.01);
          assertEquals(264.3596496582031, rectangle2D_Float1.getMinX(), 0.01);
          assertEquals(263.8596496582031, rectangle2D_Float1.getCenterX(), 0.01);
          assertEquals(263.3596496582031, rectangle2D_Float1.getMaxX(), 0.01);
          assertNotSame(rectangleEdge1, rectangleEdge0);
          assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
          assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
          assertEquals(2457.0, double0, 0.01);
          assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
          assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
          assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
          assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
          assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
          assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
          assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
          assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
          assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
          assertFalse(ValueAxis.DEFAULT_INVERTED);
          assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
          assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
          assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
          assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
          assertEquals(15.0F, rectangle2D_Float0.x, 0.01F);
          assertEquals((-5.0F), rectangle2D_Float0.y, 0.01F);
          assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
          assertEquals(264.35965F, rectangle2D_Float1.x, 0.01F);
          assertEquals((-1.0F), rectangle2D_Float1.width, 0.01F);
          assertEquals((-327.55658F), rectangle2D_Float1.y, 0.01F);
          assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
          
          Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
          assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
          assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
          assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
          assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
          assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
          assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
          assertNotNull(rectangle2D_Double0);
          assertEquals(0.0, rectangle2D_Double0.height, 0.01);
          assertEquals(0.0, rectangle2D_Double0.x, 0.01);
          assertEquals(0.0, rectangle2D_Double0.width, 0.01);
          assertEquals(0.0, rectangle2D_Double0.y, 0.01);
          
          ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
          assertNotNull(chartRenderingInfo0);
          
          PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
          assertEquals(0, plotRenderingInfo0.getSubplotCount());
          assertNotNull(plotRenderingInfo0);
          
          AxisState axisState0 = dateAxis0.draw(sunGraphics2D0, 1550.833303978, rectangle2D_Double0, rectangle2D_Float1, rectangleEdge1, plotRenderingInfo0);
          assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
          assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
          assertFalse(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
          assertFalse(dateAxis0.isVerticalTickLabels());
          assertTrue(dateAxis0.isTickLabelsVisible());
          assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
          assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
          assertTrue(dateAxis0.isAxisLineVisible());
          assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
          assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
          assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
          assertTrue(dateAxis0.isAutoTickUnitSelection());
          assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
          assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
          assertFalse(dateAxis0.isNegativeArrowVisible());
          assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
          assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
          assertTrue(dateAxis0.isTickMarksVisible());
          assertFalse(dateAxis0.isMinorTickMarksVisible());
          assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
          assertTrue(dateAxis0.isAutoRange());
          assertFalse(dateAxis0.isPositiveArrowVisible());
          assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
          assertEquals(0, dateAxis0.getMinorTickCount());
          assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
          assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
          assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
          assertNull(dateAxis0.getLabel());
          assertFalse(dateAxis0.isInverted());
          assertTrue(dateAxis0.isVisible());
          assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
          assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
          assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
          assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
          assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
          assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
          assertEquals(0, plotRenderingInfo0.getSubplotCount());
          assertEquals(1568.802053978, axisState0.getCursor(), 0.01);
          assertEquals(0.0, axisState0.getMax(), 0.01);
          assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
          assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
          assertNull(multiplePiePlot0.getNoDataMessage());
          assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
          assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
          assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
          assertTrue(multiplePiePlot0.isNotify());
          assertFalse(multiplePiePlot0.isSubplot());
          assertTrue(multiplePiePlot0.isOutlineVisible());
          assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
          assertFalse(multiplePiePlot0.fetchElementHintingFlag());
          assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
          assertFalse(jFreeChart0.isBorderVisible());
          assertNull(jFreeChart0.getID());
          assertTrue(jFreeChart0.getAntiAlias());
          assertEquals(0, jFreeChart0.getSubtitleCount());
          assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
          assertTrue(jFreeChart0.isNotify());
          assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
          assertFalse(jFreeChart0.getElementHinting());
          assertEquals(0, bufferedImage0.getMinY());
          assertEquals(1, bufferedImage0.getNumXTiles());
          assertEquals(0, bufferedImage0.getMinX());
          assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
          assertEquals(0, bufferedImage0.getTileGridXOffset());
          assertEquals(1530, bufferedImage0.getTileHeight());
          assertEquals(1530, bufferedImage0.getHeight());
          assertTrue(bufferedImage0.hasTileWriters());
          assertEquals(3, bufferedImage0.getTransparency());
          assertFalse(bufferedImage0.isAlphaPremultiplied());
          assertEquals(500, bufferedImage0.getWidth());
          assertEquals(1, bufferedImage0.getNumYTiles());
          assertEquals(500, bufferedImage0.getTileWidth());
          assertEquals(0, bufferedImage0.getMinTileX());
          assertEquals(0, bufferedImage0.getTileGridYOffset());
          assertEquals(2, bufferedImage0.getType());
          assertEquals(0, bufferedImage0.getMinTileY());
          assertEquals((-5.0), rectangle2D_Float0.getCenterY(), 0.01);
          assertEquals((-5.0), rectangle2D_Float0.getMinY(), 0.01);
          assertEquals(15.0, rectangle2D_Float0.getMinX(), 0.01);
          assertEquals((-5.0), rectangle2D_Float0.getMaxY(), 0.01);
          assertEquals(16.0, rectangle2D_Float0.getMaxX(), 0.01);
          assertEquals(15.5, rectangle2D_Float0.getCenterX(), 0.01);
          assertEquals((-327.55657958984375), rectangle2D_Float1.getMaxY(), 0.01);
          assertEquals((-327.55657958984375), rectangle2D_Float1.getMinY(), 0.01);
          assertEquals((-327.55657958984375), rectangle2D_Float1.getCenterY(), 0.01);
          assertEquals(264.3596496582031, rectangle2D_Float1.getMinX(), 0.01);
          assertEquals(263.8596496582031, rectangle2D_Float1.getCenterX(), 0.01);
          assertEquals(263.3596496582031, rectangle2D_Float1.getMaxX(), 0.01);
          assertNotSame(rectangleEdge1, rectangleEdge0);
          assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
          assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
          assertNotNull(axisState0);
          assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
          assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
          assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
          assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
          assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
          assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
          assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
          assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
          assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
          assertFalse(ValueAxis.DEFAULT_INVERTED);
          assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
          assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
          assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
          assertEquals(0.0, rectangle2D_Double0.height, 0.01);
          assertEquals(0.0, rectangle2D_Double0.x, 0.01);
          assertEquals(0.0, rectangle2D_Double0.width, 0.01);
          assertEquals(0.0, rectangle2D_Double0.y, 0.01);
          assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
          assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
          assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
          assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
          assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
          assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
          assertEquals(0, sunGraphics2D0.transformState);
          assertEquals(0, sunGraphics2D0.renderHint);
          assertEquals((-8355712), sunGraphics2D0.eargb);
          assertEquals(0, sunGraphics2D0.paintState);
          assertEquals(0, sunGraphics2D0.strokeHint);
          assertEquals(1, sunGraphics2D0.interpolationType);
          assertEquals(0, sunGraphics2D0.textAntialiasHint);
          assertEquals(140, sunGraphics2D0.lcdTextContrast);
          assertEquals(0, sunGraphics2D0.transY);
          assertEquals(0, sunGraphics2D0.transX);
          assertEquals((-8355712), sunGraphics2D0.pixel);
          assertEquals(0, sunGraphics2D0.clipState);
          assertEquals(0, sunGraphics2D0.constrainY);
          assertEquals(0, sunGraphics2D0.constrainX);
          assertEquals(1, sunGraphics2D0.antialiasHint);
          assertEquals(0, sunGraphics2D0.compositeState);
          assertEquals(0, sunGraphics2D0.strokeState);
          assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
          assertEquals(15.0F, rectangle2D_Float0.x, 0.01F);
          assertEquals((-5.0F), rectangle2D_Float0.y, 0.01F);
          assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
          assertEquals(264.35965F, rectangle2D_Float1.x, 0.01F);
          assertEquals((-1.0F), rectangle2D_Float1.width, 0.01F);
          assertEquals((-327.55658F), rectangle2D_Float1.y, 0.01F);
          assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
          
          // Undeclared exception!
          dateAxis0.refreshTicksHorizontal(sunGraphics2D0, rectangle2D_Double0, rectangleEdge1);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertNotNull(dateAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      DateAxis dateAxis1 = (DateAxis)dateAxis0.clone();
      assertTrue(dateAxis1.equals((Object)dateAxis0));
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis1.isAxisLineVisible());
      assertEquals(1.0, dateAxis1.getUpperBound(), 0.01);
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis1.isInverted());
      assertEquals(0.0, dateAxis1.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertFalse(dateAxis1.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis1.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis1.getLabelLocation());
      assertFalse(dateAxis1.isPositiveArrowVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis1.getTickMarkPosition());
      assertEquals(0, dateAxis1.getMinorTickCount());
      assertEquals(0.0, dateAxis1.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis1.getLowerMargin(), 0.01);
      assertTrue(dateAxis1.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertNull(dateAxis1.getLabel());
      assertEquals(0.0, dateAxis1.getFixedDimension(), 0.01);
      assertTrue(dateAxis1.isVisible());
      assertEquals(0.05, dateAxis1.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis1.isVerticalTickLabels());
      assertTrue(dateAxis1.isAutoRange());
      assertNotSame(dateAxis0, dateAxis1);
      assertNotSame(dateAxis1, dateAxis0);
      assertNotNull(dateAxis1);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      LogAxis logAxis0 = new LogAxis();
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabel());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNotNull(logAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      NumberFormat numberFormat0 = logAxis0.getNumberFormatOverride();
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertNull(logAxis0.getBaseSymbol());
      assertEquals(AxisLabelLocation.MIDDLE, logAxis0.getLabelLocation());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabel());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(numberFormat0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      NumberTickUnitSource numberTickUnitSource0 = new NumberTickUnitSource(true, (NumberFormat) null);
      assertNotNull(numberTickUnitSource0);
      
      dateAxis0.setStandardTickUnits(numberTickUnitSource0);
      assertFalse(dateAxis0.equals((Object)dateAxis1));
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertNotSame(dateAxis0, dateAxis1);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      dateAxis0.zoomRange(1967.5085, (-2115.8366782436456));
      assertFalse(dateAxis0.equals((Object)dateAxis1));
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1968.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1967.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertNotSame(dateAxis0, dateAxis1);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      JTableHeader jTableHeader0 = new JTableHeader();
      assertFalse(jTableHeader0.isFocusTraversalPolicySet());
      assertFalse(jTableHeader0.isFocusCycleRoot());
      assertTrue(jTableHeader0.getFocusTraversalKeysEnabled());
      assertFalse(jTableHeader0.getIgnoreRepaint());
      assertFalse(jTableHeader0.isFocusTraversalPolicyProvider());
      assertNotNull(jTableHeader0);
      
      Rectangle rectangle0 = jTableHeader0.getHeaderRect((-5));
      assertFalse(jTableHeader0.isFocusTraversalPolicySet());
      assertFalse(jTableHeader0.isFocusCycleRoot());
      assertTrue(jTableHeader0.getFocusTraversalKeysEnabled());
      assertFalse(jTableHeader0.getIgnoreRepaint());
      assertFalse(jTableHeader0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      double double0 = dateAxis0.valueToJava2D(0.4, rectangle0, rectangleEdge0);
      assertFalse(dateAxis0.equals((Object)dateAxis1));
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1968.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1967.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertFalse(jTableHeader0.isFocusTraversalPolicySet());
      assertFalse(jTableHeader0.isFocusCycleRoot());
      assertTrue(jTableHeader0.getFocusTraversalKeysEnabled());
      assertFalse(jTableHeader0.getIgnoreRepaint());
      assertFalse(jTableHeader0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertNotSame(dateAxis0, dateAxis1);
      assertEquals(0.0, double0, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      
      DateFormat dateFormat0 = dateAxis0.getDateFormatOverride();
      assertFalse(dateAxis0.equals((Object)dateAxis1));
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1968.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1967.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertNotSame(dateAxis0, dateAxis1);
      assertNull(dateFormat0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      // Undeclared exception!
      try { 
        dateAxis0.setRange(dateAxis1.DEFAULT_ANCHOR_DATE, dateAxis1.DEFAULT_ANCHOR_DATE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'lower' < 'upper'.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNotNull(dateAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      HashMap<Format.Field, Month> hashMap0 = new HashMap<Format.Field, Month>(500);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ziz");
      assertFalse(boolean0);
      
      Font font0 = dateAxis0.DEFAULT_AXIS_LABEL_FONT.deriveFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertNotNull(font0);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      dateAxis0.setTickLabelFont(font0);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      Date date0 = dateAxis0.getMinimumDate();
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertNotNull(date0);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertNotNull(jFreeChart0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      multiplePiePlot0.setBackgroundImageAlignment(15);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 1530);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1530, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1530, bufferedImage0.getHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(500, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertNotNull(bufferedImage0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1530, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1530, bufferedImage0.getHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(500, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertNotNull(sunGraphics2D0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.transformState);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(15, (-5.0F), 1.0F, 0.0F);
      assertEquals((-5.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(15.5, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(15.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-5.0), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(16.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-5.0), rectangle2D_Float0.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Float0);
      assertEquals((-5.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals(15.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)rectangle2D_Float0.getBounds2D();
      assertTrue(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertEquals((-5.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(15.5, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(15.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-5.0), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(16.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-5.0), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-5.0), rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(15.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals((-5.0), rectangle2D_Float1.getMinY(), 0.01);
      assertEquals((-5.0), rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(15.5, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(16.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertNotNull(rectangle2D_Float1);
      assertEquals((-5.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals(15.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(15.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals((-5.0F), rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      
      rectangle2D_Float1.setFrame(264.35965, (-327.55657889), (double) (-1), 0.0);
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertEquals((-5.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(15.5, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(15.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-5.0), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(16.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-5.0), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-327.55657958984375), rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals((-327.55657958984375), rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(263.8596496582031, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(263.3596496582031, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals((-327.55657958984375), rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(264.3596496582031, rectangle2D_Float1.getMinX(), 0.01);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertEquals((-5.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals(15.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(264.35965F, rectangle2D_Float1.x, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals((-327.55658F), rectangle2D_Float1.y, 0.01F);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      boolean boolean1 = rectangle2D_Float1.intersects((Rectangle2D) rectangle2D_Float0);
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertTrue(boolean1 == boolean0);
      assertEquals((-5.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(15.5, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(15.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-5.0), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(16.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-5.0), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-327.55657958984375), rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals((-327.55657958984375), rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(263.8596496582031, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(263.3596496582031, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals((-327.55657958984375), rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(264.3596496582031, rectangle2D_Float1.getMinX(), 0.01);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertFalse(boolean1);
      assertEquals((-5.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals(15.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(264.35965F, rectangle2D_Float1.x, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals((-327.55658F), rectangle2D_Float1.y, 0.01F);
      
      List list0 = dateAxis0.refreshTicksVertical(sunGraphics2D0, rectangle2D_Float1, rectangleEdge0);
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1530, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1530, bufferedImage0.getHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(500, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals((-5.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(15.5, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(15.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-5.0), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(16.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-5.0), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-327.55657958984375), rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals((-327.55657958984375), rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(263.8596496582031, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(263.3596496582031, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals((-327.55657958984375), rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(264.3596496582031, rectangle2D_Float1.getMinX(), 0.01);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertNotNull(list0);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals((-5.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals(15.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(264.35965F, rectangle2D_Float1.x, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals((-327.55658F), rectangle2D_Float1.y, 0.01F);
      
      RectangleEdge rectangleEdge1 = RectangleEdge.BOTTOM;
      double double0 = dateAxis0.java2DToValue((-2226.995609607963), rectangle2D_Float1, rectangleEdge1);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals((-5.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(15.5, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(15.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-5.0), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(16.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-5.0), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-327.55657958984375), rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals((-327.55657958984375), rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(263.8596496582031, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(263.3596496582031, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals((-327.55657958984375), rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(264.3596496582031, rectangle2D_Float1.getMinX(), 0.01);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertEquals(2491.0, double0, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals((-5.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals(15.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(264.35965F, rectangle2D_Float1.x, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals((-327.55658F), rectangle2D_Float1.y, 0.01F);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      AxisState axisState0 = dateAxis0.draw(sunGraphics2D0, 1550.833303978, rectangle2D_Double0, rectangle2D_Float1, rectangleEdge1, plotRenderingInfo0);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1568.802053978, axisState0.getCursor(), 0.01);
      assertEquals(0.0, axisState0.getMax(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1530, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1530, bufferedImage0.getHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(500, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals((-5.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(15.5, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(15.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-5.0), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(16.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-5.0), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-327.55657958984375), rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals((-327.55657958984375), rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(263.8596496582031, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(263.3596496582031, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals((-327.55657958984375), rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(264.3596496582031, rectangle2D_Float1.getMinX(), 0.01);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertNotNull(axisState0);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals((-8355712), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals((-8355712), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals((-5.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals(15.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(264.35965F, rectangle2D_Float1.x, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals((-327.55658F), rectangle2D_Float1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = ValueAxis.DEFAULT_INVERTED;
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Require '");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DateAxis dateAxis0 = new DateAxis("");
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertNotNull(dateAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      
      dateAxis0.setMinorTickMarkInsideLength((-1.0F));
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals((-1.0F), dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      
      dateAxis0.pan((-2023.7586088550925));
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals((-2023.7586088550925), dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals((-2022.7586088550925), dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertTrue(dateAxis0.isVisible());
      assertEquals((-1.0F), dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      
      DateFormat dateFormat0 = dateAxis0.getDateFormatOverride();
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals((-2023.7586088550925), dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals((-2022.7586088550925), dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertTrue(dateAxis0.isVisible());
      assertEquals((-1.0F), dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertNull(dateFormat0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MILLISECOND;
      assertEquals("DateTickUnitType.MILLISECOND", dateTickUnitType0.toString());
      assertEquals(14, dateTickUnitType0.getCalendarField());
      assertNotNull(dateTickUnitType0);
      
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 500);
      assertEquals("DateTickUnitType.MILLISECOND", dateTickUnitType0.toString());
      assertEquals(14, dateTickUnitType0.getCalendarField());
      assertEquals(500.0, dateTickUnit0.getSize(), 0.01);
      assertEquals(500, dateTickUnit0.getRollMultiple());
      assertEquals(14, dateTickUnit0.getCalendarField());
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals(500, dateTickUnit0.getMultiple());
      assertNotNull(dateTickUnit0);
      
      Date date0 = dateAxis0.calculateHighestVisibleTickValue(dateTickUnit0);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals((-2023.7586088550925), dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals((-2022.7586088550925), dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertTrue(dateAxis0.isVisible());
      assertEquals((-1.0F), dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertEquals("DateTickUnitType.MILLISECOND", dateTickUnitType0.toString());
      assertEquals(14, dateTickUnitType0.getCalendarField());
      assertEquals(500.0, dateTickUnit0.getSize(), 0.01);
      assertEquals(500, dateTickUnit0.getRollMultiple());
      assertEquals(14, dateTickUnit0.getCalendarField());
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals(500, dateTickUnit0.getMultiple());
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", date0.toString());
      assertNotNull(date0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      
      Date date1 = dateAxis0.nextStandardDate(date0, dateTickUnit0);
      assertFalse(date1.equals((Object)date0));
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals((-2023.7586088550925), dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals((-2022.7586088550925), dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertTrue(dateAxis0.isVisible());
      assertEquals((-1.0F), dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertEquals("DateTickUnitType.MILLISECOND", dateTickUnitType0.toString());
      assertEquals(14, dateTickUnitType0.getCalendarField());
      assertEquals(500.0, dateTickUnit0.getSize(), 0.01);
      assertEquals(500, dateTickUnit0.getRollMultiple());
      assertEquals(14, dateTickUnit0.getCalendarField());
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals(500, dateTickUnit0.getMultiple());
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", date0.toString());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", date1.toString());
      assertNotSame(date0, date1);
      assertNotSame(date1, date0);
      assertNotNull(date1);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      
      Timeline timeline0 = dateAxis0.getTimeline();
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals((-2023.7586088550925), dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals((-2022.7586088550925), dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertTrue(dateAxis0.isVisible());
      assertEquals((-1.0F), dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertNotNull(timeline0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      
      dateAxis0.setTimeline(timeline0);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals((-2023.7586088550925), dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals((-2022.7586088550925), dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertTrue(dateAxis0.isVisible());
      assertEquals((-1.0F), dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      
      DateAxis dateAxis1 = (DateAxis)dateAxis0.clone();
      assertTrue(dateAxis1.equals((Object)dateAxis0));
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals((-2023.7586088550925), dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals((-2022.7586088550925), dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
      assertTrue(dateAxis0.isVisible());
      assertEquals((-1.0F), dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertFalse(dateAxis1.isAutoRange());
      assertEquals(0.05, dateAxis1.getLowerMargin(), 0.01);
      assertEquals((-2022.7586088550925), dateAxis1.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertFalse(dateAxis1.isMinorTickMarksVisible());
      assertFalse(dateAxis1.isPositiveArrowVisible());
      assertFalse(dateAxis1.isNegativeArrowVisible());
      assertEquals((-1.0F), dateAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(DateTickMarkPosition.START, dateAxis1.getTickMarkPosition());
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertEquals(0.0, dateAxis1.getFixedDimension(), 0.01);
      assertTrue(dateAxis1.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis1.isVerticalTickLabels());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis1.getLabelLocation());
      assertTrue(dateAxis1.isAxisLineVisible());
      assertEquals((-2023.7586088550925), dateAxis1.getLowerBound(), 0.01);
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertEquals(0.05, dateAxis1.getUpperMargin(), 0.01);
      assertEquals(0, dateAxis1.getMinorTickCount());
      assertFalse(dateAxis1.isInverted());
      assertEquals("", dateAxis1.getLabel());
      assertTrue(dateAxis1.isVisible());
      assertEquals(0.0, dateAxis1.getFixedAutoRange(), 0.01);
      assertNotSame(dateAxis0, dateAxis1);
      assertNotSame(dateAxis1, dateAxis0);
      assertNotNull(dateAxis1);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      // Undeclared exception!
      try { 
        DateFormatSymbols.getInstance((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("*2^W");
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("*2^W", dateAxis0.getLabel());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNotNull(dateAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("*2^W");
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("*2^W", extendedCategoryAxis0.getLabel());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, extendedCategoryAxis0.getLabelLocation());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertNotNull(extendedCategoryAxis0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      
      BarRenderer barRenderer0 = new BarRenderer();
      assertEquals(0.0, barRenderer0.getLowerClip(), 0.01);
      assertTrue(barRenderer0.getAutoPopulateSeriesShape());
      assertTrue(barRenderer0.getDefaultSeriesVisible());
      assertTrue(barRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(barRenderer0.getShadowsVisible());
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertTrue(barRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, barRenderer0.getPassCount());
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
      assertFalse(barRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(barRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertFalse(barRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, barRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(barRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, barRenderer0.getRowCount());
      assertTrue(barRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(barRenderer0.isDrawBarOutline());
      assertEquals(0, barRenderer0.getColumnCount());
      assertTrue(barRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, barRenderer0.getDefaultEntityRadius());
      assertTrue(barRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
      assertTrue(barRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, barRenderer0.getUpperClip(), 0.01);
      assertTrue(barRenderer0.getDefaultCreateEntities());
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertNotNull(barRenderer0);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, extendedCategoryAxis0, dateAxis0, barRenderer0);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("*2^W", dateAxis0.getLabel());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("*2^W", extendedCategoryAxis0.getLabel());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, extendedCategoryAxis0.getLabelLocation());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, barRenderer0.getLowerClip(), 0.01);
      assertTrue(barRenderer0.getAutoPopulateSeriesShape());
      assertTrue(barRenderer0.getDefaultSeriesVisible());
      assertTrue(barRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(barRenderer0.getShadowsVisible());
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertTrue(barRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, barRenderer0.getPassCount());
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
      assertFalse(barRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(barRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertFalse(barRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, barRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(barRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, barRenderer0.getRowCount());
      assertTrue(barRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(barRenderer0.isDrawBarOutline());
      assertEquals(0, barRenderer0.getColumnCount());
      assertTrue(barRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, barRenderer0.getDefaultEntityRadius());
      assertTrue(barRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
      assertTrue(barRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, barRenderer0.getUpperClip(), 0.01);
      assertTrue(barRenderer0.getDefaultCreateEntities());
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertNotNull(categoryPlot0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      RectangleEdge rectangleEdge0 = categoryPlot0.getRangeAxisEdge();
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(DateTickMarkPosition.START, dateAxis0.getTickMarkPosition());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("*2^W", dateAxis0.getLabel());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(AxisLabelLocation.MIDDLE, dateAxis0.getLabelLocation());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("*2^W", extendedCategoryAxis0.getLabel());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, extendedCategoryAxis0.getLabelLocation());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, barRenderer0.getLowerClip(), 0.01);
      assertTrue(barRenderer0.getAutoPopulateSeriesShape());
      assertTrue(barRenderer0.getDefaultSeriesVisible());
      assertTrue(barRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(barRenderer0.getShadowsVisible());
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertTrue(barRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, barRenderer0.getPassCount());
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
      assertFalse(barRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(barRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertFalse(barRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, barRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(barRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, barRenderer0.getRowCount());
      assertTrue(barRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(barRenderer0.isDrawBarOutline());
      assertEquals(0, barRenderer0.getColumnCount());
      assertTrue(barRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, barRenderer0.getDefaultEntityRadius());
      assertTrue(barRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
      assertTrue(barRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, barRenderer0.getUpperClip(), 0.01);
      assertTrue(barRenderer0.getDefaultCreateEntities());
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getColumnRenderingOrder());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(DatasetRenderingOrder.REVERSE, categoryPlot0.getDatasetRenderingOrder());
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(PlotOrientation.VERTICAL, categoryPlot0.getOrientation());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(CategoryAnchor.MIDDLE, categoryPlot0.getDomainGridlinePosition());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(SortOrder.ASCENDING, categoryPlot0.getRowRenderingOrder());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.fetchElementHintingFlag());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(RectangleEdge.LEFT, rectangleEdge0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[8];
      URL uRL0 = MockURL.getFtpExample();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        MockURL.openStream(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "Ov'!G2iwh@d@d9";
      int int0 = 3168;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(3168, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.fireChangeEvent();
      Color color0 = (Color)Axis.DEFAULT_AXIS_LABEL_PAINT;
      dateAxis0.setLabelPaint(color0);
      dateAxis0.setFixedAutoRange(2235.253809);
      dateAxis0.getTimeline();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      int int0 = 13;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(13, 500, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      int int1 = 588;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 15;
      floatArray0[1] = (float) 10;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(588, 13, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 2 and should be 7644
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("org.jfree.data.time.DateRange");
      Locale locale0 = dateAxis0.getLocale();
      dateAxis0.zoomRange((-3925.65388532), (-3925.65388532));
      dateAxis0.setUpperMargin((-3925.65388532));
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      dateTickUnit0.valueToString(6262.57580066);
      dateAxis0.calculateHighestVisibleTickValue(dateTickUnit0);
      locale0.stripExtensions();
      dateAxis0.getTimeZone();
      DirectColorModel directColorModel0 = null;
      try {
        directColorModel0 = new DirectColorModel(500, 500, 498, 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Noncontiguous red mask (1f4
         //
         verifyException("java.awt.image.PackedColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("GsR@8k");
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.YEAR;
      DateFormat dateFormat0 = DateFormat.getInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 500, dateFormat0);
      MockDate mockDate0 = new MockDate(500, 500, 500, 500, 500, 500);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      rectangle0.getBounds2D();
      rectangle2D_Double0.height = 10.0;
      rectangle0.add(180.0, (-4255.38));
      dateAxis0.configure();
      MockDate mockDate1 = new MockDate();
      dateAxis0.setMinimumDate(mockDate1);
      dateAxis0.zoomRange(2.0, (-1.0));
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      dateAxis0.equals(mockDateFormat0);
      dateAxis0.getMaximumDate();
      dateAxis0.setMaximumDate(mockDate1);
      assertEquals(1.392409281319E12, dateAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Date[] dateArray0 = new Date[4];
      dateAxis0.isHiddenValue(53L);
      dateArray0[0] = dateAxis0.DEFAULT_ANCHOR_DATE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dateArray0[1] = dateAxis0.DEFAULT_ANCHOR_DATE;
      dateArray0[2] = dateAxis0.DEFAULT_ANCHOR_DATE;
      dateArray0[3] = dateAxis0.DEFAULT_ANCHOR_DATE;
      dateAxis0.setRangeWithMargins((-935.625376047748), 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 500;
      doubleArray0[2] = 0.05;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.05;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0F, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      int int0 = 4584;
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getXDate(4584, 4584);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4584
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }
}
