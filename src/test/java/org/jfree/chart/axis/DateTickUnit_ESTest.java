/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:51:20 GMT 2019
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.DateTickUnitType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTickUnit_ESTest extends DateTickUnit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MINUTE;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 13, dateFormat0);
      assertEquals(780000.0, dateTickUnit0.getSize(), 0.01);
      assertEquals(13, dateTickUnit0.getRollMultiple());
      assertEquals(13, dateTickUnit0.getMultiple());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.DAY;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 37, dateFormat0);
      MockDate mockDate0 = new MockDate(244, 37, 0, 1534, 5, 37);
      TimeZone timeZone0 = TimeZone.getDefault();
      Date date0 = dateTickUnit0.rollDate((Date) mockDate0, timeZone0);
      assertEquals(3.1968E9, dateTickUnit0.getSize(), 0.01);
      assertEquals("Thu May 11 22:05:37 GMT 2147", date0.toString());
      assertEquals(37, dateTickUnit0.getMultiple());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.DAY;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 37, dateFormat0);
      MockDate mockDate0 = new MockDate(244, 37, 0, 1534, 5, 37);
      Date date0 = dateTickUnit0.rollDate((Date) mockDate0);
      assertEquals("Thu May 11 22:05:37 GMT 2147", date0.toString());
      assertEquals(3.1968E9, dateTickUnit0.getSize(), 0.01);
      assertEquals(37, dateTickUnit0.getMultiple());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.DAY;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 37, dateFormat0);
      MockDate mockDate0 = new MockDate(244, 37, 0, 1534, 5, 37);
      dateTickUnit0.dateToString(mockDate0);
      assertEquals(37, dateTickUnit0.getMultiple());
      assertEquals(3.1968E9, dateTickUnit0.getSize(), 0.01);
      assertEquals(37, dateTickUnit0.getRollMultiple());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MILLISECOND;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      DateTickUnit dateTickUnit0 = null;
      try {
        dateTickUnit0 = new DateTickUnit((DateTickUnitType) null, (-1265), dateTickUnitType0, 5, dateFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      DateTickUnit dateTickUnit0 = null;
      try {
        dateTickUnit0 = new DateTickUnit((DateTickUnitType) null, (-4353), dateFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.DAY;
      DateTickUnit dateTickUnit0 = null;
      try {
        dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 0, (DateFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTickUnit dateTickUnit0 = null;
      try {
        dateTickUnit0 = new DateTickUnit((DateTickUnitType) null, (-2169));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.HOUR;
      Locale locale0 = new Locale("64AHAXfo[S 0&$,A");
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(0, 0, locale0);
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 3, dateTickUnitType0, 3, dateFormat0);
      MockDate mockDate0 = new MockDate(0, (-1883), 0, (-1883), 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1883), "");
      Date date0 = dateTickUnit0.addToDate(mockDate0, simpleTimeZone0);
      assertEquals(3, dateTickUnit0.getRollMultiple());
      assertEquals(1.08E7, dateTickUnit0.getSize(), 0.01);
      assertEquals("Tue Nov 13 16:00:00 GMT 1742", date0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      DateTickUnit dateTickUnit0 = null;
      try {
        dateTickUnit0 = new DateTickUnit(dateTickUnitType0, (-1374), dateTickUnitType0, (-1374), dateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'multiple' > 0.
         //
         verifyException("org.jfree.chart.axis.DateTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2680, dateFormat0);
      DateTickUnit dateTickUnit1 = new DateTickUnit(dateTickUnitType0, 2680);
      boolean boolean0 = dateTickUnit0.equals(dateTickUnit1);
      assertEquals(2680000.0, dateTickUnit1.getSize(), 0.01);
      assertEquals(2680, dateTickUnit1.getRollMultiple());
      assertFalse(boolean0);
      assertEquals(2680, dateTickUnit1.getMultiple());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2657);
      DateTickUnit dateTickUnit1 = new DateTickUnit(dateTickUnitType0, 2657);
      boolean boolean0 = dateTickUnit0.equals(dateTickUnit1);
      assertEquals(2657000.0, dateTickUnit1.getSize(), 0.01);
      assertEquals(2657, dateTickUnit1.getRollMultiple());
      assertTrue(boolean0);
      assertEquals(2657, dateTickUnit1.getMultiple());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2657);
      boolean boolean0 = dateTickUnit0.equals(dateTickUnit0);
      assertEquals(2657, dateTickUnit0.getRollMultiple());
      assertTrue(boolean0);
      assertEquals(2657000.0, dateTickUnit0.getSize(), 0.01);
      assertEquals(2657, dateTickUnit0.getMultiple());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2657);
      boolean boolean0 = dateTickUnit0.equals("sq]OgJ}pHZbM~Go87");
      assertFalse(boolean0);
      assertEquals(2657, dateTickUnit0.getRollMultiple());
      assertEquals(2657, dateTickUnit0.getMultiple());
      assertEquals(2657000.0, dateTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.DAY;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 37, dateFormat0);
      DateTickUnit dateTickUnit1 = new DateTickUnit(dateTickUnitType0, 13, dateFormat0);
      boolean boolean0 = dateTickUnit0.equals(dateTickUnit1);
      assertEquals(13, dateTickUnit1.getMultiple());
      assertFalse(boolean0);
      assertEquals(13, dateTickUnit1.getRollMultiple());
      assertEquals(1.1232E9, dateTickUnit1.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MONTH;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 16);
      // Undeclared exception!
      try { 
        dateTickUnit0.rollDate((Date) null, (TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.YEAR;
      DateTickUnit dateTickUnit0 = null;
      try {
        dateTickUnit0 = new DateTickUnit(dateTickUnitType0, (-752));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'multiple' > 0.
         //
         verifyException("org.jfree.chart.axis.DateTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.HOUR;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      DateTickUnit dateTickUnit0 = null;
      try {
        dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2110, dateTickUnitType0, (-4891), dateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'rollMultiple' > 0.
         //
         verifyException("org.jfree.chart.axis.DateTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MILLISECOND;
      DateTickUnit dateTickUnit0 = null;
      try {
        dateTickUnit0 = new DateTickUnit(dateTickUnitType0, (-328));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'multiple' > 0.
         //
         verifyException("org.jfree.chart.axis.DateTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2657);
      dateTickUnit0.getUnitType();
      assertEquals(2657, dateTickUnit0.getRollMultiple());
      assertEquals(2657, dateTickUnit0.getMultiple());
      assertEquals(2657000.0, dateTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2680, dateFormat0);
      dateTickUnit0.getRollUnitType();
      assertEquals(2680000.0, dateTickUnit0.getSize(), 0.01);
      assertEquals(2680, dateTickUnit0.getRollMultiple());
      assertEquals(2680, dateTickUnit0.getMultiple());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2657);
      int int0 = dateTickUnit0.getMultiple();
      assertEquals(2657000.0, dateTickUnit0.getSize(), 0.01);
      assertEquals(2657, dateTickUnit0.getRollMultiple());
      assertEquals(2657, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MILLISECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2503);
      dateTickUnit0.hashCode();
      assertEquals(2503, dateTickUnit0.getRollMultiple());
      assertEquals(2503.0, dateTickUnit0.getSize(), 0.01);
      assertEquals(2503, dateTickUnit0.getMultiple());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2657);
      int int0 = dateTickUnit0.getRollMultiple();
      assertEquals(2657, int0);
      assertEquals(2657000.0, dateTickUnit0.getSize(), 0.01);
      assertEquals(2657, dateTickUnit0.getMultiple());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2657);
      dateTickUnit0.getCalendarField();
      assertEquals(2657, dateTickUnit0.getRollMultiple());
      assertEquals(2657, dateTickUnit0.getMultiple());
      assertEquals(2657000.0, dateTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 32);
      MockDate mockDate0 = new MockDate(2669L);
      // Undeclared exception!
      try { 
        dateTickUnit0.addToDate(mockDate0, (TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MILLISECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2396);
      String string0 = dateTickUnit0.toString();
      assertEquals(2396, dateTickUnit0.getRollMultiple());
      assertEquals("DateTickUnit[DateTickUnitType.MILLISECOND, 2396]", string0);
      assertEquals(2396.0, dateTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MINUTE;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 1);
      // Undeclared exception!
      try { 
        dateTickUnit0.dateToString((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MILLISECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2396);
      // Undeclared exception!
      try { 
        dateTickUnit0.rollDate((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MILLISECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2396);
      String string0 = dateTickUnit0.valueToString(2396);
      assertEquals(2396, dateTickUnit0.getMultiple());
      assertEquals(2396, dateTickUnit0.getRollMultiple());
      assertEquals(2396.0, dateTickUnit0.getSize(), 0.01);
      assertEquals("1/1/70", string0);
  }
}
