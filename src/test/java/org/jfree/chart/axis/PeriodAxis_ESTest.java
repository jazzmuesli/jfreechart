/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 20:58:00 GMT 2019
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.IndexColorModel;
import java.awt.image.RescaleOp;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.NumberFormat;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import javax.swing.JEditorPane;
import javax.swing.JLayeredPane;
import javax.swing.JMenu;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.axis.AxisLabelLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.TickUnits;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.TextAnchor;
import org.jfree.chart.ui.VerticalAlignment;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.chart.util.DefaultShadowGenerator;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class PeriodAxis_ESTest extends PeriodAxis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 0.0, 0.05, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      Rectangle rectangle0 = new Rectangle();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      RectangleEdge rectangleEdge1 = RectangleEdge.TOP;
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      periodAxis0.draw(graphics2D0, 0.0, rectangle0, rectangle0, rectangleEdge1, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      float[][] floatArray0 = new float[4][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (float) 500;
      floatArray1[1] = 2.0F;
      floatArray1[2] = (float) 500;
      floatArray1[3] = 2.0F;
      floatArray1[4] = (float) 500;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      floatArray2[0] = (float) 500;
      floatArray2[1] = 0.0F;
      floatArray2[2] = (float) 500;
      Class<String> class0 = String.class;
      periodAxis0.setAutoRangeTimePeriodClass(class0);
      floatArray2[3] = (float) 500;
      floatArray2[4] = 0.0F;
      floatArray2[5] = 500.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[2];
      floatArray3[0] = 2.0F;
      floatArray3[1] = (float) 500;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[4];
      floatArray4[0] = (float) 500;
      floatArray4[1] = 2.0F;
      floatArray4[2] = 0.0F;
      floatArray4[3] = 0.0F;
      DateAxis dateAxis0 = new DateAxis("37%AM]!sxP%5%");
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray0, periodAxis0, dateAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      float[][] floatArray0 = new float[4][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (float) 500;
      floatArray1[1] = 2.0F;
      floatArray1[2] = (float) 500;
      floatArray1[3] = 2.0F;
      floatArray1[4] = (float) 500;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      floatArray2[0] = (float) 500;
      floatArray2[1] = 0.0F;
      floatArray2[2] = (float) 500;
      floatArray2[3] = (float) 500;
      floatArray2[4] = 0.0F;
      floatArray2[5] = 2.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[2];
      floatArray3[0] = 2.0F;
      floatArray3[1] = (float) 500;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[4];
      floatArray4[0] = (float) 500;
      floatArray4[1] = 2.0F;
      floatArray4[2] = 0.0F;
      floatArray4[3] = 0.0F;
      floatArray0[3] = floatArray4;
      DateAxis dateAxis0 = new DateAxis("37%AM]!sxP%5%");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, periodAxis0, dateAxis0);
      Range range0 = fastScatterPlot0.getDataRange(dateAxis0);
      periodAxis0.setRange(range0, false, true);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = rectangle2D_Double0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      periodAxis0.valueToJava2D(4.9E-324, rectangle2D0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "zone";
      PeriodAxis periodAxis0 = new PeriodAxis("zone");
      periodAxis0.getMinorTickMarkPaint();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(9999, 10, chartRenderingInfo0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 0.0, 0.05, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      Rectangle rectangle0 = new Rectangle();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      periodAxis0.autoAdjustRange();
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(1.0F, (-1030.642F), renderingHints0);
      Rectangle2D rectangle2D0 = rescaleOp0.getBounds2D(bufferedImage0);
      // Undeclared exception!
      try { 
        periodAxis0.draw(graphics2D0, 0.0F, rectangle0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(458L);
      fixedMillisecond0.getTime();
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.MIDDLE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1184), 1331, (-1184), 972, 1331);
      mockGregorianCalendar0.getTimeZone();
      fixedMillisecond0.getMillisecond(timePeriodAnchor0, mockGregorianCalendar0);
      PeriodAxis periodAxis0 = new PeriodAxis("\"I:~/!'pzUn", fixedMillisecond0, fixedMillisecond0);
      periodAxis0.setUpperBound(458L);
      periodAxis0.getMinorTickMarkPaint();
      periodAxis0.pan(1331);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      periodAxis0.setLast(fixedMillisecond0);
      periodAxis0.equals(mockGregorianCalendar0);
      periodAxis0.equals("MMM");
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 0, (double) 0, 0.0, 1.25);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, false);
      Rectangle2D rectangle2D0 = periodAxis0.DEFAULT_AXIS_LABEL_FONT.getStringBounds("\"I:~/!'pzUn", fontRenderContext0);
      periodAxis0.java2DToValue(972, rectangle2D0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      MenuElement[] menuElementArray0 = new MenuElement[6];
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      menuElementArray0[1] = (MenuElement) jPopupMenu0;
      menuElementArray0[2] = (MenuElement) jPopupMenu0;
      menuElementArray0[1] = (MenuElement) jPopupMenu0;
      JMenu jMenu0 = new JMenu();
      menuElementArray0[4] = (MenuElement) jMenu0;
      menuElementArray0[5] = (MenuElement) jPopupMenu0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jPopupMenu0, 1167, 31536000000L, 60, 0, 60, 0, false, menuElementArray0, menuSelectionManager0);
      menuDragMouseEvent0.getLocationOnScreen();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      Week week0 = new Week();
      PeriodAxis periodAxis0 = new PeriodAxis("", week0, week0);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, periodAxis0.DEFAULT_AXIS_LABEL_FONT, waferMapPlot0, false);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(0.0F, 1, renderingHints0);
      BufferedImage bufferedImage0 = new BufferedImage(10, 2491, 1);
      BufferedImage bufferedImage1 = rescaleOp0.filter(bufferedImage0, bufferedImage0);
      Graphics2D graphics2D0 = bufferedImage1.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      periodAxis0.draw(graphics2D0, 15, rectangle0, rectangle0, rectangleEdge0, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      periodAxis0.getMinorTickTimePeriodClass();
      periodAxis0.getTimeZone();
      periodAxis0.getMinorTickMarkInsideLength();
      periodAxis0.setTickMarksVisible(false);
      periodAxis0.setFixedDimension(0.0F);
      periodAxis0.setMinorTickMarkInsideLength((-416.1F));
      periodAxis0.getLocale();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 101, 0, 10, 0, 0, 0, true, true, true, false, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(512, 512, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      Rectangle rectangle0 = new Rectangle();
      AxisState axisState0 = new AxisState(0.0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      AxisState axisState1 = new AxisState();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      // Undeclared exception!
      try { 
        periodAxis0.drawTickLabels(15, graphics2D0, axisState1, rectangle0, rectangleEdge0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1184, 1184, 1184, 1600, 1184);
      Day day0 = new Day(mockDate0);
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      PeriodAxis periodAxis0 = new PeriodAxis("d/96KFL&xKD'r6vn", regularTimePeriod0, regularTimePeriod0);
      periodAxis0.getMinorTickTimePeriodClass();
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), (-2.147483648E9), "zone");
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 500, 500, 3, (-3323), (-658), (-460), false, true, false, true, true, true);
      Rectangle rectangle0 = chartPanel0.getBounds();
      Rectangle2D rectangle2D0 = rectangle0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      AxisState axisState0 = cyclicNumberAxis0.draw(graphics2D0, 819.3213, rectangle2D0, rectangle0, rectangleEdge0, (PlotRenderingInfo) null);
      RectangleEdge rectangleEdge1 = RectangleEdge.LEFT;
      periodAxis0.drawTickMarksVertical(graphics2D0, axisState0, rectangle0, rectangleEdge1);
      periodAxis0.getLast();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(2.0F, 500, 2.0F, 500);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0E-8, (-3646.49), 500, 2.0F);
      Rectangle2D rectangle2D0 = rectangle2D_Double0.createIntersection(rectangle2D_Float0);
      Rectangle2D rectangle2D1 = rectangle2D_Float0.createUnion(rectangle2D0);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      MenuElement[] menuElementArray0 = new MenuElement[6];
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      menuElementArray0[1] = (MenuElement) jPopupMenu0;
      menuElementArray0[2] = (MenuElement) jPopupMenu0;
      menuElementArray0[3] = (MenuElement) jPopupMenu0;
      JMenu jMenu0 = new JMenu();
      menuElementArray0[4] = (MenuElement) jMenu0;
      menuElementArray0[5] = (MenuElement) jPopupMenu0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jPopupMenu0, 1167, 31536000000L, 60, 0, 60, 0, false, menuElementArray0, menuSelectionManager0);
      Point point0 = menuDragMouseEvent0.getLocationOnScreen();
      rectangle2D_Double0.setFrameFromDiagonal((Point2D) point0, (Point2D) point0);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      periodAxis0.valueToJava2D((-1567.9), rectangle2D1, rectangleEdge0);
      BufferedImage bufferedImage0 = new BufferedImage(1, 500, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<Minute> vector0 = new Vector<Minute>();
      JTree jTree0 = new JTree(vector0);
      jTree0.getRowBounds(60);
      Rectangle2D rectangle2D2 = periodAxis0.DEFAULT_TICK_LABEL_INSETS.createInsetRectangle(rectangle2D1, false, false);
      RectangleEdge rectangleEdge1 = RectangleEdge.BOTTOM;
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("nw9/\"oBy[B,2iP", periodAxis0.DEFAULT_AXIS_LABEL_FONT, piePlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1645, 10, (-1), (-1207), 1, 500, true, true, true, true, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      periodAxis0.draw(graphics2D0, (-2962.7944640702), (Rectangle2D) null, rectangle2D2, rectangleEdge1, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.data.general.SeriesChangeEvent");
      periodAxis0.setUpperMargin(999.5271071840455);
      periodAxis0.setLowerBound((-1.0));
      Class<Minute> class0 = Minute.class;
      periodAxis0.setAutoRangeTimePeriodClass(class0);
      periodAxis0.fireChangeEvent();
      PeriodAxisLabelInfo[] periodAxisLabelInfoArray0 = new PeriodAxisLabelInfo[2];
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, periodAxis0.DEFAULT_TICK_LABEL_INSETS, periodAxis0.DEFAULT_AXIS_LABEL_FONT, periodAxis0.DEFAULT_AXIS_LINE_PAINT, true, periodAxis0.DEFAULT_AXIS_LINE_STROKE, periodAxis0.DEFAULT_TICK_LABEL_PAINT);
      periodAxisLabelInfoArray0[0] = periodAxisLabelInfo0;
      periodAxisLabelInfo0.clone();
      PeriodAxisLabelInfo periodAxisLabelInfo1 = new PeriodAxisLabelInfo(class0, dateFormat0);
      periodAxisLabelInfoArray0[1] = periodAxisLabelInfo1;
      periodAxis0.setLabelInfo(periodAxisLabelInfoArray0);
      periodAxis0.autoAdjustRange();
      JTable jTable0 = new JTable();
      Rectangle rectangle0 = jTable0.getCellRect((-317), 216, true);
      rectangle0.setRect((-822.42011785), 46.36, (double) 0.0F, (-2094.9798307283));
      rectangle0.setFrameFromCenter((double) (-317), (-1469.2), (double) 0.0F, 2.0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      periodAxis0.java2DToValue(1952.98759159, rectangle0, rectangleEdge0);
      periodAxis0.getMajorTickTimePeriodClass();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(2.0F, 0.0F, 2.0F, 0.0F);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0E-8, (-3646.49), 500, 2.0F);
      Rectangle2D rectangle2D0 = rectangle2D_Double0.createIntersection(rectangle2D_Float0);
      Rectangle2D rectangle2D1 = rectangle2D_Float0.createUnion(rectangle2D0);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      MenuElement[] menuElementArray0 = new MenuElement[6];
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      menuElementArray0[1] = (MenuElement) jPopupMenu0;
      menuElementArray0[2] = (MenuElement) jPopupMenu0;
      menuElementArray0[3] = (MenuElement) jPopupMenu0;
      JMenu jMenu0 = new JMenu();
      menuElementArray0[4] = (MenuElement) jMenu0;
      menuElementArray0[5] = (MenuElement) jPopupMenu0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jPopupMenu0, 1167, 31536000000L, 60, 0, 60, 0, false, menuElementArray0, menuSelectionManager0);
      Point point0 = menuDragMouseEvent0.getLocationOnScreen();
      point0.translate((-138), (-138));
      rectangle2D_Double0.setFrameFromDiagonal((Point2D) point0, (Point2D) point0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      periodAxis0.valueToJava2D((-1567.9), rectangle2D1, rectangleEdge0);
      RectangleEdge rectangleEdge1 = RectangleEdge.RIGHT;
      periodAxis0.java2DToValue(25.5, rectangle2D0, rectangleEdge1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.data.general.SeriesChangeEvent");
      periodAxis0.setUpperMargin(999.5271071840455);
      periodAxis0.setLowerBound((-1.0));
      Class<Minute> class0 = Minute.class;
      periodAxis0.setAutoRangeTimePeriodClass(class0);
      periodAxis0.fireChangeEvent();
      PeriodAxisLabelInfo[] periodAxisLabelInfoArray0 = new PeriodAxisLabelInfo[2];
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, periodAxis0.DEFAULT_TICK_LABEL_INSETS, periodAxis0.DEFAULT_AXIS_LABEL_FONT, periodAxis0.DEFAULT_AXIS_LINE_PAINT, true, periodAxis0.DEFAULT_AXIS_LINE_STROKE, periodAxis0.DEFAULT_TICK_LABEL_PAINT);
      periodAxisLabelInfoArray0[0] = periodAxisLabelInfo0;
      periodAxisLabelInfo0.clone();
      PeriodAxisLabelInfo periodAxisLabelInfo1 = new PeriodAxisLabelInfo(class0, dateFormat0);
      periodAxisLabelInfoArray0[1] = periodAxisLabelInfo1;
      periodAxis0.setLabelInfo(periodAxisLabelInfoArray0);
      periodAxis0.autoAdjustRange();
      JTable jTable0 = new JTable();
      Rectangle rectangle0 = jTable0.getCellRect((-317), 216, true);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      periodAxis0.java2DToValue(1952.98759159, rectangle0, rectangleEdge0);
      periodAxis0.valueToJava2D((-1.0), rectangle0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(2.0F, 0.0F, 2.0F, 0.0F);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0E-8, (-3638.3778451186254), 500, 2.0F);
      Rectangle2D rectangle2D0 = rectangle2D_Double0.createIntersection(rectangle2D_Float0);
      Rectangle2D rectangle2D1 = rectangle2D_Float0.createUnion(rectangle2D0);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      MenuElement[] menuElementArray0 = new MenuElement[6];
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      menuElementArray0[1] = (MenuElement) jPopupMenu0;
      menuElementArray0[2] = (MenuElement) jPopupMenu0;
      menuElementArray0[3] = (MenuElement) jPopupMenu0;
      JMenu jMenu0 = new JMenu();
      menuElementArray0[4] = (MenuElement) jMenu0;
      menuElementArray0[5] = (MenuElement) jPopupMenu0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jPopupMenu0, 1167, 31536000000L, 60, 0, 60, 0, false, menuElementArray0, menuSelectionManager0);
      Point point0 = menuDragMouseEvent0.getLocationOnScreen();
      rectangle2D_Double0.setFrameFromDiagonal((Point2D) point0, (Point2D) point0);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      periodAxis0.valueToJava2D((-1567.9), rectangle2D1, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0E-8, (-3646.49), 500, 2.0F);
      Rectangle2D rectangle2D0 = rectangle2D_Double0.createIntersection(rectangle2D_Float0);
      Rectangle2D rectangle2D1 = rectangle2D_Float0.createUnion(rectangle2D0);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      MenuElement[] menuElementArray0 = new MenuElement[6];
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      menuElementArray0[1] = (MenuElement) jPopupMenu0;
      menuElementArray0[2] = (MenuElement) jPopupMenu0;
      menuElementArray0[3] = (MenuElement) jPopupMenu0;
      JMenu jMenu0 = new JMenu();
      menuElementArray0[4] = (MenuElement) jMenu0;
      menuElementArray0[5] = (MenuElement) jPopupMenu0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jPopupMenu0, 1167, 31536000000L, 60, 0, 60, 0, false, menuElementArray0, menuSelectionManager0);
      Point point0 = menuDragMouseEvent0.getLocationOnScreen();
      rectangle2D_Double0.setFrameFromDiagonal((Point2D) point0, (Point2D) point0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      periodAxis0.valueToJava2D((-1567.9), rectangle2D1, rectangleEdge0);
      RectangleEdge rectangleEdge1 = RectangleEdge.TOP;
      periodAxis0.java2DToValue((-258.423545239), rectangle2D0, rectangleEdge1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.MIDDLE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1184), 1331, (-1184), 972, 1331);
      fixedMillisecond0.getMillisecond(timePeriodAnchor0, mockGregorianCalendar0);
      PeriodAxis periodAxis0 = new PeriodAxis("\"I:~/!'pzUn", fixedMillisecond0, fixedMillisecond0);
      periodAxis0.setUpperBound(458L);
      periodAxis0.getMinorTickMarkPaint();
      JEditorPane jEditorPane0 = new JEditorPane("\"I:~/!'pzUn", "\"I:~/!'pzUn");
      periodAxis0.pan(1331);
      jEditorPane0.modelToView(0);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      // Undeclared exception!
      try { 
        periodAxis0.valueToJava2D(1392409281320L, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "W5~<tt*y*^PL0KQ4";
      PeriodAxis periodAxis0 = new PeriodAxis("W5~<tt*y*^PL0KQ4");
      periodAxis0.setMinorTickMarksVisible(true);
      periodAxis0.isMinorTickMarksVisible();
      periodAxis0.autoAdjustRange();
      periodAxis0.isMinorTickMarksVisible();
      periodAxis0.getFirst();
      Number[][] numberArray0 = new Number[2][1];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) 0.05;
      numberArray1[1] = (Number) 1.0E-8;
      numberArray1[2] = (Number) 2.0F;
      numberArray1[3] = (Number) 1.0E-8;
      numberArray1[4] = (Number) 1.0E-8;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      numberArray2[0] = (Number) 1.0E-8;
      numberArray2[1] = (Number) 2.0F;
      numberArray2[2] = (Number) 0.0F;
      numberArray2[3] = (Number) 0.0F;
      numberArray2[4] = (Number) 0.05;
      numberArray2[5] = (Number) 500;
      numberArray2[6] = (Number) 0.0F;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      numberArray2[7] = (Number) integer0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      PiePlot3D piePlot3D0 = new PiePlot3D(categoryToPieDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(piePlot3D0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (10) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      periodAxis0.getMinorTickTimePeriodClass();
      periodAxis0.getTimeZone();
      periodAxis0.getMinorTickMarkInsideLength();
      periodAxis0.setTickMarksVisible(false);
      periodAxis0.setFixedDimension(0.0F);
      periodAxis0.setMinorTickMarkInsideLength((-416.1F));
      periodAxis0.getLocale();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 101, 0, 10, 0, 0, 0, true, true, true, false, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      chartRenderingInfo0.equals("COPY");
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(512, 512, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle();
      AxisState axisState0 = new AxisState(0.0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      periodAxis0.getMinorTickMarkStroke();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        periodAxis0.draw(graphics2D0, 0, rectangle0, rectangle0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Day day0 = new Day();
      day0.getStart();
      PeriodAxis periodAxis0 = new PeriodAxis("", day0, day0);
      periodAxis0.getTimeZone();
      periodAxis0.setUpperBound(5.0);
      periodAxis0.setMinorTickMarkOutsideLength((-4181.21F));
      periodAxis0.configure();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("yyyy");
      periodAxis0.setUpperBound(1326.322027);
      periodAxis0.setTickLabelsVisible(false);
      periodAxis0.configure();
      periodAxis0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(2.0F, 0.0F, 2.0F, 0.0F);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0E-8, (-3646.49), 500, 2.0F);
      Rectangle2D rectangle2D0 = rectangle2D_Double0.createIntersection(rectangle2D_Float0);
      Rectangle2D rectangle2D1 = rectangle2D_Float0.createUnion(rectangle2D0);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      MenuElement[] menuElementArray0 = new MenuElement[6];
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      menuElementArray0[1] = (MenuElement) jPopupMenu0;
      menuElementArray0[2] = (MenuElement) jPopupMenu0;
      menuElementArray0[3] = (MenuElement) jPopupMenu0;
      JMenu jMenu0 = new JMenu();
      menuElementArray0[4] = (MenuElement) jMenu0;
      menuElementArray0[5] = (MenuElement) jPopupMenu0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jPopupMenu0, 1167, 31536000000L, 60, 0, 60, 0, false, menuElementArray0, menuSelectionManager0);
      Point point0 = menuDragMouseEvent0.getLocationOnScreen();
      rectangle2D_Double0.setFrameFromDiagonal((Point2D) point0, (Point2D) point0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      periodAxis0.valueToJava2D((-1567.9), rectangle2D1, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "lbkiWG4#8";
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      PeriodAxis periodAxis0 = new PeriodAxis("lbkiWG4#8", regularTimePeriod0, regularTimePeriod0);
      int int0 = 1613;
      String string1 = "p|EW,b.&:nRVy;Pk{@";
      CategoryAxis categoryAxis0 = new CategoryAxis();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, categoryAxis0, periodAxis0, waterfallBarRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("p|EW,b.&:nRVy;Pk{@", periodAxis0.DEFAULT_AXIS_LABEL_FONT, categoryPlot0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-3886), 1613, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-3886) and height (1613) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "W5~<tt*y*^PL0KQ4";
      PeriodAxis periodAxis0 = new PeriodAxis("W5~<tt*y*^PL0KQ4");
      periodAxis0.setMinorTickMarksVisible(true);
      periodAxis0.isMinorTickMarksVisible();
      periodAxis0.autoAdjustRange();
      periodAxis0.isMinorTickMarksVisible();
      periodAxis0.getFirst();
      Number[][] numberArray0 = new Number[2][1];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) 0.05;
      numberArray1[1] = (Number) 1.0E-8;
      numberArray1[2] = (Number) 2.0F;
      numberArray1[3] = (Number) 1.0E-8;
      numberArray1[4] = (Number) 1.0E-8;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      numberArray2[0] = (Number) 1.0E-8;
      numberArray2[1] = (Number) 2.0F;
      numberArray2[2] = (Number) 1.0E-8;
      numberArray2[3] = (Number) 0.0F;
      numberArray2[4] = (Number) 0.05;
      numberArray2[5] = (Number) 500;
      numberArray2[6] = (Number) 0.0F;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      numberArray2[7] = (Number) integer0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      PiePlot3D piePlot3D0 = new PiePlot3D(categoryToPieDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(piePlot3D0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (10) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("%vCRVrYg)-D<^H");
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.HIGH_END;
      Rectangle rectangle0 = new Rectangle();
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(500, 0.05, 1713.92163, 500);
      rectangle0.contains((double) 500, 1.0, (-1947.0), (-309.124755));
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      Rectangle2D rectangle2D1 = rectangle0.createUnion(rectangle2D0);
      periodAxis0.labelLocationY(axisLabelLocation0, rectangle2D1);
      periodAxis0.getMinorTickMarkInsideLength();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StyledEditorKit styledEditorKit0 = new StyledEditorKit();
      MutableAttributeSet mutableAttributeSet0 = styledEditorKit0.getInputAttributes();
      Color color0 = styleContext0.getBackground(mutableAttributeSet0);
      periodAxis0.setMinorTickMarkPaint(color0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      periodAxis0.java2DToValue(1401.54281565, rectangle0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Day.parseDay("");
      plotRenderingInfo0.equals((Object) null);
      plotRenderingInfo0.clone();
      plotRenderingInfo0.getPlotArea();
      plotRenderingInfo0.clone();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      // Undeclared exception!
      try { 
        periodAxis0.java2DToValue((-6.64067596897598), (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.setDefaultSeriesVisibleInLegend(true);
      Paint paint0 = defaultPolarItemRenderer0.getItemPaint((-665), 0);
      periodAxis0.setMinorTickMarkPaint(paint0);
      Second second0 = new Second();
      Second.parseSecond("\u00B0K");
      Millisecond millisecond0 = new Millisecond((-754), second0);
      second0.getEnd();
      RegularTimePeriod regularTimePeriod0 = millisecond0.next();
      periodAxis0.setFirst(regularTimePeriod0);
      periodAxis0.setMinorTickMarkOutsideLength((-676.94086F));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(972L);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      PeriodAxis periodAxis0 = new PeriodAxis("locale", regularTimePeriod0, regularTimePeriod0);
      int int0 = (-913);
      periodAxis0.setMinorTickCount((-913));
      periodAxis0.setFirst(fixedMillisecond0);
      // Undeclared exception!
      try { 
        periodAxis0.setRange((Range) null, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("JW0t&D@tyZhSJ69C[$u");
      periodAxis0.getLabelInfo();
      periodAxis0.configure();
      periodAxis0.getAutoRangeTimePeriodClass();
      boolean boolean0 = false;
      PiePlot piePlot0 = new PiePlot();
      piePlot0.getSectionOutlinePaint(2.0F);
      // Undeclared exception!
      try { 
        periodAxis0.setTickMarkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("}H0");
      periodAxis0.getMinorTickMarkOutsideLength();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Hour hour0 = new Hour();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.JAPANESE;
      hour0.getStart();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      hour0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      PeriodAxis periodAxis0 = new PeriodAxis("", hour0, hour0, timeZone0, locale0);
      periodAxis0.getMinorTickMarkStroke();
      PeriodAxisLabelInfo[] periodAxisLabelInfoArray0 = new PeriodAxisLabelInfo[9];
      // Undeclared exception!
      try { 
        MockDateFormat.getDateTimeInstance(53, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 53
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1578, 1578, 1578);
      Hour hour0 = new Hour(mockDate0);
      PeriodAxis periodAxis0 = new PeriodAxis("d_NM0 ($Jv ", hour0, hour0);
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("d_NM0 ($Jv ", true, 0.05, 447.50106894565704);
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("d_NM0 ($Jv ", 0.0, 3.0, 5.0);
      TextAnchor textAnchor0 = xYPointerAnnotation0.getRotationAnchor();
      categoryPointerAnnotation0.setTextAnchor(textAnchor0);
      periodAxis0.setInverted(false);
      MockDate.UTC(0, (-307), 4394, 2498, 500, 0);
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      periodAxis0.setMinorTickMarkStroke(stroke0);
      periodAxis0.getMinorTickTimePeriodClass();
      hour0.getMonth();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3780, "d_NM0 ($Jv ");
      simpleTimeZone0.observesDaylightTime();
      // Undeclared exception!
      try { 
        simpleTimeZone0.setStartRule(10, 1578, (-2972), 0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week 2972
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1045), 73, 2, (-1621), 4043, (-1045));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1045), "paint");
      Locale locale0 = Locale.GERMAN;
      Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      PeriodAxis periodAxis0 = new PeriodAxis("*$*sJoxe^", regularTimePeriod0, regularTimePeriod0);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("*$*sJoxe^", numberFormat0, mockSimpleDateFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.05, true, standardXYToolTipGenerator0);
      candlestickRenderer0.getSeriesStroke(2025);
      // Undeclared exception!
      try { 
        periodAxis0.setMinorTickMarkStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(500);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      timeZone0.setID("org.jfree.chart.entity.XYItemEntity");
      periodAxis0.setTimeZone(timeZone0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeriodAxis periodAxis0 = null;
      try {
        periodAxis0 = new PeriodAxis((String) null, (RegularTimePeriod) null, (RegularTimePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(0.05);
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 0.05, 500);
      LegendTitle legendTitle0 = new LegendTitle(stackedXYBarRenderer0, columnArrangement0, columnArrangement0);
      legendTitle0.setItemFont(stackedXYBarRenderer0.DEFAULT_VALUE_LABEL_FONT);
      legendTitle0.setPadding(0.05, (double) stackedXYBarRenderer0.ZERO, 1090.5, 0.0);
      legendTitle0.setMargin(periodAxis0.DEFAULT_TICK_LABEL_INSETS);
      Font font0 = legendTitle0.getItemFont();
      periodAxis0.setTickLabelFont(font0);
      periodAxis0.equals("");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("TxN>");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      TickUnits tickUnits0 = new TickUnits();
      periodAxis0.setStandardTickUnits(tickUnits0);
      defaultPolarItemRenderer0.getSeriesOutlineStroke((-1));
      Font font0 = defaultPolarItemRenderer0.getDefaultItemLabelFont();
      periodAxis0.setLabelFont(font0);
      Class<PeriodAxisLabelInfo> class0 = PeriodAxisLabelInfo.class;
      periodAxis0.setAutoRangeTimePeriodClass(class0);
      periodAxis0.hashCode();
      periodAxis0.getLast();
      periodAxis0.getTimeZone();
      periodAxis0.isMinorTickMarksVisible();
      periodAxis0.setMinorTickMarksVisible(false);
      Color color0 = Color.RED;
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(500, color0, (-755.0F), (-1841), 0.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("TxN>", defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedDomainXYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 999);
      // Undeclared exception!
      defaultShadowGenerator0.createDropShadow(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      TreeSet<Locale> treeSet0 = new TreeSet<Locale>();
      Locale.lookup(vector0, treeSet0);
      PeriodAxis periodAxis0 = null;
      try {
        periodAxis0 = new PeriodAxis("5", (RegularTimePeriod) null, (RegularTimePeriod) null, timeZone0, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("\":n-vi}5w;#5l3");
      periodAxis0.getAutoRangeTimePeriodClass();
      periodAxis0.setMinorTickMarksVisible(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)31;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(500, (-3160), byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Hour hour0 = new Hour(date0);
      PeriodAxis periodAxis0 = new PeriodAxis("", hour0, hour0);
      periodAxis0.setLast(hour0);
      periodAxis0.isMinorTickMarksVisible();
      Class<FastScatterPlot> class0 = FastScatterPlot.class;
      periodAxis0.setMinorTickTimePeriodClass(class0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("p");
      Class<ThermometerPlot> class0 = ThermometerPlot.class;
      periodAxis0.setAutoRangeTimePeriodClass(class0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "";
      PeriodAxis periodAxis0 = new PeriodAxis("");
      periodAxis0.getMinorTickMarkInsideLength();
      // Undeclared exception!
      try { 
        Week.parseWeek("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.axis.PeriodAxis");
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.LOW_END;
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "org.jfree.chart.axis.PeriodAxis", "org.jfree.chart.axis.PeriodAxis", "org.jfree.chart.axis.PeriodAxis");
      candlestickRenderer0.setURLGenerator(timeSeriesURLGenerator0);
      Paint paint0 = candlestickRenderer0.getDefaultOutlinePaint();
      periodAxis0.setAxisLinePaint(paint0);
      periodAxis0.setLabelLocation(axisLabelLocation0);
      AxisLabelLocation axisLabelLocation1 = AxisLabelLocation.MIDDLE;
      periodAxis0.setLabelLocation(axisLabelLocation1);
      periodAxis0.setVerticalTickLabels(false);
      periodAxis0.setMinorTickMarkInsideLength(3.4028235E38F);
      Class<CombinedRangeXYPlot> class0 = CombinedRangeXYPlot.class;
      periodAxis0.setMinorTickTimePeriodClass(class0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("z-W72,O>-@TC");
      periodAxis0.setMinorTickMarkInsideLength(0.0F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      periodAxis0.getLocale();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Day day0 = new Day();
      PeriodAxis periodAxis0 = new PeriodAxis("", day0, day0);
      periodAxis0.getTimeZone();
      periodAxis0.setUpperBound(5.0);
      periodAxis0.setMinorTickMarkOutsideLength((-4181.21F));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = new Locale("yyyy");
      Locale locale1 = locale0.stripExtensions();
      PeriodAxis periodAxis0 = null;
      try {
        periodAxis0 = new PeriodAxis("[,v:H7RJt", (RegularTimePeriod) null, (RegularTimePeriod) null, timeZone0, locale1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Minute minute0 = new Minute();
      Day day0 = minute0.getDay();
      PeriodAxis periodAxis0 = new PeriodAxis(";7", day0, day0);
      periodAxis0.setFirst(day0);
      periodAxis0.getMinorTickTimePeriodClass();
      MockDate mockDate0 = new MockDate(59, 59, 789);
      Month month0 = null;
      try {
        month0 = new Month(mockDate0, (TimeZone) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("| 'kF:^$<Ds-P");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(periodAxis0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Stroke stroke0 = combinedDomainCategoryPlot0.getOutlineStroke();
      periodAxis0.setAxisLineStroke(stroke0);
      periodAxis0.notifyListeners(axisChangeEvent0);
      periodAxis0.setLabelInfo((PeriodAxisLabelInfo[]) null);
      Class class0 = periodAxis0.getAutoRangeTimePeriodClass();
      periodAxis0.hashCode();
      periodAxis0.setMajorTickTimePeriodClass(class0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("& QJDs,z]O.pEc}");
      Range range0 = ValueAxis.DEFAULT_RANGE;
      periodAxis0.zoomRange((-360.4451372558481), 1573.0);
      periodAxis0.setRange(range0);
      periodAxis0.getAutoRangeTimePeriodClass();
      periodAxis0.getMajorTickTimePeriodClass();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("J7v_W(.uR\"");
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      periodAxis0.setMinorTickTimePeriodClass(class0);
      periodAxis0.setTickMarkInsideLength(2763.7634F);
      periodAxis0.getLast();
      periodAxis0.getFirst();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("+NF");
      periodAxis0.getLast();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2L);
      Minute minute0 = new Minute(mockDate0);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      PeriodAxis periodAxis0 = new PeriodAxis("", regularTimePeriod0, minute0);
      periodAxis0.getFirst();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Day day0 = new Day();
      PeriodAxis periodAxis0 = new PeriodAxis("", day0, day0);
      periodAxis0.getTimeZone();
      periodAxis0.setUpperBound(5.0);
      periodAxis0.setMinorTickMarkOutsideLength((-4173.095F));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "zone";
      PeriodAxis periodAxis0 = new PeriodAxis("zone");
      periodAxis0.getMinorTickMarkPaint();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.clone();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(9999, 10, chartRenderingInfo0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "zone";
      PeriodAxis periodAxis0 = new PeriodAxis("zone");
      periodAxis0.getMinorTickMarkPaint();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(9999, 10, chartRenderingInfo0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      periodAxis0.setTickLabelsVisible(true);
      periodAxis0.pan(1.0);
      periodAxis0.clone();
      periodAxis0.getMinorTickMarkInsideLength();
      // Undeclared exception!
      try { 
        periodAxis0.setFirst((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'first' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 0.0, 0.05, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      Rectangle rectangle0 = new Rectangle();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      RectangleEdge rectangleEdge1 = RectangleEdge.RIGHT;
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        periodAxis0.draw(graphics2D0, 0.0, rectangle0, rectangle0, rectangleEdge1, plotRenderingInfo0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      MenuElement[] menuElementArray0 = new MenuElement[6];
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      menuElementArray0[1] = (MenuElement) jPopupMenu0;
      menuElementArray0[2] = (MenuElement) jPopupMenu0;
      menuElementArray0[1] = (MenuElement) jPopupMenu0;
      JMenu jMenu0 = new JMenu();
      menuElementArray0[4] = (MenuElement) jMenu0;
      menuElementArray0[5] = (MenuElement) jPopupMenu0;
      MenuSelectionManager.defaultManager();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      Week week0 = new Week();
      PeriodAxis periodAxis0 = new PeriodAxis("", week0, week0);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, periodAxis0.DEFAULT_AXIS_LABEL_FONT, waferMapPlot0, false);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(0.0F, 1, renderingHints0);
      BufferedImage bufferedImage0 = new BufferedImage(10, 2491, 1);
      BufferedImage bufferedImage1 = rescaleOp0.filter(bufferedImage0, bufferedImage0);
      Graphics2D graphics2D0 = bufferedImage1.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      periodAxis0.draw(graphics2D0, 15, rectangle0, rectangle0, rectangleEdge0, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Year year0 = new Year(42);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Rp`$\"^4z:z");
      Locale locale0 = Locale.CANADA;
      PeriodAxis periodAxis0 = new PeriodAxis("Rp`$\"^4z:z", year0, year0, simpleTimeZone0, locale0);
      float[][] floatArray0 = new float[17][4];
      float[] floatArray1 = new float[2];
      floatArray1[0] = 2.0F;
      floatArray1[1] = (float) 0;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[0];
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = (float) 500;
      floatArray3[1] = 2.0F;
      floatArray3[2] = (float) (-9999);
      floatArray3[3] = 0.0F;
      floatArray3[4] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[3];
      floatArray4[0] = 2.0F;
      floatArray4[1] = (float) (-9999);
      floatArray4[2] = (-1.0F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[7];
      floatArray5[0] = (float) (-9999);
      floatArray5[1] = (float) (-9999);
      floatArray5[2] = (float) 500;
      floatArray5[3] = (float) 42;
      floatArray5[4] = (float) 500;
      floatArray5[5] = (float) 500;
      floatArray5[6] = (float) (-9999);
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[9];
      floatArray6[0] = (float) 500;
      floatArray6[1] = Float.NEGATIVE_INFINITY;
      floatArray6[2] = (float) (-9999);
      floatArray6[3] = 0.0F;
      floatArray6[4] = (float) 0;
      floatArray6[5] = (-1.0F);
      floatArray6[6] = (-1.0F);
      floatArray6[7] = (float) (-9999);
      floatArray6[8] = (float) 0;
      floatArray0[5] = floatArray6;
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray0, periodAxis0, periodAxis0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(458L);
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.MIDDLE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1184), 1331, (-1184), 972, 1331);
      fixedMillisecond0.getMillisecond(timePeriodAnchor0, mockGregorianCalendar0);
      PeriodAxis periodAxis0 = new PeriodAxis("\"I:~/!'pzUn", fixedMillisecond0, fixedMillisecond0);
      periodAxis0.setUpperBound(458L);
      periodAxis0.getMinorTickMarkPaint();
      JEditorPane jEditorPane0 = new JEditorPane("\"I:~/!'pzUn", "\"I:~/!'pzUn");
      periodAxis0.pan(1331);
      jEditorPane0.modelToView(0);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      // Undeclared exception!
      try { 
        periodAxis0.valueToJava2D(458L, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(458L);
      fixedMillisecond0.getTime();
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.MIDDLE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1184), 1331, (-1184), 972, 1331);
      fixedMillisecond0.getMillisecond(timePeriodAnchor0, mockGregorianCalendar0);
      PeriodAxis periodAxis0 = new PeriodAxis("\"I:~/!'pzUn", fixedMillisecond0, fixedMillisecond0);
      periodAxis0.setUpperBound(458L);
      periodAxis0.getMinorTickMarkPaint();
      periodAxis0.pan(1331);
      periodAxis0.setLast(fixedMillisecond0);
      periodAxis0.equals(mockGregorianCalendar0);
      periodAxis0.equals("MMM");
      periodAxis0.autoAdjustRange();
      periodAxis0.getLocale();
      assertEquals(610929.0, periodAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.data.general.SeriesChangeEvent");
      periodAxis0.setUpperMargin(999.5271071840455);
      periodAxis0.setLowerBound((-1.0));
      Class<Minute> class0 = Minute.class;
      periodAxis0.setAutoRangeTimePeriodClass(class0);
      periodAxis0.fireChangeEvent();
      PeriodAxisLabelInfo[] periodAxisLabelInfoArray0 = new PeriodAxisLabelInfo[2];
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, periodAxis0.DEFAULT_TICK_LABEL_INSETS, periodAxis0.DEFAULT_AXIS_LABEL_FONT, periodAxis0.DEFAULT_AXIS_LINE_PAINT, true, periodAxis0.DEFAULT_AXIS_LINE_STROKE, periodAxis0.DEFAULT_TICK_LABEL_PAINT);
      periodAxisLabelInfoArray0[0] = periodAxisLabelInfo0;
      periodAxisLabelInfo0.clone();
      periodAxisLabelInfo0.clone();
      PeriodAxisLabelInfo periodAxisLabelInfo1 = new PeriodAxisLabelInfo(class0, dateFormat0);
      periodAxisLabelInfoArray0[1] = periodAxisLabelInfo1;
      periodAxis0.setLabelInfo(periodAxisLabelInfoArray0);
      periodAxis0.autoAdjustRange();
      JTable jTable0 = new JTable();
      Rectangle rectangle0 = jTable0.getCellRect((-317), 216, true);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      double double0 = periodAxis0.java2DToValue(1952.98759159, rectangle0, rectangleEdge0);
      assertEquals((-1.0), periodAxis0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }
}
