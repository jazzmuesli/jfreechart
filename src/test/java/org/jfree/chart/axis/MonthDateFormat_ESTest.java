/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:07:28 GMT 2019
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.DateFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.axis.MonthDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MonthDateFormat_ESTest extends MonthDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.UK;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getTimeInstance();
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertNotNull(simpleDateFormat0);
      
      MonthDateFormat monthDateFormat0 = new MonthDateFormat(timeZone0, locale0, 0, (boolean[]) null, simpleDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertTrue(monthDateFormat0.isLenient());
      assertNotNull(monthDateFormat0);
      
      MonthDateFormat monthDateFormat1 = new MonthDateFormat(timeZone0, locale0, 0, (boolean[]) null, monthDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertTrue(monthDateFormat0.isLenient());
      assertTrue(monthDateFormat1.isLenient());
      assertFalse(monthDateFormat1.equals((Object)monthDateFormat0));
      assertNotNull(monthDateFormat1);
      
      monthDateFormat1.setCalendar((Calendar) null);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertTrue(monthDateFormat0.isLenient());
      assertNotSame(monthDateFormat0, monthDateFormat1);
      assertNotSame(monthDateFormat1, monthDateFormat0);
      
      // Undeclared exception!
      try { 
        monthDateFormat0.equals(monthDateFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = new Locale("", "F-^s3UkZw");
      assertEquals("", locale0.getISO3Language());
      assertEquals("_F-^S3UKZW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("F-^S3UKZW", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      boolean[] booleanArray0 = new boolean[1];
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getDateTimeInstance();
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertNotNull(simpleDateFormat0);
      
      MonthDateFormat monthDateFormat0 = null;
      try {
        monthDateFormat0 = new MonthDateFormat((TimeZone) null, locale0, 2493, booleanArray0, simpleDateFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      boolean[] booleanArray0 = new boolean[6];
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getDateInstance();
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      assertNotNull(simpleDateFormat0);
      
      MonthDateFormat monthDateFormat0 = null;
      try {
        monthDateFormat0 = new MonthDateFormat(timeZone0, (Locale) null, (-435), booleanArray0, simpleDateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      MonthDateFormat monthDateFormat0 = null;
      try {
        monthDateFormat0 = new MonthDateFormat((TimeZone) null, locale0, 2231, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MonthDateFormat monthDateFormat0 = null;
      try {
        monthDateFormat0 = new MonthDateFormat((TimeZone) null, (Locale) null, (-1781), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MonthDateFormat monthDateFormat0 = null;
      try {
        monthDateFormat0 = new MonthDateFormat((TimeZone) null, (-116));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MonthDateFormat monthDateFormat0 = null;
      try {
        monthDateFormat0 = new MonthDateFormat((TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MonthDateFormat monthDateFormat0 = null;
      try {
        monthDateFormat0 = new MonthDateFormat((Locale) null, 690);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MonthDateFormat monthDateFormat0 = null;
      try {
        monthDateFormat0 = new MonthDateFormat((Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(390, "");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=390,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(390, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      MonthDateFormat monthDateFormat0 = new MonthDateFormat(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=390,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(390, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertTrue(monthDateFormat0.isLenient());
      assertNotNull(monthDateFormat0);
      
      StringBuffer stringBuffer0 = new StringBuffer(1);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1);
      assertEquals(1, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertNotNull(fieldPosition0);
      
      // Undeclared exception!
      try { 
        monthDateFormat0.format((Date) null, stringBuffer0, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getTimeInstance();
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertNotNull(simpleDateFormat0);
      
      MonthDateFormat monthDateFormat0 = new MonthDateFormat(timeZone0, locale0, 0, (boolean[]) null, simpleDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertTrue(monthDateFormat0.isLenient());
      assertNotNull(monthDateFormat0);
      
      MonthDateFormat monthDateFormat1 = new MonthDateFormat(timeZone0, locale0, 0, (boolean[]) null, monthDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertTrue(monthDateFormat0.isLenient());
      assertTrue(monthDateFormat1.isLenient());
      assertFalse(monthDateFormat1.equals((Object)monthDateFormat0));
      assertNotNull(monthDateFormat1);
      
      boolean boolean0 = monthDateFormat0.equals(monthDateFormat1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertTrue(monthDateFormat0.isLenient());
      assertTrue(monthDateFormat1.isLenient());
      assertNotSame(monthDateFormat0, monthDateFormat1);
      assertNotSame(monthDateFormat1, monthDateFormat0);
      assertFalse(monthDateFormat0.equals((Object)monthDateFormat1));
      assertFalse(monthDateFormat1.equals((Object)monthDateFormat0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MonthDateFormat monthDateFormat0 = new MonthDateFormat();
      assertTrue(monthDateFormat0.isLenient());
      assertNotNull(monthDateFormat0);
      
      MonthDateFormat monthDateFormat1 = (MonthDateFormat)monthDateFormat0.clone();
      assertTrue(monthDateFormat0.isLenient());
      assertTrue(monthDateFormat1.isLenient());
      assertNotSame(monthDateFormat0, monthDateFormat1);
      assertNotSame(monthDateFormat1, monthDateFormat0);
      assertTrue(monthDateFormat1.equals((Object)monthDateFormat0));
      assertNotNull(monthDateFormat1);
      
      boolean boolean0 = monthDateFormat0.equals(monthDateFormat1);
      assertTrue(monthDateFormat0.isLenient());
      assertTrue(monthDateFormat1.isLenient());
      assertNotSame(monthDateFormat0, monthDateFormat1);
      assertNotSame(monthDateFormat1, monthDateFormat0);
      assertTrue(monthDateFormat0.equals((Object)monthDateFormat1));
      assertTrue(monthDateFormat1.equals((Object)monthDateFormat0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(936, "");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=936,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(936, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      MonthDateFormat monthDateFormat0 = new MonthDateFormat(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertTrue(monthDateFormat0.isLenient());
      assertNotNull(monthDateFormat0);
      
      MonthDateFormat monthDateFormat1 = new MonthDateFormat(simpleTimeZone0, locale0, 936, false, false);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=936,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(936, simpleTimeZone0.getRawOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertTrue(monthDateFormat1.isLenient());
      assertFalse(monthDateFormat1.equals((Object)monthDateFormat0));
      assertNotNull(monthDateFormat1);
      
      boolean boolean0 = monthDateFormat0.equals(monthDateFormat1);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=936,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(936, simpleTimeZone0.getRawOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertTrue(monthDateFormat0.isLenient());
      assertTrue(monthDateFormat1.isLenient());
      assertNotSame(monthDateFormat0, monthDateFormat1);
      assertNotSame(monthDateFormat1, monthDateFormat0);
      assertFalse(monthDateFormat0.equals((Object)monthDateFormat1));
      assertFalse(monthDateFormat1.equals((Object)monthDateFormat0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getTimeInstance();
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertNotNull(simpleDateFormat0);
      
      MonthDateFormat monthDateFormat0 = new MonthDateFormat(timeZone0, locale0, 0, (boolean[]) null, simpleDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertTrue(monthDateFormat0.isLenient());
      assertNotNull(monthDateFormat0);
      
      boolean boolean0 = monthDateFormat0.equals(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertTrue(monthDateFormat0.isLenient());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MonthDateFormat monthDateFormat0 = new MonthDateFormat();
      assertTrue(monthDateFormat0.isLenient());
      assertNotNull(monthDateFormat0);
      
      boolean boolean0 = monthDateFormat0.equals(monthDateFormat0);
      assertTrue(monthDateFormat0.isLenient());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("uFFy9");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      MonthDateFormat monthDateFormat0 = new MonthDateFormat(timeZone0, locale0, 9, true, true);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(monthDateFormat0.isLenient());
      assertNotNull(monthDateFormat0);
      
      MonthDateFormat monthDateFormat1 = new MonthDateFormat(timeZone0, locale0, 4039, (boolean[]) null, monthDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(monthDateFormat0.isLenient());
      assertTrue(monthDateFormat1.isLenient());
      assertFalse(monthDateFormat1.equals((Object)monthDateFormat0));
      assertNotNull(monthDateFormat1);
      
      boolean boolean0 = monthDateFormat0.equals(monthDateFormat1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(monthDateFormat0.isLenient());
      assertTrue(monthDateFormat1.isLenient());
      assertNotSame(monthDateFormat0, monthDateFormat1);
      assertNotSame(monthDateFormat1, monthDateFormat0);
      assertFalse(monthDateFormat0.equals((Object)monthDateFormat1));
      assertFalse(monthDateFormat1.equals((Object)monthDateFormat0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("uFFy9");
      Locale locale0 = Locale.JAPANESE;
      MonthDateFormat monthDateFormat0 = new MonthDateFormat(timeZone0, locale0, 9, true, true);
      MockDate mockDate0 = new MockDate(1813, 1813, (-1));
      StringBuffer stringBuffer0 = new StringBuffer(4039);
      FieldPosition fieldPosition0 = new FieldPosition(4039);
      monthDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals(4, stringBuffer0.length());
      assertEquals("1\u670864", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MonthDateFormat monthDateFormat0 = new MonthDateFormat(locale0, (-13));
      MockDate mockDate0 = new MockDate();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      monthDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals(2, stringBuffer0.length());
      assertEquals("\u4E8C\u6708", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ea$");
      MonthDateFormat monthDateFormat0 = new MonthDateFormat(timeZone0, (-451));
      Locale locale0 = Locale.JAPANESE;
      MonthDateFormat monthDateFormat1 = new MonthDateFormat(locale0, (-451));
      boolean boolean0 = monthDateFormat0.equals(monthDateFormat1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MonthDateFormat monthDateFormat0 = new MonthDateFormat();
      ParsePosition parsePosition0 = new ParsePosition((-147));
      Date date0 = monthDateFormat0.parse("Wq7}k", parsePosition0);
      assertNull(date0);
  }
}
