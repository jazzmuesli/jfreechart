/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:33:29 GMT 2019
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.PathIterator;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.ui.RectangleEdge;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AxisSpace_ESTest extends AxisSpace_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-9.430007F), (-9.430007F), (-9.430007F), (-9.430007F));
      Point point0 = new Point();
      Point point1 = new Point(point0);
      Rectangle rectangle0 = new Rectangle(point1);
      rectangle2D_Float0.createIntersection(rectangle0);
      axisSpace0.reserved((Rectangle2D) null, (RectangleEdge) null);
      Rectangle2D.Float rectangle2D_Float1 = new Rectangle2D.Float((-9.430007F), (-9.430007F), 0, (-9.430007F));
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      axisSpace0.ensureAtLeast(1.0, rectangleEdge0);
      axisSpace0.clone();
      // Undeclared exception!
      try { 
        axisSpace0.add(3648.1053, (RectangleEdge) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'edge' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      axisSpace0.setTop(0.5396270365);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 0.0F, 0.0F, 0.0F);
      Point point0 = new Point();
      Rectangle rectangle0 = new Rectangle(point0);
      rectangle2D_Float0.createIntersection(rectangle0);
      rectangle2D_Float0.height = (float) 0;
      axisSpace0.reserved((Rectangle2D) null, (RectangleEdge) null);
      Rectangle2D.Float rectangle2D_Float1 = new Rectangle2D.Float(0.0F, 0.0F, 0, 0.0F);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      axisSpace0.ensureAtLeast(1.0, rectangleEdge0);
      // Undeclared exception!
      try { 
        axisSpace0.ensureAtLeast(443.01796194992596, (RectangleEdge) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AxisSpace.ensureAtLeast(): unrecognised AxisLocation.
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      axisSpace0.clone();
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      axisSpace0.reserved((Rectangle2D) null, (RectangleEdge) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      axisSpace0.ensureAtLeast(1.0, rectangleEdge0);
      axisSpace0.add(1.0, rectangleEdge0);
      axisSpace0.getRight();
      axisSpace0.reserved(rectangle0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      axisSpace0.add((-1408.9902399797), rectangleEdge0);
      axisSpace0.setRight((-1408.9902399797));
      axisSpace0.hashCode();
      axisSpace0.setRight((-1408.9902399797));
      axisSpace0.clone();
      axisSpace0.equals(axisSpace0);
      axisSpace0.getBottom();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.getFrame();
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertNotNull(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)axisSpace0.shrink(rectangle2D_Double1, rectangle2D_Double1);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertNotNull(rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertSame(rectangle2D_Double1, rectangle2D_Double2);
      assertSame(rectangle2D_Double2, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double2.width, 0.01);
      assertEquals(0.0, rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.y, 0.01);
      assertEquals(0.0, rectangle2D_Double2.height, 0.01);
      
      double double0 = axisSpace0.getRight();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      AxisSpace axisSpace1 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      
      AxisSpace axisSpace2 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace0));
      assertNotNull(axisSpace2);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace2, axisSpace0);
      assertNotSame(axisSpace2, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      rectangle2D_Double0.setFrame((Rectangle2D) rectangle2D_Double2);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace0.equals((Object)axisSpace2));
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertSame(rectangle2D_Double1, rectangle2D_Double2);
      assertSame(rectangle2D_Double2, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double2.width, 0.01);
      assertEquals(0.0, rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.y, 0.01);
      assertEquals(0.0, rectangle2D_Double2.height, 0.01);
      
      rectangle2D_Double0.setRect((-1976.4), (-1.0), (-1976.4), 209.2476683);
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertEquals(103.62383415, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-3952.8), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1976.4), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-2964.6000000000004), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(208.2476683, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-1976.4), rectangle2D_Double0.x, 0.01);
      assertEquals((-1976.4), rectangle2D_Double0.width, 0.01);
      assertEquals(209.2476683, rectangle2D_Double0.height, 0.01);
      
      rectangle2D_Double0.add((Rectangle2D) rectangle2D_Double1);
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertSame(rectangle2D_Double1, rectangle2D_Double2);
      assertEquals(103.62383415, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-988.2), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1976.4), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(208.2476683, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-1976.4), rectangle2D_Double0.x, 0.01);
      assertEquals(1976.4, rectangle2D_Double0.width, 0.01);
      assertEquals(209.2476683, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      
      Rectangle2D.Double rectangle2D_Double3 = (Rectangle2D.Double)axisSpace0.reserved(rectangle2D_Double1, rectangleEdge0);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace0.equals((Object)axisSpace2));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double3.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double3.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double3.equals((Object)rectangle2D_Double1));
      assertNotNull(rectangle2D_Double3);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double3);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double3);
      assertSame(rectangle2D_Double1, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double3, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double3, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double3, rectangle2D_Double2);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(103.62383415, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-988.2), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1976.4), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(208.2476683, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-1976.4), rectangle2D_Double0.x, 0.01);
      assertEquals(1976.4, rectangle2D_Double0.width, 0.01);
      assertEquals(209.2476683, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double3.y, 0.01);
      assertEquals(0.0, rectangle2D_Double3.x, 0.01);
      assertEquals(0.0, rectangle2D_Double3.height, 0.01);
      assertEquals(0.0, rectangle2D_Double3.width, 0.01);
      
      double double1 = axisSpace0.getBottom();
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace0.equals((Object)axisSpace2));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      Rectangle rectangle0 = new Rectangle(0, (-1277), (-1), (-1));
      assertNotNull(rectangle0);
      assertEquals((-1.0), rectangle0.getHeight(), 0.01);
      assertEquals((-1.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-1277.5), rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-1277.0), rectangle0.getY(), 0.01);
      assertEquals((-1278.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-1277.0), rectangle0.getMinY(), 0.01);
      assertEquals((-1.0), rectangle0.getWidth(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-1), rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals((-1), rectangle0.height);
      assertEquals((-1277), rectangle0.y);
      
      Dimension dimension0 = new Dimension((-1277), (-1339));
      assertNotNull(dimension0);
      assertEquals((-1339.0), dimension0.getHeight(), 0.01);
      assertEquals((-1277.0), dimension0.getWidth(), 0.01);
      assertEquals((-1339), dimension0.height);
      assertEquals((-1277), dimension0.width);
      
      rectangle0.setSize(dimension0);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-1277.0), rectangle0.getY(), 0.01);
      assertEquals((-638.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-1277.0), rectangle0.getMinY(), 0.01);
      assertEquals((-1277.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-1946.5), rectangle0.getCenterY(), 0.01);
      assertEquals((-2616.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-1339.0), rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-1277.0), rectangle0.getWidth(), 0.01);
      assertEquals((-1339.0), dimension0.getHeight(), 0.01);
      assertEquals((-1277.0), dimension0.getWidth(), 0.01);
      assertEquals(0, rectangle0.x);
      assertEquals((-1277), rectangle0.y);
      assertEquals((-1339), rectangle0.height);
      assertEquals((-1277), rectangle0.width);
      assertEquals((-1339), dimension0.height);
      assertEquals((-1277), dimension0.width);
      
      rectangle2D_Double0.setRect((Rectangle2D) rectangle0);
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double3));
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double3);
      assertEquals((-1277.0), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1277.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-638.5), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-2616.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1946.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-1277.0), rectangle0.getY(), 0.01);
      assertEquals((-638.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-1277.0), rectangle0.getMinY(), 0.01);
      assertEquals((-1277.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-1946.5), rectangle0.getCenterY(), 0.01);
      assertEquals((-2616.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-1339.0), rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-1277.0), rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals((-1339.0), rectangle2D_Double0.height, 0.01);
      assertEquals((-1277.0), rectangle2D_Double0.width, 0.01);
      assertEquals((-1277.0), rectangle2D_Double0.y, 0.01);
      assertEquals(0, rectangle0.x);
      assertEquals((-1277), rectangle0.y);
      assertEquals((-1339), rectangle0.height);
      assertEquals((-1277), rectangle0.width);
      
      Rectangle2D.Double rectangle2D_Double4 = (Rectangle2D.Double)axisSpace0.expand(rectangle2D_Double2, rectangle2D_Double2);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace0.equals((Object)axisSpace2));
      assertTrue(rectangle2D_Double4.equals((Object)rectangle2D_Double3));
      assertFalse(rectangle2D_Double4.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double3));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double3));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double3));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertNotNull(rectangle2D_Double4);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(rectangle2D_Double4, rectangle2D_Double0);
      assertSame(rectangle2D_Double4, rectangle2D_Double1);
      assertSame(rectangle2D_Double4, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double4, rectangle2D_Double3);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double4);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double3);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertSame(rectangle2D_Double1, rectangle2D_Double4);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double3);
      assertSame(rectangle2D_Double1, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double3);
      assertSame(rectangle2D_Double2, rectangle2D_Double1);
      assertSame(rectangle2D_Double2, rectangle2D_Double4);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, rectangle2D_Double4.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double4.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double4.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double4.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double4.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double4.getCenterX(), 0.01);
      assertEquals((-1277.0), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1277.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-638.5), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-2616.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1946.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double4.height, 0.01);
      assertEquals(0.0, rectangle2D_Double4.y, 0.01);
      assertEquals(0.0, rectangle2D_Double4.x, 0.01);
      assertEquals(0.0, rectangle2D_Double4.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals((-1339.0), rectangle2D_Double0.height, 0.01);
      assertEquals((-1277.0), rectangle2D_Double0.width, 0.01);
      assertEquals((-1277.0), rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double2.width, 0.01);
      assertEquals(0.0, rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.y, 0.01);
      assertEquals(0.0, rectangle2D_Double2.height, 0.01);
      
      Rectangle2D.Double rectangle2D_Double5 = (Rectangle2D.Double)axisSpace0.reserved(rectangle2D_Double0, rectangleEdge0);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace0.equals((Object)axisSpace2));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double4));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double3));
      assertFalse(rectangle2D_Double5.equals((Object)rectangle2D_Double4));
      assertFalse(rectangle2D_Double5.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double5.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double5.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double5.equals((Object)rectangle2D_Double3));
      assertNotNull(rectangle2D_Double5);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double5);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double4);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double3);
      assertNotSame(rectangle2D_Double5, rectangle2D_Double4);
      assertNotSame(rectangle2D_Double5, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double5, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double5, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double5, rectangle2D_Double3);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-1277.0), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1277.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-638.5), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-2616.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1946.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double5.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double5.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double5.getMaxX(), 0.01);
      assertEquals((-2616.0), rectangle2D_Double5.getMaxY(), 0.01);
      assertEquals((-1946.5), rectangle2D_Double5.getCenterY(), 0.01);
      assertEquals((-1277.0), rectangle2D_Double5.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals((-1339.0), rectangle2D_Double0.height, 0.01);
      assertEquals((-1277.0), rectangle2D_Double0.width, 0.01);
      assertEquals((-1277.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-1339.0), rectangle2D_Double5.height, 0.01);
      assertEquals(0.0, rectangle2D_Double5.x, 0.01);
      assertEquals(0.0, rectangle2D_Double5.width, 0.01);
      assertEquals((-1277.0), rectangle2D_Double5.y, 0.01);
      
      axisSpace0.setLeft((-430.0517));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertEquals((-430.0517), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      boolean boolean0 = axisSpace0.equals(axisSpace2);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertTrue(axisSpace2.equals((Object)axisSpace1));
      assertFalse(axisSpace2.equals((Object)axisSpace0));
      assertFalse(boolean0);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace2, axisSpace0);
      assertNotSame(axisSpace2, axisSpace1);
      assertEquals((-430.0517), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      
      boolean boolean1 = axisSpace0.equals(rectangle2D_Double5);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double5));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double4));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double3));
      assertFalse(rectangle2D_Double5.equals((Object)rectangle2D_Double4));
      assertFalse(rectangle2D_Double5.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double5.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double5.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double5.equals((Object)rectangle2D_Double3));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double5);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double4);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double3);
      assertNotSame(rectangle2D_Double5, rectangle2D_Double4);
      assertNotSame(rectangle2D_Double5, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double5, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double5, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double5, rectangle2D_Double3);
      assertEquals((-430.0517), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-1277.0), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1277.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-638.5), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-2616.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1946.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double5.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double5.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double5.getMaxX(), 0.01);
      assertEquals((-2616.0), rectangle2D_Double5.getMaxY(), 0.01);
      assertEquals((-1946.5), rectangle2D_Double5.getCenterY(), 0.01);
      assertEquals((-1277.0), rectangle2D_Double5.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals((-1339.0), rectangle2D_Double0.height, 0.01);
      assertEquals((-1277.0), rectangle2D_Double0.width, 0.01);
      assertEquals((-1277.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-1339.0), rectangle2D_Double5.height, 0.01);
      assertEquals(0.0, rectangle2D_Double5.x, 0.01);
      assertEquals(0.0, rectangle2D_Double5.width, 0.01);
      assertEquals((-1277.0), rectangle2D_Double5.y, 0.01);
      
      axisSpace0.hashCode();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertEquals((-430.0517), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      double double2 = axisSpace0.getRight();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertEquals((-430.0517), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      double double3 = axisSpace0.getBottom();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertEquals((-430.0517), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      AxisSpace axisSpace3 = new AxisSpace();
      assertTrue(axisSpace3.equals((Object)axisSpace1));
      assertTrue(axisSpace3.equals((Object)axisSpace2));
      assertFalse(axisSpace3.equals((Object)axisSpace0));
      assertNotNull(axisSpace3);
      assertEquals(0.0, axisSpace3.getBottom(), 0.01);
      assertEquals(0.0, axisSpace3.getLeft(), 0.01);
      assertEquals(0.0, axisSpace3.getRight(), 0.01);
      assertEquals(0.0, axisSpace3.getTop(), 0.01);
      
      axisSpace3.setLeft((-1285.15215299006));
      assertFalse(axisSpace3.equals((Object)axisSpace1));
      assertFalse(axisSpace3.equals((Object)axisSpace2));
      assertFalse(axisSpace3.equals((Object)axisSpace0));
      assertNotSame(axisSpace3, axisSpace1);
      assertNotSame(axisSpace3, axisSpace2);
      assertNotSame(axisSpace3, axisSpace0);
      assertEquals(0.0, axisSpace3.getBottom(), 0.01);
      assertEquals(0.0, axisSpace3.getRight(), 0.01);
      assertEquals((-1285.15215299006), axisSpace3.getLeft(), 0.01);
      assertEquals(0.0, axisSpace3.getTop(), 0.01);
      
      axisSpace0.ensureAtLeast(axisSpace3);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertFalse(axisSpace0.equals((Object)axisSpace3));
      assertFalse(axisSpace3.equals((Object)axisSpace1));
      assertFalse(axisSpace3.equals((Object)axisSpace2));
      assertFalse(axisSpace3.equals((Object)axisSpace0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace0, axisSpace3);
      assertNotSame(axisSpace3, axisSpace1);
      assertNotSame(axisSpace3, axisSpace2);
      assertNotSame(axisSpace3, axisSpace0);
      assertEquals((-430.0517), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace3.getBottom(), 0.01);
      assertEquals(0.0, axisSpace3.getRight(), 0.01);
      assertEquals((-1285.15215299006), axisSpace3.getLeft(), 0.01);
      assertEquals(0.0, axisSpace3.getTop(), 0.01);
      
      boolean boolean2 = axisSpace0.equals(rectangle2D_Double0);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertFalse(axisSpace0.equals((Object)axisSpace3));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double5));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double4));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double3));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace0, axisSpace3);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double5);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double4);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double3);
      assertEquals((-430.0517), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-1277.0), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1277.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-638.5), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-2616.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1946.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals((-1339.0), rectangle2D_Double0.height, 0.01);
      assertEquals((-1277.0), rectangle2D_Double0.width, 0.01);
      assertEquals((-1277.0), rectangle2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      AxisSpace axisSpace1 = new AxisSpace();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      
      axisSpace0.setLeft(1.0);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(1.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      String string0 = axisSpace1.toString();
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(string0);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      
      AxisSpace axisSpace2 = (AxisSpace)axisSpace0.clone();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace2.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace0));
      assertNotNull(axisSpace2);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace2, axisSpace1);
      assertNotSame(axisSpace2, axisSpace0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(1.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(1.0, axisSpace2.getLeft(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      
      axisSpace0.ensureAtLeast(axisSpace1);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace0.equals((Object)axisSpace2));
      assertFalse(axisSpace1.equals((Object)axisSpace2));
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace1, axisSpace2);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(1.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      
      axisSpace0.hashCode();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace0.equals((Object)axisSpace2));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(1.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      AxisSpace axisSpace3 = new AxisSpace();
      assertFalse(axisSpace3.equals((Object)axisSpace2));
      assertFalse(axisSpace3.equals((Object)axisSpace0));
      assertTrue(axisSpace3.equals((Object)axisSpace1));
      assertNotNull(axisSpace3);
      assertEquals(0.0, axisSpace3.getTop(), 0.01);
      assertEquals(0.0, axisSpace3.getBottom(), 0.01);
      assertEquals(0.0, axisSpace3.getRight(), 0.01);
      assertEquals(0.0, axisSpace3.getLeft(), 0.01);
      
      boolean boolean0 = axisSpace0.equals(axisSpace3);
      assertFalse(axisSpace0.equals((Object)axisSpace3));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace0.equals((Object)axisSpace2));
      assertFalse(axisSpace3.equals((Object)axisSpace2));
      assertFalse(axisSpace3.equals((Object)axisSpace0));
      assertTrue(axisSpace3.equals((Object)axisSpace1));
      assertFalse(boolean0);
      assertNotSame(axisSpace0, axisSpace3);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace3, axisSpace2);
      assertNotSame(axisSpace3, axisSpace1);
      assertNotSame(axisSpace3, axisSpace0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(1.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace3.getTop(), 0.01);
      assertEquals(0.0, axisSpace3.getBottom(), 0.01);
      assertEquals(0.0, axisSpace3.getRight(), 0.01);
      assertEquals(0.0, axisSpace3.getLeft(), 0.01);
      
      double double0 = axisSpace3.getLeft();
      assertFalse(axisSpace3.equals((Object)axisSpace2));
      assertFalse(axisSpace3.equals((Object)axisSpace0));
      assertTrue(axisSpace3.equals((Object)axisSpace1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(axisSpace3, axisSpace2);
      assertNotSame(axisSpace3, axisSpace1);
      assertNotSame(axisSpace3, axisSpace0);
      assertEquals(0.0, axisSpace3.getTop(), 0.01);
      assertEquals(0.0, axisSpace3.getBottom(), 0.01);
      assertEquals(0.0, axisSpace3.getRight(), 0.01);
      assertEquals(0.0, axisSpace3.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      double double0 = (-1108.408455);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      // Undeclared exception!
      try { 
        axisSpace0.reserved((Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      axisSpace0.add((-1408.9902399797), rectangleEdge0);
      assertEquals((-1408.9902399797), axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      axisSpace0.setRight((-1408.9902399797));
      assertEquals((-1408.9902399797), axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      axisSpace0.hashCode();
      assertEquals((-1408.9902399797), axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      axisSpace0.setRight((-1408.9902399797));
      assertEquals((-1408.9902399797), axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      AxisSpace axisSpace1 = new AxisSpace();
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      
      boolean boolean0 = axisSpace0.equals(axisSpace1);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertFalse(boolean0);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals((-1408.9902399797), axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      
      double double0 = axisSpace0.getLeft();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals((-1408.9902399797), axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      boolean boolean1 = axisSpace1.equals(axisSpace0);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals((-1408.9902399797), axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      AxisSpace axisSpace1 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      
      String string0 = axisSpace0.toString();
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotNull(string0);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      AxisSpace axisSpace2 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace0));
      assertNotNull(axisSpace2);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace2, axisSpace0);
      assertNotSame(axisSpace2, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      
      line2D_Double0.setLine((Point2D) point0, (Point2D) point0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)line2D_Double0.getBounds2D();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)axisSpace0.expand(rectangle2D_Double0, rectangle2D_Double0);
      assertTrue(axisSpace0.equals((Object)axisSpace2));
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotNull(rectangle2D_Double1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertSame(rectangle2D_Double0, rectangle2D_Double1);
      assertSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      
      axisSpace0.setLeft((-1.0));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      double double0 = axisSpace0.getTop();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      axisSpace0.setBottom((-659.4570970723889));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals((-659.4570970723889), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      axisSpace0.ensureAtLeast((-659.4570970723889), rectangleEdge0);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals((-659.4570970723889), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      boolean boolean0 = axisSpace0.equals(axisSpace2);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertTrue(axisSpace2.equals((Object)axisSpace1));
      assertFalse(axisSpace2.equals((Object)axisSpace0));
      assertFalse(boolean0);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace2, axisSpace0);
      assertNotSame(axisSpace2, axisSpace1);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals((-659.4570970723889), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      
      axisSpace0.setLeft((-659.4570970723889));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertEquals((-659.4570970723889), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-659.4570970723889), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      String string1 = axisSpace0.toString();
      assertFalse(string1.equals((Object)string0));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertNotNull(string1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertEquals((-659.4570970723889), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-659.4570970723889), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      axisSpace0.setRight(331.672785);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertEquals((-659.4570970723889), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(331.672785, axisSpace0.getRight(), 0.01);
      assertEquals((-659.4570970723889), axisSpace0.getLeft(), 0.01);
      
      String string2 = axisSpace0.toString();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertEquals((-659.4570970723889), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(331.672785, axisSpace0.getRight(), 0.01);
      assertEquals((-659.4570970723889), axisSpace0.getLeft(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)axisSpace0.reserved(rectangle2D_Double1, rectangleEdge0);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertNotNull(rectangle2D_Double2);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double2);
      assertEquals((-659.4570970723889), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(331.672785, axisSpace0.getRight(), 0.01);
      assertEquals((-659.4570970723889), axisSpace0.getLeft(), 0.01);
      assertEquals((-659.4570970723889), rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals((-329.72854853619447), rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.y, 0.01);
      assertEquals(0.0, rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.width, 0.01);
      assertEquals((-659.4570970723889), rectangle2D_Double2.height, 0.01);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      
      Rectangle2D.Double rectangle2D_Double3 = (Rectangle2D.Double)axisSpace0.shrink(rectangle2D_Double2, rectangle2D_Double1);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double3.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double2));
      assertNotNull(rectangle2D_Double3);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double3);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double3, rectangle2D_Double2);
      assertSame(rectangle2D_Double3, rectangle2D_Double0);
      assertSame(rectangle2D_Double3, rectangle2D_Double1);
      assertSame(rectangle2D_Double0, rectangle2D_Double3);
      assertSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertSame(rectangle2D_Double1, rectangle2D_Double0);
      assertSame(rectangle2D_Double1, rectangle2D_Double3);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double2);
      assertEquals((-659.4570970723889), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(331.672785, axisSpace0.getRight(), 0.01);
      assertEquals((-659.4570970723889), axisSpace0.getLeft(), 0.01);
      assertEquals((-659.4570970723889), rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals((-329.72854853619447), rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals((-331.672785), rectangle2D_Double3.getMaxX(), 0.01);
      assertEquals((-495.56494103619445), rectangle2D_Double3.getCenterX(), 0.01);
      assertEquals((-659.4570970723889), rectangle2D_Double3.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getMaxY(), 0.01);
      assertEquals((-659.4570970723889), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-331.672785), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-495.56494103619445), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals((-495.56494103619445), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-659.4570970723889), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals((-331.672785), rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.y, 0.01);
      assertEquals(0.0, rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.width, 0.01);
      assertEquals((-659.4570970723889), rectangle2D_Double2.height, 0.01);
      assertEquals(0.0, rectangle2D_Double3.height, 0.01);
      assertEquals(327.78431207238896, rectangle2D_Double3.width, 0.01);
      assertEquals(0.0, rectangle2D_Double3.y, 0.01);
      assertEquals((-659.4570970723889), rectangle2D_Double3.x, 0.01);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals((-659.4570970723889), rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(327.78431207238896, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(327.78431207238896, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals((-659.4570970723889), rectangle2D_Double1.x, 0.01);
      
      RectangleEdge rectangleEdge1 = RectangleEdge.BOTTOM;
      axisSpace0.ensureAtLeast(0.0, rectangleEdge1);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertSame(rectangleEdge1, rectangleEdge0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(331.672785, axisSpace0.getRight(), 0.01);
      assertEquals((-659.4570970723889), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      AxisSpace axisSpace1 = new AxisSpace();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      
      Rectangle rectangle0 = new Rectangle();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      
      Rectangle rectangle1 = (Rectangle)axisSpace1.expand(rectangle0, rectangle0);
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(rectangle1);
      assertNotSame(axisSpace1, axisSpace0);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.width);
      
      Rectangle rectangle2 = (Rectangle)axisSpace1.shrink(rectangle1, rectangle0);
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(rectangle2);
      assertNotSame(axisSpace1, axisSpace0);
      assertSame(rectangle0, rectangle2);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
      assertSame(rectangle1, rectangle2);
      assertSame(rectangle2, rectangle1);
      assertSame(rectangle2, rectangle0);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.height);
      assertEquals(0, rectangle2.width);
      
      Rectangle rectangle3 = (Rectangle)axisSpace0.expand(rectangle2, rectangle1);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(rectangle3);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertSame(rectangle0, rectangle2);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle0, rectangle3);
      assertSame(rectangle1, rectangle0);
      assertSame(rectangle1, rectangle3);
      assertSame(rectangle1, rectangle2);
      assertSame(rectangle2, rectangle1);
      assertSame(rectangle2, rectangle0);
      assertSame(rectangle2, rectangle3);
      assertSame(rectangle3, rectangle1);
      assertSame(rectangle3, rectangle2);
      assertSame(rectangle3, rectangle0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals(0.0, rectangle3.getWidth(), 0.01);
      assertEquals(0.0, rectangle3.getY(), 0.01);
      assertTrue(rectangle3.isEmpty());
      assertEquals(0.0, rectangle3.getMaxX(), 0.01);
      assertEquals(0.0, rectangle3.getMinY(), 0.01);
      assertEquals(0.0, rectangle3.getHeight(), 0.01);
      assertEquals(0.0, rectangle3.getMaxY(), 0.01);
      assertEquals(0.0, rectangle3.getCenterX(), 0.01);
      assertEquals(0.0, rectangle3.getMinX(), 0.01);
      assertEquals(0.0, rectangle3.getX(), 0.01);
      assertEquals(0.0, rectangle3.getCenterY(), 0.01);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.height);
      assertEquals(0, rectangle2.width);
      assertEquals(0, rectangle3.height);
      assertEquals(0, rectangle3.width);
      assertEquals(0, rectangle3.x);
      assertEquals(0, rectangle3.y);
      
      axisSpace0.hashCode();
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      axisSpace0.ensureAtLeast(303.0837, rectangleEdge0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(303.0837, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      double double0 = axisSpace0.getLeft();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(303.0837, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      Rectangle rectangle0 = new Rectangle((-1), (-1), 1, (-1));
      assertNotNull(rectangle0);
      assertEquals((-1.5), rectangle0.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle0.getHeight(), 0.01);
      assertEquals((-2.0), rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle0.getX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinY(), 0.01);
      assertEquals((-1.0), rectangle0.getY(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals((-1.0), rectangle0.getMinX(), 0.01);
      assertEquals((-1), rectangle0.y);
      assertEquals(1, rectangle0.width);
      assertEquals((-1), rectangle0.height);
      assertEquals((-1), rectangle0.x);
      
      Rectangle rectangle1 = (Rectangle)axisSpace0.expand(rectangle0, rectangle0);
      assertNotNull(rectangle1);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(303.0837, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals((-2.0), rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle0.getX(), 0.01);
      assertEquals((-305.0), rectangle0.getMinY(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-305.0), rectangle0.getY(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals((-1.0), rectangle0.getMinX(), 0.01);
      assertEquals(303.0, rectangle0.getHeight(), 0.01);
      assertEquals((-153.5), rectangle0.getCenterY(), 0.01);
      assertFalse(rectangle1.isEmpty());
      assertEquals((-305.0), rectangle1.getY(), 0.01);
      assertEquals((-2.0), rectangle1.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(1.0, rectangle1.getWidth(), 0.01);
      assertEquals((-1.0), rectangle1.getMinX(), 0.01);
      assertEquals((-305.0), rectangle1.getMinY(), 0.01);
      assertEquals((-0.5), rectangle1.getCenterX(), 0.01);
      assertEquals((-153.5), rectangle1.getCenterY(), 0.01);
      assertEquals(303.0, rectangle1.getHeight(), 0.01);
      assertEquals((-305), rectangle0.y);
      assertEquals(1, rectangle0.width);
      assertEquals(303, rectangle0.height);
      assertEquals((-1), rectangle0.x);
      assertEquals((-305), rectangle1.y);
      assertEquals((-1), rectangle1.x);
      assertEquals(1, rectangle1.width);
      assertEquals(303, rectangle1.height);
      
      axisSpace0.setLeft(1.0);
      assertEquals(1.0, axisSpace0.getLeft(), 0.01);
      assertEquals(303.0837, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      Rectangle rectangle2 = (Rectangle)axisSpace0.shrink(rectangle1, rectangle1);
      assertNotNull(rectangle2);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle0, rectangle2);
      assertSame(rectangle1, rectangle2);
      assertSame(rectangle1, rectangle0);
      assertSame(rectangle2, rectangle1);
      assertSame(rectangle2, rectangle0);
      assertEquals(1.0, axisSpace0.getLeft(), 0.01);
      assertEquals(303.0837, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-2.5), rectangle0.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle0.getMinY(), 0.01);
      assertEquals((-2.0), rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals((-3.0), rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals((-2.0), rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle1.getHeight(), 0.01);
      assertEquals((-2.5), rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals((-3.0), rectangle1.getMaxY(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals((-2.0), rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals((-2.0), rectangle2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertEquals((-2.5), rectangle2.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle2.getY(), 0.01);
      assertEquals((-3.0), rectangle2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals((-1), rectangle0.height);
      assertEquals((-2), rectangle0.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals((-2), rectangle1.y);
      assertEquals((-1), rectangle1.height);
      assertEquals((-2), rectangle2.y);
      assertEquals((-1), rectangle2.height);
      assertEquals(0, rectangle2.width);
      assertEquals(0, rectangle2.x);
      
      axisSpace0.setLeft(238.2178703);
      assertEquals(303.0837, axisSpace0.getTop(), 0.01);
      assertEquals(238.2178703, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      double double1 = axisSpace0.getLeft();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(238.2178703, double1, 0.01);
      assertEquals(303.0837, axisSpace0.getTop(), 0.01);
      assertEquals(238.2178703, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      boolean boolean0 = axisSpace0.equals(rectangleEdge0);
      assertFalse(boolean0);
      assertEquals(303.0837, axisSpace0.getTop(), 0.01);
      assertEquals(238.2178703, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      rectangle0.translate(1, 32);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle0, rectangle2);
      assertEquals((-1.0), rectangle0.getHeight(), 0.01);
      assertEquals(30.0, rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(29.0, rectangle0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle0.getX(), 0.01);
      assertEquals(1.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(1.0, rectangle0.getMinX(), 0.01);
      assertEquals(30.0, rectangle0.getY(), 0.01);
      assertEquals(29.5, rectangle0.getCenterY(), 0.01);
      assertEquals(0, rectangle0.width);
      assertEquals(1, rectangle0.x);
      assertEquals((-1), rectangle0.height);
      assertEquals(30, rectangle0.y);
      
      // Undeclared exception!
      try { 
        axisSpace0.ensureAtLeast((AxisSpace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      double double0 = axisSpace0.getTop();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.clone();
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertNotNull(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)rectangle2D_Double0.getBounds2D();
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertNotNull(rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.y, 0.01);
      assertEquals(0.0, rectangle2D_Double2.height, 0.01);
      assertEquals(0.0, rectangle2D_Double2.width, 0.01);
      
      Rectangle2D.Double rectangle2D_Double3 = (Rectangle2D.Double)axisSpace0.expand(rectangle2D_Double2, rectangle2D_Double0);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double3.equals((Object)rectangle2D_Double2));
      assertTrue(rectangle2D_Double3.equals((Object)rectangle2D_Double1));
      assertNotNull(rectangle2D_Double3);
      assertSame(rectangle2D_Double0, rectangle2D_Double3);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double3);
      assertSame(rectangle2D_Double3, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double3, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double3, rectangle2D_Double1);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.y, 0.01);
      assertEquals(0.0, rectangle2D_Double2.height, 0.01);
      assertEquals(0.0, rectangle2D_Double2.width, 0.01);
      assertEquals(0.0, rectangle2D_Double3.width, 0.01);
      assertEquals(0.0, rectangle2D_Double3.height, 0.01);
      assertEquals(0.0, rectangle2D_Double3.y, 0.01);
      assertEquals(0.0, rectangle2D_Double3.x, 0.01);
      
      double double1 = axisSpace0.getRight();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      axisSpace0.setBottom(0.0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      axisSpace0.ensureAtLeast(0.0, rectangleEdge0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      Rectangle rectangle0 = new Rectangle(0, 0, 0, 2441);
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(1220.5, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(2441.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(2441.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0, rectangle0.y);
      assertEquals(2441, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      
      rectangle0.setSize(dimension0);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 2441);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals((-0.017490947302854474), affineTransform0.getShearX(), 0.01);
      assertEquals(0.017490947302854474, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals((-0.9998470216800412), affineTransform0.getScaleX(), 0.01);
      assertEquals((-0.9998470216800412), affineTransform0.getScaleY(), 0.01);
      
      PathIterator pathIterator0 = rectangle0.getPathIterator(affineTransform0, (double) 2441);
      assertNotNull(pathIterator0);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals((-0.017490947302854474), affineTransform0.getShearX(), 0.01);
      assertEquals(0.017490947302854474, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals((-0.9998470216800412), affineTransform0.getScaleX(), 0.01);
      assertEquals((-0.9998470216800412), affineTransform0.getScaleY(), 0.01);
      assertFalse(pathIterator0.isDone());
      assertEquals(1, pathIterator0.getWindingRule());
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      
      Rectangle rectangle1 = (Rectangle)axisSpace0.shrink(rectangle0, rectangle0);
      assertNotNull(rectangle1);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.width);
      
      axisSpace0.setRight((-1508.94));
      assertEquals((-1508.94), axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      axisSpace0.setLeft(1.0);
      assertEquals((-1508.94), axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(1.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      double double0 = axisSpace0.getRight();
      assertEquals((-1508.94), double0, 0.01);
      assertEquals((-1508.94), axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(1.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      axisSpace0.add(1.0, rectangleEdge0);
      assertEquals((-1508.94), axisSpace0.getRight(), 0.01);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(1.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      double double1 = axisSpace0.getBottom();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals((-1508.94), axisSpace0.getRight(), 0.01);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(1.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      double double2 = axisSpace0.getTop();
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.0, double2, 0.01);
      assertEquals((-1508.94), axisSpace0.getRight(), 0.01);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(1.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      axisSpace0.setTop(0.0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      AxisSpace axisSpace1 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      
      double double0 = axisSpace0.getLeft();
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      String string0 = axisSpace0.toString();
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotNull(string0);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      AxisSpace axisSpace2 = new AxisSpace();
      assertTrue(axisSpace2.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace0));
      assertNotNull(axisSpace2);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      
      axisSpace0.ensureAtLeast(axisSpace2);
      assertTrue(axisSpace0.equals((Object)axisSpace2));
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace2, axisSpace0);
      assertNotSame(axisSpace2, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      
      String string1 = axisSpace2.toString();
      assertTrue(axisSpace2.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace0));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(axisSpace2, axisSpace0);
      assertNotSame(axisSpace2, axisSpace1);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      
      Point point0 = new Point(2471, 2471);
      assertNotNull(point0);
      assertEquals(2471.0, point0.getX(), 0.01);
      assertEquals(2471.0, point0.getY(), 0.01);
      assertEquals(2471, point0.x);
      assertEquals(2471, point0.y);
      
      Point point1 = new Point(point0);
      assertTrue(point1.equals((Object)point0));
      assertNotNull(point1);
      assertEquals(2471.0, point0.getX(), 0.01);
      assertEquals(2471.0, point0.getY(), 0.01);
      assertEquals(2471.0, point1.getX(), 0.01);
      assertEquals(2471.0, point1.getY(), 0.01);
      assertEquals(2471, point0.x);
      assertEquals(2471, point0.y);
      assertEquals(2471, point1.y);
      assertEquals(2471, point1.x);
      
      Rectangle rectangle0 = new Rectangle(point1);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertNotNull(rectangle0);
      assertEquals(2471.0, point0.getX(), 0.01);
      assertEquals(2471.0, point0.getY(), 0.01);
      assertEquals(2471.0, point1.getX(), 0.01);
      assertEquals(2471.0, point1.getY(), 0.01);
      assertEquals(2471.0, rectangle0.getMaxY(), 0.01);
      assertEquals(2471.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(2471.0, rectangle0.getMinY(), 0.01);
      assertEquals(2471.0, rectangle0.getMinX(), 0.01);
      assertEquals(2471.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(2471.0, rectangle0.getX(), 0.01);
      assertEquals(2471.0, rectangle0.getY(), 0.01);
      assertEquals(2471.0, rectangle0.getCenterX(), 0.01);
      assertEquals(2471, point0.x);
      assertEquals(2471, point0.y);
      assertEquals(2471, point1.y);
      assertEquals(2471, point1.x);
      assertEquals(2471, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(2471, rectangle0.y);
      assertEquals(0, rectangle0.height);
      
      Rectangle rectangle1 = new Rectangle(rectangle0);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertNotNull(rectangle1);
      assertEquals(2471.0, point0.getX(), 0.01);
      assertEquals(2471.0, point0.getY(), 0.01);
      assertEquals(2471.0, point1.getX(), 0.01);
      assertEquals(2471.0, point1.getY(), 0.01);
      assertEquals(2471.0, rectangle0.getMaxY(), 0.01);
      assertEquals(2471.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(2471.0, rectangle0.getMinY(), 0.01);
      assertEquals(2471.0, rectangle0.getMinX(), 0.01);
      assertEquals(2471.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(2471.0, rectangle0.getX(), 0.01);
      assertEquals(2471.0, rectangle0.getY(), 0.01);
      assertEquals(2471.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(2471.0, rectangle1.getCenterX(), 0.01);
      assertEquals(2471.0, rectangle1.getCenterY(), 0.01);
      assertEquals(2471.0, rectangle1.getY(), 0.01);
      assertEquals(2471.0, rectangle1.getMinY(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(2471.0, rectangle1.getMinX(), 0.01);
      assertEquals(2471.0, rectangle1.getX(), 0.01);
      assertEquals(2471.0, rectangle1.getMaxX(), 0.01);
      assertEquals(2471.0, rectangle1.getMaxY(), 0.01);
      assertEquals(2471, point0.x);
      assertEquals(2471, point0.y);
      assertEquals(2471, point1.y);
      assertEquals(2471, point1.x);
      assertEquals(2471, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(2471, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(2471, rectangle1.x);
      assertEquals(2471, rectangle1.y);
      
      Rectangle rectangle2 = (Rectangle)axisSpace2.shrink(rectangle1, rectangle1);
      assertTrue(axisSpace2.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace0));
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertTrue(rectangle0.equals((Object)rectangle1));
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertTrue(rectangle2.equals((Object)rectangle0));
      assertNotNull(rectangle2);
      assertNotSame(axisSpace2, axisSpace0);
      assertNotSame(axisSpace2, axisSpace1);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle2);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle2, rectangle0);
      assertSame(rectangle2, rectangle1);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      assertEquals(2471.0, point0.getX(), 0.01);
      assertEquals(2471.0, point0.getY(), 0.01);
      assertEquals(2471.0, point1.getX(), 0.01);
      assertEquals(2471.0, point1.getY(), 0.01);
      assertEquals(2471.0, rectangle0.getMaxY(), 0.01);
      assertEquals(2471.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(2471.0, rectangle0.getMinY(), 0.01);
      assertEquals(2471.0, rectangle0.getMinX(), 0.01);
      assertEquals(2471.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(2471.0, rectangle0.getX(), 0.01);
      assertEquals(2471.0, rectangle0.getY(), 0.01);
      assertEquals(2471.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(2471.0, rectangle1.getCenterX(), 0.01);
      assertEquals(2471.0, rectangle1.getCenterY(), 0.01);
      assertEquals(2471.0, rectangle1.getY(), 0.01);
      assertEquals(2471.0, rectangle1.getMinY(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(2471.0, rectangle1.getMinX(), 0.01);
      assertEquals(2471.0, rectangle1.getX(), 0.01);
      assertEquals(2471.0, rectangle1.getMaxX(), 0.01);
      assertEquals(2471.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertEquals(2471.0, rectangle2.getMaxY(), 0.01);
      assertEquals(2471.0, rectangle2.getX(), 0.01);
      assertEquals(2471.0, rectangle2.getY(), 0.01);
      assertEquals(2471.0, rectangle2.getMaxX(), 0.01);
      assertEquals(2471.0, rectangle2.getMinY(), 0.01);
      assertEquals(2471.0, rectangle2.getMinX(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertEquals(2471.0, rectangle2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertEquals(2471.0, rectangle2.getCenterX(), 0.01);
      assertEquals(2471, point0.x);
      assertEquals(2471, point0.y);
      assertEquals(2471, point1.y);
      assertEquals(2471, point1.x);
      assertEquals(2471, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(2471, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(2471, rectangle1.x);
      assertEquals(2471, rectangle1.y);
      assertEquals(2471, rectangle2.x);
      assertEquals(2471, rectangle2.y);
      assertEquals(0, rectangle2.height);
      assertEquals(0, rectangle2.width);
      
      axisSpace0.setBottom(1.0);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      double double1 = axisSpace0.getBottom();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      axisSpace0.ensureAtLeast(axisSpace2);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertFalse(axisSpace2.equals((Object)axisSpace0));
      assertTrue(axisSpace2.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace2, axisSpace0);
      assertNotSame(axisSpace2, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      
      axisSpace2.setLeft(1.0);
      assertFalse(axisSpace2.equals((Object)axisSpace0));
      assertFalse(axisSpace2.equals((Object)axisSpace1));
      assertNotSame(axisSpace2, axisSpace0);
      assertNotSame(axisSpace2, axisSpace1);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      assertEquals(1.0, axisSpace2.getLeft(), 0.01);
      
      double double2 = axisSpace2.getBottom();
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertFalse(axisSpace2.equals((Object)axisSpace0));
      assertFalse(axisSpace2.equals((Object)axisSpace1));
      assertEquals(0.0, double2, 0.01);
      assertNotSame(axisSpace2, axisSpace0);
      assertNotSame(axisSpace2, axisSpace1);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      assertEquals(1.0, axisSpace2.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      double double0 = 0.0;
      axisSpace0.setLeft(0.0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      AxisSpace axisSpace1 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      axisSpace0.ensureAtLeast(0.0, rectangleEdge0);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      axisSpace0.add(0.0, rectangleEdge0);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      axisSpace0.setLeft(0.0);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      double double1 = axisSpace0.getLeft();
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      // Undeclared exception!
      try { 
        axisSpace0.ensureAtLeast((AxisSpace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      axisSpace0.setLeft((-3154.70983));
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-3154.70983), axisSpace0.getLeft(), 0.01);
      
      axisSpace0.setLeft(611.746937590709);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(611.746937590709, axisSpace0.getLeft(), 0.01);
      
      double double0 = axisSpace0.getLeft();
      assertEquals(611.746937590709, double0, 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(611.746937590709, axisSpace0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      AxisSpace axisSpace1 = new AxisSpace();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      
      Rectangle rectangle0 = new Rectangle(1559, 1559, (-1106), (-1106));
      assertNotNull(rectangle0);
      assertEquals(453.0, rectangle0.getMaxY(), 0.01);
      assertEquals(453.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-1106.0), rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(1559.0, rectangle0.getMinX(), 0.01);
      assertEquals(1559.0, rectangle0.getY(), 0.01);
      assertEquals(1559.0, rectangle0.getMinY(), 0.01);
      assertEquals(1559.0, rectangle0.getX(), 0.01);
      assertEquals(1006.0, rectangle0.getCenterY(), 0.01);
      assertEquals((-1106.0), rectangle0.getHeight(), 0.01);
      assertEquals(1006.0, rectangle0.getCenterX(), 0.01);
      assertEquals((-1106), rectangle0.height);
      assertEquals((-1106), rectangle0.width);
      assertEquals(1559, rectangle0.x);
      assertEquals(1559, rectangle0.y);
      
      Rectangle rectangle1 = (Rectangle)axisSpace1.expand(rectangle0, rectangle0);
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(rectangle1);
      assertNotSame(axisSpace1, axisSpace0);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(453.0, rectangle0.getMaxY(), 0.01);
      assertEquals(453.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-1106.0), rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(1559.0, rectangle0.getMinX(), 0.01);
      assertEquals(1559.0, rectangle0.getY(), 0.01);
      assertEquals(1559.0, rectangle0.getMinY(), 0.01);
      assertEquals(1559.0, rectangle0.getX(), 0.01);
      assertEquals(1006.0, rectangle0.getCenterY(), 0.01);
      assertEquals((-1106.0), rectangle0.getHeight(), 0.01);
      assertEquals(1006.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1559.0, rectangle1.getX(), 0.01);
      assertEquals(1006.0, rectangle1.getCenterY(), 0.01);
      assertEquals(1559.0, rectangle1.getY(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals((-1106.0), rectangle1.getWidth(), 0.01);
      assertEquals(1559.0, rectangle1.getMinX(), 0.01);
      assertEquals(453.0, rectangle1.getMaxY(), 0.01);
      assertEquals(1559.0, rectangle1.getMinY(), 0.01);
      assertEquals(1006.0, rectangle1.getCenterX(), 0.01);
      assertEquals(453.0, rectangle1.getMaxX(), 0.01);
      assertEquals((-1106.0), rectangle1.getHeight(), 0.01);
      assertEquals((-1106), rectangle0.height);
      assertEquals((-1106), rectangle0.width);
      assertEquals(1559, rectangle0.x);
      assertEquals(1559, rectangle0.y);
      assertEquals((-1106), rectangle1.height);
      assertEquals((-1106), rectangle1.width);
      assertEquals(1559, rectangle1.y);
      assertEquals(1559, rectangle1.x);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-1106), 0.0F, 0.0F, (-801.0F));
      assertNotNull(rectangle2D_Float0);
      assertEquals((-400.5), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-1106.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-801.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-1106.0), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-1106.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals((-801.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1106.0F), rectangle2D_Float0.x, 0.01F);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)rectangle2D_Float0.getBounds2D();
      assertTrue(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertNotNull(rectangle2D_Float1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertEquals((-400.5), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-1106.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-801.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-1106.0), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-1106.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-1106.0), rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals((-1106.0), rectangle2D_Float1.getMinX(), 0.01);
      assertEquals((-400.5), rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals((-801.0), rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals((-1106.0), rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals((-801.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1106.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals((-1106.0F), rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals((-801.0F), rectangle2D_Float1.height, 0.01F);
      
      Rectangle2D.Float rectangle2D_Float2 = (Rectangle2D.Float)axisSpace0.shrink(rectangle1, rectangle2D_Float1);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertFalse(rectangle2D_Float2.equals((Object)rectangle2D_Float0));
      assertNotNull(rectangle2D_Float2);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float2);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertNotSame(rectangle2D_Float2, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(453.0, rectangle0.getMaxY(), 0.01);
      assertEquals(453.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-1106.0), rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(1559.0, rectangle0.getMinX(), 0.01);
      assertEquals(1559.0, rectangle0.getY(), 0.01);
      assertEquals(1559.0, rectangle0.getMinY(), 0.01);
      assertEquals(1559.0, rectangle0.getX(), 0.01);
      assertEquals(1006.0, rectangle0.getCenterY(), 0.01);
      assertEquals((-1106.0), rectangle0.getHeight(), 0.01);
      assertEquals(1006.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1559.0, rectangle1.getX(), 0.01);
      assertEquals(1006.0, rectangle1.getCenterY(), 0.01);
      assertEquals(1559.0, rectangle1.getY(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals((-1106.0), rectangle1.getWidth(), 0.01);
      assertEquals(1559.0, rectangle1.getMinX(), 0.01);
      assertEquals(453.0, rectangle1.getMaxY(), 0.01);
      assertEquals(1559.0, rectangle1.getMinY(), 0.01);
      assertEquals(1006.0, rectangle1.getCenterX(), 0.01);
      assertEquals(453.0, rectangle1.getMaxX(), 0.01);
      assertEquals((-1106.0), rectangle1.getHeight(), 0.01);
      assertEquals((-400.5), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-1106.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-801.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-1106.0), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-1106.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(1006.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(453.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(1006.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(453.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(1559.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(1559.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(453.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(1559.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(1559.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(1006.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(453.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(1006.0, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals((-1106), rectangle0.height);
      assertEquals((-1106), rectangle0.width);
      assertEquals(1559, rectangle0.x);
      assertEquals(1559, rectangle0.y);
      assertEquals((-1106), rectangle1.height);
      assertEquals((-1106), rectangle1.width);
      assertEquals(1559, rectangle1.y);
      assertEquals(1559, rectangle1.x);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals((-801.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1106.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals(1559.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(1559.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals((-1106.0F), rectangle2D_Float1.width, 0.01F);
      assertEquals((-1106.0F), rectangle2D_Float1.height, 0.01F);
      assertEquals(1559.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals((-1106.0F), rectangle2D_Float2.width, 0.01F);
      assertEquals(1559.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals((-1106.0F), rectangle2D_Float2.height, 0.01F);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      axisSpace0.ensureAtLeast(0.0, rectangleEdge0);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      AxisSpace axisSpace1 = new AxisSpace();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      assertNotNull(rectangle0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      
      Line2D.Float line2D_Float0 = new Line2D.Float(1.0F, 1.0F, 0, 0);
      assertNotNull(line2D_Float0);
      assertEquals(1.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(1.0F, line2D_Float0.y1, 0.01F);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)line2D_Float0.getBounds2D();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.5, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.5, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(1.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(1.0F, line2D_Float0.y1, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)axisSpace0.expand(rectangle0, rectangle2D_Float0);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotNull(rectangle2D_Float1);
      assertNotSame(axisSpace0, axisSpace1);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(1.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(1.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-1557.2632094952232), (-1.0F), (-1557.2632094952232), 1080.1589);
      assertNotNull(rectangle2D_Double0);
      assertEquals((-1557.2632094952232), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-2335.894814242835), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-3114.5264189904465), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(539.07945, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1079.1589, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.y, 0.01);
      assertEquals(1080.1589, rectangle2D_Double0.height, 0.01);
      assertEquals((-1557.2632094952232), rectangle2D_Double0.x, 0.01);
      assertEquals((-1557.2632094952232), rectangle2D_Double0.width, 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.getBounds2D();
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertNotNull(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals((-1557.2632094952232), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-2335.894814242835), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-3114.5264189904465), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(539.07945, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1079.1589, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-3114.5264189904465), rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(1079.1589, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals((-2335.894814242835), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(539.07945, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-1557.2632094952232), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.y, 0.01);
      assertEquals(1080.1589, rectangle2D_Double0.height, 0.01);
      assertEquals((-1557.2632094952232), rectangle2D_Double0.x, 0.01);
      assertEquals((-1557.2632094952232), rectangle2D_Double0.width, 0.01);
      assertEquals((-1.0), rectangle2D_Double1.y, 0.01);
      assertEquals((-1557.2632094952232), rectangle2D_Double1.x, 0.01);
      assertEquals((-1557.2632094952232), rectangle2D_Double1.width, 0.01);
      assertEquals(1080.1589, rectangle2D_Double1.height, 0.01);
      
      axisSpace0.setRight(0.0);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double2 = new Rectangle2D.Double(0, 0, 1.0F, 0);
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertNotNull(rectangle2D_Double2);
      assertEquals(0.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(0.5, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(1.0, rectangle2D_Double2.width, 0.01);
      assertEquals(0.0, rectangle2D_Double2.height, 0.01);
      assertEquals(0.0, rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.y, 0.01);
      
      rectangle2D_Double0.width = (double) 1.0F;
      assertEquals((-1556.7632094952232), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1557.2632094952232), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-1556.2632094952232), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(539.07945, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1079.1589, rectangle2D_Double0.getMaxY(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double3 = (Rectangle2D.Double)axisSpace0.expand(rectangle2D_Double1, rectangle2D_Double0);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double3.equals((Object)rectangle2D_Double2));
      assertTrue(rectangle2D_Double3.equals((Object)rectangle2D_Double1));
      assertNotNull(rectangle2D_Double3);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertSame(rectangle2D_Double0, rectangle2D_Double3);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double3);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double3, rectangle2D_Double2);
      assertSame(rectangle2D_Double3, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double3, rectangle2D_Double1);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals((-1557.2632094952232), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-2335.894814242835), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-3114.5264189904465), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(539.07945, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1079.1589, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-3114.5264189904465), rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(1079.1589, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals((-2335.894814242835), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(539.07945, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-1557.2632094952232), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(539.07945, rectangle2D_Double3.getCenterY(), 0.01);
      assertEquals((-2335.894814242835), rectangle2D_Double3.getCenterX(), 0.01);
      assertEquals((-1557.2632094952232), rectangle2D_Double3.getMinX(), 0.01);
      assertEquals((-3114.5264189904465), rectangle2D_Double3.getMaxX(), 0.01);
      assertEquals(1079.1589, rectangle2D_Double3.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double3.getMinY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.y, 0.01);
      assertEquals(1080.1589, rectangle2D_Double0.height, 0.01);
      assertEquals((-1557.2632094952232), rectangle2D_Double0.x, 0.01);
      assertEquals((-1557.2632094952232), rectangle2D_Double0.width, 0.01);
      assertEquals((-1.0), rectangle2D_Double1.y, 0.01);
      assertEquals((-1557.2632094952232), rectangle2D_Double1.x, 0.01);
      assertEquals((-1557.2632094952232), rectangle2D_Double1.width, 0.01);
      assertEquals(1080.1589, rectangle2D_Double1.height, 0.01);
      assertEquals((-1557.2632094952232), rectangle2D_Double3.x, 0.01);
      assertEquals(1080.1589, rectangle2D_Double3.height, 0.01);
      assertEquals((-1.0), rectangle2D_Double3.y, 0.01);
      assertEquals((-1557.2632094952232), rectangle2D_Double3.width, 0.01);
      
      Rectangle2D.Float rectangle2D_Float2 = new Rectangle2D.Float(1.0F, 1.0F, (-1.0F), (-1.0F));
      assertFalse(rectangle2D_Float2.equals((Object)rectangle2D_Float0));
      assertFalse(rectangle2D_Float2.equals((Object)rectangle2D_Float1));
      assertNotNull(rectangle2D_Float2);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.5, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.5, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals((-1.0F), rectangle2D_Float2.width, 0.01F);
      assertEquals(1.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float2.height, 0.01F);
      
      Rectangle2D.Float rectangle2D_Float3 = (Rectangle2D.Float)rectangle2D_Float2.clone();
      assertFalse(rectangle2D_Float2.equals((Object)rectangle2D_Float0));
      assertFalse(rectangle2D_Float2.equals((Object)rectangle2D_Float1));
      assertTrue(rectangle2D_Float3.equals((Object)rectangle2D_Float2));
      assertFalse(rectangle2D_Float3.equals((Object)rectangle2D_Float0));
      assertFalse(rectangle2D_Float3.equals((Object)rectangle2D_Float1));
      assertNotNull(rectangle2D_Float3);
      assertNotSame(rectangle2D_Float2, rectangle2D_Float3);
      assertNotSame(rectangle2D_Float2, rectangle2D_Float0);
      assertNotSame(rectangle2D_Float2, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float3, rectangle2D_Float0);
      assertNotSame(rectangle2D_Float3, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float3, rectangle2D_Float2);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.5, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.5, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(0.5, rectangle2D_Float3.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getMaxY(), 0.01);
      assertEquals(0.5, rectangle2D_Float3.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Float3.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Float3.getMinY(), 0.01);
      assertEquals((-1.0F), rectangle2D_Float2.width, 0.01F);
      assertEquals(1.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float2.height, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float3.width, 0.01F);
      assertEquals(1.0F, rectangle2D_Float3.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float3.y, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float3.height, 0.01F);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      Rectangle2D.Double rectangle2D_Double4 = (Rectangle2D.Double)axisSpace1.reserved(rectangle2D_Float2, rectangleEdge0);
      assertFalse(rectangle2D_Double4.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double4.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double4.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double4.equals((Object)rectangle2D_Double3));
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertFalse(rectangle2D_Float2.equals((Object)rectangle2D_Float0));
      assertFalse(rectangle2D_Float2.equals((Object)rectangle2D_Float1));
      assertTrue(rectangle2D_Float2.equals((Object)rectangle2D_Float3));
      assertNotNull(rectangle2D_Double4);
      assertNotSame(rectangle2D_Double4, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double4, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double4, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double4, rectangle2D_Double3);
      assertNotSame(axisSpace1, axisSpace0);
      assertNotSame(rectangle2D_Float2, rectangle2D_Float3);
      assertNotSame(rectangle2D_Float2, rectangle2D_Float0);
      assertNotSame(rectangle2D_Float2, rectangle2D_Float1);
      assertEquals(1.0, rectangle2D_Double4.getCenterY(), 0.01);
      assertEquals(1.0, rectangle2D_Double4.getMinX(), 0.01);
      assertEquals(0.5, rectangle2D_Double4.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Double4.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double4.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double4.getMaxY(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.5, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.5, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Double4.y, 0.01);
      assertEquals(1.0, rectangle2D_Double4.x, 0.01);
      assertEquals((-1.0), rectangle2D_Double4.width, 0.01);
      assertEquals(0.0, rectangle2D_Double4.height, 0.01);
      assertEquals((-1.0F), rectangle2D_Float2.width, 0.01F);
      assertEquals(1.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float2.height, 0.01F);
      
      axisSpace0.ensureAtLeast(axisSpace1);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      
      String string0 = axisSpace0.toString();
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotNull(string0);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      axisSpace0.setRight((-1.0));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals((-1.0), axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      RectangleEdge rectangleEdge1 = RectangleEdge.LEFT;
      axisSpace1.ensureAtLeast((double) 1.0F, rectangleEdge1);
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertNotSame(axisSpace1, axisSpace0);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(1.0, axisSpace1.getLeft(), 0.01);
      
      axisSpace1.setTop(1.0F);
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(1.0, axisSpace1.getTop(), 0.01);
      assertEquals(1.0, axisSpace1.getLeft(), 0.01);
      
      String string1 = axisSpace1.toString();
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(1.0, axisSpace1.getTop(), 0.01);
      assertEquals(1.0, axisSpace1.getLeft(), 0.01);
      
      axisSpace1.hashCode();
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(1.0, axisSpace1.getTop(), 0.01);
      assertEquals(1.0, axisSpace1.getLeft(), 0.01);
      
      AxisSpace axisSpace2 = new AxisSpace();
      assertFalse(axisSpace2.equals((Object)axisSpace0));
      assertFalse(axisSpace2.equals((Object)axisSpace1));
      assertNotNull(axisSpace2);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      
      boolean boolean0 = axisSpace1.equals(axisSpace2);
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertFalse(axisSpace1.equals((Object)axisSpace2));
      assertFalse(axisSpace2.equals((Object)axisSpace0));
      assertFalse(axisSpace2.equals((Object)axisSpace1));
      assertFalse(boolean0);
      assertNotSame(axisSpace1, axisSpace0);
      assertNotSame(axisSpace1, axisSpace2);
      assertNotSame(axisSpace2, axisSpace0);
      assertNotSame(axisSpace2, axisSpace1);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(1.0, axisSpace1.getTop(), 0.01);
      assertEquals(1.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      
      axisSpace2.setRight(4439.364605161937);
      assertFalse(axisSpace2.equals((Object)axisSpace0));
      assertFalse(axisSpace2.equals((Object)axisSpace1));
      assertNotSame(axisSpace2, axisSpace0);
      assertNotSame(axisSpace2, axisSpace1);
      assertEquals(4439.364605161937, axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      
      axisSpace0.setTop(1080.1589);
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals((-1.0), axisSpace0.getRight(), 0.01);
      assertEquals(1080.1589, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      double double0 = axisSpace2.getBottom();
      assertFalse(axisSpace2.equals((Object)axisSpace0));
      assertFalse(axisSpace2.equals((Object)axisSpace1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(axisSpace2, axisSpace0);
      assertNotSame(axisSpace2, axisSpace1);
      assertEquals(4439.364605161937, axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      
      axisSpace1.add((-1557.2632094952232), rectangleEdge1);
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertFalse(axisSpace1.equals((Object)axisSpace2));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertNotSame(axisSpace1, axisSpace0);
      assertNotSame(axisSpace1, axisSpace2);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(1.0, axisSpace1.getTop(), 0.01);
      assertEquals((-1556.2632094952232), axisSpace1.getLeft(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double5 = (Rectangle2D.Double)axisSpace0.expand(rectangle2D_Double2, rectangle2D_Double4);
      assertFalse(rectangle2D_Double5.equals((Object)rectangle2D_Double3));
      assertFalse(rectangle2D_Double5.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double5.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double5.equals((Object)rectangle2D_Double1));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(rectangle2D_Double4.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double4.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double4.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double4.equals((Object)rectangle2D_Double3));
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertFalse(axisSpace1.equals((Object)axisSpace2));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double3));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double4));
      assertFalse(rectangle2D_Float2.equals((Object)rectangle2D_Float0));
      assertFalse(rectangle2D_Float2.equals((Object)rectangle2D_Float1));
      assertTrue(rectangle2D_Float2.equals((Object)rectangle2D_Float3));
      assertNotNull(rectangle2D_Double5);
      assertNotSame(rectangle2D_Double5, rectangle2D_Double3);
      assertNotSame(rectangle2D_Double5, rectangle2D_Double0);
      assertSame(rectangle2D_Double5, rectangle2D_Double4);
      assertNotSame(rectangle2D_Double5, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double5, rectangle2D_Double1);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(rectangle2D_Double4, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double4, rectangle2D_Double2);
      assertSame(rectangle2D_Double4, rectangle2D_Double5);
      assertNotSame(rectangle2D_Double4, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double4, rectangle2D_Double3);
      assertNotSame(axisSpace1, axisSpace0);
      assertNotSame(axisSpace1, axisSpace2);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double5);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double3);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double4);
      assertNotSame(rectangle2D_Float2, rectangle2D_Float3);
      assertNotSame(rectangle2D_Float2, rectangle2D_Float0);
      assertNotSame(rectangle2D_Float2, rectangle2D_Float1);
      assertEquals(0.0, rectangle2D_Double5.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double5.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double5.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double5.getCenterX(), 0.01);
      assertEquals((-1080.1589), rectangle2D_Double5.getMinY(), 0.01);
      assertEquals((-540.07945), rectangle2D_Double5.getCenterY(), 0.01);
      assertEquals((-1.0), axisSpace0.getRight(), 0.01);
      assertEquals(1080.1589, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals((-1080.1589), rectangle2D_Double4.getMinY(), 0.01);
      assertEquals((-540.07945), rectangle2D_Double4.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double4.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double4.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double4.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double4.getMaxY(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(1.0, axisSpace1.getTop(), 0.01);
      assertEquals((-1556.2632094952232), axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(0.5, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.5, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.5, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(1080.1589, rectangle2D_Double5.height, 0.01);
      assertEquals((-1080.1589), rectangle2D_Double5.y, 0.01);
      assertEquals(0.0, rectangle2D_Double5.x, 0.01);
      assertEquals(0.0, rectangle2D_Double5.width, 0.01);
      assertEquals(0.0, rectangle2D_Double4.x, 0.01);
      assertEquals(0.0, rectangle2D_Double4.width, 0.01);
      assertEquals(1080.1589, rectangle2D_Double4.height, 0.01);
      assertEquals((-1080.1589), rectangle2D_Double4.y, 0.01);
      assertEquals(1.0, rectangle2D_Double2.width, 0.01);
      assertEquals(0.0, rectangle2D_Double2.height, 0.01);
      assertEquals(0.0, rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.y, 0.01);
      assertEquals((-1.0F), rectangle2D_Float2.width, 0.01F);
      assertEquals(1.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float2.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      axisSpace0.setTop(1.0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      axisSpace0.setRight(595.0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(595.0, axisSpace0.getRight(), 0.01);
      
      Point point0 = new Point(0, 0);
      assertNotNull(point0);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      
      AffineTransform affineTransform0 = AffineTransform.getShearInstance(0, (-18.5006061));
      assertNotNull(affineTransform0);
      assertEquals((-18.5006061), affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      
      Point point1 = (Point)affineTransform0.inverseTransform((Point2D) point0, (Point2D) point0);
      assertNotNull(point1);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals((-18.5006061), affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      
      point0.setLocation((Point2D) point1);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals((-18.5006061), affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      
      Rectangle rectangle0 = new Rectangle(point0);
      assertNotNull(rectangle0);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      
      Rectangle rectangle1 = new Rectangle(rectangle0);
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertNotNull(rectangle1);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.height);
      
      axisSpace0.setLeft((-18.5006061));
      assertEquals((-18.5006061), axisSpace0.getLeft(), 0.01);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(595.0, axisSpace0.getRight(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 0, 698.95708691114, 0);
      assertNotNull(rectangle2D_Double0);
      assertEquals(698.95708691114, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(349.47854345557, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(698.95708691114, rectangle2D_Double0.width, 0.01);
      
      Rectangle rectangle2 = rectangle2D_Double0.getBounds();
      assertFalse(rectangle2.equals((Object)rectangle0));
      assertFalse(rectangle2.equals((Object)rectangle1));
      assertNotNull(rectangle2);
      assertNotSame(rectangle2, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      assertEquals(698.95708691114, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(349.47854345557, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals(699.0, rectangle2.getMaxX(), 0.01);
      assertEquals(349.5, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(699.0, rectangle2.getWidth(), 0.01);
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(698.95708691114, rectangle2D_Double0.width, 0.01);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.height);
      assertEquals(699, rectangle2.width);
      
      Rectangle2D.intersect(rectangle1, rectangle2, rectangle0);
      assertFalse(rectangle0.equals((Object)rectangle2));
      assertTrue(rectangle0.equals((Object)rectangle1));
      assertFalse(rectangle1.equals((Object)rectangle2));
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertFalse(rectangle2.equals((Object)rectangle0));
      assertFalse(rectangle2.equals((Object)rectangle1));
      assertSame(point0, point1);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle1, rectangle2);
      assertNotSame(rectangle2, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(698.95708691114, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(349.47854345557, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals(699.0, rectangle2.getMaxX(), 0.01);
      assertEquals(349.5, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(699.0, rectangle2.getWidth(), 0.01);
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.height);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(698.95708691114, rectangle2D_Double0.width, 0.01);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.height);
      assertEquals(699, rectangle2.width);
      
      rectangle0.setRect((Rectangle2D) rectangle1);
      assertFalse(rectangle0.equals((Object)rectangle2));
      assertTrue(rectangle0.equals((Object)rectangle1));
      assertFalse(rectangle1.equals((Object)rectangle2));
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertSame(point0, point1);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle1, rectangle2);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.height);
      
      rectangle0.add(rectangle1);
      assertFalse(rectangle0.equals((Object)rectangle2));
      assertTrue(rectangle0.equals((Object)rectangle1));
      assertFalse(rectangle1.equals((Object)rectangle2));
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertSame(point0, point1);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle1, rectangle2);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.height);
      
      Rectangle rectangle3 = (Rectangle)axisSpace0.shrink(rectangle0, rectangle0);
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertFalse(rectangle0.equals((Object)rectangle2));
      assertFalse(rectangle3.equals((Object)rectangle2));
      assertFalse(rectangle3.equals((Object)rectangle1));
      assertNotNull(rectangle3);
      assertSame(point0, point1);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle0, rectangle2);
      assertSame(rectangle0, rectangle3);
      assertNotSame(rectangle3, rectangle2);
      assertSame(rectangle3, rectangle0);
      assertNotSame(rectangle3, rectangle1);
      assertEquals((-18.5006061), axisSpace0.getLeft(), 0.01);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(595.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals((-577.0), rectangle0.getWidth(), 0.01);
      assertEquals(0.5, rectangle0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertEquals((-19.0), rectangle0.getMinX(), 0.01);
      assertEquals((-19.0), rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-307.5), rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1.0), rectangle0.getHeight(), 0.01);
      assertEquals((-596.0), rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-596.0), rectangle3.getMaxX(), 0.01);
      assertEquals(0.0, rectangle3.getMaxY(), 0.01);
      assertTrue(rectangle3.isEmpty());
      assertEquals(1.0, rectangle3.getMinY(), 0.01);
      assertEquals((-1.0), rectangle3.getHeight(), 0.01);
      assertEquals((-19.0), rectangle3.getMinX(), 0.01);
      assertEquals((-19.0), rectangle3.getX(), 0.01);
      assertEquals((-577.0), rectangle3.getWidth(), 0.01);
      assertEquals(1.0, rectangle3.getY(), 0.01);
      assertEquals(0.5, rectangle3.getCenterY(), 0.01);
      assertEquals((-307.5), rectangle3.getCenterX(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals((-1), rectangle0.height);
      assertEquals((-19), rectangle0.x);
      assertEquals((-577), rectangle0.width);
      assertEquals(1, rectangle0.y);
      assertEquals((-1), rectangle3.height);
      assertEquals((-577), rectangle3.width);
      assertEquals((-19), rectangle3.x);
      assertEquals(1, rectangle3.y);
      
      Rectangle rectangle4 = (Rectangle)axisSpace0.shrink(rectangle0, rectangle0);
      assertFalse(rectangle4.equals((Object)rectangle1));
      assertFalse(rectangle4.equals((Object)rectangle2));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertFalse(rectangle0.equals((Object)rectangle2));
      assertNotNull(rectangle4);
      assertSame(rectangle4, rectangle3);
      assertNotSame(rectangle4, rectangle1);
      assertSame(rectangle4, rectangle0);
      assertNotSame(rectangle4, rectangle2);
      assertSame(point0, point1);
      assertSame(rectangle0, rectangle4);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle0, rectangle2);
      assertSame(rectangle0, rectangle3);
      assertEquals((-2.0), rectangle4.getHeight(), 0.01);
      assertEquals((-1192.0), rectangle4.getMaxX(), 0.01);
      assertEquals((-38.0), rectangle4.getX(), 0.01);
      assertEquals(2.0, rectangle4.getY(), 0.01);
      assertEquals(0.0, rectangle4.getMaxY(), 0.01);
      assertEquals(2.0, rectangle4.getMinY(), 0.01);
      assertEquals((-615.0), rectangle4.getCenterX(), 0.01);
      assertEquals((-38.0), rectangle4.getMinX(), 0.01);
      assertEquals(1.0, rectangle4.getCenterY(), 0.01);
      assertEquals((-1154.0), rectangle4.getWidth(), 0.01);
      assertTrue(rectangle4.isEmpty());
      assertEquals((-18.5006061), axisSpace0.getLeft(), 0.01);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(595.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals((-1154.0), rectangle0.getWidth(), 0.01);
      assertEquals(1.0, rectangle0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle0.getY(), 0.01);
      assertEquals((-38.0), rectangle0.getMinX(), 0.01);
      assertEquals((-38.0), rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-615.0), rectangle0.getCenterX(), 0.01);
      assertEquals(2.0, rectangle0.getMinY(), 0.01);
      assertEquals((-2.0), rectangle0.getHeight(), 0.01);
      assertEquals((-1192.0), rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-2), rectangle4.height);
      assertEquals(2, rectangle4.y);
      assertEquals((-38), rectangle4.x);
      assertEquals((-1154), rectangle4.width);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(2, rectangle0.y);
      assertEquals((-38), rectangle0.x);
      assertEquals((-1154), rectangle0.width);
      assertEquals((-2), rectangle0.height);
      
      Rectangle rectangle5 = (Rectangle)axisSpace0.shrink(rectangle0, rectangle0);
      assertFalse(rectangle5.equals((Object)rectangle2));
      assertFalse(rectangle5.equals((Object)rectangle1));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertFalse(rectangle0.equals((Object)rectangle2));
      assertNotNull(rectangle5);
      assertSame(rectangle5, rectangle0);
      assertNotSame(rectangle5, rectangle2);
      assertNotSame(rectangle5, rectangle1);
      assertSame(rectangle5, rectangle3);
      assertSame(rectangle5, rectangle4);
      assertSame(point0, point1);
      assertSame(rectangle0, rectangle4);
      assertNotSame(rectangle0, rectangle1);
      assertSame(rectangle0, rectangle5);
      assertNotSame(rectangle0, rectangle2);
      assertSame(rectangle0, rectangle3);
      assertEquals((-18.5006061), axisSpace0.getLeft(), 0.01);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(595.0, axisSpace0.getRight(), 0.01);
      assertTrue(rectangle5.isEmpty());
      assertEquals((-922.5), rectangle5.getCenterX(), 0.01);
      assertEquals(3.0, rectangle5.getY(), 0.01);
      assertEquals((-3.0), rectangle5.getHeight(), 0.01);
      assertEquals((-1731.0), rectangle5.getWidth(), 0.01);
      assertEquals((-57.0), rectangle5.getX(), 0.01);
      assertEquals((-57.0), rectangle5.getMinX(), 0.01);
      assertEquals((-1788.0), rectangle5.getMaxX(), 0.01);
      assertEquals(3.0, rectangle5.getMinY(), 0.01);
      assertEquals(0.0, rectangle5.getMaxY(), 0.01);
      assertEquals(1.5, rectangle5.getCenterY(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals((-57.0), rectangle0.getX(), 0.01);
      assertEquals(3.0, rectangle0.getMinY(), 0.01);
      assertEquals((-3.0), rectangle0.getHeight(), 0.01);
      assertEquals((-922.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-57.0), rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-1731.0), rectangle0.getWidth(), 0.01);
      assertEquals(1.5, rectangle0.getCenterY(), 0.01);
      assertEquals((-1788.0), rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(3.0, rectangle0.getY(), 0.01);
      assertEquals((-57), rectangle5.x);
      assertEquals((-3), rectangle5.height);
      assertEquals(3, rectangle5.y);
      assertEquals((-1731), rectangle5.width);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(3, rectangle0.y);
      assertEquals((-57), rectangle0.x);
      assertEquals((-1731), rectangle0.width);
      assertEquals((-3), rectangle0.height);
      
      axisSpace0.setBottom(3);
      assertEquals(3.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-18.5006061), axisSpace0.getLeft(), 0.01);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(595.0, axisSpace0.getRight(), 0.01);
      
      AxisSpace axisSpace1 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(3.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-18.5006061), axisSpace0.getLeft(), 0.01);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(595.0, axisSpace0.getRight(), 0.01);
      assertEquals(595.0, axisSpace1.getRight(), 0.01);
      assertEquals(1.0, axisSpace1.getTop(), 0.01);
      assertEquals(3.0, axisSpace1.getBottom(), 0.01);
      assertEquals((-18.5006061), axisSpace1.getLeft(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      axisSpace0.add(0.0, rectangleEdge0);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(3.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-18.5006061), axisSpace0.getLeft(), 0.01);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(595.0, axisSpace0.getRight(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)axisSpace0.reserved(rectangle4, rectangleEdge0);
      assertFalse(rectangle4.equals((Object)rectangle1));
      assertFalse(rectangle4.equals((Object)rectangle2));
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertFalse(rectangle0.equals((Object)rectangle2));
      assertNotNull(rectangle2D_Double1);
      assertSame(rectangle4, rectangle3);
      assertSame(rectangle4, rectangle5);
      assertNotSame(rectangle4, rectangle1);
      assertSame(rectangle4, rectangle0);
      assertNotSame(rectangle4, rectangle2);
      assertNotSame(axisSpace0, axisSpace1);
      assertSame(point0, point1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertSame(rectangle0, rectangle4);
      assertNotSame(rectangle0, rectangle1);
      assertSame(rectangle0, rectangle5);
      assertNotSame(rectangle0, rectangle2);
      assertSame(rectangle0, rectangle3);
      assertEquals(1.5, rectangle4.getCenterY(), 0.01);
      assertEquals((-1788.0), rectangle4.getMaxX(), 0.01);
      assertEquals((-1731.0), rectangle4.getWidth(), 0.01);
      assertEquals(0.0, rectangle4.getMaxY(), 0.01);
      assertEquals((-57.0), rectangle4.getMinX(), 0.01);
      assertEquals((-57.0), rectangle4.getX(), 0.01);
      assertEquals((-3.0), rectangle4.getHeight(), 0.01);
      assertEquals((-922.5), rectangle4.getCenterX(), 0.01);
      assertTrue(rectangle4.isEmpty());
      assertEquals(3.0, rectangle4.getY(), 0.01);
      assertEquals(3.0, rectangle4.getMinY(), 0.01);
      assertEquals(3.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-18.5006061), axisSpace0.getLeft(), 0.01);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(595.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals((-2383.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals((-1788.0), rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-2085.5), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(3.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-57.0), rectangle0.getX(), 0.01);
      assertEquals(3.0, rectangle0.getMinY(), 0.01);
      assertEquals((-3.0), rectangle0.getHeight(), 0.01);
      assertEquals((-922.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-57.0), rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-1731.0), rectangle0.getWidth(), 0.01);
      assertEquals(1.5, rectangle0.getCenterY(), 0.01);
      assertEquals((-1788.0), rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(3.0, rectangle0.getY(), 0.01);
      assertEquals(3, rectangle4.y);
      assertEquals((-57), rectangle4.x);
      assertEquals((-1731), rectangle4.width);
      assertEquals((-3), rectangle4.height);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals((-3.0), rectangle2D_Double1.height, 0.01);
      assertEquals(3.0, rectangle2D_Double1.y, 0.01);
      assertEquals((-2383.0), rectangle2D_Double1.x, 0.01);
      assertEquals(595.0, rectangle2D_Double1.width, 0.01);
      assertEquals(3, rectangle0.y);
      assertEquals((-57), rectangle0.x);
      assertEquals((-1731), rectangle0.width);
      assertEquals((-3), rectangle0.height);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      axisSpace0.ensureAtLeast(186.1908255, rectangleEdge0);
      assertEquals(186.1908255, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      axisSpace0.add(1116.5635301, rectangleEdge0);
      assertEquals(1302.7543556, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      String string0 = axisSpace0.toString();
      assertNotNull(string0);
      assertEquals(1302.7543556, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      axisSpace0.setLeft((-1.0));
      assertEquals(1302.7543556, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      axisSpace0.ensureAtLeast((-1761.790902187), rectangleEdge0);
      assertEquals(1302.7543556, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      axisSpace0.setTop((-1.0));
      assertEquals(1302.7543556, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-1.0), axisSpace0.getTop(), 0.01);
      
      axisSpace0.setLeft((-1.0));
      assertEquals(1302.7543556, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-1.0), axisSpace0.getTop(), 0.01);
      
      RectangleEdge rectangleEdge1 = RectangleEdge.TOP;
      axisSpace0.add((-1.0), rectangleEdge1);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals(1302.7543556, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-2.0), axisSpace0.getTop(), 0.01);
      
      axisSpace0.setTop((-1.0));
      assertEquals(1302.7543556, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-1.0), axisSpace0.getTop(), 0.01);
      
      double double0 = axisSpace0.getRight();
      assertEquals(1302.7543556, double0, 0.01);
      assertEquals(1302.7543556, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-1.0), axisSpace0.getTop(), 0.01);
      
      AxisSpace axisSpace1 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(1302.7543556, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-1.0), axisSpace0.getTop(), 0.01);
      assertEquals(1302.7543556, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals((-1.0), axisSpace1.getTop(), 0.01);
      assertEquals((-1.0), axisSpace1.getLeft(), 0.01);
      
      RectangleEdge rectangleEdge2 = RectangleEdge.TOP;
      axisSpace0.ensureAtLeast(1116.5635301, rectangleEdge2);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(rectangleEdge2.equals((Object)rectangleEdge0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(rectangleEdge2, rectangleEdge0);
      assertSame(rectangleEdge2, rectangleEdge1);
      assertEquals(1302.7543556, axisSpace0.getRight(), 0.01);
      assertEquals(1116.5635301, axisSpace0.getTop(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      String string1 = axisSpace0.toString();
      assertFalse(string1.equals((Object)string0));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotNull(string1);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(1302.7543556, axisSpace0.getRight(), 0.01);
      assertEquals(1116.5635301, axisSpace0.getTop(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      axisSpace0.setBottom(3852.41761);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(3852.41761, axisSpace0.getBottom(), 0.01);
      
      axisSpace0.setTop(3852.41761);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(3852.41761, axisSpace0.getBottom(), 0.01);
      assertEquals(3852.41761, axisSpace0.getTop(), 0.01);
      
      axisSpace0.setTop((-1290.1585419152063));
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(3852.41761, axisSpace0.getBottom(), 0.01);
      assertEquals((-1290.1585419152063), axisSpace0.getTop(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, 1.0F, 1.0F, 1.0F);
      assertNotNull(rectangle2D_Float0);
      assertEquals(1.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(2.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(2.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(1.5, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(1.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
      
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      Rectangle rectangle0 = polygon0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangle2D_Float0.createUnion(rectangle0);
      assertNotNull(rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(2.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(2.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(1.5, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(2.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(2.0, rectangle2D_Double0.height, 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)axisSpace0.reserved(rectangle2D_Double0, rectangleEdge0);
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertNotNull(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(3852.41761, axisSpace0.getBottom(), 0.01);
      assertEquals((-1290.1585419152063), axisSpace0.getTop(), 0.01);
      assertEquals(1.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(2.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(2.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(1.5, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(1.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(2.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(2.0, rectangle2D_Double0.height, 0.01);
      assertEquals(2.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(2.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)axisSpace0.shrink(rectangle0, rectangle2D_Float0);
      assertNotNull(rectangle2D_Float1);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(3852.41761, axisSpace0.getBottom(), 0.01);
      assertEquals((-1290.1585419152063), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-2571.2880859375), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-3852.4176025390625), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-1290.1585693359375), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-3852.4176025390625), rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals((-2571.2880859375), rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals((-1290.1585693359375), rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-2562.259F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1290.1586F), rectangle2D_Float0.y, 0.01F);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals((-2562.259F), rectangle2D_Float1.height, 0.01F);
      assertEquals((-1290.1586F), rectangle2D_Float1.y, 0.01F);
      
      axisSpace0.setRight(0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(3852.41761, axisSpace0.getBottom(), 0.01);
      assertEquals((-1290.1585419152063), axisSpace0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      Rectangle2D.union(rectangle2D_Float0, rectangle2D_Float0, rectangle2D_Float0);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      rectangle2D_Float0.setRect((-1847.0F), 2593.3765F, 2788.0737F, (-1.0F));
      assertEquals((-1847.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(2592.87646484375, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-452.963134765625), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2592.37646484375, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(2593.37646484375, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(941.07373046875, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(2788.0737F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals(2593.3765F, rectangle2D_Float0.y, 0.01F);
      assertEquals((-1847.0F), rectangle2D_Float0.x, 0.01F);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)axisSpace0.shrink(rectangle2D_Float0, rectangle2D_Float0);
      assertNotNull(rectangle2D_Float1);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals((-1847.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(2592.87646484375, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-452.963134765625), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2592.37646484375, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(2593.37646484375, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(941.07373046875, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(941.07373046875, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(2592.37646484375, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals((-1847.0), rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(2593.37646484375, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals((-452.963134765625), rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(2592.87646484375, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(2788.0737F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals(2593.3765F, rectangle2D_Float0.y, 0.01F);
      assertEquals((-1847.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals(2788.0737F, rectangle2D_Float1.width, 0.01F);
      assertEquals(2593.3765F, rectangle2D_Float1.y, 0.01F);
      assertEquals((-1847.0F), rectangle2D_Float1.x, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float1.height, 0.01F);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)axisSpace0.reserved(rectangle2D_Float0, rectangleEdge0);
      assertNotNull(rectangle2D_Double0);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals((-1847.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(2592.87646484375, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-452.963134765625), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2592.37646484375, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(2593.37646484375, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(941.07373046875, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(941.07373046875, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-452.963134765625), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(2592.37646484375, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(2592.37646484375, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(2592.37646484375, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1847.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2788.0737F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals(2593.3765F, rectangle2D_Float0.y, 0.01F);
      assertEquals((-1847.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-1847.0), rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(2592.37646484375, rectangle2D_Double0.y, 0.01);
      assertEquals(2788.07373046875, rectangle2D_Double0.width, 0.01);
      
      axisSpace0.setRight(2593.3765F);
      assertEquals(2593.37646484375, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float2 = (Rectangle2D.Float)axisSpace0.expand(rectangle2D_Float0, rectangle2D_Float0);
      assertNotNull(rectangle2D_Float2);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      assertEquals(2593.37646484375, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals((-1847.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(843.72509765625, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2592.87646484375, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(3534.4501953125, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(2592.37646484375, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(2593.37646484375, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(2592.87646484375, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(843.72509765625, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals((-1847.0), rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(2593.37646484375, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(3534.4501953125, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(2592.37646484375, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals((-1.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals(5381.45F, rectangle2D_Float0.width, 0.01F);
      assertEquals(2593.3765F, rectangle2D_Float0.y, 0.01F);
      assertEquals((-1847.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals(2593.3765F, rectangle2D_Float2.y, 0.01F);
      assertEquals((-1847.0F), rectangle2D_Float2.x, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float2.height, 0.01F);
      assertEquals(5381.45F, rectangle2D_Float2.width, 0.01F);
      
      double double0 = axisSpace0.getLeft();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2593.37646484375, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      axisSpace0.setLeft(0.0);
      assertEquals(2593.37646484375, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      double double1 = axisSpace0.getRight();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2593.37646484375, double1, 0.01);
      assertEquals(2593.37646484375, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      axisSpace0.setTop((-1847.0F));
      assertEquals((-1847.0), axisSpace0.getTop(), 0.01);
      assertEquals(2593.37646484375, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      double double0 = (-1.0);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      axisSpace0.add((-1.0), rectangleEdge0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try { 
        axisSpace0.expand((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      axisSpace0.setTop((-939.0800323935));
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      double double0 = axisSpace0.getRight();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      double double1 = axisSpace0.getRight();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      axisSpace0.setTop((-939.0800323935));
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      String string0 = axisSpace0.toString();
      assertNotNull(string0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      axisSpace0.setLeft((-939.0800323935));
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getLeft(), 0.01);
      
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      
      line2D_Float0.x2 = 0.0F;
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)line2D_Float0.getBounds2D();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)axisSpace0.shrink(rectangle2D_Float0, rectangle2D_Float0);
      assertNotNull(rectangle2D_Float1);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getLeft(), 0.01);
      assertEquals((-469.5400085449219), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-939.0800170898438), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-939.0800170898438), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-469.5400085449219), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals((-939.0800170898438), rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals((-939.0800170898438), rectangle2D_Float1.getMinX(), 0.01);
      assertEquals((-469.5400085449219), rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals((-469.5400085449219), rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals((-939.08F), rectangle2D_Float0.y, 0.01F);
      assertEquals(939.08F, rectangle2D_Float0.width, 0.01F);
      assertEquals(939.08F, rectangle2D_Float0.height, 0.01F);
      assertEquals((-939.08F), rectangle2D_Float0.x, 0.01F);
      assertEquals(939.08F, rectangle2D_Float1.width, 0.01F);
      assertEquals(939.08F, rectangle2D_Float1.height, 0.01F);
      assertEquals((-939.08F), rectangle2D_Float1.x, 0.01F);
      assertEquals((-939.08F), rectangle2D_Float1.y, 0.01F);
      
      AxisSpace axisSpace1 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getLeft(), 0.01);
      assertEquals((-939.0800323935), axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals((-939.0800323935), axisSpace1.getLeft(), 0.01);
      
      double double2 = axisSpace0.getTop();
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-939.0800323935), double2, 0.01);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getLeft(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)axisSpace0.reserved(rectangle2D_Float1, rectangleEdge0);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotNull(rectangle2D_Double0);
      assertNotSame(axisSpace0, axisSpace1);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getLeft(), 0.01);
      assertEquals((-469.5400085449219), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-939.0800170898438), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-939.0800170898438), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-469.5400085449219), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals((-939.0800170898438), rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals((-939.0800170898438), rectangle2D_Float1.getMinX(), 0.01);
      assertEquals((-469.5400085449219), rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals((-469.5400085449219), rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(939.0800323935, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-939.0800170898438), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(939.0800323935, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(939.0800323935, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-469.5400085449219), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals((-939.08F), rectangle2D_Float0.y, 0.01F);
      assertEquals(939.08F, rectangle2D_Float0.width, 0.01F);
      assertEquals(939.08F, rectangle2D_Float0.height, 0.01F);
      assertEquals((-939.08F), rectangle2D_Float0.x, 0.01F);
      assertEquals(939.08F, rectangle2D_Float1.width, 0.01F);
      assertEquals(939.08F, rectangle2D_Float1.height, 0.01F);
      assertEquals((-939.08F), rectangle2D_Float1.x, 0.01F);
      assertEquals((-939.08F), rectangle2D_Float1.y, 0.01F);
      assertEquals(939.0800323935, rectangle2D_Double0.y, 0.01);
      assertEquals((-939.0800170898438), rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(939.0800170898438, rectangle2D_Double0.width, 0.01);
      
      boolean boolean0 = axisSpace0.equals(axisSpace1);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertTrue(boolean0);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getLeft(), 0.01);
      assertEquals((-939.0800323935), axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals((-939.0800323935), axisSpace1.getLeft(), 0.01);
      
      RectangleEdge rectangleEdge1 = RectangleEdge.TOP;
      Line2D.Float line2D_Float1 = (Line2D.Float)line2D_Float0.clone();
      assertFalse(line2D_Float1.equals((Object)line2D_Float0));
      assertNotNull(line2D_Float1);
      assertNotSame(line2D_Float1, line2D_Float0);
      assertNotSame(line2D_Float0, line2D_Float1);
      assertEquals(0.0F, line2D_Float1.x1, 0.01F);
      assertEquals(0.0F, line2D_Float1.y2, 0.01F);
      assertEquals(0.0F, line2D_Float1.x2, 0.01F);
      assertEquals(0.0F, line2D_Float1.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      
      axisSpace0.ensureAtLeast((-1081.97094648), rectangleEdge1);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getLeft(), 0.01);
      
      double double3 = axisSpace0.getTop();
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals((-939.0800323935), double3, 0.01);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getLeft(), 0.01);
      
      AxisSpace axisSpace2 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace0));
      assertNotNull(axisSpace2);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace2, axisSpace1);
      assertNotSame(axisSpace2, axisSpace0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getLeft(), 0.01);
      assertEquals((-939.0800323935), axisSpace2.getTop(), 0.01);
      assertEquals((-939.0800323935), axisSpace2.getLeft(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      
      Line2D.Float line2D_Float2 = (Line2D.Float)line2D_Float0.clone();
      assertFalse(line2D_Float2.equals((Object)line2D_Float1));
      assertFalse(line2D_Float2.equals((Object)line2D_Float0));
      assertFalse(line2D_Float0.equals((Object)line2D_Float1));
      assertNotNull(line2D_Float2);
      assertNotSame(line2D_Float2, line2D_Float1);
      assertNotSame(line2D_Float2, line2D_Float0);
      assertNotSame(line2D_Float0, line2D_Float2);
      assertNotSame(line2D_Float0, line2D_Float1);
      assertEquals(0.0F, line2D_Float2.x2, 0.01F);
      assertEquals(0.0F, line2D_Float2.x1, 0.01F);
      assertEquals(0.0F, line2D_Float2.y2, 0.01F);
      assertEquals(0.0F, line2D_Float2.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      
      boolean boolean1 = axisSpace0.equals(axisSpace2);
      assertTrue(axisSpace0.equals((Object)axisSpace2));
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace2, axisSpace1);
      assertNotSame(axisSpace2, axisSpace0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getLeft(), 0.01);
      assertEquals((-939.0800323935), axisSpace2.getTop(), 0.01);
      assertEquals((-939.0800323935), axisSpace2.getLeft(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float2 = new Rectangle2D.Float(0.0F, (-225.0F), 0.0F, 0.0F);
      assertFalse(rectangle2D_Float2.equals((Object)rectangle2D_Float0));
      assertFalse(rectangle2D_Float2.equals((Object)rectangle2D_Float1));
      assertNotNull(rectangle2D_Float2);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals((-225.0), rectangle2D_Float2.getMinY(), 0.01);
      assertEquals((-225.0), rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals((-225.0), rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float2.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals((-225.0F), rectangle2D_Float2.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)axisSpace0.shrink(rectangle2D_Float2, rectangle2D_Double0);
      assertTrue(axisSpace0.equals((Object)axisSpace2));
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertFalse(rectangle2D_Float2.equals((Object)rectangle2D_Float0));
      assertFalse(rectangle2D_Float2.equals((Object)rectangle2D_Float1));
      assertFalse(line2D_Float0.equals((Object)line2D_Float2));
      assertFalse(line2D_Float0.equals((Object)line2D_Float1));
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float2));
      assertFalse(rectangle2D_Float1.equals((Object)rectangle2D_Float2));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertNotNull(rectangle2D_Double1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(rectangle2D_Float2, rectangle2D_Float0);
      assertNotSame(rectangle2D_Float2, rectangle2D_Float1);
      assertNotSame(line2D_Float0, line2D_Float2);
      assertNotSame(line2D_Float0, line2D_Float1);
      assertSame(rectangle2D_Double1, rectangle2D_Double0);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float2);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertSame(rectangle2D_Double0, rectangle2D_Double1);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals((-225.0), rectangle2D_Float2.getMinY(), 0.01);
      assertEquals((-225.0), rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals((-225.0), rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals((-225.0), rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-939.0800323935), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals((-469.54001619675), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-1164.0800323935), rectangle2D_Double1.getMinY(), 0.01);
      assertEquals((-694.54001619675), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-469.5400085449219), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-939.0800170898438), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-939.0800170898438), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-469.5400085449219), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals((-939.0800170898438), rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals((-939.0800170898438), rectangle2D_Float1.getMinX(), 0.01);
      assertEquals((-469.5400085449219), rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals((-469.5400085449219), rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals((-939.0800323935), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-694.54001619675), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1164.0800323935), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-225.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-469.54001619675), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float2.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals((-225.0F), rectangle2D_Float2.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(939.0800323935, rectangle2D_Double1.height, 0.01);
      assertEquals((-1164.0800323935), rectangle2D_Double1.y, 0.01);
      assertEquals((-939.0800323935), rectangle2D_Double1.x, 0.01);
      assertEquals(939.0800323935, rectangle2D_Double1.width, 0.01);
      assertEquals((-939.08F), rectangle2D_Float0.y, 0.01F);
      assertEquals(939.08F, rectangle2D_Float0.width, 0.01F);
      assertEquals(939.08F, rectangle2D_Float0.height, 0.01F);
      assertEquals((-939.08F), rectangle2D_Float0.x, 0.01F);
      assertEquals(939.08F, rectangle2D_Float1.width, 0.01F);
      assertEquals(939.08F, rectangle2D_Float1.height, 0.01F);
      assertEquals((-939.08F), rectangle2D_Float1.x, 0.01F);
      assertEquals((-939.08F), rectangle2D_Float1.y, 0.01F);
      assertEquals(939.0800323935, rectangle2D_Double0.height, 0.01);
      assertEquals((-939.0800323935), rectangle2D_Double0.x, 0.01);
      assertEquals(939.0800323935, rectangle2D_Double0.width, 0.01);
      assertEquals((-1164.0800323935), rectangle2D_Double0.y, 0.01);
      
      AxisSpace axisSpace3 = new AxisSpace();
      assertFalse(axisSpace3.equals((Object)axisSpace0));
      assertFalse(axisSpace3.equals((Object)axisSpace2));
      assertFalse(axisSpace3.equals((Object)axisSpace1));
      assertNotNull(axisSpace3);
      assertEquals(0.0, axisSpace3.getRight(), 0.01);
      assertEquals(0.0, axisSpace3.getBottom(), 0.01);
      assertEquals(0.0, axisSpace3.getLeft(), 0.01);
      assertEquals(0.0, axisSpace3.getTop(), 0.01);
      
      boolean boolean2 = axisSpace0.equals(axisSpace3);
      assertTrue(axisSpace0.equals((Object)axisSpace2));
      assertFalse(axisSpace0.equals((Object)axisSpace3));
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace3.equals((Object)axisSpace0));
      assertFalse(axisSpace3.equals((Object)axisSpace2));
      assertFalse(axisSpace3.equals((Object)axisSpace1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(axisSpace0, axisSpace3);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace3, axisSpace0);
      assertNotSame(axisSpace3, axisSpace2);
      assertNotSame(axisSpace3, axisSpace1);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-939.0800323935), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace3.getRight(), 0.01);
      assertEquals(0.0, axisSpace3.getBottom(), 0.01);
      assertEquals(0.0, axisSpace3.getLeft(), 0.01);
      assertEquals(0.0, axisSpace3.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      String string0 = axisSpace0.toString();
      assertNotNull(string0);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      double double0 = axisSpace0.getRight();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      double double1 = axisSpace0.getLeft();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      axisSpace0.hashCode();
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      double double2 = axisSpace0.getTop();
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      boolean boolean0 = axisSpace0.equals("org.jfree.chart.axis.AxisSpace@291bda7[left=0.0,right=0.0,top=0.0,bottom=0.0]");
      assertFalse(boolean0);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      String string1 = axisSpace0.toString();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      axisSpace0.add(1938.0, rectangleEdge0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(1938.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      boolean boolean1 = axisSpace0.equals("})K-_%KR4_-</x");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(1938.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      axisSpace0.setRight(0.0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(1938.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      double double3 = axisSpace0.getLeft();
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(1938.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      AxisSpace axisSpace1 = new AxisSpace();
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      
      boolean boolean2 = axisSpace0.equals(axisSpace1);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(1938.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      
      axisSpace0.hashCode();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(1938.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      double double0 = axisSpace0.getTop();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)line2D_Double0.getBounds2D();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)axisSpace0.shrink(rectangle2D_Double0, rectangle2D_Double0);
      assertNotNull(rectangle2D_Double1);
      assertSame(rectangle2D_Double0, rectangle2D_Double1);
      assertSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      axisSpace0.ensureAtLeast(1529.2774346915228, rectangleEdge0);
      assertEquals(1529.2774346915228, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      axisSpace0.setBottom(514.4);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(514.4, axisSpace0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      axisSpace0.setTop(0.0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance((-982));
      assertNotNull(affineTransform0);
      assertEquals((-1.0), affineTransform0.getScaleX(), 0.01);
      assertEquals((-1.0), affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      
      Point2D.Double point2D_Double0 = new Point2D.Double((-2496.82268762877), (-982));
      assertNotNull(point2D_Double0);
      assertEquals((-982.0), point2D_Double0.y, 0.01);
      assertEquals((-2496.82268762877), point2D_Double0.x, 0.01);
      
      Point2D.Double point2D_Double1 = (Point2D.Double)affineTransform0.transform((Point2D) point2D_Double0, (Point2D) point2D_Double0);
      assertNotNull(point2D_Double1);
      assertSame(point2D_Double0, point2D_Double1);
      assertSame(point2D_Double1, point2D_Double0);
      assertEquals((-1.0), affineTransform0.getScaleX(), 0.01);
      assertEquals((-1.0), affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(982.0, point2D_Double0.y, 0.01);
      assertEquals(2496.82268762877, point2D_Double0.x, 0.01);
      assertEquals(982.0, point2D_Double1.y, 0.01);
      assertEquals(2496.82268762877, point2D_Double1.x, 0.01);
      
      Line2D.Float line2D_Float0 = new Line2D.Float(point2D_Double1, point2D_Double0);
      assertNotNull(line2D_Float0);
      assertEquals((-1.0), affineTransform0.getScaleX(), 0.01);
      assertEquals((-1.0), affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(982.0, point2D_Double0.y, 0.01);
      assertEquals(2496.82268762877, point2D_Double0.x, 0.01);
      assertEquals(982.0, point2D_Double1.y, 0.01);
      assertEquals(2496.82268762877, point2D_Double1.x, 0.01);
      assertEquals(982.0F, line2D_Float0.y1, 0.01F);
      assertEquals(2496.8228F, line2D_Float0.x2, 0.01F);
      assertEquals(982.0F, line2D_Float0.y2, 0.01F);
      assertEquals(2496.8228F, line2D_Float0.x1, 0.01F);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)line2D_Float0.getBounds2D();
      assertNotNull(rectangle2D_Float0);
      assertSame(point2D_Double0, point2D_Double1);
      assertSame(point2D_Double1, point2D_Double0);
      assertEquals((-1.0), affineTransform0.getScaleX(), 0.01);
      assertEquals((-1.0), affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(2496.82275390625, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(982.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(2496.82275390625, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2496.82275390625, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(982.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(982.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(982.0, point2D_Double0.y, 0.01);
      assertEquals(2496.82268762877, point2D_Double0.x, 0.01);
      assertEquals(982.0, point2D_Double1.y, 0.01);
      assertEquals(2496.82268762877, point2D_Double1.x, 0.01);
      assertEquals(982.0F, line2D_Float0.y1, 0.01F);
      assertEquals(2496.8228F, line2D_Float0.x2, 0.01F);
      assertEquals(982.0F, line2D_Float0.y2, 0.01F);
      assertEquals(2496.8228F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(2496.8228F, rectangle2D_Float0.x, 0.01F);
      assertEquals(982.0F, rectangle2D_Float0.y, 0.01F);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)axisSpace0.reserved(rectangle2D_Float0, rectangleEdge0);
      assertNotNull(rectangle2D_Double0);
      assertSame(point2D_Double0, point2D_Double1);
      assertSame(point2D_Double1, point2D_Double0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-1.0), affineTransform0.getScaleX(), 0.01);
      assertEquals((-1.0), affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(2496.82275390625, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(982.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(2496.82275390625, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2496.82275390625, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(982.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(982.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(2496.82275390625, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2496.82275390625, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(2496.82275390625, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(982.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(982.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(982.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(982.0, point2D_Double0.y, 0.01);
      assertEquals(2496.82268762877, point2D_Double0.x, 0.01);
      assertEquals(982.0, point2D_Double1.y, 0.01);
      assertEquals(2496.82268762877, point2D_Double1.x, 0.01);
      assertEquals(982.0F, line2D_Float0.y1, 0.01F);
      assertEquals(2496.8228F, line2D_Float0.x2, 0.01F);
      assertEquals(982.0F, line2D_Float0.y2, 0.01F);
      assertEquals(2496.8228F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(2496.8228F, rectangle2D_Float0.x, 0.01F);
      assertEquals(982.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(982.0, rectangle2D_Double0.y, 0.01);
      assertEquals(2496.82275390625, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      AxisSpace axisSpace1 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      
      axisSpace0.setLeft((-1.0));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      
      double double0 = axisSpace0.getLeft();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertEquals((-1.0), double0, 0.01);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      
      double double1 = axisSpace0.getRight();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      
      axisSpace0.setBottom((-1.0));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getBottom(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      
      axisSpace0.setLeft(0.0);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      axisSpace0.setRight((-1.0));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-1.0), axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      double double2 = axisSpace0.getBottom();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals((-1.0), double2, 0.01);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-1.0), axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      axisSpace0.setTop(1977.8217307447644);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals((-1.0), axisSpace0.getRight(), 0.01);
      assertEquals(1977.8217307447644, axisSpace0.getTop(), 0.01);
      assertEquals((-1.0), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      axisSpace0.hashCode();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals((-1.0), axisSpace0.getRight(), 0.01);
      assertEquals(1977.8217307447644, axisSpace0.getTop(), 0.01);
      assertEquals((-1.0), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      double double3 = axisSpace0.getBottom();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals((-1.0), double3, 0.01);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals((-1.0), axisSpace0.getRight(), 0.01);
      assertEquals(1977.8217307447644, axisSpace0.getTop(), 0.01);
      assertEquals((-1.0), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      Rectangle rectangle0 = new Rectangle((-1515), (-1515));
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1515.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-1515.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-757.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-757.5), rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-1515.0), rectangle0.getWidth(), 0.01);
      assertEquals((-1515.0), rectangle0.getHeight(), 0.01);
      assertEquals((-1515), rectangle0.height);
      assertEquals((-1515), rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      Rectangle rectangle1 = new Rectangle(rectangle0);
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertNotNull(rectangle1);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1515.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-1515.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-757.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-757.5), rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-1515.0), rectangle0.getWidth(), 0.01);
      assertEquals((-1515.0), rectangle0.getHeight(), 0.01);
      assertEquals((-757.5), rectangle1.getCenterY(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals((-1515.0), rectangle1.getWidth(), 0.01);
      assertEquals((-1515.0), rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals((-1515.0), rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals((-1515.0), rectangle1.getMaxX(), 0.01);
      assertEquals((-757.5), rectangle1.getCenterX(), 0.01);
      assertEquals((-1515), rectangle0.height);
      assertEquals((-1515), rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals((-1515), rectangle1.width);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals((-1515), rectangle1.height);
      
      rectangle0.setBounds(rectangle1);
      assertTrue(rectangle0.equals((Object)rectangle1));
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1515.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-1515.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-757.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-757.5), rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-1515.0), rectangle0.getWidth(), 0.01);
      assertEquals((-1515.0), rectangle0.getHeight(), 0.01);
      assertEquals((-757.5), rectangle1.getCenterY(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals((-1515.0), rectangle1.getWidth(), 0.01);
      assertEquals((-1515.0), rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals((-1515.0), rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals((-1515.0), rectangle1.getMaxX(), 0.01);
      assertEquals((-757.5), rectangle1.getCenterX(), 0.01);
      assertEquals((-1515), rectangle0.height);
      assertEquals((-1515), rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals((-1515), rectangle1.width);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals((-1515), rectangle1.height);
      
      axisSpace0.setTop(661.4);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(661.4, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      Rectangle rectangle2 = (Rectangle)rectangle0.getBounds2D();
      assertTrue(rectangle0.equals((Object)rectangle1));
      assertTrue(rectangle2.equals((Object)rectangle1));
      assertTrue(rectangle2.equals((Object)rectangle0));
      assertNotNull(rectangle2);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle2, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1515.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-1515.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-757.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-757.5), rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-1515.0), rectangle0.getWidth(), 0.01);
      assertEquals((-1515.0), rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals((-1515.0), rectangle2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals((-1515.0), rectangle2.getMaxY(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertEquals((-1515.0), rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals((-757.5), rectangle2.getCenterY(), 0.01);
      assertEquals((-1515.0), rectangle2.getWidth(), 0.01);
      assertEquals((-757.5), rectangle2.getCenterX(), 0.01);
      assertEquals((-1515), rectangle0.height);
      assertEquals((-1515), rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.y);
      assertEquals((-1515), rectangle2.width);
      assertEquals((-1515), rectangle2.height);
      
      Rectangle rectangle3 = (Rectangle)axisSpace0.shrink(rectangle2, rectangle0);
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertFalse(rectangle0.equals((Object)rectangle2));
      assertFalse(rectangle2.equals((Object)rectangle0));
      assertTrue(rectangle2.equals((Object)rectangle1));
      assertFalse(rectangle3.equals((Object)rectangle1));
      assertFalse(rectangle3.equals((Object)rectangle2));
      assertNotNull(rectangle3);
      assertSame(rectangle0, rectangle3);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle2, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      assertNotSame(rectangle2, rectangle3);
      assertNotSame(rectangle3, rectangle1);
      assertNotSame(rectangle3, rectangle2);
      assertSame(rectangle3, rectangle0);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(661.4, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-2177.0), rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(661.0, rectangle0.getY(), 0.01);
      assertEquals(661.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1515.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-427.5), rectangle0.getCenterY(), 0.01);
      assertEquals((-1516.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-757.5), rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-1515.0), rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals((-1515.0), rectangle2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals((-1515.0), rectangle2.getMaxY(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertEquals((-1515.0), rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals((-757.5), rectangle2.getCenterY(), 0.01);
      assertEquals((-1515.0), rectangle2.getWidth(), 0.01);
      assertEquals((-757.5), rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle3.getX(), 0.01);
      assertEquals((-2177.0), rectangle3.getHeight(), 0.01);
      assertEquals((-1515.0), rectangle3.getWidth(), 0.01);
      assertEquals((-757.5), rectangle3.getCenterX(), 0.01);
      assertTrue(rectangle3.isEmpty());
      assertEquals(0.0, rectangle3.getMinX(), 0.01);
      assertEquals(661.0, rectangle3.getMinY(), 0.01);
      assertEquals((-1516.0), rectangle3.getMaxY(), 0.01);
      assertEquals(661.0, rectangle3.getY(), 0.01);
      assertEquals((-1515.0), rectangle3.getMaxX(), 0.01);
      assertEquals((-427.5), rectangle3.getCenterY(), 0.01);
      assertEquals(661, rectangle0.y);
      assertEquals((-1515), rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals((-2177), rectangle0.height);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.y);
      assertEquals((-1515), rectangle2.width);
      assertEquals((-1515), rectangle2.height);
      assertEquals(0, rectangle3.x);
      assertEquals((-1515), rectangle3.width);
      assertEquals((-2177), rectangle3.height);
      assertEquals(661, rectangle3.y);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      axisSpace0.add((-2177), rectangleEdge0);
      assertEquals((-1515.6), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      axisSpace0.setLeft(0);
      assertEquals((-1515.6), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      String string0 = axisSpace0.toString();
      assertNotNull(string0);
      assertEquals((-1515.6), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      Rectangle rectangle4 = (Rectangle)rectangle0.getBounds2D();
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertFalse(rectangle0.equals((Object)rectangle2));
      assertTrue(rectangle4.equals((Object)rectangle0));
      assertFalse(rectangle4.equals((Object)rectangle1));
      assertFalse(rectangle4.equals((Object)rectangle2));
      assertTrue(rectangle4.equals((Object)rectangle3));
      assertNotNull(rectangle4);
      assertSame(rectangle0, rectangle3);
      assertNotSame(rectangle0, rectangle4);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle4, rectangle1);
      assertNotSame(rectangle4, rectangle2);
      assertNotSame(rectangle4, rectangle0);
      assertNotSame(rectangle4, rectangle3);
      assertEquals((-2177.0), rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(661.0, rectangle0.getY(), 0.01);
      assertEquals(661.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1515.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-427.5), rectangle0.getCenterY(), 0.01);
      assertEquals((-1516.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-757.5), rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-1515.0), rectangle0.getWidth(), 0.01);
      assertEquals((-1515.0), rectangle4.getWidth(), 0.01);
      assertEquals((-427.5), rectangle4.getCenterY(), 0.01);
      assertEquals(661.0, rectangle4.getY(), 0.01);
      assertEquals(0.0, rectangle4.getX(), 0.01);
      assertTrue(rectangle4.isEmpty());
      assertEquals((-2177.0), rectangle4.getHeight(), 0.01);
      assertEquals(661.0, rectangle4.getMinY(), 0.01);
      assertEquals(0.0, rectangle4.getMinX(), 0.01);
      assertEquals((-1515.0), rectangle4.getMaxX(), 0.01);
      assertEquals((-1516.0), rectangle4.getMaxY(), 0.01);
      assertEquals((-757.5), rectangle4.getCenterX(), 0.01);
      assertEquals(661, rectangle0.y);
      assertEquals((-1515), rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals((-2177), rectangle0.height);
      assertEquals(661, rectangle4.y);
      assertEquals((-1515), rectangle4.width);
      assertEquals(0, rectangle4.x);
      assertEquals((-2177), rectangle4.height);
      
      Rectangle rectangle5 = (Rectangle)axisSpace0.expand(rectangle0, rectangle4);
      assertFalse(rectangle0.equals((Object)rectangle4));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertFalse(rectangle0.equals((Object)rectangle2));
      assertFalse(rectangle4.equals((Object)rectangle1));
      assertFalse(rectangle4.equals((Object)rectangle2));
      assertFalse(rectangle4.equals((Object)rectangle0));
      assertFalse(rectangle4.equals((Object)rectangle3));
      assertFalse(rectangle5.equals((Object)rectangle2));
      assertFalse(rectangle5.equals((Object)rectangle0));
      assertFalse(rectangle5.equals((Object)rectangle3));
      assertFalse(rectangle5.equals((Object)rectangle1));
      assertNotNull(rectangle5);
      assertSame(rectangle0, rectangle3);
      assertNotSame(rectangle0, rectangle4);
      assertNotSame(rectangle0, rectangle5);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle4, rectangle1);
      assertNotSame(rectangle4, rectangle2);
      assertSame(rectangle4, rectangle5);
      assertNotSame(rectangle4, rectangle0);
      assertNotSame(rectangle4, rectangle3);
      assertNotSame(rectangle5, rectangle2);
      assertNotSame(rectangle5, rectangle0);
      assertSame(rectangle5, rectangle4);
      assertNotSame(rectangle5, rectangle3);
      assertNotSame(rectangle5, rectangle1);
      assertEquals((-1515.6), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-2177.0), rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(661.0, rectangle0.getY(), 0.01);
      assertEquals(661.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1515.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-427.5), rectangle0.getCenterY(), 0.01);
      assertEquals((-1516.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-757.5), rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-1515.0), rectangle0.getWidth(), 0.01);
      assertEquals((-1515.0), rectangle4.getWidth(), 0.01);
      assertEquals(329.5, rectangle4.getCenterY(), 0.01);
      assertEquals(0.0, rectangle4.getX(), 0.01);
      assertTrue(rectangle4.isEmpty());
      assertEquals((-1517.0), rectangle4.getMaxY(), 0.01);
      assertEquals((-3693.0), rectangle4.getHeight(), 0.01);
      assertEquals(0.0, rectangle4.getMinX(), 0.01);
      assertEquals(2176.0, rectangle4.getY(), 0.01);
      assertEquals(2176.0, rectangle4.getMinY(), 0.01);
      assertEquals((-1515.0), rectangle4.getMaxX(), 0.01);
      assertEquals((-757.5), rectangle4.getCenterX(), 0.01);
      assertEquals((-1517.0), rectangle5.getMaxY(), 0.01);
      assertEquals((-3693.0), rectangle5.getHeight(), 0.01);
      assertEquals((-1515.0), rectangle5.getMaxX(), 0.01);
      assertTrue(rectangle5.isEmpty());
      assertEquals((-1515.0), rectangle5.getWidth(), 0.01);
      assertEquals((-757.5), rectangle5.getCenterX(), 0.01);
      assertEquals(2176.0, rectangle5.getY(), 0.01);
      assertEquals(2176.0, rectangle5.getMinY(), 0.01);
      assertEquals(0.0, rectangle5.getMinX(), 0.01);
      assertEquals(329.5, rectangle5.getCenterY(), 0.01);
      assertEquals(0.0, rectangle5.getX(), 0.01);
      assertEquals(661, rectangle0.y);
      assertEquals((-1515), rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals((-2177), rectangle0.height);
      assertEquals((-1515), rectangle4.width);
      assertEquals(2176, rectangle4.y);
      assertEquals(0, rectangle4.x);
      assertEquals((-3693), rectangle4.height);
      assertEquals(0, rectangle5.x);
      assertEquals((-1515), rectangle5.width);
      assertEquals(2176, rectangle5.y);
      assertEquals((-3693), rectangle5.height);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      double double0 = axisSpace0.getLeft();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      double double1 = axisSpace0.getRight();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      axisSpace0.setLeft((-965.5569606));
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-965.5569606), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-1.0), (-350.14), (-1.0), (-965.5569606));
      assertNotNull(rectangle2D_Double0);
      assertEquals((-1.5), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-350.14), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-832.9184803), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-1315.6969606), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-350.14), rectangle2D_Double0.y, 0.01);
      assertEquals((-965.5569606), rectangle2D_Double0.height, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.width, 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.getBounds2D();
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertNotNull(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals((-1.5), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-350.14), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-832.9184803), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-1315.6969606), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1.5), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-832.9184803), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-350.14), rectangle2D_Double1.getMinY(), 0.01);
      assertEquals((-1315.6969606), rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals((-2.0), rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-350.14), rectangle2D_Double0.y, 0.01);
      assertEquals((-965.5569606), rectangle2D_Double0.height, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.width, 0.01);
      assertEquals((-1.0), rectangle2D_Double1.x, 0.01);
      assertEquals((-1.0), rectangle2D_Double1.width, 0.01);
      assertEquals((-350.14), rectangle2D_Double1.y, 0.01);
      assertEquals((-965.5569606), rectangle2D_Double1.height, 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)axisSpace0.reserved(rectangle2D_Double1, rectangleEdge0);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertNotNull(rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-965.5569606), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-1.5), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-350.14), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-832.9184803), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-1315.6969606), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1.5), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-832.9184803), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-350.14), rectangle2D_Double1.getMinY(), 0.01);
      assertEquals((-1315.6969606), rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals((-2.0), rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-1315.6969606), rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals((-350.14), rectangle2D_Double2.getMinY(), 0.01);
      assertEquals((-832.9184803), rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle2D_Double2.getMinX(), 0.01);
      assertEquals((-2.0), rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals((-2.0), rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals((-350.14), rectangle2D_Double0.y, 0.01);
      assertEquals((-965.5569606), rectangle2D_Double0.height, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.width, 0.01);
      assertEquals((-1.0), rectangle2D_Double1.x, 0.01);
      assertEquals((-1.0), rectangle2D_Double1.width, 0.01);
      assertEquals((-350.14), rectangle2D_Double1.y, 0.01);
      assertEquals((-965.5569606), rectangle2D_Double1.height, 0.01);
      assertEquals((-350.14), rectangle2D_Double2.y, 0.01);
      assertEquals((-965.5569606), rectangle2D_Double2.height, 0.01);
      assertEquals((-2.0), rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.width, 0.01);
      
      axisSpace0.setRight((-965.5569606));
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-965.5569606), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-965.5569606), axisSpace0.getRight(), 0.01);
      
      String string0 = axisSpace0.toString();
      assertNotNull(string0);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-965.5569606), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-965.5569606), axisSpace0.getRight(), 0.01);
      
      AxisSpace axisSpace1 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-965.5569606), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-965.5569606), axisSpace0.getRight(), 0.01);
      assertEquals((-965.5569606), axisSpace1.getLeft(), 0.01);
      assertEquals((-965.5569606), axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      
      AxisSpace axisSpace2 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace0));
      assertNotNull(axisSpace2);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace2, axisSpace0);
      assertNotSame(axisSpace2, axisSpace1);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-965.5569606), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-965.5569606), axisSpace0.getRight(), 0.01);
      assertEquals((-965.5569606), axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals((-965.5569606), axisSpace2.getLeft(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      
      boolean boolean0 = axisSpace0.equals(axisSpace2);
      assertTrue(axisSpace0.equals((Object)axisSpace2));
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace0));
      assertTrue(boolean0);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace2, axisSpace0);
      assertNotSame(axisSpace2, axisSpace1);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-965.5569606), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-965.5569606), axisSpace0.getRight(), 0.01);
      assertEquals((-965.5569606), axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals((-965.5569606), axisSpace2.getLeft(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      
      AxisSpace axisSpace3 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace0.equals((Object)axisSpace2));
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace3.equals((Object)axisSpace1));
      assertTrue(axisSpace3.equals((Object)axisSpace2));
      assertTrue(axisSpace3.equals((Object)axisSpace0));
      assertNotNull(axisSpace3);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace3);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace3, axisSpace2);
      assertNotSame(axisSpace3, axisSpace0);
      assertNotSame(axisSpace3, axisSpace1);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-965.5569606), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-965.5569606), axisSpace0.getRight(), 0.01);
      assertEquals((-965.5569606), axisSpace3.getLeft(), 0.01);
      assertEquals(0.0, axisSpace3.getTop(), 0.01);
      assertEquals(0.0, axisSpace3.getBottom(), 0.01);
      assertEquals((-965.5569606), axisSpace3.getRight(), 0.01);
      
      AxisSpace axisSpace4 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace0.equals((Object)axisSpace2));
      assertTrue(axisSpace0.equals((Object)axisSpace3));
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace4.equals((Object)axisSpace0));
      assertTrue(axisSpace4.equals((Object)axisSpace1));
      assertTrue(axisSpace4.equals((Object)axisSpace3));
      assertTrue(axisSpace4.equals((Object)axisSpace2));
      assertNotNull(axisSpace4);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace4);
      assertNotSame(axisSpace0, axisSpace3);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace4, axisSpace3);
      assertNotSame(axisSpace4, axisSpace1);
      assertNotSame(axisSpace4, axisSpace2);
      assertNotSame(axisSpace4, axisSpace0);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-965.5569606), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-965.5569606), axisSpace0.getRight(), 0.01);
      assertEquals((-965.5569606), axisSpace4.getRight(), 0.01);
      assertEquals(0.0, axisSpace4.getTop(), 0.01);
      assertEquals((-965.5569606), axisSpace4.getLeft(), 0.01);
      assertEquals(0.0, axisSpace4.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      axisSpace0.setBottom((-355.815181018742));
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-355.815181018742), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      AxisSpace axisSpace1 = new AxisSpace();
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      
      AxisSpace axisSpace2 = (AxisSpace)axisSpace0.clone();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace0));
      assertFalse(axisSpace2.equals((Object)axisSpace1));
      assertNotNull(axisSpace2);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace2, axisSpace0);
      assertNotSame(axisSpace2, axisSpace1);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-355.815181018742), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      assertEquals((-355.815181018742), axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      
      Rectangle rectangle0 = new Rectangle(978, 978, 2, (-1));
      assertNotNull(rectangle0);
      assertEquals(980.0, rectangle0.getMaxX(), 0.01);
      assertEquals(978.0, rectangle0.getMinY(), 0.01);
      assertEquals(979.0, rectangle0.getCenterX(), 0.01);
      assertEquals(978.0, rectangle0.getMinX(), 0.01);
      assertEquals(977.0, rectangle0.getMaxY(), 0.01);
      assertEquals(978.0, rectangle0.getX(), 0.01);
      assertEquals(978.0, rectangle0.getY(), 0.01);
      assertEquals(977.5, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-1.0), rectangle0.getHeight(), 0.01);
      assertEquals(2.0, rectangle0.getWidth(), 0.01);
      assertEquals(978, rectangle0.y);
      assertEquals(2, rectangle0.width);
      assertEquals(978, rectangle0.x);
      assertEquals((-1), rectangle0.height);
      
      Rectangle rectangle1 = new Rectangle(0, 2);
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertNotNull(rectangle1);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(2.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(1.0, rectangle1.getCenterY(), 0.01);
      assertEquals(2.0, rectangle1.getHeight(), 0.01);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.y);
      assertEquals(2, rectangle1.height);
      
      rectangle0.setRect((Rectangle2D) rectangle1);
      assertTrue(rectangle0.equals((Object)rectangle1));
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(1.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(2.0, rectangle0.getMaxY(), 0.01);
      assertEquals(2.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(2.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(1.0, rectangle1.getCenterY(), 0.01);
      assertEquals(2.0, rectangle1.getHeight(), 0.01);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(2, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.y);
      assertEquals(2, rectangle1.height);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)axisSpace0.reserved(rectangle0, rectangleEdge0);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace0.equals((Object)axisSpace2));
      assertTrue(rectangle0.equals((Object)rectangle1));
      assertNotNull(rectangle2D_Double0);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(rectangle0, rectangle1);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-355.815181018742), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(1.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(2.0, rectangle0.getMaxY(), 0.01);
      assertEquals(2.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-175.907590509371), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-353.815181018742), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(2, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals((-355.815181018742), rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(2.0, rectangle2D_Double0.y, 0.01);
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      
      boolean boolean0 = rectangle2D_Double0.contains((Point2D) point0);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace0.equals((Object)axisSpace2));
      assertTrue(rectangle0.equals((Object)rectangle1));
      assertFalse(boolean0);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(rectangle0, rectangle1);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-355.815181018742), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(1.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(2.0, rectangle0.getMaxY(), 0.01);
      assertEquals(2.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-175.907590509371), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-353.815181018742), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(2, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals((-355.815181018742), rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(2.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      
      axisSpace0.setTop((-1953.40594005));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertEquals((-1953.40594005), axisSpace0.getTop(), 0.01);
      assertEquals((-355.815181018742), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      AxisSpace axisSpace3 = (AxisSpace)axisSpace0.clone();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertFalse(axisSpace3.equals((Object)axisSpace2));
      assertFalse(axisSpace3.equals((Object)axisSpace1));
      assertTrue(axisSpace3.equals((Object)axisSpace0));
      assertNotNull(axisSpace3);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace0, axisSpace3);
      assertNotSame(axisSpace3, axisSpace0);
      assertNotSame(axisSpace3, axisSpace2);
      assertNotSame(axisSpace3, axisSpace1);
      assertEquals((-1953.40594005), axisSpace0.getTop(), 0.01);
      assertEquals((-355.815181018742), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace3.getRight(), 0.01);
      assertEquals(0.0, axisSpace3.getLeft(), 0.01);
      assertEquals((-1953.40594005), axisSpace3.getTop(), 0.01);
      assertEquals((-355.815181018742), axisSpace3.getBottom(), 0.01);
      
      double double0 = axisSpace0.getBottom();
      assertTrue(axisSpace0.equals((Object)axisSpace3));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertEquals((-355.815181018742), double0, 0.01);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace0, axisSpace3);
      assertEquals((-1953.40594005), axisSpace0.getTop(), 0.01);
      assertEquals((-355.815181018742), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      String string0 = axisSpace0.toString();
      assertTrue(axisSpace0.equals((Object)axisSpace3));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertNotNull(string0);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace0, axisSpace3);
      assertEquals((-1953.40594005), axisSpace0.getTop(), 0.01);
      assertEquals((-355.815181018742), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)axisSpace0.reserved(rectangle2D_Double0, rectangleEdge0);
      assertTrue(axisSpace0.equals((Object)axisSpace3));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertTrue(rectangle0.equals((Object)rectangle1));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertNotNull(rectangle2D_Double1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace0, axisSpace3);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals((-1953.40594005), axisSpace0.getTop(), 0.01);
      assertEquals((-355.815181018742), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(1.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(2.0, rectangle0.getMaxY(), 0.01);
      assertEquals(2.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-175.907590509371), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-353.815181018742), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(1599.5907590312581, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(1421.6831685218872, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(1243.7755780125162, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(2, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals((-355.815181018742), rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(2.0, rectangle2D_Double0.y, 0.01);
      assertEquals((-355.815181018742), rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(1599.5907590312581, rectangle2D_Double1.y, 0.01);
      
      axisSpace3.ensureAtLeast((-1392.223628), rectangleEdge0);
      assertTrue(axisSpace0.equals((Object)axisSpace3));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertFalse(axisSpace3.equals((Object)axisSpace2));
      assertFalse(axisSpace3.equals((Object)axisSpace1));
      assertTrue(axisSpace3.equals((Object)axisSpace0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace0, axisSpace3);
      assertNotSame(axisSpace3, axisSpace0);
      assertNotSame(axisSpace3, axisSpace2);
      assertNotSame(axisSpace3, axisSpace1);
      assertEquals((-1953.40594005), axisSpace0.getTop(), 0.01);
      assertEquals((-355.815181018742), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace3.getRight(), 0.01);
      assertEquals(0.0, axisSpace3.getLeft(), 0.01);
      assertEquals((-1953.40594005), axisSpace3.getTop(), 0.01);
      assertEquals((-355.815181018742), axisSpace3.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      axisSpace0.setTop(1.0);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      axisSpace0.setRight(1.0);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(1.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      AxisSpace axisSpace1 = new AxisSpace();
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)rectangle2D_Float0.getBounds2D();
      assertTrue(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertNotNull(rectangle2D_Float1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      
      Rectangle2D.Float rectangle2D_Float2 = (Rectangle2D.Float)axisSpace1.shrink(rectangle2D_Float1, rectangle2D_Float1);
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertTrue(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertTrue(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertTrue(rectangle2D_Float2.equals((Object)rectangle2D_Float0));
      assertNotNull(rectangle2D_Float2);
      assertNotSame(axisSpace1, axisSpace0);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float2, rectangle2D_Float0);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.y, 0.01F);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)axisSpace0.reserved(rectangle2D_Float2, rectangleEdge0);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertTrue(rectangle2D_Float0.equals((Object)rectangle2D_Float2));
      assertTrue(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertTrue(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertTrue(rectangle2D_Float2.equals((Object)rectangle2D_Float0));
      assertNotNull(rectangle2D_Double0);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float2, rectangle2D_Float0);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(1.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals((-1.0), rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      axisSpace0.setBottom((-1.0));
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      axisSpace0.setTop((-1.0));
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getBottom(), 0.01);
      assertEquals((-1.0), axisSpace0.getTop(), 0.01);
      
      axisSpace0.hashCode();
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getBottom(), 0.01);
      assertEquals((-1.0), axisSpace0.getTop(), 0.01);
      
      Line2D.Double line2D_Double0 = new Line2D.Double((-1.0), 1.0, 1.0, (-1.0));
      assertNotNull(line2D_Double0);
      assertEquals((-1.0), line2D_Double0.x1, 0.01);
      assertEquals((-1.0), line2D_Double0.y2, 0.01);
      assertEquals(1.0, line2D_Double0.y1, 0.01);
      assertEquals(1.0, line2D_Double0.x2, 0.01);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(808.1F, 2988.4F, 1007.4399F, 1007.4399F);
      assertNotNull(rectangle2D_Float0);
      assertEquals(1311.8199157714844, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2988.39990234375, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(3492.119842529297, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(808.0999755859375, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(1815.5398559570312, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(3995.8397827148438, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(1007.4399F, rectangle2D_Float0.height, 0.01F);
      assertEquals(808.1F, rectangle2D_Float0.x, 0.01F);
      assertEquals(1007.4399F, rectangle2D_Float0.width, 0.01F);
      assertEquals(2988.4F, rectangle2D_Float0.y, 0.01F);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)axisSpace0.reserved(rectangle2D_Float0, rectangleEdge0);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getBottom(), 0.01);
      assertEquals((-1.0), axisSpace0.getTop(), 0.01);
      assertEquals(1311.8199157714844, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2988.39990234375, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(3492.119842529297, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(808.0999755859375, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(1815.5398559570312, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(3995.8397827148438, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(3995.8397827148438, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3492.119842529297, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(808.0999755859375, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2988.39990234375, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(808.0999755859375, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(808.0999755859375, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1007.4399F, rectangle2D_Float0.height, 0.01F);
      assertEquals(808.1F, rectangle2D_Float0.x, 0.01F);
      assertEquals(1007.4399F, rectangle2D_Float0.width, 0.01F);
      assertEquals(2988.4F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(808.0999755859375, rectangle2D_Double0.x, 0.01);
      assertEquals(1007.4398803710938, rectangle2D_Double0.height, 0.01);
      assertEquals(2988.39990234375, rectangle2D_Double0.y, 0.01);
      
      Rectangle rectangle0 = line2D_Double0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle0.getWidth(), 0.01);
      assertEquals((-1.0), rectangle0.getX(), 0.01);
      assertEquals((-1.0), rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinY(), 0.01);
      assertEquals(2.0, rectangle0.getHeight(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals((-1.0), rectangle0.getMinX(), 0.01);
      assertEquals((-1.0), line2D_Double0.x1, 0.01);
      assertEquals((-1.0), line2D_Double0.y2, 0.01);
      assertEquals(1.0, line2D_Double0.y1, 0.01);
      assertEquals(1.0, line2D_Double0.x2, 0.01);
      assertEquals(2, rectangle0.height);
      assertEquals(2, rectangle0.width);
      assertEquals((-1), rectangle0.y);
      assertEquals((-1), rectangle0.x);
      
      Rectangle rectangle1 = new Rectangle(rectangle0);
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertNotNull(rectangle1);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle0.getWidth(), 0.01);
      assertEquals((-1.0), rectangle0.getX(), 0.01);
      assertEquals((-1.0), rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinY(), 0.01);
      assertEquals(2.0, rectangle0.getHeight(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals((-1.0), rectangle0.getMinX(), 0.01);
      assertEquals(2.0, rectangle1.getHeight(), 0.01);
      assertEquals((-1.0), rectangle1.getX(), 0.01);
      assertEquals((-1.0), rectangle1.getY(), 0.01);
      assertEquals(1.0, rectangle1.getMaxY(), 0.01);
      assertEquals(1.0, rectangle1.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle1.getMinY(), 0.01);
      assertEquals((-1.0), rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertFalse(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(2.0, rectangle1.getWidth(), 0.01);
      assertEquals((-1.0), line2D_Double0.x1, 0.01);
      assertEquals((-1.0), line2D_Double0.y2, 0.01);
      assertEquals(1.0, line2D_Double0.y1, 0.01);
      assertEquals(1.0, line2D_Double0.x2, 0.01);
      assertEquals(2, rectangle0.height);
      assertEquals(2, rectangle0.width);
      assertEquals((-1), rectangle0.y);
      assertEquals((-1), rectangle0.x);
      assertEquals((-1), rectangle1.y);
      assertEquals((-1), rectangle1.x);
      assertEquals(2, rectangle1.width);
      assertEquals(2, rectangle1.height);
      
      Rectangle rectangle2 = (Rectangle)axisSpace0.expand(rectangle1, rectangle0);
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(rectangle2.equals((Object)rectangle1));
      assertNotNull(rectangle2);
      assertSame(rectangle0, rectangle2);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle2);
      assertNotSame(rectangle1, rectangle0);
      assertSame(rectangle2, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getBottom(), 0.01);
      assertEquals((-1.0), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle0.getWidth(), 0.01);
      assertEquals((-1.0), rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals((-1.0), rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(2.0, rectangle1.getHeight(), 0.01);
      assertEquals((-1.0), rectangle1.getX(), 0.01);
      assertEquals((-1.0), rectangle1.getY(), 0.01);
      assertEquals(1.0, rectangle1.getMaxY(), 0.01);
      assertEquals(1.0, rectangle1.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle1.getMinY(), 0.01);
      assertEquals((-1.0), rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertFalse(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(2.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2.getWidth(), 0.01);
      assertEquals((-1.0), rectangle2.getMinX(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertEquals((-1.0), line2D_Double0.x1, 0.01);
      assertEquals((-1.0), line2D_Double0.y2, 0.01);
      assertEquals(1.0, line2D_Double0.y1, 0.01);
      assertEquals(1.0, line2D_Double0.x2, 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(2, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals((-1), rectangle0.x);
      assertEquals((-1), rectangle1.y);
      assertEquals((-1), rectangle1.x);
      assertEquals(2, rectangle1.width);
      assertEquals(2, rectangle1.height);
      assertEquals((-1), rectangle2.x);
      assertEquals(2, rectangle2.width);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.height);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      axisSpace0.ensureAtLeast(982.010351, rectangleEdge0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(982.010351, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      Rectangle rectangle0 = new Rectangle(2703, 2703, 2703, 2703);
      assertNotNull(rectangle0);
      assertEquals(4054.5, rectangle0.getCenterY(), 0.01);
      assertEquals(5406.0, rectangle0.getMaxY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(2703.0, rectangle0.getMinX(), 0.01);
      assertEquals(2703.0, rectangle0.getY(), 0.01);
      assertEquals(5406.0, rectangle0.getMaxX(), 0.01);
      assertEquals(2703.0, rectangle0.getMinY(), 0.01);
      assertEquals(2703.0, rectangle0.getX(), 0.01);
      assertEquals(2703.0, rectangle0.getWidth(), 0.01);
      assertEquals(4054.5, rectangle0.getCenterX(), 0.01);
      assertEquals(2703.0, rectangle0.getHeight(), 0.01);
      assertEquals(2703, rectangle0.width);
      assertEquals(2703, rectangle0.y);
      assertEquals(2703, rectangle0.x);
      assertEquals(2703, rectangle0.height);
      
      Rectangle rectangle1 = (Rectangle)axisSpace0.shrink(rectangle0, rectangle0);
      assertNotNull(rectangle1);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(982.010351, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(4054.5, rectangle0.getCenterY(), 0.01);
      assertEquals(5406.0, rectangle0.getMaxY(), 0.01);
      assertEquals(3685.0, rectangle0.getX(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(2703.0, rectangle0.getY(), 0.01);
      assertEquals(5406.0, rectangle0.getMaxX(), 0.01);
      assertEquals(2703.0, rectangle0.getMinY(), 0.01);
      assertEquals(3685.0, rectangle0.getMinX(), 0.01);
      assertEquals(1721.0, rectangle0.getWidth(), 0.01);
      assertEquals(4545.5, rectangle0.getCenterX(), 0.01);
      assertEquals(2703.0, rectangle0.getHeight(), 0.01);
      assertEquals(4054.5, rectangle1.getCenterY(), 0.01);
      assertEquals(2703.0, rectangle1.getHeight(), 0.01);
      assertFalse(rectangle1.isEmpty());
      assertEquals(4545.5, rectangle1.getCenterX(), 0.01);
      assertEquals(2703.0, rectangle1.getY(), 0.01);
      assertEquals(1721.0, rectangle1.getWidth(), 0.01);
      assertEquals(2703.0, rectangle1.getMinY(), 0.01);
      assertEquals(5406.0, rectangle1.getMaxX(), 0.01);
      assertEquals(3685.0, rectangle1.getMinX(), 0.01);
      assertEquals(5406.0, rectangle1.getMaxY(), 0.01);
      assertEquals(3685.0, rectangle1.getX(), 0.01);
      assertEquals(1721, rectangle0.width);
      assertEquals(3685, rectangle0.x);
      assertEquals(2703, rectangle0.y);
      assertEquals(2703, rectangle0.height);
      assertEquals(2703, rectangle1.height);
      assertEquals(2703, rectangle1.y);
      assertEquals(3685, rectangle1.x);
      assertEquals(1721, rectangle1.width);
      
      Rectangle rectangle2 = new Rectangle(0, 0);
      assertFalse(rectangle2.equals((Object)rectangle1));
      assertFalse(rectangle2.equals((Object)rectangle0));
      assertNotNull(rectangle2);
      assertTrue(rectangle2.isEmpty());
      assertEquals(0.0, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.height);
      assertEquals(0, rectangle2.width);
      
      rectangle2.grow(2703, 3685);
      assertFalse(rectangle2.equals((Object)rectangle1));
      assertFalse(rectangle2.equals((Object)rectangle0));
      assertNotSame(rectangle2, rectangle1);
      assertNotSame(rectangle2, rectangle0);
      assertEquals((-2703.0), rectangle2.getMinX(), 0.01);
      assertEquals(3685.0, rectangle2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getCenterX(), 0.01);
      assertEquals((-3685.0), rectangle2.getMinY(), 0.01);
      assertEquals(2703.0, rectangle2.getMaxX(), 0.01);
      assertEquals(7370.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertFalse(rectangle2.isEmpty());
      assertEquals((-2703.0), rectangle2.getX(), 0.01);
      assertEquals((-3685.0), rectangle2.getY(), 0.01);
      assertEquals(5406.0, rectangle2.getWidth(), 0.01);
      assertEquals((-3685), rectangle2.y);
      assertEquals(7370, rectangle2.height);
      assertEquals((-2703), rectangle2.x);
      assertEquals(5406, rectangle2.width);
      
      Rectangle rectangle3 = (Rectangle)axisSpace0.expand(rectangle2, rectangle2);
      assertFalse(rectangle2.equals((Object)rectangle1));
      assertFalse(rectangle2.equals((Object)rectangle0));
      assertFalse(rectangle3.equals((Object)rectangle1));
      assertFalse(rectangle3.equals((Object)rectangle0));
      assertNotNull(rectangle3);
      assertNotSame(rectangle2, rectangle1);
      assertSame(rectangle2, rectangle3);
      assertNotSame(rectangle2, rectangle0);
      assertSame(rectangle3, rectangle2);
      assertNotSame(rectangle3, rectangle1);
      assertNotSame(rectangle3, rectangle0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(982.010351, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(3685.0, rectangle2.getMaxY(), 0.01);
      assertEquals(6389.0, rectangle2.getWidth(), 0.01);
      assertEquals((-3686.0), rectangle2.getMinX(), 0.01);
      assertEquals((-3685.0), rectangle2.getMinY(), 0.01);
      assertEquals(2703.0, rectangle2.getMaxX(), 0.01);
      assertEquals(7370.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertFalse(rectangle2.isEmpty());
      assertEquals((-491.5), rectangle2.getCenterX(), 0.01);
      assertEquals((-3685.0), rectangle2.getY(), 0.01);
      assertEquals((-3686.0), rectangle2.getX(), 0.01);
      assertEquals((-3686.0), rectangle3.getMinX(), 0.01);
      assertEquals(0.0, rectangle3.getCenterY(), 0.01);
      assertEquals(7370.0, rectangle3.getHeight(), 0.01);
      assertFalse(rectangle3.isEmpty());
      assertEquals((-491.5), rectangle3.getCenterX(), 0.01);
      assertEquals(6389.0, rectangle3.getWidth(), 0.01);
      assertEquals(2703.0, rectangle3.getMaxX(), 0.01);
      assertEquals(3685.0, rectangle3.getMaxY(), 0.01);
      assertEquals((-3686.0), rectangle3.getX(), 0.01);
      assertEquals((-3685.0), rectangle3.getY(), 0.01);
      assertEquals((-3685.0), rectangle3.getMinY(), 0.01);
      assertEquals((-3685), rectangle2.y);
      assertEquals(6389, rectangle2.width);
      assertEquals(7370, rectangle2.height);
      assertEquals((-3686), rectangle2.x);
      assertEquals((-3686), rectangle3.x);
      assertEquals(6389, rectangle3.width);
      assertEquals((-3685), rectangle3.y);
      assertEquals(7370, rectangle3.height);
      
      axisSpace0.setBottom(0.0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(982.010351, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      axisSpace0.hashCode();
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(982.010351, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      axisSpace0.setRight(982.010351);
      assertEquals(982.010351, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(982.010351, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      axisSpace0.hashCode();
      assertEquals(982.010351, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(982.010351, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      axisSpace0.setTop(2265.6);
      assertEquals(2265.6, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      String string0 = axisSpace0.toString();
      assertNotNull(string0);
      assertEquals(2265.6, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      AxisSpace axisSpace1 = new AxisSpace();
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      
      axisSpace0.ensureAtLeast(axisSpace1);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(2265.6, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      
      axisSpace0.setLeft(2265.6);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(2265.6, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(2265.6, axisSpace0.getLeft(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      axisSpace0.ensureAtLeast(0.0, rectangleEdge0);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(2265.6, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(2265.6, axisSpace0.getLeft(), 0.01);
      
      axisSpace0.setTop(586.0115);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(2265.6, axisSpace0.getLeft(), 0.01);
      assertEquals(586.0115, axisSpace0.getTop(), 0.01);
      
      axisSpace0.setRight(1.0);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(1.0, axisSpace0.getRight(), 0.01);
      assertEquals(2265.6, axisSpace0.getLeft(), 0.01);
      assertEquals(586.0115, axisSpace0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      axisSpace0.setTop(1.0);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      axisSpace0.add(1.0, rectangleEdge0);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      
      AxisSpace axisSpace1 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(1.0, axisSpace1.getBottom(), 0.01);
      assertEquals(1.0, axisSpace1.getTop(), 0.01);
      
      double double0 = axisSpace0.getTop();
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertEquals(1.0, double0, 0.01);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      
      RectangleEdge rectangleEdge1 = RectangleEdge.RIGHT;
      axisSpace0.add(1.0, rectangleEdge1);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(1.0, axisSpace0.getRight(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      
      RectangleEdge rectangleEdge2 = RectangleEdge.TOP;
      axisSpace0.ensureAtLeast(0.0, rectangleEdge2);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(rectangleEdge2.equals((Object)rectangleEdge1));
      assertFalse(rectangleEdge2.equals((Object)rectangleEdge0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(rectangleEdge2, rectangleEdge1);
      assertNotSame(rectangleEdge2, rectangleEdge0);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(1.0, axisSpace0.getRight(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      
      axisSpace0.setTop(0.0);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(1.0, axisSpace0.getRight(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      
      AxisSpace axisSpace2 = (AxisSpace)axisSpace0.clone();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace2.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace0));
      assertNotNull(axisSpace2);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace2, axisSpace1);
      assertNotSame(axisSpace2, axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(1.0, axisSpace0.getRight(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      assertEquals(1.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      assertEquals(1.0, axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try { 
        axisSpace0.shrink((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      axisSpace0.setTop((-1570.103));
      assertEquals((-1570.103), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      double double0 = axisSpace0.getLeft();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1570.103), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      axisSpace0.setBottom(1.0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      axisSpace0.hashCode();
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-1.0F), 161.14F, 1.0F, (-1.0F));
      assertNotNull(rectangle2D_Float0);
      assertEquals((-0.5), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(161.13999938964844, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(160.63999938964844, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-1.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(161.14F, rectangle2D_Float0.y, 0.01F);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)axisSpace0.reserved(rectangle2D_Float0, rectangleEdge0);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals((-0.5), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(161.13999938964844, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(160.63999938964844, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-0.5), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(161.14F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double0.y, 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Float0.createUnion(rectangle2D_Double0);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertNotNull(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals((-0.5), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(161.13999938964844, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(160.63999938964844, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-0.5), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-0.5), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals((-1.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(161.14F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(1.0, rectangle2D_Double1.width, 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double1.y, 0.01);
      assertEquals((-1.0), rectangle2D_Double1.x, 0.01);
      
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)axisSpace0.shrink(rectangle2D_Double1, rectangle2D_Double0);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertNotNull(rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double2);
      assertSame(rectangle2D_Double2, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals((-0.5), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(161.13999938964844, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(160.63999938964844, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-0.5), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-0.5), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals((-0.5), rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals((-1.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(161.14F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(1.0, rectangle2D_Double1.width, 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double1.y, 0.01);
      assertEquals((-1.0), rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.height, 0.01);
      assertEquals(160.13999938964844, rectangle2D_Double2.y, 0.01);
      assertEquals((-1.0), rectangle2D_Double2.x, 0.01);
      assertEquals(1.0, rectangle2D_Double2.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      Point point0 = new Point((-3174), 0);
      assertNotNull(point0);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals((-3174.0), point0.getX(), 0.01);
      assertEquals(0, point0.y);
      assertEquals((-3174), point0.x);
      
      Line2D.Double line2D_Double0 = new Line2D.Double(point0, point0);
      assertNotNull(line2D_Double0);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals((-3174.0), point0.getX(), 0.01);
      assertEquals(0, point0.y);
      assertEquals((-3174), point0.x);
      assertEquals((-3174.0), line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals((-3174.0), line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)line2D_Double0.getBounds2D();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals((-3174.0), point0.getX(), 0.01);
      assertEquals((-3174.0), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-3174.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3174.0), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0, point0.y);
      assertEquals((-3174), point0.x);
      assertEquals((-3174.0), line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals((-3174.0), line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals((-3174.0), rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)axisSpace0.reserved(rectangle2D_Double0, rectangleEdge0);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertNotNull(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals((-3174.0), point0.getX(), 0.01);
      assertEquals((-3174.0), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-3174.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3174.0), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-3174.0), rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals((-3174.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals((-3174.0), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0, point0.y);
      assertEquals((-3174), point0.x);
      assertEquals((-3174.0), line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals((-3174.0), line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals((-3174.0), rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals((-3174.0), rectangle2D_Double1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 0.0, 0.0, (-94.1905166773));
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-94.1905166773), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-47.09525833865), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-94.1905166773), rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)axisSpace0.expand(rectangle2D_Double0, rectangle2D_Double0);
      assertNotNull(rectangle2D_Double1);
      assertSame(rectangle2D_Double0, rectangle2D_Double1);
      assertSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-94.1905166773), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-47.09525833865), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-47.09525833865), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-94.1905166773), rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals((-94.1905166773), rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals((-94.1905166773), rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      AxisSpace axisSpace1 = new AxisSpace();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.getFrame();
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertNotNull(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)axisSpace1.shrink(rectangle2D_Double1, rectangle2D_Double1);
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertNotNull(rectangle2D_Double2);
      assertNotSame(axisSpace1, axisSpace0);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertSame(rectangle2D_Double1, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertSame(rectangle2D_Double2, rectangle2D_Double1);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.height, 0.01);
      assertEquals(0.0, rectangle2D_Double2.width, 0.01);
      assertEquals(0.0, rectangle2D_Double2.y, 0.01);
      
      axisSpace0.ensureAtLeast(axisSpace1);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      
      axisSpace0.add(1.0, rectangleEdge0);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      
      AxisSpace axisSpace2 = (AxisSpace)axisSpace0.clone();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace0));
      assertFalse(axisSpace2.equals((Object)axisSpace1));
      assertNotNull(axisSpace2);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace2, axisSpace1);
      assertNotSame(axisSpace2, axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      assertEquals(1.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      
      axisSpace1.ensureAtLeast(axisSpace0);
      assertTrue(axisSpace0.equals((Object)axisSpace2));
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertTrue(axisSpace1.equals((Object)axisSpace2));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace1, axisSpace0);
      assertNotSame(axisSpace1, axisSpace2);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      assertEquals(1.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      axisSpace0.add(0.0, rectangleEdge0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      boolean boolean0 = axisSpace0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      axisSpace0.setRight(0.0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      axisSpace0.setLeft(1988.11);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(1988.11, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      boolean boolean0 = axisSpace0.equals("k/6>]!O0C$%|_lXzl");
      assertFalse(boolean0);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      double double0 = axisSpace0.getRight();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-1.0), 0.0, (-1968.213891489494), (-1.0));
      assertNotNull(rectangle2D_Double0);
      assertEquals((-1969.213891489494), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-985.106945744747), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-0.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.height, 0.01);
      assertEquals((-1968.213891489494), rectangle2D_Double0.width, 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)axisSpace0.reserved(rectangle2D_Double0, rectangleEdge0);
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertNotNull(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-1969.213891489494), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-985.106945744747), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-0.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1969.213891489494), rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals((-1969.213891489494), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals((-1969.213891489494), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-0.5), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.height, 0.01);
      assertEquals((-1968.213891489494), rectangle2D_Double0.width, 0.01);
      assertEquals((-1.0), rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals((-1969.213891489494), rectangle2D_Double1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)rectangle2D_Float0.getBounds2D();
      assertTrue(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertNotNull(rectangle2D_Float1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)axisSpace0.reserved(rectangle2D_Float1, rectangleEdge0);
      assertTrue(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertTrue(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertNotNull(rectangle2D_Double0);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      Point point0 = new Point(1964, 1964);
      assertNotNull(point0);
      assertEquals(1964.0, point0.getX(), 0.01);
      assertEquals(1964.0, point0.getY(), 0.01);
      assertEquals(1964, point0.x);
      assertEquals(1964, point0.y);
      
      Point point1 = new Point(point0);
      assertTrue(point1.equals((Object)point0));
      assertNotNull(point1);
      assertEquals(1964.0, point0.getX(), 0.01);
      assertEquals(1964.0, point0.getY(), 0.01);
      assertEquals(1964.0, point1.getX(), 0.01);
      assertEquals(1964.0, point1.getY(), 0.01);
      assertEquals(1964, point0.x);
      assertEquals(1964, point0.y);
      assertEquals(1964, point1.x);
      assertEquals(1964, point1.y);
      
      Rectangle rectangle0 = new Rectangle(point1);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertNotNull(rectangle0);
      assertEquals(1964.0, point0.getX(), 0.01);
      assertEquals(1964.0, point0.getY(), 0.01);
      assertEquals(1964.0, point1.getX(), 0.01);
      assertEquals(1964.0, point1.getY(), 0.01);
      assertEquals(1964.0, rectangle0.getX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(1964.0, rectangle0.getY(), 0.01);
      assertEquals(1964.0, rectangle0.getMaxY(), 0.01);
      assertEquals(1964.0, rectangle0.getMaxX(), 0.01);
      assertEquals(1964.0, rectangle0.getCenterY(), 0.01);
      assertEquals(1964.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(1964.0, rectangle0.getMinX(), 0.01);
      assertEquals(1964.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1964, point0.x);
      assertEquals(1964, point0.y);
      assertEquals(1964, point1.x);
      assertEquals(1964, point1.y);
      assertEquals(1964, rectangle0.x);
      assertEquals(1964, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      
      rectangle0.setRect((double) 1964, (double) 1964, (double) 1964, (-1.0));
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertEquals(1964.0, point0.getX(), 0.01);
      assertEquals(1964.0, point0.getY(), 0.01);
      assertEquals(1964.0, point1.getX(), 0.01);
      assertEquals(1964.0, point1.getY(), 0.01);
      assertEquals(1964.0, rectangle0.getX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(1964.0, rectangle0.getY(), 0.01);
      assertEquals(1963.0, rectangle0.getMaxY(), 0.01);
      assertEquals(3928.0, rectangle0.getMaxX(), 0.01);
      assertEquals(1963.5, rectangle0.getCenterY(), 0.01);
      assertEquals(1964.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1.0), rectangle0.getHeight(), 0.01);
      assertEquals(1964.0, rectangle0.getMinX(), 0.01);
      assertEquals(2946.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1964.0, rectangle0.getWidth(), 0.01);
      assertEquals(1964, point0.x);
      assertEquals(1964, point0.y);
      assertEquals(1964, point1.x);
      assertEquals(1964, point1.y);
      assertEquals(1964, rectangle0.x);
      assertEquals((-1), rectangle0.height);
      assertEquals(1964, rectangle0.y);
      assertEquals(1964, rectangle0.width);
      
      Rectangle rectangle1 = (Rectangle)rectangle0.getBounds2D();
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertNotNull(rectangle1);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertEquals(1964.0, point0.getX(), 0.01);
      assertEquals(1964.0, point0.getY(), 0.01);
      assertEquals(1964.0, point1.getX(), 0.01);
      assertEquals(1964.0, point1.getY(), 0.01);
      assertEquals(1964.0, rectangle0.getX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(1964.0, rectangle0.getY(), 0.01);
      assertEquals(1963.0, rectangle0.getMaxY(), 0.01);
      assertEquals(3928.0, rectangle0.getMaxX(), 0.01);
      assertEquals(1963.5, rectangle0.getCenterY(), 0.01);
      assertEquals(1964.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1.0), rectangle0.getHeight(), 0.01);
      assertEquals(1964.0, rectangle0.getMinX(), 0.01);
      assertEquals(2946.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1964.0, rectangle0.getWidth(), 0.01);
      assertEquals(2946.0, rectangle1.getCenterX(), 0.01);
      assertEquals(1963.0, rectangle1.getMaxY(), 0.01);
      assertEquals(1964.0, rectangle1.getMinX(), 0.01);
      assertEquals(1964.0, rectangle1.getMinY(), 0.01);
      assertEquals(3928.0, rectangle1.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle1.getHeight(), 0.01);
      assertEquals(1963.5, rectangle1.getCenterY(), 0.01);
      assertEquals(1964.0, rectangle1.getWidth(), 0.01);
      assertEquals(1964.0, rectangle1.getY(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(1964.0, rectangle1.getX(), 0.01);
      assertEquals(1964, point0.x);
      assertEquals(1964, point0.y);
      assertEquals(1964, point1.x);
      assertEquals(1964, point1.y);
      assertEquals(1964, rectangle0.x);
      assertEquals((-1), rectangle0.height);
      assertEquals(1964, rectangle0.y);
      assertEquals(1964, rectangle0.width);
      assertEquals(1964, rectangle1.x);
      assertEquals(1964, rectangle1.width);
      assertEquals((-1), rectangle1.height);
      assertEquals(1964, rectangle1.y);
      
      Rectangle rectangle2 = (Rectangle)axisSpace0.shrink(rectangle1, rectangle0);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertTrue(rectangle0.equals((Object)rectangle1));
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertTrue(rectangle2.equals((Object)rectangle1));
      assertNotNull(rectangle2);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertSame(rectangle0, rectangle2);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle2);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      assertSame(rectangle2, rectangle0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(1964.0, point0.getX(), 0.01);
      assertEquals(1964.0, point0.getY(), 0.01);
      assertEquals(1964.0, point1.getX(), 0.01);
      assertEquals(1964.0, point1.getY(), 0.01);
      assertEquals(1964.0, rectangle0.getX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(1964.0, rectangle0.getY(), 0.01);
      assertEquals(1963.0, rectangle0.getMaxY(), 0.01);
      assertEquals(3928.0, rectangle0.getMaxX(), 0.01);
      assertEquals(1963.5, rectangle0.getCenterY(), 0.01);
      assertEquals(1964.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1.0), rectangle0.getHeight(), 0.01);
      assertEquals(1964.0, rectangle0.getMinX(), 0.01);
      assertEquals(2946.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1964.0, rectangle0.getWidth(), 0.01);
      assertEquals(2946.0, rectangle1.getCenterX(), 0.01);
      assertEquals(1963.0, rectangle1.getMaxY(), 0.01);
      assertEquals(1964.0, rectangle1.getMinX(), 0.01);
      assertEquals(1964.0, rectangle1.getMinY(), 0.01);
      assertEquals(3928.0, rectangle1.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle1.getHeight(), 0.01);
      assertEquals(1963.5, rectangle1.getCenterY(), 0.01);
      assertEquals(1964.0, rectangle1.getWidth(), 0.01);
      assertEquals(1964.0, rectangle1.getY(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(1964.0, rectangle1.getX(), 0.01);
      assertEquals(1964.0, rectangle2.getX(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertEquals(1964.0, rectangle2.getY(), 0.01);
      assertEquals(1964.0, rectangle2.getWidth(), 0.01);
      assertEquals(1963.0, rectangle2.getMaxY(), 0.01);
      assertEquals(1964.0, rectangle2.getMinX(), 0.01);
      assertEquals(1964.0, rectangle2.getMinY(), 0.01);
      assertEquals((-1.0), rectangle2.getHeight(), 0.01);
      assertEquals(3928.0, rectangle2.getMaxX(), 0.01);
      assertEquals(1963.5, rectangle2.getCenterY(), 0.01);
      assertEquals(2946.0, rectangle2.getCenterX(), 0.01);
      assertEquals(1964, point0.x);
      assertEquals(1964, point0.y);
      assertEquals(1964, point1.x);
      assertEquals(1964, point1.y);
      assertEquals(1964, rectangle0.x);
      assertEquals((-1), rectangle0.height);
      assertEquals(1964, rectangle0.y);
      assertEquals(1964, rectangle0.width);
      assertEquals(1964, rectangle1.x);
      assertEquals(1964, rectangle1.width);
      assertEquals((-1), rectangle1.height);
      assertEquals(1964, rectangle1.y);
      assertEquals((-1), rectangle2.height);
      assertEquals(1964, rectangle2.x);
      assertEquals(1964, rectangle2.y);
      assertEquals(1964, rectangle2.width);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      axisSpace0.ensureAtLeast(0.0, rectangleEdge0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      double double0 = axisSpace0.getBottom();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      axisSpace0.ensureAtLeast(1391.52606, rectangleEdge0);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(1391.52606, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      double double0 = axisSpace0.getLeft();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(1391.52606, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      double double1 = axisSpace0.getTop();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(1391.52606, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      // Undeclared exception!
      try { 
        axisSpace0.expand((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      axisSpace0.ensureAtLeast(0.0, rectangleEdge0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      axisSpace0.setRight((-1.0));
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-1.0), axisSpace0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      // Undeclared exception!
      try { 
        axisSpace0.shrink((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      AxisSpace axisSpace1 = new AxisSpace();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      
      boolean boolean0 = axisSpace0.equals(axisSpace1);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertTrue(boolean0);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      AxisSpace axisSpace1 = new AxisSpace();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      
      axisSpace0.ensureAtLeast(axisSpace1);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      AxisSpace axisSpace1 = new AxisSpace();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      
      axisSpace0.setLeft(1.0);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(1.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      AxisSpace axisSpace2 = new AxisSpace();
      assertTrue(axisSpace2.equals((Object)axisSpace1));
      assertFalse(axisSpace2.equals((Object)axisSpace0));
      assertNotNull(axisSpace2);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      
      axisSpace2.setRight((-1460.8767556362009));
      assertFalse(axisSpace2.equals((Object)axisSpace0));
      assertFalse(axisSpace2.equals((Object)axisSpace1));
      assertNotSame(axisSpace2, axisSpace0);
      assertNotSame(axisSpace2, axisSpace1);
      assertEquals((-1460.8767556362009), axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      
      axisSpace0.ensureAtLeast(axisSpace1);
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertFalse(axisSpace1.equals((Object)axisSpace2));
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertNotSame(axisSpace1, axisSpace2);
      assertEquals(1.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      
      axisSpace0.hashCode();
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(1.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      AxisSpace axisSpace3 = new AxisSpace();
      assertFalse(axisSpace3.equals((Object)axisSpace0));
      assertFalse(axisSpace3.equals((Object)axisSpace2));
      assertTrue(axisSpace3.equals((Object)axisSpace1));
      assertNotNull(axisSpace3);
      assertEquals(0.0, axisSpace3.getLeft(), 0.01);
      assertEquals(0.0, axisSpace3.getRight(), 0.01);
      assertEquals(0.0, axisSpace3.getBottom(), 0.01);
      assertEquals(0.0, axisSpace3.getTop(), 0.01);
      
      boolean boolean0 = axisSpace0.equals(axisSpace3);
      assertFalse(axisSpace0.equals((Object)axisSpace3));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace3.equals((Object)axisSpace0));
      assertFalse(axisSpace3.equals((Object)axisSpace2));
      assertTrue(axisSpace3.equals((Object)axisSpace1));
      assertFalse(boolean0);
      assertNotSame(axisSpace0, axisSpace3);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace3, axisSpace0);
      assertNotSame(axisSpace3, axisSpace1);
      assertNotSame(axisSpace3, axisSpace2);
      assertEquals(1.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace3.getLeft(), 0.01);
      assertEquals(0.0, axisSpace3.getRight(), 0.01);
      assertEquals(0.0, axisSpace3.getBottom(), 0.01);
      assertEquals(0.0, axisSpace3.getTop(), 0.01);
      
      double double0 = axisSpace3.getLeft();
      assertFalse(axisSpace3.equals((Object)axisSpace0));
      assertFalse(axisSpace3.equals((Object)axisSpace2));
      assertTrue(axisSpace3.equals((Object)axisSpace1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(axisSpace3, axisSpace0);
      assertNotSame(axisSpace3, axisSpace1);
      assertNotSame(axisSpace3, axisSpace2);
      assertEquals(0.0, axisSpace3.getLeft(), 0.01);
      assertEquals(0.0, axisSpace3.getRight(), 0.01);
      assertEquals(0.0, axisSpace3.getBottom(), 0.01);
      assertEquals(0.0, axisSpace3.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      AxisSpace axisSpace1 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      
      axisSpace0.setBottom(2008.1216155248703);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(2008.1216155248703, axisSpace0.getBottom(), 0.01);
      
      boolean boolean0 = axisSpace0.equals(axisSpace1);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertFalse(boolean0);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(2008.1216155248703, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = axisSpace0.equals(object0);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(2008.1216155248703, axisSpace0.getBottom(), 0.01);
      
      String string0 = axisSpace1.toString();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(string0);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(2008.1216155248703, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      
      String string0 = axisSpace0.toString();
      assertNotNull(string0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      AxisSpace axisSpace1 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      
      axisSpace1.setRight(1357.21);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(1357.21, axisSpace1.getRight(), 0.01);
      
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try { 
        axisSpace0.shrink((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      axisSpace0.ensureAtLeast(186.1908255, rectangleEdge0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(186.1908255, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      axisSpace0.add(1099.0750730364623, rectangleEdge0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(1285.2658985364624, axisSpace0.getRight(), 0.01);
      
      axisSpace0.setLeft((-1.0));
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(1285.2658985364624, axisSpace0.getRight(), 0.01);
      
      axisSpace0.setTop((-1.0));
      assertEquals((-1.0), axisSpace0.getTop(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(1285.2658985364624, axisSpace0.getRight(), 0.01);
      
      RectangleEdge rectangleEdge1 = RectangleEdge.TOP;
      axisSpace0.add((-1.0), rectangleEdge1);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals((-2.0), axisSpace0.getTop(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(1285.2658985364624, axisSpace0.getRight(), 0.01);
      
      double double0 = axisSpace0.getRight();
      assertEquals(1285.2658985364624, double0, 0.01);
      assertEquals((-2.0), axisSpace0.getTop(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(1285.2658985364624, axisSpace0.getRight(), 0.01);
      
      AxisSpace axisSpace1 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals((-2.0), axisSpace0.getTop(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(1285.2658985364624, axisSpace0.getRight(), 0.01);
      assertEquals(1285.2658985364624, axisSpace1.getRight(), 0.01);
      assertEquals((-2.0), axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals((-1.0), axisSpace1.getLeft(), 0.01);
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      
      Point point1 = new Point(point0);
      assertTrue(point1.equals((Object)point0));
      assertNotNull(point1);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      
      Rectangle rectangle0 = new Rectangle(point1, dimension0);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertNotNull(rectangle0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      
      Rectangle rectangle1 = (Rectangle)axisSpace1.shrink(rectangle0, rectangle0);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertNotNull(rectangle1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
      assertEquals((-2.0), axisSpace0.getTop(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(1285.2658985364624, axisSpace0.getRight(), 0.01);
      assertEquals(1285.2658985364624, axisSpace1.getRight(), 0.01);
      assertEquals((-2.0), axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals((-1.0), axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals((-1.0), rectangle0.getX(), 0.01);
      assertEquals((-1285.0), rectangle0.getWidth(), 0.01);
      assertEquals((-2.0), rectangle0.getY(), 0.01);
      assertEquals((-1.0), rectangle0.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle0.getMinY(), 0.01);
      assertEquals((-1286.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-643.5), rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(2.0, rectangle0.getHeight(), 0.01);
      assertEquals((-1.0), rectangle1.getX(), 0.01);
      assertEquals(2.0, rectangle1.getHeight(), 0.01);
      assertEquals((-1285.0), rectangle1.getWidth(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals((-1.0), rectangle1.getMinX(), 0.01);
      assertEquals((-1.0), rectangle1.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle1.getY(), 0.01);
      assertEquals((-2.0), rectangle1.getMinY(), 0.01);
      assertEquals((-1286.0), rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals((-643.5), rectangle1.getCenterX(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals((-2), rectangle0.y);
      assertEquals((-1), rectangle0.x);
      assertEquals(2, rectangle0.height);
      assertEquals((-1285), rectangle0.width);
      assertEquals(2, rectangle1.height);
      assertEquals((-2), rectangle1.y);
      assertEquals((-1), rectangle1.x);
      assertEquals((-1285), rectangle1.width);
      
      RectangleEdge rectangleEdge2 = RectangleEdge.RIGHT;
      axisSpace0.ensureAtLeast(1099.0750730364623, rectangleEdge2);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertFalse(rectangleEdge2.equals((Object)rectangleEdge1));
      assertNotSame(axisSpace0, axisSpace1);
      assertSame(rectangleEdge2, rectangleEdge0);
      assertNotSame(rectangleEdge2, rectangleEdge1);
      assertEquals((-2.0), axisSpace0.getTop(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(1285.2658985364624, axisSpace0.getRight(), 0.01);
      
      String string0 = axisSpace1.toString();
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(string0);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals((-2.0), axisSpace0.getTop(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(1285.2658985364624, axisSpace0.getRight(), 0.01);
      assertEquals(1285.2658985364624, axisSpace1.getRight(), 0.01);
      assertEquals((-2.0), axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals((-1.0), axisSpace1.getLeft(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)axisSpace0.reserved(rectangle0, rectangleEdge0);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertNotNull(rectangle2D_Double0);
      assertNotSame(axisSpace0, axisSpace1);
      assertSame(rectangleEdge0, rectangleEdge2);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertSame(rectangle0, rectangle1);
      assertEquals((-2.0), axisSpace0.getTop(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(1285.2658985364624, axisSpace0.getRight(), 0.01);
      assertEquals((-2571.2658985364624), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-1928.6329492682312), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-2.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1286.0), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals((-1.0), rectangle0.getX(), 0.01);
      assertEquals((-1285.0), rectangle0.getWidth(), 0.01);
      assertEquals((-2.0), rectangle0.getY(), 0.01);
      assertEquals((-1.0), rectangle0.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle0.getMinY(), 0.01);
      assertEquals((-1286.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-643.5), rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(2.0, rectangle0.getHeight(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-2571.2658985364624), rectangle2D_Double0.x, 0.01);
      assertEquals(1285.2658985364624, rectangle2D_Double0.width, 0.01);
      assertEquals((-2.0), rectangle2D_Double0.y, 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals((-2), rectangle0.y);
      assertEquals((-1), rectangle0.x);
      assertEquals(2, rectangle0.height);
      assertEquals((-1285), rectangle0.width);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      
      Point point1 = new Point();
      assertTrue(point1.equals((Object)point0));
      assertNotNull(point1);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      
      axisSpace0.ensureAtLeast((double) 0, rectangleEdge0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      boolean boolean0 = axisSpace0.equals(axisSpace0);
      assertTrue(boolean0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      String string0 = axisSpace0.toString();
      assertNotNull(string0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      double double0 = axisSpace0.getLeft();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      axisSpace0.setBottom(0.0);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      axisSpace0.ensureAtLeast(1.0, rectangleEdge0);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(1.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      String string0 = axisSpace0.toString();
      assertNotNull(string0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      
      axisSpace0.setRight(0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      // Undeclared exception!
      try { 
        axisSpace0.expand((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      AxisSpace axisSpace1 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotNull(axisSpace1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      
      Rectangle rectangle0 = new Rectangle(dimension0);
      assertNotNull(rectangle0);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)axisSpace0.reserved(rectangle0, rectangleEdge0);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotNull(rectangle2D_Double0);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      
      RectangleEdge rectangleEdge1 = RectangleEdge.BOTTOM;
      axisSpace0.ensureAtLeast(1.0, rectangleEdge1);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      RectangleEdge rectangleEdge2 = RectangleEdge.BOTTOM;
      axisSpace0.add(0.0, rectangleEdge2);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(rectangleEdge2.equals((Object)rectangleEdge0));
      assertNotSame(axisSpace0, axisSpace1);
      assertSame(rectangleEdge2, rectangleEdge1);
      assertNotSame(rectangleEdge2, rectangleEdge0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      double double0 = axisSpace0.getRight();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)axisSpace0.reserved(rectangle0, rectangleEdge1);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertNotNull(rectangle2D_Double1);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertSame(rectangleEdge1, rectangleEdge2);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.5, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(1.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      axisSpace0.setTop(0.5396270365);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.5396270365, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      
      Rectangle2D.Double rectangle2D_Double0 = null;
      Rectangle2D rectangle2D0 = axisSpace0.reserved((Rectangle2D) null, (RectangleEdge) null);
      assertNull(rectangle2D0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.5396270365, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      axisSpace0.ensureAtLeast(1.0, rectangleEdge0);
      assertEquals(1.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.5396270365, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      // Undeclared exception!
      try { 
        axisSpace0.ensureAtLeast(443.12522071053274, (RectangleEdge) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AxisSpace.ensureAtLeast(): unrecognised AxisLocation.
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      axisSpace0.setLeft((-255.284465767804));
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-255.284465767804), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      axisSpace0.add(0.0, rectangleEdge0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-255.284465767804), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      
      Rectangle rectangle0 = new Rectangle(point0);
      assertNotNull(rectangle0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      
      axisSpace0.setBottom((-255.284465767804));
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-255.284465767804), axisSpace0.getBottom(), 0.01);
      assertEquals((-255.284465767804), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      axisSpace0.ensureAtLeast((-42.3), rectangleEdge0);
      axisSpace0.setTop(0.0);
      axisSpace0.setRight((-42.3));
      axisSpace0.getBottom();
      RectangleEdge rectangleEdge1 = RectangleEdge.TOP;
      axisSpace0.ensureAtLeast(0.0, rectangleEdge1);
      axisSpace0.getBottom();
      AxisSpace axisSpace1 = new AxisSpace();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(925.9F, 925.9F, (-1293.6846F), (-1293.6846F));
      Point point0 = new Point();
      RectangleEdge rectangleEdge2 = RectangleEdge.LEFT;
      Rectangle2D rectangle2D0 = axisSpace1.reserved(rectangle2D_Float0, rectangleEdge2);
      axisSpace0.equals(axisSpace1);
      axisSpace1.getBottom();
      axisSpace0.hashCode();
      axisSpace1.add(0, rectangleEdge2);
      axisSpace0.clone();
      axisSpace1.getTop();
      AxisSpace axisSpace2 = (AxisSpace)axisSpace1.clone();
      axisSpace2.clone();
      axisSpace2.ensureAtLeast(axisSpace0);
      axisSpace1.equals(axisSpace2);
      axisSpace1.ensureAtLeast(axisSpace0);
      assertEquals((-42.3), axisSpace0.getRight(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)axisSpace2.reserved(rectangle2D0, rectangleEdge2);
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)axisSpace1.expand(rectangle2D_Float0, rectangle2D0);
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
  }
}
