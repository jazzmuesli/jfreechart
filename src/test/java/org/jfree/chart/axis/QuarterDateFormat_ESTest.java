/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:20:30 GMT 2019
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.axis.QuarterDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class QuarterDateFormat_ESTest extends QuarterDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeZone timeZone0 = mockGregorianCalendar0.getTimeZone();
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat(timeZone0);
      QuarterDateFormat quarterDateFormat1 = new QuarterDateFormat(timeZone0, quarterDateFormat0.ROMAN_QUARTERS, true);
      quarterDateFormat0.equals(quarterDateFormat1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat(timeZone0);
      MockDate mockDate0 = new MockDate(4132, 5316, 4132, 1, (-2949));
      FieldPosition fieldPosition0 = new FieldPosition(1162);
      // Undeclared exception!
      try { 
        quarterDateFormat0.format((Date) mockDate0, (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.QuarterDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "_dN");
      String[] stringArray0 = new String[1];
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat(simpleTimeZone0, stringArray0);
      MockDate mockDate0 = new MockDate(0, 0, 0);
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition(1);
      // Undeclared exception!
      try { 
        quarterDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.chart.axis.QuarterDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat();
      QuarterDateFormat quarterDateFormat1 = new QuarterDateFormat();
      quarterDateFormat1.setCalendar((Calendar) null);
      // Undeclared exception!
      try { 
        quarterDateFormat0.equals(quarterDateFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuarterDateFormat quarterDateFormat0 = null;
      try {
        quarterDateFormat0 = new QuarterDateFormat((TimeZone) null, (String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      QuarterDateFormat quarterDateFormat0 = null;
      try {
        quarterDateFormat0 = new QuarterDateFormat((TimeZone) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuarterDateFormat quarterDateFormat0 = null;
      try {
        quarterDateFormat0 = new QuarterDateFormat((TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat();
      QuarterDateFormat quarterDateFormat1 = new QuarterDateFormat();
      quarterDateFormat0.equals(quarterDateFormat1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      String[] stringArray0 = new String[0];
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat(timeZone0, stringArray0);
      QuarterDateFormat quarterDateFormat1 = new QuarterDateFormat();
      quarterDateFormat0.equals(quarterDateFormat1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat();
      quarterDateFormat0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat();
      quarterDateFormat0.equals(quarterDateFormat0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-658), "IV");
      QuarterDateFormat quarterDateFormat1 = new QuarterDateFormat(simpleTimeZone0, quarterDateFormat0.REGULAR_QUARTERS, true);
      quarterDateFormat0.equals(quarterDateFormat1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat();
      MockDate mockDate0 = new MockDate(473L);
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition((-658));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-658), "IV");
      QuarterDateFormat quarterDateFormat1 = new QuarterDateFormat(simpleTimeZone0, quarterDateFormat0.REGULAR_QUARTERS, true);
      quarterDateFormat1.format((Date) mockDate0, stringBuffer0, fieldPosition0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat();
      MockDate mockDate0 = new MockDate(473L);
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition((-658));
      quarterDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat();
      ParsePosition parsePosition0 = mock(ParsePosition.class, new ViolatedAssumptionAnswer());
      quarterDateFormat0.parse("l]e", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 4);
      TimeZone timeZone0 = mockGregorianCalendar0.getTimeZone();
      String[] stringArray0 = new String[5];
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat(timeZone0, stringArray0, true);
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      quarterDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals(9, stringBuffer0.length());
      assertEquals("null 2014", stringBuffer0.toString());
  }
}
