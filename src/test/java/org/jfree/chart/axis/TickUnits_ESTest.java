/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:19:41 GMT 2019
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.DateTickUnitType;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.TickUnit;
import org.jfree.chart.axis.TickUnits;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class TickUnits_ESTest extends TickUnits_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(911.48);
      tickUnits0.add(numberTickUnit0);
      tickUnits0.add(numberTickUnit0);
      tickUnits0.add(numberTickUnit0);
      TickUnit tickUnit0 = tickUnits0.getCeilingTickUnit((TickUnit) numberTickUnit0);
      assertEquals(911.48, tickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      Locale locale0 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-1.0), numberFormat0);
      tickUnits0.add(numberTickUnit0);
      int int0 = tickUnits0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0);
      tickUnits0.add(numberTickUnit0);
      TickUnit tickUnit0 = tickUnits0.getLargerTickUnit(numberTickUnit0);
      assertSame(tickUnit0, numberTickUnit0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      Locale locale0 = Locale.PRC;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(2761.517, numberFormat0, 2104);
      tickUnits0.add(numberTickUnit0);
      TickUnit tickUnit0 = tickUnits0.getLargerTickUnit(numberTickUnit0);
      assertSame(tickUnit0, numberTickUnit0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-1.0), numberFormat0, (-2));
      tickUnits0.add(numberTickUnit0);
      TickUnit tickUnit0 = tickUnits0.getLargerTickUnit(numberTickUnit0);
      assertEquals((-1.0), tickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0);
      tickUnits0.add(numberTickUnit0);
      TickUnit tickUnit0 = tickUnits0.getCeilingTickUnit((TickUnit) numberTickUnit0);
      assertSame(numberTickUnit0, tickUnit0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      Locale locale0 = Locale.JAPANESE;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-723.7), numberFormat0, 1361);
      tickUnits0.add(numberTickUnit0);
      TickUnit tickUnit0 = tickUnits0.getCeilingTickUnit((TickUnit) numberTickUnit0);
      assertEquals(1361, tickUnit0.getMinorTickCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-1.0), numberFormat0, (-2));
      tickUnits0.add(numberTickUnit0);
      TickUnit tickUnit0 = tickUnits0.getCeilingTickUnit((TickUnit) numberTickUnit0);
      assertSame(tickUnit0, numberTickUnit0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0);
      tickUnits0.add(numberTickUnit0);
      TickUnit tickUnit0 = tickUnits0.getCeilingTickUnit(0.0);
      assertSame(tickUnit0, numberTickUnit0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      Locale locale0 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(1098.94, numberFormat0);
      tickUnits0.add(numberTickUnit0);
      TickUnit tickUnit0 = tickUnits0.getCeilingTickUnit(2652.3013468959);
      assertEquals(1098.94, tickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-1545.216159), numberFormat0, 3485);
      tickUnits0.add(numberTickUnit0);
      TickUnit tickUnit0 = tickUnits0.getCeilingTickUnit((-1.0));
      assertEquals((-1545.216159), tickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-1.0), numberFormat0, (-2));
      tickUnits0.add(numberTickUnit0);
      TickUnit tickUnit0 = tickUnits0.getCeilingTickUnit(82.186);
      assertSame(tickUnit0, numberTickUnit0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("Require '");
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0, choiceFormat0, 0);
      tickUnits0.add(numberTickUnit0);
      TickUnit tickUnit0 = tickUnits0.get(0);
      assertSame(tickUnit0, numberTickUnit0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      Locale locale0 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-1.0), numberFormat0);
      tickUnits0.add(numberTickUnit0);
      TickUnit tickUnit0 = tickUnits0.get(0);
      assertEquals(0, tickUnit0.getMinorTickCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      Locale locale0 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(1098.94, numberFormat0);
      tickUnits0.add(numberTickUnit0);
      TickUnit tickUnit0 = tickUnits0.get(0);
      assertEquals(0, tickUnit0.getMinorTickCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      Locale locale0 = Locale.PRC;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(2761.517, numberFormat0, 2104);
      tickUnits0.add(numberTickUnit0);
      TickUnit tickUnit0 = tickUnits0.get(0);
      assertEquals(2761.517, tickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      // Undeclared exception!
      try { 
        tickUnits0.get((-2116));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MINUTE;
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 1, dateFormat0);
      // Undeclared exception!
      try { 
        tickUnits0.getCeilingTickUnit((TickUnit) dateTickUnit0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      boolean boolean0 = tickUnits0.equals(tickUnits0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      boolean boolean0 = tickUnits0.equals("DateTickUnitType.DAY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-1.0), numberFormat0, (-2));
      // Undeclared exception!
      try { 
        tickUnits0.getLargerTickUnit(numberTickUnit0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      // Undeclared exception!
      try { 
        tickUnits0.add((TickUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'unit' argument.
         //
         verifyException("org.jfree.chart.axis.TickUnits", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      // Undeclared exception!
      try { 
        tickUnits0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      // Undeclared exception!
      try { 
        tickUnits0.getCeilingTickUnit(2652.3013468959);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      Object object0 = tickUnits0.clone();
      boolean boolean0 = tickUnits0.equals(object0);
      assertNotSame(object0, tickUnits0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      int int0 = tickUnits0.size();
      assertEquals(0, int0);
  }
}
