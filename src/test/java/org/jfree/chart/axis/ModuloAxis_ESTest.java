/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:35:22 GMT 2019
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.DataBufferInt;
import java.awt.image.DirectColorModel;
import java.awt.image.Kernel;
import java.awt.image.Raster;
import java.awt.image.RescaleOp;
import java.awt.image.SampleModel;
import java.awt.image.SinglePixelPackedSampleModel;
import java.awt.image.WritableRaster;
import java.util.SimpleTimeZone;
import javax.swing.JInternalFrame;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTree;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.text.DefaultHighlighter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLabelLocation;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.data.Range;
import org.jfree.data.RangeType;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.DateRange;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ModuloAxis_ESTest extends ModuloAxis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      moduloAxis0.setTickLabelsVisible(true);
      Range range1 = Range.expandToInclude(range0, 0.0);
      moduloAxis0.setDisplayRange((-1.0), 70.58528783426024);
      moduloAxis0.equals("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      Range.combine(moduloAxis0.DEFAULT_RANGE, moduloAxis0.DEFAULT_RANGE);
      Range.expand(range1, (-1.0), 15.0);
      Rectangle2D rectangle2D0 = moduloAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      moduloAxis0.java2DToValue(70.58528783426024, rectangle2D0, rectangleEdge0);
      moduloAxis0.getDisplayStart();
      moduloAxis0.java2DToValue(0.0, rectangle2D0, rectangleEdge0);
      moduloAxis0.getDisplayStart();
      RectangleEdge rectangleEdge1 = RectangleEdge.BOTTOM;
      moduloAxis0.valueToJava2D(0.0, rectangle2D0, rectangleEdge1);
      moduloAxis0.getDisplayEnd();
      moduloAxis0.resizeRange(0.0, 0.0);
      moduloAxis0.getDisplayEnd();
      Range.shift(moduloAxis0.DEFAULT_RANGE, 0.0);
      double double0 = ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE;
      JInternalFrame jInternalFrame0 = new JInternalFrame("");
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      RectangleEdge rectangleEdge2 = RectangleEdge.RIGHT;
      moduloAxis0.valueToJava2D((-517.11420298116), rectangle0, rectangleEdge2);
      moduloAxis0.equals(range1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      Range range1 = Range.scale(range0, 327.875704452465);
      ModuloAxis moduloAxis0 = new ModuloAxis("", range1);
      Range.shift(moduloAxis0.DEFAULT_RANGE, 3348.382, true);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.LOW_END;
      moduloAxis0.labelAnchorV(axisLabelLocation0);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      moduloAxis0.setAutoRange(false, false);
      Rectangle2D rectangle2D0 = moduloAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      Point2D.Float point2D_Float0 = new Point2D.Float(500, 0.0F);
      rectangle2D0.add((Point2D) point2D_Float0);
      RectangleEdge rectangleEdge1 = RectangleEdge.BOTTOM;
      moduloAxis0.lengthToJava2D(3348.382, rectangle2D0, rectangleEdge1);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getDataset();
      ganttRenderer0.findRangeBounds((CategoryDataset) null);
      Range.expandToInclude((Range) null, 0.0);
      RectangleEdge rectangleEdge2 = RectangleEdge.LEFT;
      moduloAxis0.java2DToValue(0.09999999999999432, rectangle2D0, rectangleEdge2);
      moduloAxis0.valueToJava2D(2.0, rectangle2D0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "n#RD";
      Range range0 = null;
      ModuloAxis moduloAxis0 = new ModuloAxis("n#RD", (Range) null);
      moduloAxis0.equals(moduloAxis0);
      // Undeclared exception!
      try { 
        Integer.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      moduloAxis0.setTickLabelsVisible(true);
      Range.expandToInclude(range0, 0.0);
      moduloAxis0.setDisplayRange((-1.0), 59.7113546268);
      moduloAxis0.equals("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      Range.combine(moduloAxis0.DEFAULT_RANGE, moduloAxis0.DEFAULT_RANGE);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.05, 2.0F, 1.0E-8, 2.0F);
      moduloAxis0.java2DToValue(59.7113546268, rectangle2D_Double0, rectangleEdge0);
      moduloAxis0.setDisplayRange((-517.11420298116), (-2415.804));
      moduloAxis0.getDisplayStart();
      moduloAxis0.java2DToValue(0.0, rectangle2D_Double0, rectangleEdge0);
      moduloAxis0.getDisplayStart();
      RectangleEdge rectangleEdge1 = RectangleEdge.BOTTOM;
      moduloAxis0.valueToJava2D(0.0, rectangle2D_Double0, rectangleEdge1);
      moduloAxis0.getDisplayEnd();
      moduloAxis0.resizeRange(0.0, 0.0);
      moduloAxis0.getDisplayEnd();
      RectangleEdge rectangleEdge2 = RectangleEdge.TOP;
      moduloAxis0.valueToJava2D((-1062.0), rectangle2D_Double0, rectangleEdge2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-2594.6), (-2594.6));
      Range range1 = Range.expand(range0, (-1217.191174735257), 284.4904674);
      Range range2 = ValueAxis.DEFAULT_RANGE;
      Range range3 = Range.combine(range2, range2);
      Range.shift(range2, 2300.99);
      ModuloAxis moduloAxis0 = new ModuloAxis("tyywyU/DE+`H(b'[", range3);
      moduloAxis0.resizeRange(0.7853981633974483, (-49.10557963156));
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode();
      DefaultTreeModel defaultTreeModel0 = new DefaultTreeModel(defaultMutableTreeNode0);
      JTree jTree0 = new JTree(defaultTreeModel0);
      TreePath treePath0 = new TreePath(chartPanel0);
      ModuloAxis moduloAxis1 = new ModuloAxis(")7HpED!", range1);
      defaultMutableTreeNode0.setUserObject(moduloAxis1);
      jTree0.getPathBounds(treePath0);
      Rectangle rectangle0 = chartPanel0.getBounds((Rectangle) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      moduloAxis0.java2DToValue(0.7853981633974483, rectangle0, rectangleEdge0);
      System.setCurrentTimeMillis(351L);
      moduloAxis0.lengthToJava2D(Double.POSITIVE_INFINITY, rectangle0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      Range range1 = Range.scale(range0, 327.875704452465);
      ModuloAxis moduloAxis0 = new ModuloAxis("", range1);
      Range.shift(moduloAxis0.DEFAULT_RANGE, 531.363730432873, true);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.LOW_END;
      moduloAxis0.labelAnchorV(axisLabelLocation0);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      moduloAxis0.setAutoRange(false, false);
      Rectangle2D rectangle2D0 = moduloAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = RectangleEdge.BOTTOM;
      moduloAxis0.lengthToJava2D(531.363730432873, rectangle2D0, rectangleEdge1);
      RectangleEdge rectangleEdge2 = RectangleEdge.LEFT;
      moduloAxis0.java2DToValue(37.4010293506887, rectangle2D0, rectangleEdge2);
      moduloAxis0.valueToJava2D(2.0, rectangle2D0, rectangleEdge0);
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(14.1F, (-4716.577F), 0.0F, 2.0F, 2.0F, 0.0F);
      Rectangle2D rectangle2D1 = roundRectangle2D_Float0.getBounds2D();
      moduloAxis0.valueToJava2D((-0.7853981633974483), rectangle2D1, rectangleEdge2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range((-2594.6), (-2594.6));
      Range.expand(range0, (-1217.191174735257), 284.4904674);
      Range range1 = ValueAxis.DEFAULT_RANGE;
      Range range2 = Range.combine(range1, range1);
      ModuloAxis moduloAxis0 = new ModuloAxis("tyywyU/DE+`H(b'[", range2);
      moduloAxis0.resizeRange(0.7853981633974483, (-49.10557963156));
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode();
      DefaultTreeModel defaultTreeModel0 = new DefaultTreeModel(defaultMutableTreeNode0);
      JTree jTree0 = new JTree(defaultTreeModel0);
      TreePath treePath0 = new TreePath(chartPanel0);
      jTree0.getPathBounds(treePath0);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      // Undeclared exception!
      try { 
        moduloAxis0.java2DToValue(0.7853981633974483, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      ModuloAxis moduloAxis0 = new ModuloAxis("Lv[[", range1);
      Range.combine(moduloAxis0.DEFAULT_RANGE, range1);
      moduloAxis0.resizeRange(1414.070769222);
      TitledBorder titledBorder0 = new TitledBorder("isO;UihcF");
      Border border0 = titledBorder0.getBorder();
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) null, border0, 500, (-1840), (-1840), 2135651782);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      moduloAxis0.lengthToJava2D((-4722.626), rectangle0, rectangleEdge0);
      moduloAxis0.equals(titledBorder0);
      moduloAxis0.equals(rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      moduloAxis0.setTickLabelsVisible(true);
      Range range1 = Range.expandToInclude(range0, 0.0);
      moduloAxis0.setDisplayRange((-1.0), 59.7113546268);
      moduloAxis0.equals("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      Range.combine(moduloAxis0.DEFAULT_RANGE, moduloAxis0.DEFAULT_RANGE);
      Rectangle2D rectangle2D0 = moduloAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      moduloAxis0.java2DToValue(59.7113546268, rectangle2D0, rectangleEdge0);
      moduloAxis0.setDisplayRange((-517.11420298116), (-2415.804));
      moduloAxis0.getDisplayStart();
      moduloAxis0.java2DToValue(0.0, rectangle2D0, rectangleEdge0);
      moduloAxis0.getDisplayStart();
      RectangleEdge rectangleEdge1 = RectangleEdge.BOTTOM;
      moduloAxis0.valueToJava2D(0.0, rectangle2D0, rectangleEdge1);
      moduloAxis0.getDisplayEnd();
      moduloAxis0.resizeRange(0.0, 0.0);
      moduloAxis0.getDisplayEnd();
      double double0 = ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE;
      JInternalFrame jInternalFrame0 = new JInternalFrame("");
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      RectangleEdge rectangleEdge2 = RectangleEdge.RIGHT;
      moduloAxis0.valueToJava2D((-517.11420298116), rectangle0, rectangleEdge2);
      moduloAxis0.equals(range1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      Range range0 = ValueAxis.DEFAULT_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      moduloAxis0.setTickLabelsVisible(true);
      double double0 = 0.0;
      Range.expandToInclude(range0, 0.0);
      // Undeclared exception!
      try { 
        moduloAxis0.setDisplayRange((-1.0), 2.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A positive range length is required: Range[1.0,1.0]
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      moduloAxis0.setTickLabelsVisible(true);
      Range.expandToInclude(range0, 0.0);
      moduloAxis0.setDisplayRange((-1.0), 59.7113546268);
      moduloAxis0.equals("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      Range.combine(moduloAxis0.DEFAULT_RANGE, moduloAxis0.DEFAULT_RANGE);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      moduloAxis0.java2DToValue(59.7113546268, rectangle2D_Double0, rectangleEdge0);
      moduloAxis0.setDisplayRange((-517.11420298116), 500);
      moduloAxis0.getDisplayStart();
      moduloAxis0.java2DToValue(0.0, rectangle2D_Double0, rectangleEdge0);
      moduloAxis0.getDisplayStart();
      RectangleEdge rectangleEdge1 = RectangleEdge.BOTTOM;
      moduloAxis0.valueToJava2D(0.0, rectangle2D_Double0, rectangleEdge1);
      moduloAxis0.getDisplayEnd();
      moduloAxis0.resizeRange(0.0, 0.0);
      RectangleEdge rectangleEdge2 = RectangleEdge.TOP;
      moduloAxis0.valueToJava2D((-1062.0), rectangle2D_Double0, rectangleEdge2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Range range0 = Range.expandToInclude((Range) null, 2673.806403207424);
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1614.537F, 0.0F, (-464.5158F), 500);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      moduloAxis0.valueToJava2D((-2986.8698864748), rectangle2D_Float0, rectangleEdge0);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.findRangeBounds((CategoryDataset) null);
      ModuloAxis moduloAxis1 = new ModuloAxis("\"#]o", (Range) null);
      moduloAxis1.getDisplayEnd();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "n#RD";
      Range range0 = null;
      ModuloAxis moduloAxis0 = new ModuloAxis("n#RD", (Range) null);
      Rectangle rectangle0 = new Rectangle();
      moduloAxis0.setUpArrow(rectangle0);
      ModuloAxis moduloAxis1 = new ModuloAxis("n#RD", (Range) null);
      // Undeclared exception!
      try { 
        moduloAxis0.equals(moduloAxis1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      MeterPlot meterPlot0 = new MeterPlot();
      Font font0 = meterPlot0.getTickLabelFont();
      font0.getBaselineFor('2');
      xYBlockRenderer0.setDefaultLegendTextFont(font0);
      xYTaskDataset0.setNotify(false);
      Range range0 = ValueAxis.DEFAULT_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("{&P2", range0);
      moduloAxis0.equals("{&P2");
      Range.scale(moduloAxis0.DEFAULT_RANGE, 1.0E-8);
      moduloAxis0.getDisplayEnd();
      moduloAxis0.resizeRange(334.94903);
      moduloAxis0.getDisplayStart();
      moduloAxis0.resizeRange(0.0, (double) 10.0F);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      // Undeclared exception!
      try { 
        moduloAxis0.lengthToJava2D(10.0F, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      Range range1 = Range.scale(range0, 327.875704452465);
      ModuloAxis moduloAxis0 = new ModuloAxis("", range1);
      Range.shift(moduloAxis0.DEFAULT_RANGE, 3348.382, true);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.LOW_END;
      moduloAxis0.labelAnchorV(axisLabelLocation0);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      moduloAxis0.setAutoRange(false, false);
      Rectangle2D rectangle2D0 = moduloAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = RectangleEdge.BOTTOM;
      moduloAxis0.lengthToJava2D(3348.382, rectangle2D0, rectangleEdge1);
      RectangleEdge rectangleEdge2 = RectangleEdge.RIGHT;
      moduloAxis0.lengthToJava2D(0.0, rectangle2D0, rectangleEdge2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.findRangeBounds((CategoryDataset) null);
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      Rectangle2D rectangle2D0 = null;
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        moduloAxis0.valueToJava2D(629.44025, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      timeTableXYDataset0.getDomainBounds(true);
      ModuloAxis moduloAxis0 = new ModuloAxis("pD*.t", (Range) null);
      // Undeclared exception!
      try { 
        moduloAxis0.resizeRange(1182.7793, (double) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getPreferredSize();
      Color color0 = defaultTreeCellRenderer0.getTextSelectionColor();
      DefaultHighlighter.DefaultHighlightPainter defaultHighlighter_DefaultHighlightPainter0 = new DefaultHighlighter.DefaultHighlightPainter(color0);
      Color color1 = defaultHighlighter_DefaultHighlightPainter0.getColor();
      meterPlot0.setDialOutlinePaint(color1);
      Range range0 = meterPlot0.getRange();
      ModuloAxis moduloAxis0 = new ModuloAxis("org.jfree.data.time.SimpleTimePeriod", range0);
      moduloAxis0.setDisplayRange(1563.222375, 1563.222375);
      moduloAxis0.getDisplayEnd();
      moduloAxis0.autoAdjustRange();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      NumberTickUnit numberTickUnit0 = NumberAxis.DEFAULT_TICK_UNIT;
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.MIDDLE;
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      Rectangle2D rectangle2D0 = moduloAxis0.getLabelEnclosure((Graphics2D) null, rectangleEdge0);
      moduloAxis0.labelLocationY(axisLabelLocation0, rectangle2D0);
      moduloAxis0.setTickUnit(numberTickUnit0, false, true);
      // Undeclared exception!
      try { 
        moduloAxis0.resizeRange(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, dateRange0);
      moduloAxis0.setDisplayRange(0.0, (-723.8089101112638));
      moduloAxis0.setDisplayRange(0.0, (-112.0954195376));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expand(range0, 0.0, (-486.8418964393883));
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, range1);
      moduloAxis0.setMinorTickMarkOutsideLength(627.59F);
      // Undeclared exception!
      try { 
        moduloAxis0.resizeRange((-486.8418964393883), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A positive range length is required: Range[0.0,0.0]
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      Range.combineIgnoringNaN(range0, range0);
      double double0 = 1019.4509414887103;
      Range range1 = Range.expand(range0, 1019.4509414887103, (-1104.82637351231));
      ModuloAxis moduloAxis0 = new ModuloAxis("df%87S", range1);
      range1.toString();
      double double1 = 0.0;
      Range.shift(range1, 0.0);
      // Undeclared exception!
      try { 
        moduloAxis0.autoAdjustRange();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A positive range length is required: Range[-1061.6386575005101,-1061.6386575005101]
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getDataset();
      stackedAreaRenderer0.findRangeBounds((CategoryDataset) null);
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      // Undeclared exception!
      try { 
        moduloAxis0.resizeRange((-2737.435626745178), (double) 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-1213.70228773972));
      range0.toString();
      ModuloAxis moduloAxis0 = new ModuloAxis("` [x`W]", range0);
      int int0 = 199;
      moduloAxis0.setAutoTickIndex(199);
      Rectangle2D rectangle2D0 = null;
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      moduloAxis0.java2DToValue((-1213.70228773972), (Rectangle2D) null, rectangleEdge0);
      moduloAxis0.setDisplayRange(0.0, 5591.8074);
      moduloAxis0.equals("Range[-1213.70228773972,-1213.70228773972]");
      Range.combineIgnoringNaN(moduloAxis0.DEFAULT_RANGE, moduloAxis0.DEFAULT_RANGE);
      RectangleEdge rectangleEdge1 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        moduloAxis0.lengthToJava2D(0.0, (Rectangle2D) null, rectangleEdge1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      moduloAxis0.setTickLabelsVisible(true);
      Range.expandToInclude(range0, 0.0);
      moduloAxis0.setDisplayRange((-1.0), 59.7113546268);
      moduloAxis0.equals("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      Range.combine(moduloAxis0.DEFAULT_RANGE, moduloAxis0.DEFAULT_RANGE);
      Rectangle2D rectangle2D0 = moduloAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      moduloAxis0.java2DToValue(59.7113546268, rectangle2D0, rectangleEdge0);
      moduloAxis0.setDisplayRange((-517.11420298116), (-2415.804));
      moduloAxis0.java2DToValue(0.0, rectangle2D0, rectangleEdge0);
      moduloAxis0.getDisplayStart();
      RectangleEdge rectangleEdge1 = RectangleEdge.BOTTOM;
      moduloAxis0.valueToJava2D(0.0, rectangle2D0, rectangleEdge1);
      moduloAxis0.getDisplayEnd();
      moduloAxis0.resizeRange(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      Range range0 = Range.combineIgnoringNaN(dateRange0, dateRange0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-142.72), range0, lengthConstraintType0, (-142.72), range0, lengthConstraintType1);
      Range range1 = rectangleConstraint0.getHeightRange();
      Range range2 = Range.expand(range1, 2.0, (-142.72));
      ModuloAxis moduloAxis0 = new ModuloAxis("d#ep\"E?rd|E%JU]", range2);
      JTabbedPane jTabbedPane0 = new JTabbedPane(4, 0);
      JScrollPane jScrollPane0 = new JScrollPane(jTabbedPane0);
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      moduloAxis0.valueToJava2D(2.0, rectangle0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      clusteredXYBarRenderer0.findRangeBounds(vectorSeriesCollection0);
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        moduloAxis0.valueToJava2D(4355.629, rectangle2D_Float0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "";
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      moduloAxis0.equals("");
      Graphics2D graphics2D0 = null;
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      Rectangle2D rectangle2D0 = moduloAxis0.getLabelEnclosure((Graphics2D) null, rectangleEdge0);
      // Undeclared exception!
      try { 
        moduloAxis0.lengthToJava2D(30.0, rectangle2D0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
      moduloAxis0.setDownArrow(ellipse2D_Double0);
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.HIGH_END;
      moduloAxis0.setLabelLocation(axisLabelLocation0);
      double double0 = (-872.256507249029);
      // Undeclared exception!
      try { 
        moduloAxis0.setDisplayRange((-872.256507249029), (-2184.956547235509));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      moduloAxis0.getDisplayStart();
      moduloAxis0.equals("");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      xYShapeRenderer0.findZBounds(matrixSeriesCollection0);
      ModuloAxis moduloAxis0 = new ModuloAxis("sK-X", (Range) null);
      Line2D.Double line2D_Double0 = new Line2D.Double(0.65, 0.05, 0.0, (double) xYShapeRenderer0.ZERO);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      // Undeclared exception!
      try { 
        moduloAxis0.lengthToJava2D((double) xYShapeRenderer0.ZERO, rectangle0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      Range range2 = Range.expandToInclude(range1, (-3895.8));
      ModuloAxis moduloAxis0 = new ModuloAxis("", range2);
      moduloAxis0.autoAdjustRange();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, (Range) null);
      rectangleConstraint0.getHeightRange();
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      // Undeclared exception!
      try { 
        moduloAxis0.autoAdjustRange();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-4268.42679));
      Range range0 = cyclicNumberAxis0.getDefaultAutoRange();
      ModuloAxis moduloAxis0 = new ModuloAxis("org.jfree.chart.axis.ModuloAxis", range0);
      moduloAxis0.setDisplayRange((-2110.0198), 0.0F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      stackedXYBarRenderer0.findDomainBounds(defaultTableXYDataset0);
      ModuloAxis moduloAxis0 = new ModuloAxis("ueEP1L|a", (Range) null);
      // Undeclared exception!
      try { 
        moduloAxis0.setDisplayRange((double) stackedXYBarRenderer0.ZERO, (double) stackedXYBarRenderer0.ZERO);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      Range range1 = Range.expandToInclude(range0, (-1.0));
      ModuloAxis moduloAxis0 = new ModuloAxis("fillPaint", range1);
      moduloAxis0.resizeRange(2798.9424183, 2798.9424183);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("ZB-u", (Range) null);
      moduloAxis0.getDisplayEnd();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      moduloAxis0.setTickLabelsVisible(true);
      Range.expandToInclude(range0, 0.0);
      moduloAxis0.setDisplayRange((-1.0), 59.7113546268);
      moduloAxis0.equals("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      Range.combine(moduloAxis0.DEFAULT_RANGE, moduloAxis0.DEFAULT_RANGE);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      moduloAxis0.java2DToValue(59.7113546268, rectangle2D_Double0, rectangleEdge0);
      moduloAxis0.setDisplayRange((-517.11420298116), (-4.0));
      moduloAxis0.getDisplayStart();
      moduloAxis0.java2DToValue(0.0, rectangle2D_Double0, rectangleEdge0);
      moduloAxis0.getDisplayStart();
      RectangleEdge rectangleEdge1 = RectangleEdge.TOP;
      moduloAxis0.valueToJava2D(0.0, rectangle2D_Double0, rectangleEdge1);
      Float float0 = new Float(0.05);
      moduloAxis0.resizeRange(0.0, 0.0);
      RectangleEdge rectangleEdge2 = RectangleEdge.RIGHT;
      moduloAxis0.java2DToValue(21.58025507421035, rectangle2D_Double0, rectangleEdge2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      moduloAxis0.setTickLabelsVisible(true);
      Range range1 = Range.expandToInclude(range0, 0.0);
      moduloAxis0.setDisplayRange((-1.0), 59.7113546268);
      moduloAxis0.equals("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      Range.combine(moduloAxis0.DEFAULT_RANGE, moduloAxis0.DEFAULT_RANGE);
      Range.expand(range1, (-1.0), 15.0);
      Rectangle2D rectangle2D0 = moduloAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      moduloAxis0.java2DToValue(59.7113546268, rectangle2D0, rectangleEdge0);
      moduloAxis0.setDisplayRange((-517.11420298116), (-2415.804));
      moduloAxis0.getDisplayStart();
      moduloAxis0.java2DToValue(0.0, rectangle2D0, rectangleEdge0);
      moduloAxis0.getDisplayStart();
      RectangleEdge rectangleEdge1 = RectangleEdge.BOTTOM;
      moduloAxis0.valueToJava2D(0.0, rectangle2D0, rectangleEdge1);
      moduloAxis0.getDisplayEnd();
      moduloAxis0.resizeRange(0.0, 0.0);
      moduloAxis0.getDisplayEnd();
      Range.shift(moduloAxis0.DEFAULT_RANGE, 0.0);
      double double0 = ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE;
      JInternalFrame jInternalFrame0 = new JInternalFrame("");
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      RectangleEdge rectangleEdge2 = RectangleEdge.RIGHT;
      moduloAxis0.valueToJava2D((-517.11420298116), rectangle0, rectangleEdge2);
      moduloAxis0.equals(range1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "n#RD";
      Range range0 = null;
      ModuloAxis moduloAxis0 = new ModuloAxis("n#RD", (Range) null);
      Rectangle rectangle0 = new Rectangle();
      moduloAxis0.setUpArrow(rectangle0);
      ModuloAxis moduloAxis1 = new ModuloAxis("n#RD", (Range) null);
      // Undeclared exception!
      try { 
        moduloAxis0.equals(moduloAxis1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      DateAxis dateAxis0 = new DateAxis("org.jfree.chart.axis.ModuloAxis");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.getDataset(1);
      candlestickRenderer0.findDomainBounds((XYDataset) null);
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (float) 10;
      floatArray0[7] = 0.0F;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(10, 2, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 8 and should be 20
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      // Undeclared exception!
      try { 
        moduloAxis0.lengthToJava2D(3348.382, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      Range range1 = Range.scale(range0, 327.875704452465);
      ModuloAxis moduloAxis0 = new ModuloAxis("", range1);
      Range.shift(moduloAxis0.DEFAULT_RANGE, 3348.382, true);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.LOW_END;
      moduloAxis0.labelAnchorV(axisLabelLocation0);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      moduloAxis0.setAutoRange(false, false);
      Rectangle2D rectangle2D0 = moduloAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = RectangleEdge.BOTTOM;
      moduloAxis0.lengthToJava2D(3348.382, rectangle2D0, rectangleEdge1);
      RectangleEdge rectangleEdge2 = RectangleEdge.LEFT;
      moduloAxis0.java2DToValue(0.09999999999999432, rectangle2D0, rectangleEdge2);
      moduloAxis0.valueToJava2D(2.0, rectangle2D0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = null;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = null;
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = null;
      try {
        range0 = new Range(0.2, (double) statisticalBarRenderer0.ZERO);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.2) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CategoryItemRenderer categoryItemRenderer0 = mock(CategoryItemRenderer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      NumberTickUnit numberTickUnit0 = NumberAxis.DEFAULT_TICK_UNIT;
      assertEquals(0, numberTickUnit0.getMinorTickCount());
      assertEquals(1.0, numberTickUnit0.getSize(), 0.01);
      assertNotNull(numberTickUnit0);
      
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNotNull(moduloAxis0);
      
      moduloAxis0.setTickLabelsVisible(true);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.5, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      moduloAxis0.setDisplayRange((-1.0), 59.7113546268);
      assertSame(range0, range1);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(1.0, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(1.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(1.7113546268000022, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.7113546268000022, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      
      boolean boolean0 = moduloAxis0.equals("");
      assertSame(range0, range1);
      assertFalse(boolean0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(1.0, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(1.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(1.7113546268000022, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.7113546268000022, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      Range range2 = Range.combine(moduloAxis0.DEFAULT_RANGE, moduloAxis0.DEFAULT_RANGE);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(1.0, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(1.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(1.7113546268000022, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.7113546268000022, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.5, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.0, range2.getLength(), 0.01);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)moduloAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(1.0, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(1.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(1.7113546268000022, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.7113546268000022, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertTrue(range0.equals((Object)range2));
      assertNotNull(rectangle2D_Double0);
      
      double double0 = moduloAxis0.java2DToValue(59.7113546268, rectangle2D_Double0, rectangleEdge0);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertEquals(0.0, double0, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(1.0, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(1.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(1.7113546268000022, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.7113546268000022, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertTrue(range0.equals((Object)range2));
      
      moduloAxis0.setDisplayRange((-517.11420298116), (-2415.804));
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.8857970188399804, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.8857970188399804, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.1959999999999127, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.1959999999999127, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(range0.equals((Object)range2));
      
      double double1 = moduloAxis0.getDisplayStart();
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertEquals(0.8857970188399804, double1, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.8857970188399804, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.8857970188399804, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.1959999999999127, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.1959999999999127, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(range0.equals((Object)range2));
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = moduloAxis0.java2DToValue(0.0, rectangle2D_Double0, rectangleEdge0);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertEquals(0.0, double2, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.8857970188399804, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.8857970188399804, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.1959999999999127, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.1959999999999127, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertTrue(range0.equals((Object)range2));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = moduloAxis0.getDisplayStart();
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertEquals(0.8857970188399804, double3, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.8857970188399804, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.8857970188399804, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.1959999999999127, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.1959999999999127, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(range0.equals((Object)range2));
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      RectangleEdge rectangleEdge1 = RectangleEdge.BOTTOM;
      double double4 = moduloAxis0.valueToJava2D(0.0, rectangle2D_Double0, rectangleEdge1);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertSame(rectangleEdge0, rectangleEdge1);
      assertSame(rectangleEdge1, rectangleEdge0);
      assertEquals(0.0, double4, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.8857970188399804, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.8857970188399804, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.1959999999999127, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.1959999999999127, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertTrue(range0.equals((Object)range2));
      
      double double5 = moduloAxis0.getDisplayEnd();
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertEquals(0.1959999999999127, double5, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.8857970188399804, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.8857970188399804, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.1959999999999127, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.1959999999999127, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(range0.equals((Object)range2));
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      
      moduloAxis0.resizeRange(0.0, 0.0);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.8857970188399804, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.1959999999999127, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(range0.equals((Object)range2));
      
      double double6 = moduloAxis0.getDisplayEnd();
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertEquals(0.1959999999999127, double6, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.8857970188399804, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.1959999999999127, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(range0.equals((Object)range2));
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      
      RectangleEdge rectangleEdge2 = RectangleEdge.TOP;
      double double7 = moduloAxis0.valueToJava2D((-1062.0), rectangle2D_Double0, rectangleEdge2);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(rectangleEdge2, rectangleEdge0);
      assertNotSame(rectangleEdge2, rectangleEdge1);
      assertNotSame(rectangleEdge0, rectangleEdge2);
      assertSame(rectangleEdge0, rectangleEdge1);
      assertEquals(0.0, double7, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.8857970188399804, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.1959999999999127, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertTrue(range0.equals((Object)range2));
      assertFalse(rectangleEdge2.equals((Object)rectangleEdge0));
      assertFalse(rectangleEdge2.equals((Object)rectangleEdge1));
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double0, 0.01);
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge2));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      moduloAxis0.setTickLabelsVisible(true);
      moduloAxis0.setDisplayRange((-1.0), 59.7113546268);
      moduloAxis0.equals("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      Range.combine(moduloAxis0.DEFAULT_RANGE, moduloAxis0.DEFAULT_RANGE);
      Rectangle2D rectangle2D0 = moduloAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      moduloAxis0.java2DToValue(59.7113546268, rectangle2D0, rectangleEdge0);
      moduloAxis0.setDisplayRange((-517.11420298116), (-2415.804));
      moduloAxis0.getDisplayStart();
      moduloAxis0.java2DToValue(0.0, rectangle2D0, rectangleEdge0);
      moduloAxis0.getDisplayStart();
      RectangleEdge rectangleEdge1 = RectangleEdge.BOTTOM;
      moduloAxis0.valueToJava2D(0.0F, rectangle2D0, rectangleEdge1);
      moduloAxis0.getDisplayEnd();
      moduloAxis0.resizeRange(0.0, 0.0);
      moduloAxis0.getDisplayEnd();
      double double0 = ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE;
      JInternalFrame jInternalFrame0 = new JInternalFrame("");
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      RectangleEdge rectangleEdge2 = RectangleEdge.RIGHT;
      moduloAxis0.valueToJava2D((-517.11420298116), rectangle0, rectangleEdge2);
      moduloAxis0.equals(moduloAxis0.DEFAULT_RANGE);
      assertEquals(0.8857970188399804, moduloAxis0.getDisplayStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range((-2594.6), (-2594.6));
      Range range1 = Range.expand(range0, (-1217.191174735257), 284.4904674);
      Range.expand(range0, 651.594597, 4909.2390219);
      Range range2 = Range.shift(range1, (-2128.026), true);
      ModuloAxis moduloAxis0 = new ModuloAxis("tyywyU/DE+`H(b'[", range2);
      moduloAxis0.resizeRange(0.7853981633974483, (-49.10557963156));
      boolean boolean0 = moduloAxis0.equals("tyywyU/DE+`H(b'[");
      assertEquals(Double.NaN, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      ModuloAxis moduloAxis0 = new ModuloAxis("Lv[[", range1);
      moduloAxis0.resizeRange(1414.070769222);
      assertEquals(0.8338453690084862, moduloAxis0.getDisplayStart(), 0.01);
  }
}
