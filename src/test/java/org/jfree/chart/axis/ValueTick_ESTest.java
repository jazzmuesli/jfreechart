/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:25:47 GMT 2019
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.text.AttributedString;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateTick;
import org.jfree.chart.axis.LogTick;
import org.jfree.chart.axis.NumberTick;
import org.jfree.chart.axis.TickType;
import org.jfree.chart.ui.TextAnchor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ValueTick_ESTest extends ValueTick_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TickType tickType0 = TickType.MINOR;
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      LogTick logTick0 = new LogTick(tickType0, 3.0, attributedString0, textAnchor0);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      TextAnchor textAnchor1 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      DateTick dateTick0 = new DateTick(date0, "{+c_V", textAnchor1, textAnchor1, 3.0);
      boolean boolean0 = logTick0.equals(dateTick0);
      assertEquals(0.0, dateTick0.getValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TickType tickType0 = TickType.MAJOR;
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      NumberTick numberTick0 = new NumberTick(tickType0, 2180.28033315, (String) null, textAnchor0, textAnchor0, 3937.7725144);
      Number number0 = numberTick0.getNumber();
      TextAnchor textAnchor1 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(false, number0, "", textAnchor1, textAnchor1, (-3382.1));
      assertEquals(2180.28033315, numberTick0.getValue(), 0.01);
      assertEquals(2180.28033315, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TickType tickType0 = TickType.MAJOR;
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      LogTick logTick0 = new LogTick(tickType0, 601.6885, attributedString0, textAnchor0);
      double double0 = logTick0.getValue();
      assertEquals(601.6885, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((-1556L)).when(date0).getTime();
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      DateTick dateTick0 = new DateTick(date0, "textAnchor", textAnchor0, textAnchor0, (-1978.0));
      double double0 = dateTick0.getValue();
      assertEquals((-1556.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TickType tickType0 = TickType.MINOR;
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      LogTick logTick0 = new LogTick(tickType0, 4821.326844636358, attributedString0, textAnchor0);
      LogTick logTick1 = (LogTick)logTick0.clone();
      boolean boolean0 = logTick0.equals(logTick1);
      assertTrue(boolean0);
      assertEquals(4821.326844636358, logTick1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TickType tickType0 = TickType.MINOR;
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      NumberTick numberTick0 = new NumberTick(tickType0, 0.0, ";AXw", textAnchor0, textAnchor0, (-444.0725));
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor1 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      LogTick logTick0 = new LogTick(tickType0, 0.0, attributedString0, textAnchor1);
      AttributedString attributedString1 = logTick0.getAttributedLabel();
      TextAnchor textAnchor2 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      LogTick logTick1 = new LogTick(tickType0, 2030.10265124475, attributedString1, textAnchor2);
      boolean boolean0 = numberTick0.equals(logTick1);
      assertFalse(boolean0);
      assertEquals(2030.10265124475, logTick1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TickType tickType0 = TickType.MINOR;
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      LogTick logTick0 = new LogTick(tickType0, 0.0, attributedString0, textAnchor0);
      boolean boolean0 = logTick0.equals(tickType0);
      assertFalse(boolean0);
      assertEquals(0.0, logTick0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TickType tickType0 = TickType.MINOR;
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      NumberTick numberTick0 = new NumberTick(tickType0, 0.0, ";AXw", textAnchor0, textAnchor0, (-444.0725));
      boolean boolean0 = numberTick0.equals(numberTick0);
      assertTrue(boolean0);
      assertEquals(0.0, numberTick0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TickType tickType0 = TickType.MINOR;
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      NumberTick numberTick0 = new NumberTick(tickType0, 0.0, "org.jfree.chart.axis.ValueTick", textAnchor0, textAnchor0, (-444.0725));
      Number number0 = numberTick0.getNumber();
      TextAnchor textAnchor1 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      NumberTick numberTick1 = new NumberTick(number0, "org.jfree.chart.axis.ValueTick", textAnchor1, textAnchor1, 0.0);
      boolean boolean0 = numberTick0.equals(numberTick1);
      assertFalse(boolean0);
      assertEquals(0.0, numberTick1.getValue(), 0.01);
      assertEquals(0.0, numberTick0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TickType tickType0 = TickType.MINOR;
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      NumberTick numberTick0 = new NumberTick(tickType0, 0.0, ";AXw", textAnchor0, textAnchor0, (-444.0725));
      double double0 = numberTick0.getValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TickType tickType0 = TickType.MINOR;
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      LogTick logTick0 = new LogTick(tickType0, 0.0, attributedString0, textAnchor0);
      logTick0.getTickType();
      assertEquals(0.0, logTick0.getValue(), 0.01);
  }
}
