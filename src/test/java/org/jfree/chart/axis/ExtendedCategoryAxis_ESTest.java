/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:58:15 GMT 2019
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Paint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.text.TextBlock;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.data.category.CategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExtendedCategoryAxis_ESTest extends ExtendedCategoryAxis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("fr");
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      CategoryItemRenderer categoryItemRenderer0 = mock(CategoryItemRenderer.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = new CategoryPlot(categoryDataset0, extendedCategoryAxis0, valueAxis0, categoryItemRenderer0);
      Paint paint0 = categoryPlot0.getOutlinePaint();
      extendedCategoryAxis0.setSubLabelPaint(paint0);
      Object object0 = extendedCategoryAxis0.clone();
      boolean boolean0 = extendedCategoryAxis0.equals(object0);
      assertNotSame(object0, extendedCategoryAxis0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.title.PaintScaleLegend");
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = new CategoryPlot(categoryDataset0, extendedCategoryAxis0, valueAxis0, (CategoryItemRenderer) null);
      Paint paint0 = categoryPlot0.getBackgroundPaint();
      extendedCategoryAxis0.setSubLabelPaint(paint0);
      Color color0 = (Color)extendedCategoryAxis0.getSubLabelPaint();
      assertEquals(255, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("lHX>KG#|*mL;");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setSubLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("V");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setSubLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("\"+pe|e_'sT=4L\"Hhc6");
      extendedCategoryAxis0.setMaximumCategoryLabelLines(50);
      extendedCategoryAxis0.addCategoryLabelURL("\"+pe|e_'sT=4L\"Hhc6", "v(/MC=r^B");
      Font font0 = extendedCategoryAxis0.getLabelFont();
      extendedCategoryAxis0.setSubLabelFont(font0);
      extendedCategoryAxis0.setTickLabelsVisible(false);
      extendedCategoryAxis0.addSubLabel("\"+pe|e_'sT=4L\"Hhc6", "\"+pe|e_'sT=4L\"Hhc6");
      extendedCategoryAxis0.setTickLabelsVisible(false);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0, (FontMetrics) null).when(graphics2D0).getFontMetrics();
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.createLabel("\"+pe|e_'sT=4L\"Hhc6", 0.0F, rectangleEdge0, graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("~X)IJ:_`98{I&;y2|");
      Object object0 = extendedCategoryAxis0.clone();
      assertTrue(object0.equals((Object)extendedCategoryAxis0));
      
      extendedCategoryAxis0.addSubLabel("~X)IJ:_`98{I&;y2|", "~X)IJ:_`98{I&;y2|");
      boolean boolean0 = extendedCategoryAxis0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.title.PaintScaleLegend");
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = new CategoryPlot(categoryDataset0, extendedCategoryAxis0, valueAxis0, (CategoryItemRenderer) null);
      Paint paint0 = categoryPlot0.getBackgroundPaint();
      extendedCategoryAxis0.setSubLabelPaint(paint0);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("org.jfree.chart.title.PaintScaleLegend");
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertFalse(boolean0);
      assertFalse(extendedCategoryAxis1.equals((Object)extendedCategoryAxis0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("TOP_CENTER");
      Font font0 = extendedCategoryAxis0.getLabelFont();
      extendedCategoryAxis0.setSubLabelFont(font0);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("TOP_CENTER");
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertFalse(extendedCategoryAxis1.equals((Object)extendedCategoryAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.title.PaintScaleLegend");
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = new CategoryPlot(categoryDataset0, extendedCategoryAxis0, valueAxis0, (CategoryItemRenderer) null);
      Paint paint0 = categoryPlot0.getBackgroundPaint();
      boolean boolean0 = extendedCategoryAxis0.equals(paint0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.title.PaintScaleLegend");
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("font");
      extendedCategoryAxis0.addSubLabel("font", "K,5DUbV)n'Xd7`");
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-627)).when(fontMetrics0).getAscent();
      doReturn(193).when(fontMetrics0).getHeight();
      doReturn(1).when(fontMetrics0).stringWidth(anyString());
      FontMetrics fontMetrics1 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(193).when(fontMetrics1).getAscent();
      doReturn((-1866)).when(fontMetrics1).getHeight();
      doReturn((-1866)).when(fontMetrics1).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0, fontMetrics1).when(graphics2D0).getFontMetrics();
      TextBlock textBlock0 = extendedCategoryAxis0.createLabel("font", (-879.0F), rectangleEdge0, graphics2D0);
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("\"+pe|e_'sT=4L\"Hhc6");
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(fontMetrics0).getAscent();
      doReturn(1952).when(fontMetrics0).getHeight();
      doReturn(1).when(fontMetrics0).stringWidth(anyString());
      FontMetrics fontMetrics1 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics1).getAscent();
      doReturn(0).when(fontMetrics1).getHeight();
      doReturn(0).when(fontMetrics1).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0, fontMetrics1).when(graphics2D0).getFontMetrics();
      TextBlock textBlock0 = extendedCategoryAxis0.createLabel("\"+pe|e_'sT=4L\"Hhc6", 0.0F, rectangleEdge0, graphics2D0);
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("font");
      extendedCategoryAxis0.addSubLabel("font", "K,5DUbV)n'Xd7`");
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(fontMetrics0).getAscent();
      doReturn((-5593)).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      FontMetrics fontMetrics1 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(fontMetrics1).getAscent();
      doReturn(0, 0, 0).when(fontMetrics1).getHeight();
      doReturn(0, 0, 0).when(fontMetrics1).stringWidth(anyString());
      FontMetrics fontMetrics2 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(fontMetrics2).getAscent();
      doReturn(0, 0).when(fontMetrics2).getHeight();
      doReturn(0, 0).when(fontMetrics2).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0, fontMetrics1, fontMetrics2, fontMetrics2, fontMetrics1).when(graphics2D0).getFontMetrics();
      TextBlock textBlock0 = extendedCategoryAxis0.createLabel("font", (-879.0F), rectangleEdge0, graphics2D0);
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      Font font0 = extendedCategoryAxis0.getSubLabelFont();
      assertEquals(10, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isBold());
  }
}
