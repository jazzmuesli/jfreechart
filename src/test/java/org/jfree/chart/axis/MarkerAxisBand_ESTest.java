/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:59:35 GMT 2019
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Stroke;
import java.awt.font.FontRenderContext;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.axis.MarkerAxisBand;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.event.MarkerChangeEvent;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.text.TextUtils;
import org.jfree.chart.ui.LengthAdjustmentType;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MarkerAxisBand_ESTest extends MarkerAxisBand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(1146.3071796).when(range0).getLowerBound();
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((-315.5)).when(range1).getUpperBound();
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      doReturn(1146.3071796, (-1.0)).when(numberAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      doReturn(range0, range1).when(numberAxis0).getRange();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0F, (-652.5312854924), numberAxis0.DEFAULT_TICK_MARK_PAINT, stroke0, numberAxis0.DEFAULT_AXIS_LINE_PAINT, stroke0, 0.0F);
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertNotNull(intervalMarker0);
      
      Font font0 = intervalMarker0.getLabelFont();
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals(9, font0.getSize());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertNotNull(font0);
      
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.05, 1.0, 0.05, 0.0, font0);
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals(9, font0.getSize());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertNotNull(markerAxisBand0);
      
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 0.05, (-652.5312854924), 254.46684659674696, 0.0F, numberAxis1.DEFAULT_TICK_LABEL_FONT);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotNull(markerAxisBand1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double0 = markerAxisBand1.getHeight(graphics2D0);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertEquals(0.0, double0, 0.01);
      
      markerAxisBand1.hashCode();
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand1, markerAxisBand0);
      
      markerAxisBand0.addMarker(intervalMarker0);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals(9, font0.getSize());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double1 = markerAxisBand1.getHeight(graphics2D1);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertEquals(0.0, double1, 0.01);
      
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(500).when(fontMetrics0).getAscent();
      doReturn((-654)).when(fontMetrics0).getHeight();
      doReturn(2130214920).when(fontMetrics0).stringWidth(anyString());
      FontRenderContext fontRenderContext1 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext1).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext1).getFractionalMetricsHint();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D2).getFontMetrics(any(java.awt.Font.class));
      doReturn((Composite) null).when(graphics2D2).getComposite();
      doReturn(fontRenderContext0, fontRenderContext1).when(graphics2D2).getFontRenderContext();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker1 = new IntervalMarker((-124.0), 2.0F, numberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertFalse(intervalMarker1.equals((Object)intervalMarker0));
      assertEquals(0.8F, intervalMarker1.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker1.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker1.getLabelOffsetType());
      assertNull(intervalMarker1.getLabel());
      assertEquals((-124.0), intervalMarker1.getStartValue(), 0.01);
      assertEquals(2.0, intervalMarker1.getEndValue(), 0.01);
      assertNotNull(intervalMarker1);
      
      boolean boolean0 = markerAxisBand0.equals(intervalMarker1);
      assertFalse(intervalMarker0.equals((Object)intervalMarker1));
      assertFalse(intervalMarker1.equals((Object)intervalMarker0));
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertNotSame(intervalMarker0, intervalMarker1);
      assertNotSame(intervalMarker1, intervalMarker0);
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker1.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker1.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker1.getLabelOffsetType());
      assertNull(intervalMarker1.getLabel());
      assertEquals((-124.0), intervalMarker1.getStartValue(), 0.01);
      assertEquals(2.0, intervalMarker1.getEndValue(), 0.01);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals(9, font0.getSize());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        markerAxisBand0.draw(graphics2D2, rectangle2D0, rectangle2D1, 0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Font", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(1146.3071796).when(range0).getLowerBound();
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(1146.3071796).when(range1).getUpperBound();
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      doReturn(1146.3071796, 1146.3071796).when(numberAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      doReturn(range0, range1).when(numberAxis0).getRange();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0F, (-652.5312854924), numberAxis0.DEFAULT_TICK_MARK_PAINT, stroke0, numberAxis0.DEFAULT_AXIS_LINE_PAINT, stroke0, 0.0F);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertNotNull(intervalMarker0);
      
      Font font0 = intervalMarker0.getLabelFont();
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertEquals(9, font0.getSize());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertNotNull(font0);
      
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.05, 1.0, 0.05, 0.0, font0);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertEquals(9, font0.getSize());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertNotNull(markerAxisBand0);
      
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 0.05, (-652.5312854924), 254.46684659674696, 0.0F, numberAxis1.DEFAULT_TICK_LABEL_FONT);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotNull(markerAxisBand1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double0 = markerAxisBand1.getHeight(graphics2D0);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertEquals(0.0, double0, 0.01);
      
      markerAxisBand1.hashCode();
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand1, markerAxisBand0);
      
      markerAxisBand0.addMarker(intervalMarker0);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertEquals(9, font0.getSize());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double1 = markerAxisBand1.getHeight(graphics2D1);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertEquals(0.0, double1, 0.01);
      
      NumberAxis numberAxis2 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      Color color0 = intervalMarker0.getLabelBackgroundColor();
      assertEquals(100, color0.getAlpha());
      assertEquals(100, color0.getBlue());
      assertEquals(100, color0.getRed());
      assertEquals(1684300900, color0.getRGB());
      assertEquals(3, color0.getTransparency());
      assertEquals(100, color0.getGreen());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertNotNull(color0);
      
      intervalMarker0.setLabelBackgroundColor(color0);
      assertEquals(100, color0.getAlpha());
      assertEquals(100, color0.getBlue());
      assertEquals(100, color0.getRed());
      assertEquals(1684300900, color0.getRGB());
      assertEquals(3, color0.getTransparency());
      assertEquals(100, color0.getGreen());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      
      MarkerAxisBand markerAxisBand2 = new MarkerAxisBand(numberAxis2, 1.0, 1.0E-8, 1.0, 102.94143445, (Font) null);
      assertFalse(markerAxisBand2.equals((Object)markerAxisBand0));
      assertFalse(markerAxisBand2.equals((Object)markerAxisBand1));
      assertNotNull(markerAxisBand2);
      
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-1419523089)).when(fontMetrics0).getAscent();
      doReturn(500).when(fontMetrics0).getHeight();
      doReturn((-1419523089)).when(fontMetrics0).stringWidth(anyString());
      FontRenderContext fontRenderContext1 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext1).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext1).getFractionalMetricsHint();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D2).getFontMetrics(any(java.awt.Font.class));
      doReturn((Composite) null).when(graphics2D2).getComposite();
      doReturn(fontRenderContext0, fontRenderContext1).when(graphics2D2).getFontRenderContext();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        markerAxisBand0.draw(graphics2D2, rectangle2D0, rectangle2D1, 0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Font", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      double double0 = (-440.228585609088);
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0F, 0.0, numberAxis0.DEFAULT_TICK_MARK_PAINT, stroke0, numberAxis0.DEFAULT_AXIS_LINE_PAINT, stroke0, 0.0F);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertNotNull(intervalMarker0);
      
      Font font0 = intervalMarker0.getLabelFont();
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(9, font0.getSize());
      assertFalse(font0.isBold());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertNotNull(font0);
      
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.05, 1492.7, 0.05, 0.0, font0);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(9, font0.getSize());
      assertFalse(font0.isBold());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertNotNull(markerAxisBand0);
      
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerChangeEvent markerChangeEvent0 = mock(MarkerChangeEvent.class, new ViolatedAssumptionAnswer());
      intervalMarker0.notifyListeners(markerChangeEvent0);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 0.05, 1492.7, 268.0, 0.0F, numberAxis1.DEFAULT_TICK_LABEL_FONT);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotNull(markerAxisBand1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double1 = markerAxisBand1.getHeight(graphics2D0);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertEquals(0.0, double1, 0.01);
      
      boolean boolean0 = markerAxisBand0.equals(markerAxisBand1);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(9, font0.getSize());
      assertFalse(font0.isBold());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(boolean0);
      
      markerAxisBand0.addMarker(intervalMarker0);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(9, font0.getSize());
      assertFalse(font0.isBold());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      
      TextUtils.setUseFontMetricsGetStringBounds(true);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double2 = markerAxisBand1.getHeight(graphics2D1);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertEquals(0.0, double2, 0.01);
      
      IntervalMarker intervalMarker1 = new IntervalMarker(0.05, 2.0F);
      assertFalse(intervalMarker1.equals((Object)intervalMarker0));
      assertNull(intervalMarker1.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker1.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker1.getLabelOffsetType());
      assertEquals(0.8F, intervalMarker1.getAlpha(), 0.01F);
      assertEquals(2.0, intervalMarker1.getEndValue(), 0.01);
      assertEquals(0.05, intervalMarker1.getStartValue(), 0.01);
      assertNotNull(intervalMarker1);
      
      Graphics2D graphics2D2 = null;
      // Undeclared exception!
      try { 
        markerAxisBand0.getHeight((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.MarkerAxisBand", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.0F, 2.0F, 1010.06337, (-2470.86), numberAxis0.DEFAULT_TICK_LABEL_FONT);
      assertNotNull(markerAxisBand0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double0 = markerAxisBand0.getHeight(graphics2D0);
      assertEquals(0.0, double0, 0.01);
      
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 0.0, 2497.28909477, 0.05, 1.25, numberAxis1.DEFAULT_TICK_LABEL_FONT);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotNull(markerAxisBand1);
      
      boolean boolean0 = markerAxisBand0.equals(markerAxisBand1);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertFalse(boolean0);
      
      NumberAxis numberAxis2 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand2 = new MarkerAxisBand(numberAxis2, 45.0, 1.0E-8, 1282.824413899, 0.4, numberAxis2.DEFAULT_TICK_LABEL_FONT);
      assertFalse(markerAxisBand2.equals((Object)markerAxisBand0));
      assertFalse(markerAxisBand2.equals((Object)markerAxisBand1));
      assertNotNull(markerAxisBand2);
      
      boolean boolean1 = markerAxisBand0.equals(markerAxisBand2);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand2));
      assertFalse(markerAxisBand2.equals((Object)markerAxisBand0));
      assertFalse(markerAxisBand2.equals((Object)markerAxisBand1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertNotSame(markerAxisBand0, markerAxisBand2);
      assertNotSame(markerAxisBand2, markerAxisBand0);
      assertNotSame(markerAxisBand2, markerAxisBand1);
      assertFalse(boolean1);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.draw(graphics2D1, rectangle2D0, rectangle2D0, 0.05, 500);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand2));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertNotSame(markerAxisBand0, markerAxisBand2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(2450.591).when(range0).getLowerBound();
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range1).getUpperBound();
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      doReturn((-30.159723102122), (-3538.1600839724)).when(numberAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      doReturn(range0, range1).when(numberAxis0).getRange();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0F, (-652.5312854924), numberAxis0.DEFAULT_TICK_MARK_PAINT, stroke0, numberAxis0.DEFAULT_AXIS_LINE_PAINT, stroke0, 0.0F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertNotNull(intervalMarker0);
      
      Font font0 = intervalMarker0.getLabelFont();
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(9, font0.getSize());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertNotNull(font0);
      
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.05, 1.0, 0.05, 0.0, font0);
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(9, font0.getSize());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertNotNull(markerAxisBand0);
      
      TextUtils.setUseFontMetricsGetStringBounds(false);
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 0.05, (-652.5312854924), 268.0, 0.0F, numberAxis1.DEFAULT_TICK_LABEL_FONT);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotNull(markerAxisBand1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double0 = markerAxisBand1.getHeight(graphics2D0);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = markerAxisBand0.equals(markerAxisBand1);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(9, font0.getSize());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(boolean0);
      
      markerAxisBand1.hashCode();
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand1, markerAxisBand0);
      
      markerAxisBand0.addMarker(intervalMarker0);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(9, font0.getSize());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double1 = markerAxisBand1.getHeight(graphics2D1);
      assertEquals(double1, double0, 0.01);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertEquals(0.0, double1, 0.01);
      
      boolean boolean1 = markerAxisBand0.equals("123g");
      assertTrue(boolean1 == boolean0);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(9, font0.getSize());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(boolean1);
      
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      Composite composite0 = mock(Composite.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D2).getFontMetrics(any(java.awt.Font.class));
      doReturn(composite0).when(graphics2D2).getComposite();
      doReturn(fontRenderContext0).when(graphics2D2).getFontRenderContext();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        markerAxisBand0.draw(graphics2D2, rectangle2D0, rectangle2D0, (-3396.163), 2.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).getLowerBound();
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      doReturn(range0, (Range) null).when(numberAxis0).getRange();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0F, (-652.5312854924), numberAxis0.DEFAULT_TICK_MARK_PAINT, stroke0, numberAxis0.DEFAULT_AXIS_LINE_PAINT, stroke0, 0.0F);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertNotNull(intervalMarker0);
      
      Font font0 = intervalMarker0.getLabelFont();
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(9, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertNotNull(font0);
      
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.05, 1.0, 0.05, 0.0, font0);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(9, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertNotNull(markerAxisBand0);
      
      TextUtils.setUseFontMetricsGetStringBounds(false);
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 0.05, (-652.5312854924), 268.0, 0.0F, numberAxis1.DEFAULT_TICK_LABEL_FONT);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotNull(markerAxisBand1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double0 = markerAxisBand1.getHeight(graphics2D0);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = markerAxisBand0.equals(markerAxisBand1);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(9, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(boolean0);
      
      markerAxisBand1.hashCode();
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand1, markerAxisBand0);
      
      markerAxisBand0.addMarker(intervalMarker0);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(9, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double1 = markerAxisBand1.getHeight(graphics2D1);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertEquals(0.0, double1, 0.01);
      
      boolean boolean1 = markerAxisBand0.equals("123g");
      assertTrue(boolean1 == boolean0);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(9, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(boolean1);
      
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontRenderContext0).when(graphics2D2).getFontRenderContext();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        markerAxisBand0.draw(graphics2D2, rectangle2D0, rectangle2D0, (-3396.163), 2.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.MarkerAxisBand", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 2.0F, 0.0, (-1905.8402), (-2120.76803042), numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertNotNull(markerAxisBand0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.draw(graphics2D0, rectangle2D0, rectangle2D0, 0.0, (-2982.2823788));
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 1.0, numberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertNotNull(intervalMarker0);
      
      markerAxisBand0.addMarker(intervalMarker0);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontRenderContext0).when(graphics2D1).getFontRenderContext();
      double double0 = markerAxisBand0.getHeight(graphics2D1);
      assertEquals((-4010.63948042), double0, 0.01);
      
      markerAxisBand0.addMarker(intervalMarker0);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.05, 500, 500, 0.05, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertNotNull(markerAxisBand0);
      
      boolean boolean0 = markerAxisBand0.equals(markerAxisBand0);
      assertTrue(boolean0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double0 = markerAxisBand0.getHeight(graphics2D1);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = markerAxisBand0.getHeight(graphics2D0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      boolean boolean1 = markerAxisBand0.equals(markerAxisBand0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.draw(graphics2D2, (Rectangle2D) null, (Rectangle2D) null, 1.0, 1.0);
      boolean boolean2 = markerAxisBand0.equals((Object) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(500, 0.05);
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(500.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.05, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNotNull(intervalMarker0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      intervalMarker0.setLabel("e@Ry2}");
      assertEquals("e@Ry2}", intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(500.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.05, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      
      intervalMarker0.setLabelAnchor(rectangleAnchor0);
      assertEquals("e@Ry2}", intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(500.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.05, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      
      markerAxisBand0.addMarker(intervalMarker0);
      assertEquals("e@Ry2}", intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(500.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.05, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      
      markerAxisBand0.hashCode();
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontRenderContext0).when(graphics2D3).getFontRenderContext();
      double double2 = markerAxisBand0.getHeight(graphics2D3);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1014.0687499999999, double2, 0.01);
      
      Graphics2D graphics2D4 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontRenderContext) null).when(graphics2D4).getFontRenderContext();
      // Undeclared exception!
      try { 
        markerAxisBand0.draw(graphics2D4, (Rectangle2D) null, (Rectangle2D) null, 0.0F, 1014.0687499999999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Font", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 500, 2.0F, 1167.482, 0.05, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertNotNull(markerAxisBand0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1403.0240142488, 1417.4646);
      assertEquals(1417.4646, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(1403.0240142488, intervalMarker0.getStartValue(), 0.01);
      assertNotNull(intervalMarker0);
      
      markerAxisBand0.addMarker(intervalMarker0);
      assertEquals(1417.4646, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(1403.0240142488, intervalMarker0.getStartValue(), 0.01);
      
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontRenderContext0).when(graphics2D0).getFontRenderContext();
      double double0 = markerAxisBand0.getHeight(graphics2D0);
      assertEquals(1683.50075, double0, 0.01);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontRenderContext) null).when(graphics2D1).getFontRenderContext();
      // Undeclared exception!
      try { 
        markerAxisBand0.getHeight(graphics2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Font", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      doReturn((Range) null).when(numberAxis0).getRange();
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 2.0F, 2088.005212, 500, 4164.048319004921, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertNotNull(markerAxisBand0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 0.05, numberAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertEquals(0.05, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.05, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertNotNull(intervalMarker0);
      
      markerAxisBand0.addMarker(intervalMarker0);
      assertEquals(0.05, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.05, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      
      markerAxisBand0.addMarker(intervalMarker0);
      assertEquals(0.05, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.05, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontRenderContext0).when(graphics2D0).getFontRenderContext();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        markerAxisBand0.draw(graphics2D0, rectangle2D0, rectangle2D0, 0.0F, 500);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.MarkerAxisBand", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0F, (-652.5312854924), numberAxis0.DEFAULT_TICK_MARK_PAINT, stroke0, numberAxis0.DEFAULT_AXIS_LINE_PAINT, stroke0, 0.0F);
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertNotNull(intervalMarker0);
      
      Font font0 = intervalMarker0.getLabelFont();
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(9, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertNotNull(font0);
      
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.05, 1.0, 0.05, 0.0, font0);
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(9, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertNotNull(markerAxisBand0);
      
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 0.05, (-652.5312854924), 268.0, 0.0F, numberAxis1.DEFAULT_TICK_LABEL_FONT);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotNull(markerAxisBand1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double0 = markerAxisBand1.getHeight(graphics2D0);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = markerAxisBand0.equals(markerAxisBand1);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(9, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertFalse(boolean0);
      
      markerAxisBand1.hashCode();
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand1, markerAxisBand0);
      
      markerAxisBand0.addMarker(intervalMarker0);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(9, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double1 = markerAxisBand1.getHeight(graphics2D1);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertEquals(0.0, double1, 0.01);
      
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontRenderContext) null).when(graphics2D2).getFontRenderContext();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        markerAxisBand0.draw(graphics2D2, rectangle2D0, rectangle2D0, (-3396.163), 2.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Font", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = 0.0;
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand((NumberAxis) null, 0.0, 0.0, 0.0, 0.0, (Font) null);
      assertNotNull(markerAxisBand0);
      
      IntervalMarker intervalMarker0 = null;
      Graphics2D graphics2D0 = null;
      double double1 = markerAxisBand0.getHeight((Graphics2D) null);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      boolean boolean0 = markerAxisBand0.equals((Object) null);
      assertFalse(boolean0);
      
      markerAxisBand0.addMarker((IntervalMarker) null);
      markerAxisBand0.addMarker((IntervalMarker) null);
      TextUtils.setUseFontMetricsGetStringBounds(false);
      // Undeclared exception!
      try { 
        markerAxisBand0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.MarkerAxisBand", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, (-700.109247790995), 0.0, 1.0, 1.0, numberAxis0.DEFAULT_TICK_LABEL_FONT);
      assertNotNull(markerAxisBand0);
      
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 0.0, 426.6165877659546, 0.0, (-326.86), numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotNull(markerAxisBand1);
      
      boolean boolean0 = markerAxisBand0.equals(markerAxisBand1);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertFalse(boolean0);
      
      markerAxisBand0.hashCode();
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertNotSame(markerAxisBand0, markerAxisBand1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.0, 1.0E-8, 500, 1.0, numberAxis0.DEFAULT_TICK_LABEL_FONT);
      assertNotNull(markerAxisBand0);
      
      double double0 = markerAxisBand0.getHeight((Graphics2D) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 2.0F, 15.0, 0.05, (-540.3399802311), numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertNotNull(markerAxisBand0);
      
      markerAxisBand0.hashCode();
      IntervalMarker intervalMarker0 = new IntervalMarker(2628.419257073, 15.0, numberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertEquals(15.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(2628.419257073, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertNotNull(intervalMarker0);
      
      markerAxisBand0.addMarker(intervalMarker0);
      assertEquals(15.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(2628.419257073, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontRenderContext) null).when(graphics2D0).getFontRenderContext();
      // Undeclared exception!
      try { 
        markerAxisBand0.getHeight(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Font", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker((-202.1918), 0.0);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-202.1918), intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertNull(intervalMarker0.getLabel());
      assertNotNull(intervalMarker0);
      
      Font font0 = intervalMarker0.getLabelFont();
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-202.1918), intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertNull(intervalMarker0.getLabel());
      assertEquals(9, font0.getSize());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertNotNull(font0);
      
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.05, 0.05, (-886.7633), 0.0F, font0);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-202.1918), intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertNull(intervalMarker0.getLabel());
      assertEquals(9, font0.getSize());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertNotNull(markerAxisBand0);
      
      TextUtils.setUseFontMetricsGetStringBounds(true);
      markerAxisBand0.hashCode();
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-202.1918), intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertNull(intervalMarker0.getLabel());
      assertEquals(9, font0.getSize());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      
      boolean boolean0 = markerAxisBand0.equals(intervalMarker0);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-202.1918), intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertNull(intervalMarker0.getLabel());
      assertEquals(9, font0.getSize());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertFalse(boolean0);
      
      markerAxisBand0.addMarker(intervalMarker0);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-202.1918), intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertNull(intervalMarker0.getLabel());
      assertEquals(9, font0.getSize());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      
      markerAxisBand0.hashCode();
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-202.1918), intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertNull(intervalMarker0.getLabel());
      assertEquals(9, font0.getSize());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      
      markerAxisBand0.addMarker(intervalMarker0);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-202.1918), intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertNull(intervalMarker0.getLabel());
      assertEquals(9, font0.getSize());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      
      boolean boolean1 = markerAxisBand0.equals(font0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-202.1918), intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertNull(intervalMarker0.getLabel());
      assertEquals(9, font0.getSize());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertFalse(boolean1);
      
      markerAxisBand0.addMarker(intervalMarker0);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-202.1918), intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertNull(intervalMarker0.getLabel());
      assertEquals(9, font0.getSize());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontRenderContext) null).when(graphics2D0).getFontRenderContext();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        markerAxisBand0.draw(graphics2D0, rectangle2D0, rectangle2D1, 0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Font", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.05, 1.0E-8, 0.0F, 0.0, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertNotNull(markerAxisBand0);
      
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 0.0, (-1.0), 0.05, (-1.0), numberAxis0.DEFAULT_TICK_LABEL_FONT);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotNull(markerAxisBand1);
      
      boolean boolean0 = markerAxisBand0.equals(markerAxisBand1);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.0, (-2485.763549746573), 171.0333676, 500, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertNotNull(markerAxisBand0);
      
      markerAxisBand0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 1.0E-8, (-2777.53534), 0.0F, 1.0E-8, numberAxis0.DEFAULT_TICK_LABEL_FONT);
      assertNotNull(markerAxisBand0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.draw(graphics2D0, rectangle2D0, rectangle2D0, (-2777.53534), 1818.233);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, (-1494.0), 0.0, 0.05, 500, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertNotNull(markerAxisBand0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(180.0, 2.0F, numberAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertNull(intervalMarker0.getLabel());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(180.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(2.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNotNull(intervalMarker0);
      
      markerAxisBand0.addMarker(intervalMarker0);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertNull(intervalMarker0.getLabel());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(180.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(2.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontRenderContext) null).when(graphics2D0).getFontRenderContext();
      // Undeclared exception!
      try { 
        markerAxisBand0.getHeight(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Font", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 500, 0.0, 0.0F, 2.0F, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertNotNull(markerAxisBand0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double0 = markerAxisBand0.getHeight(graphics2D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 2.0F, 0.05, 0.05, 0.0F, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertNotNull(markerAxisBand0);
      
      boolean boolean0 = markerAxisBand0.equals((Object) null);
      assertFalse(boolean0);
      
      markerAxisBand0.addMarker((IntervalMarker) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker((-1.0), (-1.0));
      assertEquals((-1.0), intervalMarker0.getStartValue(), 0.01);
      assertEquals((-1.0), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertNull(intervalMarker0.getLabel());
      assertNotNull(intervalMarker0);
      
      Font font0 = intervalMarker0.getLabelFont();
      assertEquals((-1.0), intervalMarker0.getStartValue(), 0.01);
      assertEquals((-1.0), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertNull(intervalMarker0.getLabel());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(9, font0.getSize());
      assertFalse(font0.isBold());
      assertNotNull(font0);
      
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand((NumberAxis) null, 0.0, 0.0, 0.0, 0.0, font0);
      assertEquals((-1.0), intervalMarker0.getStartValue(), 0.01);
      assertEquals((-1.0), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertNull(intervalMarker0.getLabel());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(9, font0.getSize());
      assertFalse(font0.isBold());
      assertNotNull(markerAxisBand0);
      
      boolean boolean0 = markerAxisBand0.equals(intervalMarker0);
      assertEquals((-1.0), intervalMarker0.getStartValue(), 0.01);
      assertEquals((-1.0), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertNull(intervalMarker0.getLabel());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(9, font0.getSize());
      assertFalse(font0.isBold());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, (-2222.238736186545), (-1995.835432217947), (-2028.42416886706), (-853.7382212), numberAxis0.DEFAULT_TICK_LABEL_FONT);
      assertNotNull(markerAxisBand0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 1.0, numberAxis0.DEFAULT_AXIS_LINE_PAINT, numberAxis0.DEFAULT_AXIS_LINE_STROKE, numberAxis0.DEFAULT_AXIS_LINE_PAINT, numberAxis0.DEFAULT_TICK_MARK_STROKE, 0.1F);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.1F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.05, intervalMarker0.getStartValue(), 0.01);
      assertNotNull(intervalMarker0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.draw(graphics2D0, rectangle2D0, rectangle2D0, (-1995.835432217947), (-2028.42416886706));
      markerAxisBand0.addMarker(intervalMarker0);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.1F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.05, intervalMarker0.getStartValue(), 0.01);
      
      boolean boolean0 = markerAxisBand0.equals(intervalMarker0);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.1F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.05, intervalMarker0.getStartValue(), 0.01);
      assertFalse(boolean0);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontRenderContext) null).when(graphics2D1).getFontRenderContext();
      // Undeclared exception!
      try { 
        markerAxisBand0.getHeight(graphics2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Font", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(1146.3071796).when(range0).getLowerBound();
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((-315.5)).when(range1).getUpperBound();
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      doReturn(1146.3071796, (-1.0)).when(numberAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      doReturn(range0, range1).when(numberAxis0).getRange();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0F, (-652.5312854924), numberAxis0.DEFAULT_TICK_MARK_PAINT, stroke0, numberAxis0.DEFAULT_AXIS_LINE_PAINT, stroke0, 0.0F);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertNotNull(intervalMarker0);
      
      Font font0 = intervalMarker0.getLabelFont();
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(9, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertEquals("SansSerif", font0.getName());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertNotNull(font0);
      
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.05, 1.0, 0.05, 0.0, font0);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(9, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertEquals("SansSerif", font0.getName());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertNotNull(markerAxisBand0);
      
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 0.05, (-652.5312854924), 254.46684659674696, 0.0F, numberAxis1.DEFAULT_TICK_LABEL_FONT);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotNull(markerAxisBand1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double0 = markerAxisBand1.getHeight(graphics2D0);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertEquals(0.0, double0, 0.01);
      
      markerAxisBand1.hashCode();
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand1, markerAxisBand0);
      
      markerAxisBand0.addMarker(intervalMarker0);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(9, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertEquals("SansSerif", font0.getName());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double1 = markerAxisBand1.getHeight(graphics2D1);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertEquals(0.0, double1, 0.01);
      
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(500).when(fontMetrics0).getAscent();
      doReturn((-654)).when(fontMetrics0).getHeight();
      doReturn(2130214920).when(fontMetrics0).stringWidth(anyString());
      NumberAxis numberAxis2 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand2 = new MarkerAxisBand(numberAxis2, (-1846.591719199933), (-1.0), 2.0F, 0.0F, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertFalse(markerAxisBand2.equals((Object)markerAxisBand1));
      assertFalse(markerAxisBand2.equals((Object)markerAxisBand0));
      assertNotNull(markerAxisBand2);
      
      FontRenderContext fontRenderContext1 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext1).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext1).getFractionalMetricsHint();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D2).getFontMetrics(any(java.awt.Font.class));
      doReturn((Composite) null).when(graphics2D2).getComposite();
      doReturn(fontRenderContext0, fontRenderContext1).when(graphics2D2).getFontRenderContext();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker1 = new IntervalMarker((-124.0), 2.0F, numberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertFalse(intervalMarker1.equals((Object)intervalMarker0));
      assertEquals(0.8F, intervalMarker1.getAlpha(), 0.01F);
      assertEquals(2.0, intervalMarker1.getEndValue(), 0.01);
      assertEquals((-124.0), intervalMarker1.getStartValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker1.getLabelAnchor());
      assertNull(intervalMarker1.getLabel());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker1.getLabelOffsetType());
      assertNotNull(intervalMarker1);
      
      boolean boolean0 = markerAxisBand0.equals(intervalMarker1);
      assertFalse(intervalMarker0.equals((Object)intervalMarker1));
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand2));
      assertFalse(intervalMarker1.equals((Object)intervalMarker0));
      assertNotSame(intervalMarker0, intervalMarker1);
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertNotSame(markerAxisBand0, markerAxisBand2);
      assertNotSame(intervalMarker1, intervalMarker0);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-652.5312854924), intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(9, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertEquals("SansSerif", font0.getName());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals(0.8F, intervalMarker1.getAlpha(), 0.01F);
      assertEquals(2.0, intervalMarker1.getEndValue(), 0.01);
      assertEquals((-124.0), intervalMarker1.getStartValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker1.getLabelAnchor());
      assertNull(intervalMarker1.getLabel());
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker1.getLabelOffsetType());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        markerAxisBand0.draw(graphics2D2, rectangle2D0, rectangle2D1, 0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Font", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 500, 500, 0.05, 0.05, numberAxis0.DEFAULT_TICK_LABEL_FONT);
      assertNotNull(markerAxisBand0);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.draw((Graphics2D) null, rectangle2D0, rectangle2D0, (-447.99792307413), (-1332.8284426740565));
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.draw((Graphics2D) null, rectangle2D1, rectangle2D1, (-980.0), 0.0F);
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 500, 1.0E-8, 2.0F, 0.05, numberAxis0.DEFAULT_TICK_LABEL_FONT);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotNull(markerAxisBand1);
      
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand1.draw((Graphics2D) null, rectangle2D2, rectangle2D2, 0.05, 500);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand1, markerAxisBand0);
      
      TextUtils.setUseFontMetricsGetStringBounds(false);
      double double0 = markerAxisBand1.getHeight((Graphics2D) null);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertEquals(0.0, double0, 0.01);
      
      TextUtils.setUseFontMetricsGetStringBounds(false);
      boolean boolean0 = markerAxisBand1.equals(markerAxisBand0);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertFalse(boolean0);
      
      boolean boolean1 = markerAxisBand0.equals(markerAxisBand1);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertFalse(boolean1);
      
      markerAxisBand0.draw((Graphics2D) null, (Rectangle2D) null, (Rectangle2D) null, 0.05, 1.0);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      
      boolean boolean2 = markerAxisBand1.equals((Object) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertFalse(boolean2);
      
      boolean boolean3 = markerAxisBand0.equals((Object) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertFalse(boolean3);
      
      double double1 = markerAxisBand1.getHeight((Graphics2D) null);
      assertEquals(double1, double0, 0.01);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 2.0F, 0.05, 2.0F, 2.0F, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertNotNull(markerAxisBand0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, (-939.1484924), (-939.1484924), (-1042.70849934393), 2568.40247611807, numberAxis1.DEFAULT_AXIS_LABEL_FONT);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotNull(markerAxisBand1);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, (-939.1484924));
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals((-939.1484924), intervalMarker0.getEndValue(), 0.01);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.05, intervalMarker0.getStartValue(), 0.01);
      assertNotNull(intervalMarker0);
      
      IntervalMarker intervalMarker1 = new IntervalMarker(2.0F, (-1042.70849934393));
      assertFalse(intervalMarker1.equals((Object)intervalMarker0));
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker1.getLabelAnchor());
      assertNull(intervalMarker1.getLabel());
      assertEquals(0.8F, intervalMarker1.getAlpha(), 0.01F);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker1.getLabelOffsetType());
      assertEquals(2.0, intervalMarker1.getStartValue(), 0.01);
      assertEquals((-1042.70849934393), intervalMarker1.getEndValue(), 0.01);
      assertNotNull(intervalMarker1);
      
      intervalMarker0.setLabelFont(numberAxis0.DEFAULT_TICK_LABEL_FONT);
      assertFalse(intervalMarker0.equals((Object)intervalMarker1));
      assertNotSame(intervalMarker0, intervalMarker1);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals((-939.1484924), intervalMarker0.getEndValue(), 0.01);
      assertEquals(LengthAdjustmentType.CONTRACT, intervalMarker0.getLabelOffsetType());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.05, intervalMarker0.getStartValue(), 0.01);
      
      boolean boolean0 = markerAxisBand0.equals(markerAxisBand1);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertFalse(boolean0);
      
      markerAxisBand0.draw(graphics2D0, rectangle2D0, rectangle2D1, 985.85504, (-939.1484924));
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double0 = markerAxisBand0.getHeight(graphics2D1);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertEquals(0.0, double0, 0.01);
      
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double1 = markerAxisBand0.getHeight(graphics2D2);
      assertEquals(double1, double0, 0.01);
      assertFalse(markerAxisBand0.equals((Object)markerAxisBand1));
      assertNotSame(markerAxisBand0, markerAxisBand1);
      assertEquals(0.0, double1, 0.01);
      
      NumberAxis numberAxis2 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = markerAxisBand1.equals(markerAxisBand1);
      assertFalse(boolean1 == boolean0);
      assertFalse(markerAxisBand1.equals((Object)markerAxisBand0));
      assertNotSame(markerAxisBand1, markerAxisBand0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(1146.3071796).when(range0).getLowerBound();
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(1146.3071796).when(range1).getUpperBound();
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      doReturn(1146.3071796, 5164.0).when(numberAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      doReturn(range0, range1).when(numberAxis0).getRange();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0F, (-652.5312854924), numberAxis0.DEFAULT_TICK_MARK_PAINT, stroke0, numberAxis0.DEFAULT_AXIS_LINE_PAINT, stroke0, 0.0F);
      Font font0 = intervalMarker0.getLabelFont();
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.05, 1.0, 0.05, 0.0, font0);
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 0.05, (-652.5312854924), 254.46684659674696, 0.0F, numberAxis1.DEFAULT_TICK_LABEL_FONT);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand1.getHeight(graphics2D0);
      markerAxisBand1.hashCode();
      markerAxisBand0.addMarker(intervalMarker0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand1.getHeight(graphics2D1);
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D2).getFontMetrics(any(java.awt.Font.class));
      doReturn((Composite) null).when(graphics2D2).getComposite();
      doReturn(fontRenderContext0, (FontRenderContext) null).when(graphics2D2).getFontRenderContext();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        markerAxisBand0.draw(graphics2D2, rectangle2D0, rectangle2D1, 0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Font", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(1146.3071796).when(range0).getLowerBound();
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range1).getUpperBound();
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      doReturn(1146.3071796, 5164.0).when(numberAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      doReturn(range0, range1).when(numberAxis0).getRange();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0F, (-652.5312854924), numberAxis0.DEFAULT_TICK_MARK_PAINT, stroke0, numberAxis0.DEFAULT_AXIS_LINE_PAINT, stroke0, 0.0F);
      Font font0 = intervalMarker0.getLabelFont();
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.05, 1.0, 0.05, 0.0, font0);
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 0.05, (-652.5312854924), 254.46684659674696, 0.0F, numberAxis1.DEFAULT_TICK_LABEL_FONT);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand1.getHeight(graphics2D0);
      markerAxisBand1.hashCode();
      markerAxisBand0.addMarker(intervalMarker0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand1.getHeight(graphics2D1);
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D2).getFontMetrics(any(java.awt.Font.class));
      doReturn((Composite) null).when(graphics2D2).getComposite();
      doReturn(fontRenderContext0, (FontRenderContext) null).when(graphics2D2).getFontRenderContext();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        markerAxisBand0.draw(graphics2D2, rectangle2D0, rectangle2D1, 0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Font", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0E-8, (-1.0), numberAxis0.DEFAULT_TICK_LABEL_PAINT, numberAxis0.DEFAULT_AXIS_LINE_STROKE, numberAxis0.DEFAULT_TICK_MARK_PAINT, numberAxis0.DEFAULT_AXIS_LINE_STROKE, 0.0F);
      intervalMarker0.setLabelOffset(numberAxis0.DEFAULT_TICK_LABEL_INSETS);
      assertEquals((-1.0), intervalMarker0.getEndValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 500, 1.0E-8, 48.36551565321, 48.36551565321, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.getHeight(graphics2D0);
      TextUtils.setUseFontMetricsGetStringBounds(true);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 48.36551565321);
      markerAxisBand0.addMarker(intervalMarker0);
      markerAxisBand0.addMarker(intervalMarker0);
      MarkerChangeEvent markerChangeEvent0 = mock(MarkerChangeEvent.class, new ViolatedAssumptionAnswer());
      intervalMarker0.notifyListeners(markerChangeEvent0);
      markerAxisBand0.addMarker(intervalMarker0);
      markerAxisBand0.equals("");
      markerAxisBand0.addMarker(intervalMarker0);
      assertEquals(48.36551565321, intervalMarker0.getEndValue(), 0.01);
  }
}
