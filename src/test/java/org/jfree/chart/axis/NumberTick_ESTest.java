/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:35:12 GMT 2019
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.axis.NumberTick;
import org.jfree.chart.axis.TickType;
import org.jfree.chart.ui.TextAnchor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NumberTick_ESTest extends NumberTick_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TickType tickType0 = TickType.MINOR;
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      NumberTick numberTick0 = new NumberTick(tickType0, 842.042, "org.jfree.chart.axis.NumberTick", textAnchor0, textAnchor0, 842.042);
      Number number0 = numberTick0.getNumber();
      assertEquals(842.042, number0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TickType tickType0 = TickType.MAJOR;
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      NumberTick numberTick0 = new NumberTick(tickType0, (-1.0), "9abKbdt:z", textAnchor0, textAnchor0, (-1.0));
      Number number0 = numberTick0.getNumber();
      assertEquals((-1.0), number0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TickType tickType0 = TickType.MINOR;
      NumberTick numberTick0 = null;
      try {
        numberTick0 = new NumberTick(tickType0, (-1.0), "TextAnchor.TOP_LEFT", (TextAnchor) null, (TextAnchor) null, 3588.520068);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'textAnchor' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TickType tickType0 = TickType.MINOR;
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      NumberTick numberTick0 = new NumberTick(tickType0, 0.0, "", textAnchor0, textAnchor0, 0.0);
      Number number0 = numberTick0.getNumber();
      assertEquals(0.0, number0);
      
      TextAnchor textAnchor1 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      NumberTick numberTick1 = new NumberTick(number0, "", textAnchor1, textAnchor1, 0.0);
      assertEquals(0.0, numberTick1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NumberTick numberTick0 = null;
      try {
        numberTick0 = new NumberTick((Number) null, "G", (TextAnchor) null, (TextAnchor) null, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberTick", e);
      }
  }
}
