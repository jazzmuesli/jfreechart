/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:02:12 GMT 2019
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.MultipleGradientPaint;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.text.AttributedCharacterIterator;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.time.chrono.ChronoLocalDate;
import java.util.Date;
import java.util.Hashtable;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.util.UnitType;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodAxisLabelInfo_ESTest extends PeriodAxisLabelInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Locale locale0 = Locale.TAIWAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0, locale0);
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-2628.0), 0, (-2628.0), (-1934.483607012978));
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Font font0 = styleContext0.getFont("<,|^*Q\"BMy`A~U}", 1511, (-984));
      Color color0 = Color.gray;
      BasicStroke basicStroke0 = (BasicStroke)PeriodAxisLabelInfo.DEFAULT_DIVIDER_STROKE;
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, rectangleInsets0, font0, color0, false, basicStroke0, color0);
      Color color1 = (Color)periodAxisLabelInfo0.getLabelPaint();
      assertEquals(128, color1.getGreen());
      assertFalse(periodAxisLabelInfo0.getDrawDividers());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      DateFormat dateFormat0 = DateFormat.getInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      periodAxisLabelInfo0.getPeriodClass();
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<MultipleGradientPaint.CycleMethod> class0 = MultipleGradientPaint.CycleMethod.class;
      DateFormat dateFormat0 = DateFormat.getDateInstance(1);
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      periodAxisLabelInfo0.getPeriodClass();
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Locale locale0 = Locale.TAIWAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0, locale0);
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-2628.0), 0, (-2628.0), (-1934.483607012978));
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Font font0 = styleContext0.getFont("<,|^*Q\"BMy`A~U}", 1511, (-984));
      Color color0 = Color.gray;
      BasicStroke basicStroke0 = (BasicStroke)PeriodAxisLabelInfo.DEFAULT_DIVIDER_STROKE;
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, rectangleInsets0, font0, color0, false, basicStroke0, color0);
      Font font1 = periodAxisLabelInfo0.getLabelFont();
      assertFalse(periodAxisLabelInfo0.getDrawDividers());
      assertEquals("<,|^*Q\"BMy`A~U}", font1.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(dateFormat0).clone();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      // Undeclared exception!
      try { 
        periodAxisLabelInfo0.getDateFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxisLabelInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<String> class0 = String.class;
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      Hashtable<AttributedCharacterIterator.Attribute, Month> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Month>();
      Font font0 = new Font(hashtable0);
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      PeriodAxisLabelInfo periodAxisLabelInfo0 = null;
      try {
        periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, rectangleInsets0, font0, systemColor0, false, (Stroke) null, systemColor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dividerStroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      mockSimpleDateFormat0.setNumberFormat((NumberFormat) null);
      PeriodAxisLabelInfo periodAxisLabelInfo0 = null;
      try {
        periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, mockSimpleDateFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      PeriodAxisLabelInfo periodAxisLabelInfo0 = null;
      try {
        periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, (DateFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dateFormat' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Locale locale0 = Locale.TAIWAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0, locale0);
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-2628.0), 0, (-2628.0), (-1934.483607012978));
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Font font0 = styleContext0.getFont("<,|^*Q\"BMy`A~U}", 1511, (-984));
      Color color0 = Color.gray;
      BasicStroke basicStroke0 = (BasicStroke)PeriodAxisLabelInfo.DEFAULT_DIVIDER_STROKE;
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, rectangleInsets0, font0, color0, false, basicStroke0, color0);
      boolean boolean0 = periodAxisLabelInfo0.getDrawDividers();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<String> class0 = String.class;
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      boolean boolean0 = periodAxisLabelInfo0.equals(periodAxisLabelInfo0);
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Minute> class0 = Minute.class;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(3, 3);
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      boolean boolean0 = periodAxisLabelInfo0.equals(periodAxisLabelInfo0.DEFAULT_FONT);
      assertFalse(boolean0);
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<String> class0 = String.class;
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      periodAxisLabelInfo0.getLabelFont();
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      boolean boolean0 = periodAxisLabelInfo0.getDrawDividers();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      Color color0 = (Color)periodAxisLabelInfo0.getLabelPaint();
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
      assertEquals(0, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<String> class0 = String.class;
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      PeriodAxisLabelInfo periodAxisLabelInfo1 = (PeriodAxisLabelInfo)periodAxisLabelInfo0.clone();
      boolean boolean0 = periodAxisLabelInfo0.equals(periodAxisLabelInfo1);
      assertTrue(periodAxisLabelInfo1.getDrawDividers());
      assertTrue(boolean0);
      assertNotSame(periodAxisLabelInfo1, periodAxisLabelInfo0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Minute> class0 = Minute.class;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(3, 3);
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      periodAxisLabelInfo0.hashCode();
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<String> class0 = String.class;
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      periodAxisLabelInfo0.getPadding();
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<String> class0 = String.class;
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      periodAxisLabelInfo0.getDividerStroke();
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Minute> class0 = Minute.class;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(3, 3);
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      Color color0 = (Color)periodAxisLabelInfo0.getDividerPaint();
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
      assertEquals(128, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Minute> class0 = Minute.class;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(3, 3);
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      MockDate mockDate0 = new MockDate(3, 3, 3);
      Locale locale0 = Locale.JAPANESE;
      periodAxisLabelInfo0.createInstance(mockDate0, (TimeZone) null, locale0);
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Minute> class0 = Minute.class;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(3, 3);
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      periodAxisLabelInfo0.getDateFormat();
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
  }
}
