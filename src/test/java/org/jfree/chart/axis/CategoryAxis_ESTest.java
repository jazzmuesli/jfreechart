/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 20:47:17 GMT 2019
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.util.List;
import java.util.Stack;
import javax.swing.JList;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPosition;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.CategoryLabelWidthType;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.text.TextBlock;
import org.jfree.chart.text.TextBlockAnchor;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class CategoryAxis_ESTest extends CategoryAxis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(1022.6, (-1.7976931348623157E308), (-1.7976931348623157E308), (-1.7976931348623157E308), 231.05, (-1.7976931348623157E308));
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      extendedCategoryAxis0.refreshTicks((Graphics2D) null, (AxisState) null, rectangle2D0, rectangleEdge0);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("{ 2BNhj}U");
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((-1.5707963267948966), 2.0F, 0.05, 0.0F);
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      double double0 = extendedCategoryAxis0.getCategorySeriesMiddle(498, 498, 498, (-273), (double) 498, rectangle2D0, rectangleEdge0);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals((-1.523107422194639), double0, 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("LKL7VGX2QxX5i<uN");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = categoryAxis0.DEFAULT_TICK_LABEL_INSETS.createOutsetRectangle((Rectangle2D) rectangle2D_Double0);
      Rectangle2D rectangle2D1 = rectangle2D_Double0.createUnion(rectangle2D0);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      double double0 = categoryAxis0.getCategorySeriesMiddle(0, 0, 2085, 1, (double) 0, rectangle2D1, rectangleEdge0);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals((-4.440892098500626E-16), double0, 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("70");
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Rectangle rectangle0 = new Rectangle((-5), (-5), (-5), 4);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      double double0 = subCategoryAxis0.getCategorySeriesMiddle((Comparable) "@S<g", (Comparable) "70", (CategoryDataset) defaultCategoryDataset0, 3588.55944322376, (Rectangle2D) rectangle0, rectangleEdge0);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      CategoryLabelPositions categoryLabelPositions0 = CategoryLabelPositions.createUpRotationLabelPositions(0.0);
      categoryAxis0.setCategoryLabelPositions(categoryLabelPositions0);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setMaximumCategoryLabelLines((-568));
      int int0 = categoryAxis0.getMaximumCategoryLabelLines();
      assertEquals((-568), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("LKL7VGX2QxX5i<uN");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.setRect(0.2, 0.0, 0.0, 1.5707963267948966);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      double double0 = categoryAxis0.getCategorySeriesMiddle(0, 0, 2085, 1, (double) 0, (Rectangle2D) rectangle2D_Double0, rectangleEdge0);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.2, double0, 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      double double0 = categoryAxis0.getCategoryMiddle(89, 1624, (Rectangle2D) rectangle2D_Double0, rectangleEdge0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(0.2, 0.0, 0.05, 0.2, 2.0F, 0.05);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      double double0 = categoryAxis0.getCategoryMiddle(89, 1624, rectangle2D0, rectangleEdge0);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.019908986126160585, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      
      subCategoryAxis0.setCategoryMargin(0.0F);
      double double0 = subCategoryAxis0.getCategoryMargin();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Tv:=2l!U&%j2M4CE=");
      extendedCategoryAxis0.setCategoryMargin((-1.7976931348623157E308));
      double double0 = extendedCategoryAxis0.getCategoryMargin();
      assertEquals((-1.7976931348623157E308), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      categoryAxis0.getCategoryLabelURL("");
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(32L);
      categoryAxis0.addCategoryLabelToolTip(fixedMillisecond0, "");
      categoryAxis0.getCategoryLabelToolTip(fixedMillisecond0);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      CategoryAnchor categoryAnchor0 = CategoryAnchor.START;
      Line2D.Float line2D_Float0 = new Line2D.Float(0.0F, 2.0F, (-4225.9F), (-1900.0F));
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      double double0 = categoryAxis0.getCategoryJava2DCoordinate(categoryAnchor0, 550, 550, rectangle2D0, rectangleEdge0);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals((-92.4071038251368), double0, 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(lookupPaintScale0, logarithmicAxis0);
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(1800, 0.0F, (-869.0F), 30);
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      double double0 = extendedCategoryAxis0.getCategoryEnd(3350, 3350, rectangle2D0, paintScaleLegend0.DEFAULT_POSITION);
      assertEquals(974.2165218220632, double0, 0.01);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(0.2, 0.0, 0.05, 0.2, 2.0F, 0.05);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      double double0 = categoryAxis0.getCategoryEnd((-2611), 453, rectangle2D0, rectangleEdge0);
      assertEquals((-1.0276844634589462), double0, 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("ktZ&(KoZ8nr'Qkm@-");
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart(piePlot3D0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea();
      double double0 = subCategoryAxis0.calculateCategorySize(0, rectangle2D0, rectangleEdge0);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(0.2, 0.0, 0.05, 0.2, 2.0F, 0.05);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      double double0 = categoryAxis0.calculateCategorySize((-547), rectangle2D0, rectangleEdge0);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.18, double0, 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      Rectangle rectangle0 = new Rectangle();
      Rectangle2D rectangle2D0 = categoryAxis0.DEFAULT_AXIS_LABEL_INSETS.createInsetRectangle((Rectangle2D) rectangle0, true, true);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      double double0 = categoryAxis0.calculateCategorySize(23, rectangle2D0, rectangleEdge0);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals((-0.18260869565217389), double0, 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      double double0 = categoryAxis0.calculateCategoryGapSize(3571, rectangle2D0, rectangleEdge0);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(0.2, 0.0, 0.05, 0.2, 2.0F, 0.05);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      double double0 = categoryAxis0.calculateCategoryGapSize(89, rectangle2D0, rectangleEdge0);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4.5454545454545465E-4, double0, 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      JList<DefaultTableModel> jList0 = new JList<DefaultTableModel>();
      Color color0 = jList0.getSelectionForeground();
      // Undeclared exception!
      try { 
        categoryAxis0.setTickLabelPaint((Comparable) null, (Paint) color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      RingPlot ringPlot0 = new RingPlot();
      // Undeclared exception!
      try { 
        categoryAxis0.setTickLabelFont((Comparable) null, ringPlot0.DEFAULT_LABEL_FONT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      // Undeclared exception!
      try { 
        subCategoryAxis0.removeCategoryLabelToolTip((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      // Undeclared exception!
      try { 
        categoryAxis0.getTickLabelPaint((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      // Undeclared exception!
      try { 
        categoryAxis0.getTickLabelFont((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      Number[][] numberArray0 = new Number[5][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea((int) (byte)0, (int) (byte)106);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.getCategorySeriesMiddle((Comparable) null, (Comparable) null, (CategoryDataset) defaultIntervalCategoryDataset0, (double) (byte)0, rectangle2D0, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      // Undeclared exception!
      try { 
        categoryAxis0.getCategorySeriesMiddle((-316), 0, 0, 453, 0.0, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      // Undeclared exception!
      try { 
        categoryAxis0.getCategoryLabelToolTip((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        categoryAxis0.getCategoryEnd(850, 1556, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("V&;P8fValSg:!'Sj");
      TextBlock textBlock0 = new TextBlock();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.CENTER_LEFT;
      CategoryLabelWidthType categoryLabelWidthType0 = CategoryLabelWidthType.CATEGORY;
      CategoryLabelPosition categoryLabelPosition0 = new CategoryLabelPosition(rectangleAnchor0, textBlockAnchor0, categoryLabelWidthType0, 2.0F);
      textBlock0.addLine("V&;P8fValSg:!'Sj", subCategoryAxis0.DEFAULT_AXIS_LABEL_FONT, subCategoryAxis0.DEFAULT_AXIS_LINE_PAINT);
      // Undeclared exception!
      try { 
        subCategoryAxis0.calculateTextBlockHeight(textBlock0, categoryLabelPosition0, (Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("vJIHE2M1%5");
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      // Undeclared exception!
      try { 
        subCategoryAxis0.calculateCategorySize(1, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      // Undeclared exception!
      try { 
        categoryAxis0.calculateCategoryGapSize((-758), (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double();
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      categoryAxis0.refreshTicks((Graphics2D) null, (AxisState) null, rectangle2D0, rectangleEdge0);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("{ 2BNhj}U");
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((-1.5707963267948966), 2.0F, 0.05, 0.0F);
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.getCategoryMiddle((-273), 502, rectangle2D0, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -273
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      // Undeclared exception!
      try { 
        categoryAxis0.getCategoryMiddle(0, 0, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: 0
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double((-3011.861284853), 0.0, 0.05, (-3011.861284853), 2.0F, 0.05);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      double double0 = categoryAxis0.getCategoryMiddle(89, 1624, rectangle2D0, rectangleEdge0);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals((-299.8155226702928), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(0.2, 0.0, 0.05, 0.2, 2.0F, 0.05);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      double double0 = categoryAxis0.getCategoryStart(189, 89, rectangle2D0, rectangleEdge0);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.39321246169560775, double0, 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("LKL7VGX2QxX5i<uN");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      double double0 = categoryAxis0.getCategoryStart((-3895), 1090, rectangle2D_Double0, rectangleEdge0);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(0.2, 0.0, 0.05, 0.2, 2.0F, 0.05);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      double double0 = categoryAxis0.getCategoryStart((-273), (-547), rectangle2D0, rectangleEdge0);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals((-12.0825), double0, 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("state");
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      // Undeclared exception!
      try { 
        categoryAxis0.getCategoryStart((-1), (-5), (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Color color0 = (Color)categoryAxis0.getTickLabelPaint((Comparable) 0.0F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNotNull(color0);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("lM#%;.W8chT].shd=0#");
      Font font0 = categoryAxis0.getTickLabelFont((Comparable) "lM#%;.W8chT].shd=0#");
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertNotNull(font0);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(10, font0.getSize());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      double double0 = categoryAxis0.getLowerMargin();
      assertEquals(0.05, double0, 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      CategoryAxis categoryAxis1 = (CategoryAxis)categoryAxis0.clone();
      boolean boolean0 = categoryAxis0.equals(categoryAxis1);
      assertEquals(4, categoryAxis1.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis1.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis1.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(categoryAxis1, categoryAxis0);
      assertEquals(0.2, categoryAxis1.getCategoryMargin(), 0.01);
      assertEquals(1, categoryAxis1.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis1.getLowerMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      boolean boolean0 = categoryAxis0.equals(categoryAxis0);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      boolean boolean0 = categoryAxis0.equals((Object) null);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double();
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      categoryAxis0.drawTickMarks((Graphics2D) null, 0.6428571428571429, rectangle2D0, rectangleEdge0, (AxisState) null);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double();
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      rectangle2D0.setRect((double) 2.0F, (-743.2894391733), 0.0, 0.2);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        categoryAxis0.refreshTicks((Graphics2D) null, (AxisState) null, rectangle2D0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("ktZ&(KoZ8nr'Qkm@-");
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      AxisState axisState0 = new AxisState(0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      subCategoryAxis0.drawCategoryLabels((Graphics2D) null, rectangle0, rectangle0, rectangleEdge0, axisState0, plotRenderingInfo0);
      assertEquals((-4.0), axisState0.getCursor(), 0.01);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Tv:=2l!U&%j2M4CE=");
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(32L, (-2836.381F), 0.0F, 0.0F, 2595.5F, 113.0667F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.draw((Graphics2D) null, (-78.25875705039877), rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("LKL7VGX2QxX5i<uN");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      double double0 = categoryAxis0.getCategorySeriesMiddle(0, 0, 2085, 1, (double) 0, (Rectangle2D) rectangle2D_Double0, rectangleEdge0);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("/1M0kN7Y!.^|`J{KW@");
      CategoryAnchor categoryAnchor0 = CategoryAnchor.MIDDLE;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.getCategoryJava2DCoordinate(categoryAnchor0, 498, (-1948), rectangle2D_Float0, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: 498
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(0.2, 0.0, 0.05, 0.2, 2.0F, 0.05);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      double double0 = categoryAxis0.getCategorySeriesMiddle((-316), 0, 0, 453, 0.0, rectangle2D0, rectangleEdge0);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals((-56.86980132450331), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      GrayPaintScale grayPaintScale0 = new GrayPaintScale((-4602), 2.0F);
      LogAxis logAxis0 = new LogAxis((String) null);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, logAxis0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      double double0 = categoryAxis0.getCategoryEnd(2, (-4602), rectangle2D_Float0, paintScaleLegend0.DEFAULT_POSITION);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      CategoryAnchor categoryAnchor0 = CategoryAnchor.MIDDLE;
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      // Undeclared exception!
      try { 
        categoryAxis0.getCategoryJava2DCoordinate(categoryAnchor0, 0, 4570, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      CategoryAnchor categoryAnchor0 = CategoryAnchor.START;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, (-2.0F), 1.0F, 0.0F);
      Rectangle2D rectangle2D0 = subCategoryAxis0.DEFAULT_TICK_LABEL_INSETS.createInsetRectangle((Rectangle2D) rectangle2D_Float0);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      double double0 = subCategoryAxis0.getCategoryJava2DCoordinate(categoryAnchor0, (-1838), (-1838), rectangle2D0, rectangleEdge0);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(6616.599999999999, double0, 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryAnchor categoryAnchor0 = CategoryAnchor.END;
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      double double0 = categoryAxis0.getCategoryJava2DCoordinate(categoryAnchor0, 3571, 3571, rectangle2D0, rectangleEdge0);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      categoryAxis0.removeCategoryLabelURL("");
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("E7B'I((l?MF/WJC");
      subCategoryAxis0.removeCategoryLabelToolTip("E7B'I((l?MF/WJC");
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("MG~GJ");
      categoryAxis0.setTickLabelPaint((Comparable) "MG~GJ", (Paint) null);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("ktZ&(KoZ8nr'Qkm@-");
      Color color0 = (Color)PiePlot.DEFAULT_LABEL_SHADOW_PAINT;
      subCategoryAxis0.setTickLabelPaint((Comparable) "ktZ&(KoZ8nr'Qkm@-", (Paint) color0);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("bj,");
      subCategoryAxis0.setTickLabelFont((Comparable) "bj,", (Font) null);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("bj,");
      subCategoryAxis0.setTickLabelFont((Comparable) "bj,", subCategoryAxis0.DEFAULT_AXIS_LABEL_FONT);
      Font font0 = subCategoryAxis0.getTickLabelFont((Comparable) "bj,");
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(12, font0.getSize());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      double double0 = categoryAxis0.getCategoryMargin();
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.2, double0, 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setMaximumCategoryLabelWidthRatio((-523.6809F));
      assertEquals((-523.6809F), categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("G");
      extendedCategoryAxis0.configure();
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("ktZ&(KoZ8nr'Qkm@-");
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      subCategoryAxis0.getCategoryLabelToolTip(rectangleEdge0);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      int int0 = categoryAxis0.getMaximumCategoryLabelLines();
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.clearCategoryLabelToolTips();
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("ktZ&(KoZ8nr'Qkm@-");
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      Stack<CategoryAxis> stack0 = new Stack<CategoryAxis>();
      // Undeclared exception!
      try { 
        subCategoryAxis0.getCategoryMiddle((Comparable) 1024, (List) stack0, (Rectangle2D) rectangle0, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Requires 'size' > 0.");
      subCategoryAxis0.addCategoryLabelURL("Requires 'size' > 0.", "Requires 'size' > 0.");
      subCategoryAxis0.removeCategoryLabelURL("Requires 'size' > 0.");
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("LKL7VGX2QxX5i<uN");
      categoryAxis0.hashCode();
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("ktZ&(KoZ8nr'Qkm@-");
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1), (-1));
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      double double0 = subCategoryAxis0.getCategorySeriesMiddle((Comparable) "ktZ&(KoZ8nr'Qkm@-", (Comparable) "ktZ&(KoZ8nr'Qkm@-", (CategoryDataset) slidingGanttCategoryDataset0, 0.0, (Rectangle2D) rectangle0, (RectangleEdge) null);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      double double0 = categoryAxis0.getUpperMargin();
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, double0, 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setUpperMargin((-1792.9F));
      assertEquals((-1792.9000244140625), categoryAxis0.getUpperMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      // Undeclared exception!
      try { 
        categoryAxis0.getCategoryLabelURL((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      TextBlock textBlock0 = new TextBlock();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.CENTER;
      CategoryLabelPosition categoryLabelPosition0 = new CategoryLabelPosition(rectangleAnchor0, textBlockAnchor0);
      double double0 = categoryAxis0.calculateTextBlockHeight(textBlock0, categoryLabelPosition0, (Graphics2D) null);
      assertEquals(4.0, double0, 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("vJIHE2M1%5");
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      
      subCategoryAxis0.setLowerMargin(0);
      assertEquals(0.0, subCategoryAxis0.getLowerMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("ktZ&(KoZ8nr'Qkm@-");
      subCategoryAxis0.getCategoryLabelPositions();
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      
      categoryAxis0.setMaximumCategoryLabelLines(0);
      int int0 = categoryAxis0.getMaximumCategoryLabelLines();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryLabelPosition categoryLabelPosition0 = new CategoryLabelPosition();
      // Undeclared exception!
      try { 
        categoryAxis0.calculateTextBlockWidth((TextBlock) null, categoryLabelPosition0, (Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(",$kVvS0?%");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setCategoryLabelPositions((CategoryLabelPositions) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'positions' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("V&;P8fValSg:!'Sj");
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      // Undeclared exception!
      try { 
        subCategoryAxis0.createLabel(0, 0, rectangleEdge0, (Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.G2TextMeasurer", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setCategoryLabelPositionOffset(37);
      assertEquals(37, categoryAxis0.getCategoryLabelPositionOffset());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      float float0 = extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio();
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      // Undeclared exception!
      try { 
        categoryAxis0.addCategoryLabelToolTip((Comparable) null, "{^QBOl.O4IW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      int int0 = extendedCategoryAxis0.getCategoryLabelPositionOffset();
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(4, int0);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.clearCategoryLabelURLs();
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
  }
}
