/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 20:55:33 GMT 2019
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTKeyStroke;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.color.ColorSpace;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.DirectColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.ShortLookupTable;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.plaf.synth.SynthProgressBarUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.text.DefaultCaret;
import javax.swing.text.JTextComponent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisLabelLocation;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.MarkerAxisBand;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnits;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.ui.LengthAdjustmentType;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.RangeType;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NumberAxis_ESTest extends NumberAxis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(16.49553571428571, "P_fOc4");
      cyclicNumberAxis0.pan(16.49553571428571);
      cyclicNumberAxis0.calculateVisibleTickCount();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      NumberAxis.createStandardTickUnits(locale0);
      cyclicNumberAxis0.getNumberFormatOverride();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1450.257129151), "");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      cyclicNumberAxis0.setTickMarkPaint(combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      RectangleInsets rectangleInsets0 = combinedDomainXYPlot0.getAxisOffset();
      cyclicNumberAxis0.setLabelInsets(rectangleInsets0);
      cyclicNumberAxis0.calculateLowestVisibleTickValue();
      cyclicNumberAxis0.setAutoRangeIncludesZero(false);
      cyclicNumberAxis0.resizeRange2((-144.552789), 1.0F);
      NumberAxis.createIntegerTickUnits();
      cyclicNumberAxis0.getTickUnit();
      cyclicNumberAxis0.calculateVisibleTickCount();
      // Undeclared exception!
      try { 
        AWTKeyStroke.getAWTKeyStroke("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String formatted incorrectly
         //
         verifyException("java.awt.AWTKeyStroke", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("unit");
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.HIGH_END;
      numberAxis0.labelAnchorV(axisLabelLocation0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-32.519141391968404), (-32.519141391968404), 0.0, 0.0);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      numberAxis0.java2DToValue(0.0, rectangle2D_Double0, rectangleEdge0);
      numberAxis0.getNumberFormatOverride();
      numberAxis0.getRangeType();
      double double0 = ValueAxis.DEFAULT_LOWER_MARGIN;
      numberAxis0.getTickUnit();
      NumberAxis.createStandardTickUnits();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(5, 500, integer0);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0);
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(waferMapPlot0);
      multiplePiePlot0.notifyListeners(plotChangeEvent0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 5, (-522.52105383), 1053.4226879507899, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      numberAxis0.selectAutoTickUnit(graphics2D0, rectangle2D_Double0, rectangleEdge0);
      numberAxis0.refreshTicksVertical(graphics2D0, rectangle2D_Double0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumberAxis.createStandardTickUnits();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("2hR(Fw");
      logarithmicAxis0.setAutoTickUnitSelection(false);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Range range0 = thermometerPlot0.getDataRange(logarithmicAxis0);
      Range.combine(range0, range0);
      logarithmicAxis0.setRange(range0, false, false);
      logarithmicAxis0.setAutoRangeIncludesZero(true);
      LogarithmicAxis logarithmicAxis1 = (LogarithmicAxis)logarithmicAxis0.clone();
      logarithmicAxis0.equals(logarithmicAxis1);
      logarithmicAxis0.getAutoRangeIncludesZero();
      LogarithmicAxis logarithmicAxis2 = (LogarithmicAxis)logarithmicAxis0.clone();
      Line2D.Double line2D_Double0 = new Line2D.Double(2.0F, 1.0E-8, 1194.0, 10.0);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      line2D_Double0.y1 = 467.06663240053;
      logarithmicAxis2.calculateLowestVisibleTickValue();
      NumberAxis.createIntegerTickUnits();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      logarithmicAxis1.refreshTicks((Graphics2D) null, (AxisState) null, rectangle0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        logarithmicAxis0.selectAutoTickUnit((Graphics2D) null, rectangle0, rectangleEdge1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NumberAxis.createStandardTickUnits();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("2hR(Fw");
      logarithmicAxis0.setAutoTickUnitSelection(false);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Range range0 = thermometerPlot0.getDataRange(logarithmicAxis0);
      Range.combine(range0, range0);
      logarithmicAxis0.setRange(range0, false, false);
      logarithmicAxis0.setAutoRangeIncludesZero(true);
      Object object0 = logarithmicAxis0.clone();
      logarithmicAxis0.equals(object0);
      logarithmicAxis0.getAutoRangeIncludesZero();
      logarithmicAxis0.clone();
      Line2D.Double line2D_Double0 = new Line2D.Double(2.0F, 1.0E-8, (-1481.1916516496), 10.0);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        logarithmicAxis0.selectAutoTickUnit((Graphics2D) null, rectangle0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NumberAxis.createIntegerTickUnits();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(20.0, 3526.3882456);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart("KuI)wE?.9081Cvilz", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, spiderWebPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 0.0F, 20.0, (ChartRenderingInfo) null);
      bufferedImage0.createGraphics();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(xYDatasetTableModel0, defaultTableColumnModel0);
      spiderWebPlot0.addChangeListener(jFreeChart0);
      Rectangle rectangle0 = jTable0.getCellRect(15, (-2593), false);
      System.setCurrentTimeMillis(0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.draw(graphics2D0, 7.2E7, rectangle0, rectangle0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be finite.
         //
         verifyException("org.jfree.chart.axis.NumberTickUnitSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 11);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double(1.0F, 14.114583333333332, 2.0F, 11);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      symbolAxis0.selectVerticalAutoTickUnit(graphics2D0, rectangle0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NumberAxis.createStandardTickUnits();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("2hR(Fw");
      logarithmicAxis0.setAutoTickUnitSelection(false);
      logarithmicAxis0.setAutoRangeIncludesZero(false);
      Object object0 = logarithmicAxis0.clone();
      logarithmicAxis0.equals(object0);
      logarithmicAxis0.getAutoRangeIncludesZero();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("unit");
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.HIGH_END;
      numberAxis0.labelAnchorV(axisLabelLocation0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-32.519141391968404), (-32.519141391968404), 0.0, 0.0);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      numberAxis0.java2DToValue(0.0, rectangle2D_Double0, rectangleEdge0);
      numberAxis0.getNumberFormatOverride();
      numberAxis0.setUpperBound(0.0);
      numberAxis0.getRangeType();
      numberAxis0.calculateHighestVisibleTickValue();
      System.setCurrentTimeMillis(0L);
      numberAxis0.getTickUnit();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("unit");
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.HIGH_END;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      numberFormat0.format((long) 500);
      numberAxis0.setNumberFormatOverride(numberFormat0);
      numberAxis0.labelAnchorV(axisLabelLocation0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-32.519141391968404), (-32.519141391968404), 500, 500);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      numberAxis0.java2DToValue(0.0, rectangle2D_Double0, rectangleEdge0);
      numberAxis0.getNumberFormatOverride();
      numberAxis0.getRangeType();
      numberAxis0.calculateHighestVisibleTickValue();
      System.setCurrentTimeMillis(0L);
      numberAxis0.getTickUnit();
      numberAxis0.calculateVisibleTickCount();
      numberAxis0.getRangeType();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("unit");
      numberAxis0.calculateVisibleTickCount();
      Graphics2D graphics2D0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false, false, true, false, false);
      chartPanel0.setZoomTriggerDistance(477);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      rectangle0.setLocation(200, 200);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        numberAxis0.draw((Graphics2D) null, 10.0, rectangle0, rectangle0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("FA_*", (Range) null);
      NumberAxis.createStandardTickUnits();
      moduloAxis0.getMarkerBand();
      moduloAxis0.setMarkerBand((MarkerAxisBand) null);
      TickUnits tickUnits0 = new TickUnits();
      moduloAxis0.setStandardTickUnits(tickUnits0);
      moduloAxis0.setAutoRangeIncludesZero(true);
      moduloAxis0.getAutoRangeIncludesZero();
      NumberTickUnit numberTickUnit0 = moduloAxis0.getTickUnit();
      boolean boolean0 = moduloAxis0.getAutoRangeIncludesZero();
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        moduloAxis0.estimateMaximumTickLabelWidth((Graphics2D) null, numberTickUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberAxis.createStandardTickUnits();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("2hR(Fw");
      logarithmicAxis0.setAutoTickUnitSelection(false);
      logarithmicAxis0.setAutoRangeIncludesZero(true);
      logarithmicAxis0.equals(logarithmicAxis0);
      logarithmicAxis0.getAutoRangeIncludesZero();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      NumberAxis.createIntegerTickUnits(locale0);
      NumberAxis.createStandardTickUnits(locale0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "123";
      stringArray0[1] = "123";
      stringArray0[2] = "123";
      stringArray0[3] = "123";
      stringArray0[4] = "123";
      stringArray0[5] = "123";
      stringArray0[6] = "123";
      SymbolAxis symbolAxis0 = new SymbolAxis("123", stringArray0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-4.0F), (-4.0F), 1958.67F, 862.8F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
      Point2D point2D0 = combinedDomainXYPlot0.getQuadrantOrigin();
      rectangle2D_Float0.add(point2D0);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      symbolAxis0.valueToJava2D(0.0, rectangle2D_Float0, rectangleEdge0);
      Rectangle2D rectangle2D0 = null;
      RectangleEdge rectangleEdge1 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        symbolAxis0.java2DToValue((-4.0F), (Rectangle2D) null, rectangleEdge1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/^aAy)'&@H{IHysr.=";
      stringArray0[1] = "/^aAy)'&@H{IHysr.=";
      stringArray0[3] = "/^aAy)'&@H{IHysr.=";
      stringArray0[4] = "/^aAy)'&@H{IHysr.=";
      stringArray0[5] = "/^aAy)'&@H{IHysr.=";
      stringArray0[6] = "/^aAy)'&@H{IHysr.=";
      SymbolAxis symbolAxis0 = new SymbolAxis("/^aAy)'&@H{IHysr.=", stringArray0);
      short[][] shortArray0 = new short[3][8];
      short[] shortArray1 = new short[0];
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[4];
      shortArray2[0] = (short)40;
      shortArray2[1] = (short) (-3739);
      shortArray2[2] = (short)1;
      shortArray2[3] = (short)237;
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[9];
      shortArray3[0] = (short)259;
      shortArray3[1] = (short)1;
      shortArray3[2] = (short)40;
      shortArray3[3] = (short)237;
      shortArray3[4] = (short)1;
      shortArray3[5] = (short)1;
      shortArray3[6] = (short)237;
      shortArray3[7] = (short) (-3739);
      shortArray3[8] = (short) (-3739);
      shortArray0[2] = shortArray3;
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(1810, shortArray0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      float[][] floatArray0 = new float[3][0];
      float[] floatArray1 = new float[3];
      floatArray1[0] = (float) (short) (-3739);
      floatArray1[2] = (float) (short)40;
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[0] = (float) (short)40;
      floatArray2[1] = (float) (short)237;
      floatArray2[2] = (float) (short) (-3739);
      floatArray0[2] = floatArray2;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, symbolAxis0, cyclicNumberAxis0);
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, fastScatterPlot0);
      LookupOp lookupOp0 = new LookupOp(shortLookupTable0, renderingHints0);
      JFreeChart jFreeChart0 = new JFreeChart("/^aAy)'&@H{IHysr.=", fastScatterPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((int) (short) (-3739), (-2184));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-3739) and height (-2184) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumberAxis.createIntegerTickUnits();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0));
      cyclicNumberAxis0.getRangeType();
      Graphics2D graphics2D0 = null;
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.toString();
      RingPlot ringPlot0 = new RingPlot();
      RectangleInsets rectangleInsets0 = ringPlot0.getLabelPadding();
      rectangleInsets0.createInsetRectangle((Rectangle2D) defaultCaret0);
      defaultCaret0.getMark();
      rectangleInsets0.createInsetRectangle((Rectangle2D) defaultCaret0, true, false);
      cyclicNumberAxis0.setLabelInsets(rectangleInsets0, true);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.selectHorizontalAutoTickUnit((Graphics2D) null, defaultCaret0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2.0F;
      Font font0 = PiePlot.DEFAULT_LABEL_FONT;
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart("*7U", font0, ringPlot0, true);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      int int0 = (-239);
      numberAxis0.setPlot(ringPlot0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)56;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(10, 10, byteArray0, 687, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 687
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("FA_*", (Range) null);
      NumberAxis.createStandardTickUnits();
      moduloAxis0.setAutoRangeIncludesZero(true);
      LogAxis logAxis0 = new LogAxis("");
      NumberTickUnit numberTickUnit0 = logAxis0.getTickUnit();
      moduloAxis0.setTickUnit(numberTickUnit0, false, false);
      moduloAxis0.getAutoRangeIncludesZero();
      moduloAxis0.getTickUnit();
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NumberAxis.createIntegerTickUnits();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(20.0, 3526.3882456);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart("KuI)wE?.9081Cvilz", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, spiderWebPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 0.0F, 20.0, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(xYDatasetTableModel0, defaultTableColumnModel0);
      jFreeChart0.setBackgroundPaint(spiderWebPlot0.DEFAULT_OUTLINE_PAINT);
      jTable0.getCellRect(15, (-2593), false);
      System.setCurrentTimeMillis(0);
      cyclicNumberAxis0.estimateMaximumTickLabelHeight(graphics2D0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis(1000L);
      NumberAxis.createIntegerTickUnits();
      NumberAxis numberAxis0 = new NumberAxis("a^HBC@l!uV");
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      IntervalMarker intervalMarker0 = new IntervalMarker(21.68377976190476, 15);
      xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      chartRenderingInfo0.equals(combinedDomainXYPlot0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 1000L, 3519.9565F, 515.0F);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      numberAxis0.refreshTicks(graphics2D0, (AxisState) null, rectangle2D_Float0, rectangleEdge0);
      numberAxis0.estimateMaximumTickLabelHeight(graphics2D0);
      numberAxis0.getNumberFormatOverride();
      numberAxis0.estimateMaximumTickLabelHeight(graphics2D0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      numberAxis0.setRange((-706.653), 1516.8039464);
      numberAxis0.calculateLowestVisibleTickValue();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      NumberAxis.createIntegerTickUnits(locale0);
      NumberAxis.createStandardTickUnits(locale0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "123";
      stringArray0[1] = "123";
      stringArray0[2] = "123";
      stringArray0[3] = "123";
      stringArray0[4] = "123";
      stringArray0[5] = "123";
      stringArray0[6] = "123";
      SymbolAxis symbolAxis0 = new SymbolAxis("123", stringArray0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-4.0F), (-4.0F), 1958.67F, 862.8F);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      symbolAxis0.valueToJava2D(0.0, rectangle2D_Float0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = RectangleEdge.TOP;
      symbolAxis0.setLowerBound(45.71428571428571);
      symbolAxis0.java2DToValue((-4.0F), rectangle2D_Float0, rectangleEdge1);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp((AffineTransform) null, 500);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-691.88349), (-691.88349), "TextAnchor.CENTER_LEFT");
      float[][] floatArray0 = new float[7][7];
      float[] floatArray1 = new float[1];
      floatArray1[0] = 2.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      floatArray2[0] = (float) 500;
      floatArray2[1] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 2.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 2.0F;
      floatArray3[3] = (float) 500;
      floatArray3[4] = (float) 500;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[2];
      floatArray4[0] = (float) 500;
      floatArray4[1] = 2.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[9];
      floatArray5[0] = (float) 500;
      floatArray5[1] = 2.0F;
      floatArray5[2] = (float) 500;
      floatArray5[3] = 958.3776F;
      floatArray5[4] = 537.9887F;
      floatArray5[5] = 0.0F;
      floatArray5[6] = 2.0F;
      floatArray5[7] = 2721.36F;
      floatArray5[8] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[6];
      floatArray6[0] = (float) 500;
      floatArray6[1] = (float) 500;
      floatArray6[2] = 537.9887F;
      floatArray6[4] = 537.9887F;
      floatArray6[5] = 2.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[4];
      floatArray7[0] = 0.0F;
      floatArray7[1] = (float) 500;
      floatArray7[2] = 0.0F;
      floatArray7[3] = 0.0F;
      floatArray0[6] = floatArray7;
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(500, 0.0F, renderingHints0);
      jFreeChart0.createBufferedImage(40, 500);
      DirectColorModel directColorModel0 = null;
      try {
        directColorModel0 = new DirectColorModel(500, (-1696), 40, 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Noncontiguous red mask (fffff960
         //
         verifyException("java.awt.image.PackedColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NumberAxis.createIntegerTickUnits();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(20.0, 3526.3882456);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart("KuI)wE?.9081Cvilz", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, spiderWebPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 0.0F, 20.0, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(xYDatasetTableModel0, defaultTableColumnModel0);
      Rectangle rectangle0 = jTable0.getCellRect(15, (-2593), false);
      rectangle0.setBounds((-1964904066), 4166, 0, (-2593));
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      cyclicNumberAxis0.selectHorizontalAutoTickUnit(graphics2D0, rectangle0, rectangleEdge0);
      cyclicNumberAxis0.calculateHighestVisibleTickValue();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0F, 0.0F, 1.0E-8, 1.0E-8);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      numberAxis0.java2DToValue(0.0F, rectangle2D_Double0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-691.88349), 0.0, "TextAnchor.CENTER_LEFT");
      float[][] floatArray0 = new float[7][7];
      float[] floatArray1 = new float[1];
      floatArray1[0] = 2.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      floatArray2[0] = (float) 500;
      floatArray2[1] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 2.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 2.0F;
      floatArray3[3] = (float) 500;
      floatArray3[4] = (float) 500;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[2];
      floatArray4[0] = (float) 500;
      floatArray4[1] = 2.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[9];
      floatArray5[0] = (float) 500;
      floatArray5[1] = 2.0F;
      floatArray5[2] = (float) 500;
      floatArray5[3] = 958.3776F;
      floatArray5[4] = 537.9887F;
      floatArray5[5] = 0.0F;
      floatArray5[6] = 2.0F;
      floatArray5[7] = 2721.36F;
      floatArray5[8] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[6];
      floatArray6[0] = (float) 500;
      floatArray6[1] = (float) 500;
      floatArray6[2] = 537.9887F;
      floatArray6[3] = 2.0F;
      floatArray6[4] = 537.9887F;
      floatArray6[5] = 2.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[4];
      floatArray7[0] = 0.0F;
      floatArray7[1] = (float) 500;
      floatArray7[2] = 0.0F;
      floatArray7[3] = 0.0F;
      floatArray0[6] = floatArray7;
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(500, 0.0F, renderingHints0);
      jFreeChart0.createBufferedImage(40, 500);
      DirectColorModel directColorModel0 = null;
      try {
        directColorModel0 = new DirectColorModel(500, (-1696), 40, 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Noncontiguous red mask (fffff960
         //
         verifyException("java.awt.image.PackedColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("FA_*", (Range) null);
      NumberAxis.createStandardTickUnits();
      moduloAxis0.getMarkerBand();
      moduloAxis0.setMarkerBand((MarkerAxisBand) null);
      TickUnits tickUnits0 = new TickUnits();
      moduloAxis0.setStandardTickUnits(tickUnits0);
      moduloAxis0.setAutoRangeIncludesZero(true);
      moduloAxis0.getAutoRangeIncludesZero();
      NumberTickUnit numberTickUnit0 = moduloAxis0.getTickUnit();
      moduloAxis0.getAutoRangeIncludesZero();
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart(piePlot3D0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 500, 941.77714, 53.845, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      moduloAxis0.estimateMaximumTickLabelWidth(graphics2D0, numberTickUnit0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("unit");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-32.519141391968404), (-32.519141391968404), 0.0, 0.0);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      numberAxis0.java2DToValue(0.0, rectangle2D_Double0, rectangleEdge0);
      numberAxis0.getNumberFormatOverride();
      numberAxis0.getRangeType();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      NumberAxis.createIntegerTickUnits(locale0);
      NumberAxis.createStandardTickUnits(locale0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "123";
      stringArray0[1] = "123";
      stringArray0[2] = "123";
      stringArray0[3] = "123";
      stringArray0[4] = "123";
      stringArray0[5] = "123";
      stringArray0[6] = "123";
      SymbolAxis symbolAxis0 = new SymbolAxis("123", stringArray0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-4.0F), (-4.0F), 1958.67F, 862.8F);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      symbolAxis0.valueToJava2D(0.0, rectangle2D_Float0, rectangleEdge0);
      Rectangle2D rectangle2D0 = null;
      RectangleEdge rectangleEdge1 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        symbolAxis0.java2DToValue((-4.0F), (Rectangle2D) null, rectangleEdge1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      NumberAxis.createIntegerTickUnits(locale0);
      NumberAxis.createStandardTickUnits(locale0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "123";
      stringArray0[1] = "123";
      stringArray0[2] = "123";
      stringArray0[3] = "123";
      stringArray0[4] = "123";
      stringArray0[5] = "123";
      stringArray0[6] = "123";
      SymbolAxis symbolAxis0 = new SymbolAxis("123", stringArray0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-4.0F), (-4.0F), 1958.67F, 862.8F);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      symbolAxis0.valueToJava2D(0.0, rectangle2D_Float0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = RectangleEdge.TOP;
      symbolAxis0.java2DToValue((-4.0F), rectangle2D_Float0, rectangleEdge1);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp((AffineTransform) null, 500);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.MIDDLE;
      logarithmicAxis0.labelAnchorH(axisLabelLocation0);
      LogarithmicAxis logarithmicAxis1 = (LogarithmicAxis)logarithmicAxis0.clone();
      logarithmicAxis0.getTickUnit();
      logarithmicAxis0.getRangeType();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)logarithmicAxis1.getLabelEnclosure((Graphics2D) null, rectangleEdge0);
      RectangleEdge rectangleEdge1 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        logarithmicAxis1.selectAutoTickUnit((Graphics2D) null, rectangle2D_Double0, rectangleEdge1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "org.jfree.chart.renderer.category.StackedBarRenderer";
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "cq`rLkOj@E.*<$[j");
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(10, 16, chartRenderingInfo0);
      int[] intArray0 = new int[8];
      intArray0[0] = 500;
      intArray0[1] = 16;
      intArray0[2] = 10;
      intArray0[3] = 500;
      intArray0[4] = 15;
      intArray0[5] = 500;
      intArray0[6] = (-1665);
      intArray0[7] = 10;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(500, 10, intArray0, (-1665), false, (-1680), 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), "");
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, cyclicNumberAxis0);
      RectangleInsets rectangleInsets0 = paintScaleLegend0.getPadding();
      cyclicNumberAxis0.setLabelInsets(rectangleInsets0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cyclicNumberAxis0.centerRange((-1477.33305810417));
      cyclicNumberAxis0.setNumberFormatOverride(decimalFormat0);
      cyclicNumberAxis0.calculateHighestVisibleTickValue();
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(500, (-2090), Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 2147483647
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      NumberAxis.createIntegerTickUnits(locale0);
      NumberAxis.createStandardTickUnits(locale0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "123";
      stringArray0[1] = "123";
      stringArray0[2] = "123";
      stringArray0[3] = "123";
      stringArray0[4] = "123";
      stringArray0[5] = "123";
      stringArray0[6] = "123";
      SymbolAxis symbolAxis0 = new SymbolAxis("123", stringArray0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-4.0F), (-4.0F), 1958.67F, 862.8F);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      symbolAxis0.valueToJava2D(0.0, rectangle2D_Float0, rectangleEdge0);
      Rectangle2D rectangle2D0 = null;
      RectangleEdge rectangleEdge1 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        symbolAxis0.java2DToValue((-4.0F), (Rectangle2D) null, rectangleEdge1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("y");
      numberAxis0.setVerticalTickLabels(false);
      double double0 = 23.428571428571445;
      numberAxis0.resizeRange(23.428571428571445, 23.428571428571445);
      numberAxis0.equals("y");
      NumberAxis.createIntegerTickUnits();
      numberAxis0.configure();
      RescaleOp rescaleOp0 = new RescaleOp(2.0F, 0.0F, (RenderingHints) null);
      int int0 = 2;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 500;
      floatArray0[1] = (float) 2;
      floatArray0[2] = 2.0F;
      floatArray0[3] = 2.0F;
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) 500;
      floatArray0[6] = 0.0F;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(500, 2, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 7 and should be 1000
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = (-1.5707963267948966);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.5707963267948966), 0.0, "hutbD");
      cyclicNumberAxis0.setAdvanceLineVisible(false);
      SynthProgressBarUI synthProgressBarUI0 = new SynthProgressBarUI();
      cyclicNumberAxis0.hasListener(synthProgressBarUI0);
      cyclicNumberAxis0.setFixedAutoRange(0.0);
      cyclicNumberAxis0.getNumberFormatOverride();
      cyclicNumberAxis0.setNumberFormatOverride((NumberFormat) null);
      Graphics2D graphics2D0 = null;
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(0.0F, 3.4028235E38F, 2.0F, 2.0F);
      ellipse2D_Float0.height = 3.4028235E38F;
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      LengthAdjustmentType lengthAdjustmentType1 = LengthAdjustmentType.EXPAND;
      Rectangle2D rectangle2D1 = cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS.createAdjustedRectangle(rectangle2D0, lengthAdjustmentType0, lengthAdjustmentType1);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.selectVerticalAutoTickUnit((Graphics2D) null, rectangle2D1, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NumberAxis.createStandardTickUnits();
      NumberAxis numberAxis0 = new NumberAxis();
      numberAxis0.getRangeType();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      numberAxis0.getMarkerBand();
      numberAxis0.setMarkerBand((MarkerAxisBand) null);
      NumberFormat numberFormat0 = mockSimpleDateFormat0.getNumberFormat();
      numberAxis0.getAttributedLabel();
      numberFormat0.clone();
      DateFormat.getTimeInstance();
      mockSimpleDateFormat0.setLenient(true);
      numberFormat0.setMaximumIntegerDigits(22);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.05, numberFormat0, 97);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      numberAxis0.lengthToJava2D((-886.975394467021), rectangle0, rectangleEdge0);
      numberAxis0.setTickMarkOutsideLength(0);
      numberAxis0.setTickUnit(numberTickUnit0, true, true);
      numberAxis0.lengthToJava2D(0, rectangle0, rectangleEdge0);
      numberAxis0.getAutoRangeStickyZero();
      numberAxis0.equals(polygon0);
      numberAxis0.setNumberFormatOverride(numberFormat0);
      RectangleEdge rectangleEdge1 = RectangleEdge.BOTTOM;
      numberAxis0.java2DToValue(0, rectangle0, rectangleEdge1);
      RangeType rangeType0 = RangeType.POSITIVE;
      numberAxis0.setRangeType(rangeType0);
      // Undeclared exception!
      try { 
        NumberAxis.createStandardTickUnits((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      DecimalFormat decimalFormat0 = new DecimalFormat("g5:6qk0Kv@");
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-115.50464), decimalFormat0, 43);
      numberAxis0.setTickUnit(numberTickUnit0, false, false);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      numberAxis0.clone();
      numberAxis0.configure();
      numberAxis0.getAutoRangeStickyZero();
      NumberTickUnit numberTickUnit0 = null;
      // Undeclared exception!
      try { 
        numberAxis0.setTickUnit((NumberTickUnit) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'unit' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-691.88349), 0.0, "TextAnchor.CENTER_LEFT");
      float[][] floatArray0 = new float[7][7];
      float[] floatArray1 = new float[1];
      floatArray1[0] = 2.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      floatArray2[0] = (float) 500;
      floatArray2[1] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 2.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 2.0F;
      floatArray3[3] = (float) 500;
      floatArray3[4] = (float) 500;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[2];
      floatArray4[0] = (float) 500;
      floatArray4[1] = 2.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[9];
      floatArray5[0] = (float) 500;
      floatArray5[1] = 2.0F;
      floatArray5[2] = (float) 500;
      floatArray5[3] = 958.3776F;
      floatArray5[4] = 537.9887F;
      floatArray5[5] = 0.0F;
      floatArray5[6] = 2.0F;
      floatArray5[7] = 2721.36F;
      floatArray5[8] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[6];
      floatArray6[0] = (float) 500;
      floatArray6[1] = (float) 500;
      floatArray6[2] = 537.9887F;
      floatArray6[3] = 2.0F;
      floatArray6[4] = 537.9887F;
      floatArray6[5] = 2.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[4];
      floatArray7[0] = 0.0F;
      floatArray7[1] = (float) 500;
      floatArray7[2] = 0.0F;
      floatArray7[3] = 0.0F;
      floatArray0[6] = floatArray7;
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(500, 0.0F, renderingHints0);
      jFreeChart0.createBufferedImage(40, 500);
      DirectColorModel directColorModel0 = null;
      try {
        directColorModel0 = new DirectColorModel(500, (-1696), 40, 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Noncontiguous red mask (fffff960
         //
         verifyException("java.awt.image.PackedColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      boolean boolean0 = true;
      JTextArea jTextArea0 = new JTextArea();
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextArea0.new AccessibleJTextComponent();
      jTextComponent_AccessibleJTextComponent0.getCharacterBounds(0);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      // Undeclared exception!
      try { 
        symbolAxis0.valueToJava2D(1351.71473972251, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "";
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0);
      intervalXYDelegate0.clone();
      intervalXYDelegate0.getDomainBounds(false);
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      // Undeclared exception!
      try { 
        moduloAxis0.setAutoRangeIncludesZero(false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-740.7423258579), "_");
      cyclicNumberAxis0.setAutoTickUnitSelection(false, true);
      cyclicNumberAxis0.calculateHighestVisibleTickValue();
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, categoryAxis0, cyclicNumberAxis0, lineAndShapeRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, categoryPlot0, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 2, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      cyclicNumberAxis0.selectAutoTickUnit(graphics2D0, rectangle2D_Float0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 1.5707963267948966);
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(1711.0F, (-5764.0F), 1711.0F, 500);
      cyclicNumberAxis0.setMinorTickMarkOutsideLength((-739.0F));
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      Rectangle2D rectangle2D1 = cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS.createOutsetRectangle(rectangle2D0, true, false);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      cyclicNumberAxis0.valueToJava2D(1.5707963267948966, rectangle2D1, rectangleEdge0);
      NumberAxis.createIntegerTickUnits();
      RectangleEdge rectangleEdge1 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.refreshTicksVertical((Graphics2D) null, rectangle2D0, rectangleEdge1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "%M2.vcq0";
      stringArray0[1] = "%M2.vcq0";
      stringArray0[2] = "%M2.vcq0";
      stringArray0[3] = "%M2.vcq0";
      stringArray0[4] = "%M2.vcq0";
      stringArray0[5] = "%M2.vcq0";
      stringArray0[6] = "%M2.vcq0";
      SymbolAxis symbolAxis0 = new SymbolAxis("%M2.vcq0", stringArray0);
      symbolAxis0.resizeRange(555.1991504837245, 0.0);
      CompassPlot compassPlot0 = new CompassPlot();
      symbolAxis0.setPlot(compassPlot0);
      symbolAxis0.equals("%M2.vcq0");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NumberAxis.createIntegerTickUnits();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(20.0, 3526.3882456);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart("KuI)wE?.9081Cvilz", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, spiderWebPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 0.0F, 20.0, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(xYDatasetTableModel0, defaultTableColumnModel0);
      Rectangle rectangle0 = jTable0.getCellRect(15, (-2593), false);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.selectHorizontalAutoTickUnit(graphics2D0, rectangle0, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be finite.
         //
         verifyException("org.jfree.chart.axis.NumberTickUnitSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<@s=G ";
      stringArray0[1] = "<@s=G ";
      stringArray0[2] = "<@s=G ";
      stringArray0[3] = "<@s=G ";
      SymbolAxis symbolAxis0 = new SymbolAxis("<@s=G ", stringArray0);
      symbolAxis0.getRangeType();
      symbolAxis0.setAutoRangeStickyZero(false);
      symbolAxis0.getAutoRangeStickyZero();
      Rectangle2D rectangle2D0 = null;
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        symbolAxis0.java2DToValue(1.5707963267948966, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("");
      numberAxis0.setVisible(false);
      numberAxis0.setAutoRangeStickyZero(true);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3425.0);
      Graphics2D graphics2D0 = null;
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.estimateMaximumTickLabelHeight((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(1.0E-8, numberFormat0, 500);
      numberTickUnit0.toString();
      numberTickUnit0.valueToString(2.0F);
      numberTickUnit0.valueToString(0.0);
      numberAxis0.setTickUnit(numberTickUnit0);
      NumberAxis.createStandardTickUnits();
      numberAxis0.calculateHighestVisibleTickValue();
      numberAxis0.calculateLowestVisibleTickValue();
      NumberTickUnit numberTickUnit1 = new NumberTickUnit(0.0, numberFormat0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      NumberFormat.getCurrencyInstance();
      numberTickUnit1.toString();
      numberFormat0.setParseIntegerOnly(false);
      numberTickUnit1.equals(decimalFormat0);
      numberAxis0.equals(numberTickUnit1);
      numberAxis0.configure();
      NumberAxis.createStandardTickUnits();
      numberAxis0.equals("2;4;nw");
      numberAxis0.calculateHighestVisibleTickValue();
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 1.0, 20.0, 0.0, 2.0F, numberAxis0.DEFAULT_TICK_LABEL_FONT);
      numberAxis0.setMarkerBand(markerAxisBand0);
      numberAxis0.getMarkerBand();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(969.4291, "1B4");
      cyclicNumberAxis0.setMinorTickMarkOutsideLength(0.0F);
      cyclicNumberAxis0.calculateLowestVisibleTickValue();
      Graphics2D graphics2D0 = null;
      Rectangle2D rectangle2D0 = null;
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.refreshTicksHorizontal((Graphics2D) null, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CyclicNumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("'z^4g/*oV");
      DefaultListModel<CategoryPlot> defaultListModel0 = new DefaultListModel<CategoryPlot>();
      defaultListModel0.trimToSize();
      JList<CategoryPlot> jList0 = new JList<CategoryPlot>(defaultListModel0);
      jList0.getCellBounds(500, 47);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      // Undeclared exception!
      try { 
        logarithmicAxis0.valueToJava2D((-2921.0), (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.LogarithmicAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-984.9209), (-984.9209), "");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultXYZDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      polarPlot0.getDataRange(cyclicNumberAxis0);
      Range range0 = Range.shift(cyclicNumberAxis0.DEFAULT_RANGE, 1685.945);
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      cyclicNumberAxis0.setTickMarksVisible(false);
      cyclicNumberAxis0.setNegativeArrowVisible(false);
      moduloAxis0.calculateLowestVisibleTickValue();
      moduloAxis0.calculateLowestVisibleTickValue();
      Rectangle2D rectangle2D0 = null;
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      Range.combine((Range) null, range0);
      cyclicNumberAxis0.setVisible(true);
      moduloAxis0.java2DToValue(500, (Rectangle2D) null, rectangleEdge0);
      // Undeclared exception!
      try { 
        moduloAxis0.setAutoRangeStickyZero(false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberAxis.createIntegerTickUnits((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, (Range) null);
      // Undeclared exception!
      try { 
        moduloAxis0.autoAdjustRange();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10.0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("rangeType");
      DecimalFormat decimalFormat0 = (DecimalFormat)logarithmicAxis0.numberFormatterObj;
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(500, decimalFormat0);
      cyclicNumberAxis0.setTickUnit(numberTickUnit0, true, true);
      cyclicNumberAxis0.hashCode();
      cyclicNumberAxis0.getMarkerBand();
      short[][] shortArray0 = new short[0][2];
      ShortLookupTable shortLookupTable0 = null;
      try {
        shortLookupTable0 = new ShortLookupTable((-300), shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset must be greater than 0
         //
         verifyException("java.awt.image.LookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberAxis.createStandardTickUnits((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("FT&DX,pN");
      numberAxis0.setAutoRange(false);
      numberAxis0.equals("FT&DX,pN");
      numberAxis0.equals("FT&DX,pN");
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.0, 0.0, 0.0, 2.0F, numberAxis0.DEFAULT_TICK_LABEL_FONT);
      numberAxis0.setMarkerBand(markerAxisBand0);
      numberAxis0.calculateLowestVisibleTickValue();
      NumberAxis.createStandardTickUnits();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      RangeType rangeType0 = RangeType.NEGATIVE;
      numberAxis0.setRangeType(rangeType0);
      numberAxis0.getTickUnit();
      numberAxis0.getAutoRangeIncludesZero();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      locale0.getUnicodeLocaleKeys();
      locale0.getDisplayScript();
      locale0.getDisplayCountry();
      NumberAxis.createIntegerTickUnits(locale0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("?sOJ,SpjUt*Pe7");
      logarithmicAxis0.setAutoRange(false);
      logarithmicAxis0.setAutoRangeStickyZero(false);
      logarithmicAxis0.getRangeType();
      logarithmicAxis0.autoAdjustRange();
      DecimalFormat decimalFormat0 = (DecimalFormat)logarithmicAxis0.numberFormatterObj;
      logarithmicAxis0.setNumberFormatOverride(decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(Double.POSITIVE_INFINITY, "");
      cyclicNumberAxis0.setRangeWithMargins(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      cyclicNumberAxis0.getRangeType();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("+,dUt)iK4]9G:X&v");
      numberAxis0.autoAdjustRange();
      Locale locale0 = Locale.FRANCE;
      NumberAxis.createIntegerTickUnits(locale0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      numberAxis0.fireChangeEvent();
      Shape shape0 = numberAxis0.getUpArrow();
      numberAxis0.setUpArrow(shape0);
      numberAxis0.setLowerBound(4551.471952);
      numberAxis0.hashCode();
      numberAxis0.getNumberFormatOverride();
      numberAxis0.getMarkerBand();
      numberAxis0.setMarkerBand((MarkerAxisBand) null);
      numberAxis0.getAutoRangeStickyZero();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NumberAxis.createIntegerTickUnits(locale0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      logarithmicAxis0.setAutoRangeIncludesZero(true);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      JTextArea jTextArea0 = new JTextArea((String) null);
      Dimension dimension0 = jTextArea0.getPreferredSize();
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      jTextArea0.getX();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      logarithmicAxis0.refreshTicksHorizontal((Graphics2D) null, rectangle0, rectangleEdge0);
      logarithmicAxis0.calculateVisibleTickCount();
      // Undeclared exception!
      try { 
        rectangle0.setRect((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Rectangle2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("};lXPqd~cBv_LpyO{s-", (Range) null);
      // Undeclared exception!
      try { 
        moduloAxis0.configure();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-404.9144), (-2003.19871));
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setRangeCrosshairPaint(cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
      combinedDomainCategoryPlot0.setRangeGridlineStroke(cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
      cyclicNumberAxis0.equals(combinedDomainCategoryPlot0);
      combinedDomainCategoryPlot0.clearRangeMarkers();
      combinedDomainCategoryPlot0.clearDomainMarkers();
      NumberTickUnit numberTickUnit0 = NumberAxis.DEFAULT_TICK_UNIT;
      combinedDomainCategoryPlot0.getRangeAxisForDataset(500);
      cyclicNumberAxis0.setTickUnit(numberTickUnit0, true, false);
      cyclicNumberAxis0.clone();
      cyclicNumberAxis0.setTickUnit(numberTickUnit0);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.draw((Graphics2D) null, 20.0, (Rectangle2D) null, (Rectangle2D) null, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1773.96944, "CDR");
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.HIGH_END;
      cyclicNumberAxis0.labelAnchorV(axisLabelLocation0);
      cyclicNumberAxis0.setAutoTickUnitSelection(true);
      cyclicNumberAxis0.calculateVisibleTickCount();
      cyclicNumberAxis0.getNumberFormatOverride();
      CategoryAxis categoryAxis0 = new CategoryAxis("CDR");
      Paint paint0 = categoryAxis0.getTickLabelPaint((Comparable) true);
      cyclicNumberAxis0.setFixedAutoRange(1773.96944);
      cyclicNumberAxis0.advanceLinePaint = paint0;
      categoryAxis0.setMinorTickMarkOutsideLength(0.0F);
      cyclicNumberAxis0.setFixedAutoRange(1.5707963267948966);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setTickUnit((NumberTickUnit) null, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'unit' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "6P?o[OvC2vq6T:E*3E";
      stringArray0[1] = "ufB\"@X";
      stringArray0[2] = "6P?o[OvC2vq6T:E*3E";
      SymbolAxis symbolAxis0 = new SymbolAxis("6P?o[OvC2vq6T:E*3E", stringArray0);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        symbolAxis0.draw((Graphics2D) null, 117.7029065377288, (Rectangle2D) null, (Rectangle2D) null, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(20.0);
      cyclicNumberAxis0.calculateVisibleTickCount();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      NumberAxis.createStandardTickUnits();
      NumberAxis numberAxis0 = new NumberAxis(" --> ");
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setMarkerBand((MarkerAxisBand) null);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = "V 2^:cID1nH_5IAa<)";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3317.777785298, (-544.01025976316), "V 2^:cID1nH_5IAa<)");
      cyclicNumberAxis0.getNumberFormatOverride();
      cyclicNumberAxis0.setNumberFormatOverride((NumberFormat) null);
      NumberTickUnit numberTickUnit0 = NumberAxis.DEFAULT_TICK_UNIT;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      numberTickUnit0.equals(combinedRangeXYPlot0);
      cyclicNumberAxis0.setTickUnit(numberTickUnit0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-544.01025976316));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(1, (-814), 0, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 0
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis(")yjh");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, thermometerPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = null;
      try {
        lookupOp0 = new LookupOp((LookupTable) null, renderingHints0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.LookupOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("unit");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 0.0, 0.0, 0.0);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      numberAxis0.java2DToValue(0.0, rectangle2D_Double0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.lookupTag(linkedList0, set0);
      locale0.stripExtensions();
      NumberAxis.createStandardTickUnits(locale0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-270.5562358731702), "");
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      numberFormat0.setMinimumIntegerDigits(1051);
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.HIGH_END;
      cyclicNumberAxis0.labelAnchorV(axisLabelLocation0);
      cyclicNumberAxis0.setNumberFormatOverride(numberFormat0);
      cyclicNumberAxis0.getAutoRangeIncludesZero();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      NumberAxis.createIntegerTickUnits();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1672.52649), "mA<");
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      xYErrorRenderer0.findRangeBounds(categoryTableXYDataset0);
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getXValue(500, 500);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 500, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDataRange((ValueAxis) null);
      ModuloAxis moduloAxis0 = new ModuloAxis("HH:mm:ss.SSS", (Range) null);
      moduloAxis0.calculateLowestVisibleTickValue();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.5707963267948966), (-1.5707963267948966));
      cyclicNumberAxis0.getAutoRangeIncludesZero();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("+rBsPS\n8#I]{0");
      logarithmicAxis0.setAutoRangeIncludesZero(false);
      logarithmicAxis0.setInverted(false);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = rectangle2D_Double0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      logarithmicAxis0.java2DToValue((-2429.1198067), rectangle2D0, rectangleEdge0);
      logarithmicAxis0.getMarkerBand();
      logarithmicAxis0.calculateHighestVisibleTickValue();
      RangeType rangeType0 = RangeType.POSITIVE;
      logarithmicAxis0.setRangeType(rangeType0);
      logarithmicAxis0.configure();
      RectangleEdge rectangleEdge1 = RectangleEdge.RIGHT;
      logarithmicAxis0.valueToJava2D(0.0, rectangle2D0, rectangleEdge1);
      NumberAxis.createStandardTickUnits();
      logarithmicAxis0.clone();
      Graphics2D graphics2D0 = null;
      TickUnits tickUnits0 = new TickUnits();
      // Undeclared exception!
      try { 
        tickUnits0.getCeilingTickUnit(1.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(24.76190476190476, 24.76190476190476, "123");
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      combinedRangeCategoryPlot0.getChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, true);
      Point point0 = new Point(2052813197, 3034);
      Point point1 = new Point(point0);
      Point point2 = chartPanel0.getLocation(point1);
      rectangle2D_Float0.contains((Point2D) point2);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.selectAutoTickUnit((Graphics2D) null, rectangle2D_Float0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.HIGH_END;
      numberAxis0.labelAnchorV(axisLabelLocation0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-32.519141391968404), (-32.519141391968404), 500, 500);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      numberAxis0.java2DToValue(0.0, rectangle2D_Double0, rectangleEdge0);
      numberAxis0.getNumberFormatOverride();
      numberAxis0.getRangeType();
      numberAxis0.calculateHighestVisibleTickValue();
      System.setCurrentTimeMillis(0L);
      NumberTickUnit numberTickUnit0 = NumberAxis.DEFAULT_TICK_UNIT;
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("unit");
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.HIGH_END;
      numberAxis0.labelAnchorV(axisLabelLocation0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-32.519141391968404), (-32.519141391968404), 0.0, 0.0);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      numberAxis0.java2DToValue(0.0, rectangle2D_Double0, rectangleEdge0);
      numberAxis0.getNumberFormatOverride();
      numberAxis0.getRangeType();
      numberAxis0.calculateHighestVisibleTickValue();
      System.setCurrentTimeMillis(0L);
      numberAxis0.getTickUnit();
      NumberAxis.createStandardTickUnits();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(5, 500, integer0);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0);
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(waferMapPlot0);
      multiplePiePlot0.notifyListeners(plotChangeEvent0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 5, (-522.52105383), 1053.4226879507899, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      numberAxis0.selectAutoTickUnit(graphics2D0, rectangle2D_Double0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("0");
      logarithmicAxis0.setAutoRangeIncludesZero(false);
      logarithmicAxis0.setMinorTickMarkOutsideLength(0.0F);
      logarithmicAxis0.expTickLabelsFlag = false;
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(1.0E-8);
      logarithmicAxis0.setTickUnit(numberTickUnit0);
      logarithmicAxis0.equals("0");
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      logarithmicAxis0.clone();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(jDBCCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1218, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PeriodAxis periodAxis0 = new PeriodAxis("0");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-136.9), "0");
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1218, 0.0F, (-5.0F), (-5.0F));
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      AxisState axisState0 = cyclicNumberAxis0.draw(graphics2D0, 2668.112868, rectangle2D_Float0, rectangle2D_Float0, rectangleEdge0, plotRenderingInfo0);
      RectangleEdge rectangleEdge1 = RectangleEdge.RIGHT;
      // Undeclared exception!
      try { 
        periodAxis0.drawTickLabels(1184, graphics2D0, axisState0, rectangle2D_Float0, rectangleEdge1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1184
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      NumberAxis.createStandardTickUnits();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("2hR(Fw");
      logarithmicAxis0.setAutoTickUnitSelection(false);
      logarithmicAxis0.setAutoRangeIncludesZero(true);
      Object object0 = logarithmicAxis0.clone();
      logarithmicAxis0.equals(object0);
      logarithmicAxis0.getAutoRangeIncludesZero();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2049.129987638566, 2049.129987638566, "");
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = 'k';
      charArray0[2] = '\'';
      charArray0[3] = '+';
      int int0 = 0;
      int int1 = 0;
      FontRenderContext fontRenderContext0 = null;
      try {
        fontRenderContext0 = new FontRenderContext((AffineTransform) null, cyclicNumberAxis0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // AA hint:org.jfree.chart.axis.CyclicNumberAxis@f9
         //
         verifyException("java.awt.font.FontRenderContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      NumberAxis.createStandardTickUnits();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("2hR(Fw");
      logarithmicAxis0.setAutoTickUnitSelection(false);
      logarithmicAxis0.setAutoRangeIncludesZero(true);
      LogarithmicAxis logarithmicAxis1 = (LogarithmicAxis)logarithmicAxis0.clone();
      logarithmicAxis1.setMinorTickCount(500);
      logarithmicAxis0.equals(logarithmicAxis1);
      logarithmicAxis0.getAutoRangeIncludesZero();
      logarithmicAxis1.getNumberFormatOverride();
      logarithmicAxis0.setAutoRangeIncludesZero(false);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      NumberAxis.createIntegerTickUnits(locale0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "123";
      stringArray0[1] = "123";
      stringArray0[2] = "123";
      stringArray0[3] = "123";
      stringArray0[4] = "123";
      stringArray0[5] = "123";
      stringArray0[6] = "123";
      SymbolAxis symbolAxis0 = new SymbolAxis("123", stringArray0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      symbolAxis0.valueToJava2D(0.0, rectangle2D_Float0, rectangleEdge0);
      Rectangle2D rectangle2D0 = null;
      RectangleEdge rectangleEdge1 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        symbolAxis0.java2DToValue((-4.0F), (Rectangle2D) null, rectangleEdge1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-691.88349), 0.0, "TextAnchor.CENTER_LEFT");
      float[][] floatArray0 = new float[7][7];
      float[] floatArray1 = new float[1];
      floatArray1[0] = 2.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      floatArray2[0] = (float) 500;
      floatArray2[1] = 0.0F;
      floatArray0[2] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[1] = 0.0F;
      floatArray3[2] = 2.0F;
      floatArray3[3] = (float) 500;
      floatArray3[4] = (float) 500;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[2];
      floatArray4[0] = (float) 500;
      floatArray4[1] = 2.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[9];
      floatArray5[0] = (float) 500;
      floatArray5[1] = 2.0F;
      floatArray5[2] = (float) 500;
      floatArray5[3] = 947.18256F;
      floatArray5[4] = 537.9887F;
      floatArray5[5] = 0.0F;
      floatArray5[6] = 2.0F;
      floatArray5[7] = 2721.36F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[6];
      floatArray6[0] = (float) 500;
      floatArray6[1] = (float) 500;
      floatArray6[2] = 537.9887F;
      floatArray6[3] = 2.0F;
      floatArray6[4] = 537.9887F;
      floatArray6[5] = 2.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[4];
      floatArray7[0] = 0.0F;
      floatArray7[1] = (float) 500;
      floatArray7[2] = 0.0F;
      floatArray7[3] = 2.1570225F;
      floatArray0[6] = floatArray7;
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(500, 0.0F, renderingHints0);
      jFreeChart0.createBufferedImage(40, 500);
      DirectColorModel directColorModel0 = null;
      try {
        directColorModel0 = new DirectColorModel(500, (-1696), 40, 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Noncontiguous red mask (fffff960
         //
         verifyException("java.awt.image.PackedColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      NumberAxis.createIntegerTickUnits(locale0);
      NumberAxis.createStandardTickUnits(locale0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "123";
      stringArray0[1] = "123";
      stringArray0[2] = "123";
      stringArray0[3] = "123";
      stringArray0[4] = "123";
      stringArray0[5] = "123";
      SymbolAxis symbolAxis0 = new SymbolAxis("123", stringArray0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-4.0F), (-4.0F), 1958.67F, 862.8F);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      symbolAxis0.valueToJava2D(0.0, rectangle2D_Float0, rectangleEdge0);
      symbolAxis0.java2DToValue((-4.0F), rectangle2D_Float0, rectangleEdge0);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp((AffineTransform) null, 500);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }
}
