/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:23:02 GMT 2019
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisCollection;
import org.jfree.chart.ui.RectangleEdge;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AxisCollection_ESTest extends AxisCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AxisCollection axisCollection0 = new AxisCollection();
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(axis0).toString();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      axisCollection0.add(axis0, rectangleEdge0);
      List list0 = axisCollection0.getAxesAtTop();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AxisCollection axisCollection0 = new AxisCollection();
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(axis0).toString();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      axisCollection0.add(axis0, rectangleEdge0);
      List list0 = axisCollection0.getAxesAtRight();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AxisCollection axisCollection0 = new AxisCollection();
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(axis0).toString();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      axisCollection0.add(axis0, rectangleEdge0);
      List list0 = axisCollection0.getAxesAtLeft();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AxisCollection axisCollection0 = new AxisCollection();
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(axis0).toString();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      axisCollection0.add(axis0, rectangleEdge0);
      List list0 = axisCollection0.getAxesAtBottom();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AxisCollection axisCollection0 = new AxisCollection();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      // Undeclared exception!
      try { 
        axisCollection0.add((Axis) null, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AxisCollection axisCollection0 = new AxisCollection();
      List list0 = axisCollection0.getAxesAtBottom();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AxisCollection axisCollection0 = new AxisCollection();
      List list0 = axisCollection0.getAxesAtTop();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AxisCollection axisCollection0 = new AxisCollection();
      List list0 = axisCollection0.getAxesAtRight();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AxisCollection axisCollection0 = new AxisCollection();
      List list0 = axisCollection0.getAxesAtLeft();
      assertTrue(list0.isEmpty());
  }
}
