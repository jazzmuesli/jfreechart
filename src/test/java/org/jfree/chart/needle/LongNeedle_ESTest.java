/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:07:50 GMT 2019
 */

package org.jfree.chart.needle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Stroke;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.needle.LongNeedle;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LongNeedle_ESTest extends LongNeedle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(color0).when(graphics2D0).getColor();
      doReturn(stroke0).when(graphics2D0).getStroke();
      LongNeedle longNeedle0 = new LongNeedle();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(1771.30156).when(rectangle2D0).getHeight();
      doReturn(1771.30156).when(rectangle2D0).getMaxX();
      doReturn(1771.30156).when(rectangle2D0).getMaxY();
      doReturn(0.5).when(rectangle2D0).getMinX();
      doReturn(1771.30156).when(rectangle2D0).getMinY();
      doReturn(1771.30156).when(rectangle2D0).getWidth();
      longNeedle0.draw(graphics2D0, rectangle2D0, (Point2D) null, 1771.30156);
      assertEquals(0.8, longNeedle0.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LongNeedle longNeedle0 = new LongNeedle();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-96.60555155320253)).when(rectangle2D0).getHeight();
      doReturn((-96.60555155320253)).when(rectangle2D0).getMaxX();
      doReturn((-96.60555155320253)).when(rectangle2D0).getMaxY();
      doReturn((-96.60555155320253)).when(rectangle2D0).getMinX();
      doReturn((-3046.890589087)).when(rectangle2D0).getMinY();
      doReturn((-96.60555155320253)).when(rectangle2D0).getWidth();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      longNeedle0.drawNeedle(graphics2D0, rectangle2D0, point2D0, 0.0);
      assertEquals(0.8, longNeedle0.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LongNeedle longNeedle0 = new LongNeedle();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getMaxX();
      doReturn(0.0).when(rectangle2D0).getMaxY();
      doReturn(0.0).when(rectangle2D0).getMinX();
      doReturn(0.0).when(rectangle2D0).getMinY();
      doReturn(0.0).when(rectangle2D0).getWidth();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(point2D0).getX();
      doReturn(0.0).when(point2D0).getY();
      longNeedle0.drawNeedle(graphics2D0, rectangle2D0, point2D0, 1363.62777);
      assertEquals(0.5, longNeedle0.getRotateX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LongNeedle longNeedle0 = new LongNeedle();
      boolean boolean0 = longNeedle0.equals((Object) null);
      assertEquals(0.8, longNeedle0.getRotateY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LongNeedle longNeedle0 = new LongNeedle();
      boolean boolean0 = longNeedle0.equals(longNeedle0);
      assertTrue(boolean0);
      assertEquals(0.8, longNeedle0.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LongNeedle longNeedle0 = new LongNeedle();
      LongNeedle longNeedle1 = new LongNeedle();
      assertTrue(longNeedle1.equals((Object)longNeedle0));
      
      longNeedle1.setSize((-142));
      boolean boolean0 = longNeedle1.equals(longNeedle0);
      assertFalse(longNeedle1.equals((Object)longNeedle0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LongNeedle longNeedle0 = new LongNeedle();
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = longNeedle0.getOutlineStroke();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(color0).when(graphics2D0).getColor();
      doReturn(stroke0).when(graphics2D0).getStroke();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-3986.8954952), 1.0).when(rectangle2D0).getHeight();
      doReturn(1.0).when(rectangle2D0).getMaxX();
      doReturn(8.7664093).when(rectangle2D0).getMaxY();
      doReturn(8.7664093, (-3986.8954952)).when(rectangle2D0).getMinX();
      doReturn(1177.0, (-3986.8954952)).when(rectangle2D0).getMinY();
      doReturn((-3986.8954952), 8.7664093).when(rectangle2D0).getWidth();
      longNeedle0.draw(graphics2D0, rectangle2D0);
      assertEquals(0.8, longNeedle0.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LongNeedle longNeedle0 = new LongNeedle();
      longNeedle0.hashCode();
      assertEquals(0.8, longNeedle0.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LongNeedle longNeedle0 = new LongNeedle();
      LongNeedle longNeedle1 = (LongNeedle)longNeedle0.clone();
      assertEquals(0.8, longNeedle1.getRotateY(), 0.01);
  }
}
