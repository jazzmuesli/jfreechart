/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:49:59 GMT 2019
 */

package org.jfree.chart.needle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.needle.ArrowNeedle;
import org.jfree.chart.needle.LineNeedle;
import org.jfree.chart.needle.MeterNeedle;
import org.jfree.chart.needle.MiddlePinNeedle;
import org.jfree.chart.needle.PinNeedle;
import org.jfree.chart.needle.PlumNeedle;
import org.jfree.chart.needle.PointerNeedle;
import org.jfree.chart.needle.ShipNeedle;
import org.jfree.chart.needle.WindNeedle;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MeterNeedle_ESTest extends MeterNeedle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PointerNeedle pointerNeedle0 = new PointerNeedle();
      pointerNeedle0.setRotateY(4378.082);
      PointerNeedle pointerNeedle1 = new PointerNeedle();
      boolean boolean0 = pointerNeedle0.equals(pointerNeedle1);
      assertEquals(4378.082, pointerNeedle0.getRotateY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ShipNeedle shipNeedle0 = new ShipNeedle();
      assertEquals(0.5, shipNeedle0.getRotateX(), 0.01);
      
      WindNeedle windNeedle0 = new WindNeedle();
      shipNeedle0.setRotateX(0.0);
      shipNeedle0.equals(windNeedle0);
      assertEquals(0.5, windNeedle0.getRotateX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      plumNeedle0.setSize((-6));
      PlumNeedle plumNeedle1 = new PlumNeedle();
      boolean boolean0 = plumNeedle0.equals(plumNeedle1);
      assertEquals((-6), plumNeedle0.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LineNeedle lineNeedle0 = new LineNeedle();
      Line2D.Double line2D_Double0 = new Line2D.Double((-236.532128867), (-236.532128867), (-236.532128867), 1196.22);
      lineNeedle0.defaultDisplay((Graphics2D) null, line2D_Double0);
      assertEquals(5, lineNeedle0.getSize());
      assertEquals(0.5, lineNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, lineNeedle0.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PinNeedle pinNeedle0 = new PinNeedle();
      AffineTransform affineTransform0 = pinNeedle0.getTransform();
      pinNeedle0.clone();
      MiddlePinNeedle middlePinNeedle0 = new MiddlePinNeedle();
      Graphics2D graphics2D0 = null;
      double double0 = 25.5;
      affineTransform0.rotate(25.5, 25.5, 25.5);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Point2D point2D0 = affineTransform0.deltaTransform((Point2D) point2D_Double0, (Point2D) point2D_Double0);
      // Undeclared exception!
      try { 
        middlePinNeedle0.drawNeedle((Graphics2D) null, (Rectangle2D) null, point2D0, -0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.needle.MiddlePinNeedle", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PinNeedle pinNeedle0 = new PinNeedle();
      AffineTransform affineTransform0 = pinNeedle0.getTransform();
      pinNeedle0.clone();
      MiddlePinNeedle middlePinNeedle0 = new MiddlePinNeedle();
      Graphics2D graphics2D0 = null;
      Rectangle2D rectangle2D0 = null;
      double double0 = 25.5;
      affineTransform0.rotate(25.5, 25.5, 25.5);
      int int0 = 0;
      middlePinNeedle0.setSize(int0);
      String string0 = "org.jfree.chart.ChartHints$Key";
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LineNeedle lineNeedle0 = new LineNeedle();
      assertEquals(0.5, lineNeedle0.getRotateY(), 0.01);
      
      lineNeedle0.setRotateY(1.0);
      PlumNeedle plumNeedle0 = new PlumNeedle();
      AffineTransform affineTransform0 = lineNeedle0.getTransform();
      MeterNeedle.transform = affineTransform0;
      plumNeedle0.equals(lineNeedle0);
      lineNeedle0.equals(plumNeedle0);
      assertEquals(0.5, lineNeedle0.getRotateX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      assertEquals(0.5, plumNeedle0.getRotateY(), 0.01);
      
      plumNeedle0.setRotateY(0.0);
      double double0 = plumNeedle0.getRotateY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WindNeedle windNeedle0 = new WindNeedle();
      Color color0 = Color.black;
      windNeedle0.setOutlinePaint(color0);
      Paint paint0 = windNeedle0.getOutlinePaint();
      assertNotNull(paint0);
      assertEquals(0.5, windNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, windNeedle0.getRotateX(), 0.01);
      assertEquals(5, windNeedle0.getSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      plumNeedle0.equals(plumNeedle0);
      assertEquals(5, plumNeedle0.getSize());
      assertEquals(0.5, plumNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, plumNeedle0.getRotateX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(false);
      arrowNeedle0.equals((Object) null);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ShipNeedle shipNeedle0 = new ShipNeedle();
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      // Undeclared exception!
      try { 
        shipNeedle0.draw((Graphics2D) null, rectangle2D0, (Point2D) null, 2507.202565137341);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.needle.MeterNeedle", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PointerNeedle pointerNeedle0 = new PointerNeedle();
      Rectangle rectangle0 = new Rectangle(1, 2048, 1, (-495573150));
      // Undeclared exception!
      try { 
        pointerNeedle0.draw((Graphics2D) null, (Rectangle2D) rectangle0, 3128.04496225);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.needle.MeterNeedle", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PinNeedle pinNeedle0 = new PinNeedle();
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      // Undeclared exception!
      try { 
        pinNeedle0.draw((Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.needle.MeterNeedle", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(4, 4, 4);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10.0, 16777469, (-3973.29), 0.8);
      WindNeedle windNeedle0 = new WindNeedle();
      Point point0 = new Point();
      windNeedle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Double0, (Point2D) point0, (double) (-4489));
      assertEquals(0.5, windNeedle0.getRotateY(), 0.01);
      assertEquals(5, windNeedle0.getSize());
      assertEquals(0.5, windNeedle0.getRotateX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      int int0 = plumNeedle0.getSize();
      assertEquals(5, int0);
      assertEquals(0.5, plumNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, plumNeedle0.getRotateX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      assertEquals(0.5, plumNeedle0.getRotateY(), 0.01);
      
      plumNeedle0.setRotateY(0.0);
      PlumNeedle plumNeedle1 = new PlumNeedle();
      boolean boolean0 = plumNeedle0.equals(plumNeedle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ShipNeedle shipNeedle0 = new ShipNeedle();
      WindNeedle windNeedle0 = new WindNeedle();
      assertEquals(0.5, windNeedle0.getRotateX(), 0.01);
      
      windNeedle0.setRotateX((-1.0));
      shipNeedle0.equals(windNeedle0);
      assertEquals((-1.0), windNeedle0.getRotateX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ShipNeedle shipNeedle0 = new ShipNeedle();
      WindNeedle windNeedle0 = new WindNeedle();
      windNeedle0.setSize((-495573150));
      shipNeedle0.equals(windNeedle0);
      assertEquals((-495573150), windNeedle0.getSize());
      assertEquals(5, shipNeedle0.getSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      PlumNeedle plumNeedle1 = (PlumNeedle)plumNeedle0.clone();
      assertTrue(plumNeedle1.equals((Object)plumNeedle0));
      
      Color color0 = Color.yellow;
      plumNeedle1.setFillPaint(color0);
      boolean boolean0 = plumNeedle0.equals(plumNeedle1);
      assertFalse(plumNeedle1.equals((Object)plumNeedle0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(true);
      ShipNeedle shipNeedle0 = new ShipNeedle();
      Color color0 = Color.BLUE;
      shipNeedle0.setOutlinePaint(color0);
      shipNeedle0.equals(arrowNeedle0);
      assertEquals(0.5, shipNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, shipNeedle0.getRotateX(), 0.01);
      assertEquals(5, shipNeedle0.getSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(4, 4, 4);
      MiddlePinNeedle middlePinNeedle0 = new MiddlePinNeedle();
      middlePinNeedle0.equals(bufferedImage0);
      assertEquals(0.5, middlePinNeedle0.getRotateX(), 0.01);
      assertEquals(5, middlePinNeedle0.getSize());
      assertEquals(0.5, middlePinNeedle0.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      PlumNeedle plumNeedle1 = (PlumNeedle)plumNeedle0.clone();
      boolean boolean0 = plumNeedle0.equals(plumNeedle1);
      assertEquals(0.5, plumNeedle1.getRotateX(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.5, plumNeedle1.getRotateY(), 0.01);
      assertEquals(5, plumNeedle1.getSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      PlumNeedle plumNeedle1 = (PlumNeedle)plumNeedle0.clone();
      assertTrue(plumNeedle1.equals((Object)plumNeedle0));
      
      SystemColor systemColor0 = SystemColor.infoText;
      plumNeedle1.setHighlightPaint(systemColor0);
      boolean boolean0 = plumNeedle0.equals(plumNeedle1);
      assertFalse(plumNeedle1.equals((Object)plumNeedle0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PinNeedle pinNeedle0 = new PinNeedle();
      pinNeedle0.setHighlightPaint((Paint) null);
      assertEquals(5, pinNeedle0.getSize());
      assertEquals(0.5, pinNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, pinNeedle0.getRotateX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      plumNeedle0.setFillPaint((Paint) null);
      assertEquals(5, plumNeedle0.getSize());
      assertEquals(0.5, plumNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, plumNeedle0.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      plumNeedle0.setOutlineStroke((Stroke) null);
      assertEquals(0.5, plumNeedle0.getRotateY(), 0.01);
      assertEquals(5, plumNeedle0.getSize());
      assertEquals(0.5, plumNeedle0.getRotateX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      WindNeedle windNeedle0 = new WindNeedle();
      SystemColor systemColor0 = SystemColor.desktop;
      windNeedle0.setOutlinePaint(systemColor0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      // Undeclared exception!
      try { 
        windNeedle0.drawNeedle((Graphics2D) null, rectangle0, point2D_Double0, 0.5165677398081527);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.needle.MeterNeedle", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PinNeedle pinNeedle0 = new PinNeedle();
      pinNeedle0.setOutlinePaint((Paint) null);
      assertEquals(5, pinNeedle0.getSize());
      assertEquals(0.5, pinNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, pinNeedle0.getRotateX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(false);
      arrowNeedle0.hashCode();
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      plumNeedle0.getHighlightPaint();
      assertEquals(0.5, plumNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, plumNeedle0.getRotateX(), 0.01);
      assertEquals(5, plumNeedle0.getSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LineNeedle lineNeedle0 = new LineNeedle();
      lineNeedle0.getOutlinePaint();
      assertEquals(0.5, lineNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, lineNeedle0.getRotateX(), 0.01);
      assertEquals(5, lineNeedle0.getSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      WindNeedle windNeedle0 = new WindNeedle();
      double double0 = windNeedle0.getRotateX();
      assertEquals(5, windNeedle0.getSize());
      assertEquals(0.5, windNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PinNeedle pinNeedle0 = new PinNeedle();
      double double0 = pinNeedle0.getRotateY();
      assertEquals(5, pinNeedle0.getSize());
      assertEquals(0.5, pinNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(4, 4, 4);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10.0, 16777215, (-3973.29), 0.8);
      WindNeedle windNeedle0 = new WindNeedle();
      windNeedle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Double0);
      assertEquals(0.5, windNeedle0.getRotateY(), 0.01);
      assertEquals(5, windNeedle0.getSize());
      assertEquals(0.5, windNeedle0.getRotateX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      plumNeedle0.setRotateX((-9.0));
      double double0 = plumNeedle0.getRotateX();
      assertEquals((-9.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      plumNeedle0.getFillPaint();
      assertEquals(5, plumNeedle0.getSize());
      assertEquals(0.5, plumNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, plumNeedle0.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PinNeedle pinNeedle0 = new PinNeedle();
      BufferedImage bufferedImage0 = new BufferedImage(4, 4, 4);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10.0, 16777215, (-3973.29), 0.8);
      pinNeedle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Double0, 10.0);
      assertEquals(0.5, pinNeedle0.getRotateX(), 0.01);
      assertEquals(5, pinNeedle0.getSize());
      assertEquals(0.5, pinNeedle0.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ShipNeedle shipNeedle0 = new ShipNeedle();
      BasicStroke basicStroke0 = (BasicStroke)shipNeedle0.getOutlineStroke();
      shipNeedle0.setOutlineStroke(basicStroke0);
      assertEquals(0.5, shipNeedle0.getRotateX(), 0.01);
      assertEquals(5, shipNeedle0.getSize());
      assertEquals(0.5, shipNeedle0.getRotateY(), 0.01);
      assertEquals(2.0F, basicStroke0.getLineWidth(), 0.01F);
  }
}
