/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:19:07 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.math.RoundingMode;
import java.sql.Connection;
import java.text.AttributedCharacterIterator;
import java.text.DecimalFormat;
import java.text.Format;
import java.text.NumberFormat;
import java.util.Hashtable;
import java.util.Map;
import javax.swing.JTable;
import javax.swing.table.DefaultTableColumnModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLabelLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.plot.CenterTextMode;
import org.jfree.chart.plot.PieLabelLinkStyle;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlotState;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.util.Rotation;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesTableModel;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class RingPlot_ESTest extends RingPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isNotify());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertNotNull(ringPlot0);
      
      ringPlot0.setSeparatorPaint(ringPlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isNotify());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(ringPlot0);
      
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertNull(subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(subCategoryAxis0);
      
      Color color0 = (Color)subCategoryAxis0.getSubLabelPaint();
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertNull(subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(color0);
      
      ringPlot0.setSeparatorPaint(color0);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertNull(subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      Color color1 = (Color)ringPlot0.getSeparatorPaint();
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getBlue());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(0, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertSame(color1, color0);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(color1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(ringPlot0);
      
      ringPlot0.setSeparatorsVisible(true);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.isNotify());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(ringPlot0);
      
      Hashtable<AttributedCharacterIterator.Attribute, Integer> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Integer>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("Default", font0.getName());
      assertEquals(12, font0.getSize());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertNotNull(font0);
      
      ringPlot0.setCenterTextFont(font0);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.isNotify());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("Default", font0.getName());
      assertEquals(12, font0.getSize());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Font font1 = ringPlot0.getCenterTextFont();
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.isNotify());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(font1.hasUniformLineMetrics());
      assertTrue(font1.isPlain());
      assertFalse(font1.isItalic());
      assertFalse(font1.isBold());
      assertEquals(12, font1.getSize());
      assertEquals("Default", font1.getName());
      assertEquals(0, font1.getStyle());
      assertFalse(font1.isTransformed());
      assertFalse(font1.hasLayoutAttributes());
      assertEquals(12.0F, font1.getSize2D(), 0.01F);
      assertSame(font1, font0);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(font1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertTrue(ringPlot0.isNotify());
      assertNull(ringPlot0.getCenterText());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertNotNull(ringPlot0);
      
      ringPlot0.setSectionDepth(0.0);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.0, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertTrue(ringPlot0.isNotify());
      assertNull(ringPlot0.getCenterText());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      double double0 = ringPlot0.getSectionDepth();
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.0, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertTrue(ringPlot0.isNotify());
      assertNull(ringPlot0.getCenterText());
      assertEquals(0.0, double0, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(ringPlot0);
      
      ringPlot0.setSectionDepth((-1.0));
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals((-1.0), ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      double double0 = ringPlot0.getSectionDepth();
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals((-1.0), ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, (-112));
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals((-112), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      RingPlot ringPlot0 = new RingPlot(categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals((-112), categoryToPieDataset0.getExtractIndex());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isNotify());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertNotNull(ringPlot0);
      
      ringPlot0.setOuterSeparatorExtension(0.0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals((-112), categoryToPieDataset0.getExtractIndex());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isNotify());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.0, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      double double0 = ringPlot0.getOuterSeparatorExtension();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals((-112), categoryToPieDataset0.getExtractIndex());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isNotify());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.0, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getCenterText());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.isNotify());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertNotNull(ringPlot0);
      
      ringPlot0.setSectionDepth(0.0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.0, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getCenterText());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.isNotify());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      double double0 = ringPlot0.getLabelLinkDepth();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.0, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getCenterText());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.isNotify());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(0.0, double0, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertNull(ringPlot0.getNoDataMessage());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertNotNull(ringPlot0);
      
      ringPlot0.setSectionDepth((-349.33));
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals((-349.33), ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      double double0 = ringPlot0.getLabelLinkDepth();
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals((-349.33), ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals((-174.665), double0, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(ringPlot0);
      
      TimeSeries timeSeries0 = new TimeSeries(1.0F);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNotNull(timeSeries0);
      
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0, false);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertNotNull(timeSeriesTableModel0);
      
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      assertNotNull(defaultTableColumnModel0);
      
      JTable jTable0 = new JTable(timeSeriesTableModel0, defaultTableColumnModel0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertNotNull(jTable0);
      
      Color color0 = jTable0.getSelectionBackground();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertEquals(184, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(229, color0.getBlue());
      assertEquals((-4665371), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(207, color0.getGreen());
      assertNotNull(color0);
      
      ringPlot0.setCenterTextColor(color0);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertEquals(184, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(229, color0.getBlue());
      assertEquals((-4665371), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(207, color0.getGreen());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color1 = ringPlot0.getCenterTextColor();
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals((-4665371), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(229, color1.getBlue());
      assertEquals(255, color1.getAlpha());
      assertEquals(184, color1.getRed());
      assertEquals(207, color1.getGreen());
      assertSame(color1, color0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(color1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(ringPlot0);
      
      ringPlot0.setCenterText("");
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals("", ringPlot0.getCenterText());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      String string0 = ringPlot0.getCenterText();
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals("", ringPlot0.getCenterText());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals("", string0);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertNotNull(ringPlot0);
      
      // Undeclared exception!
      try { 
        ringPlot0.setSeparatorStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.isNotify());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(ringPlot0);
      
      // Undeclared exception!
      try { 
        ringPlot0.setSeparatorPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(ringPlot0);
      
      // Undeclared exception!
      try { 
        ringPlot0.setCenterTextFormatter((Format) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertNull(ringPlot0.getCenterText());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isNotify());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertNotNull(ringPlot0);
      
      // Undeclared exception!
      try { 
        ringPlot0.setCenterTextColor((Color) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'color' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isCircular());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(ringPlot0);
      
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertNotNull(bufferedImage0);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(255, sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertNotNull(sunGraphics2D0);
      
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Rectangle rectangle0 = polygon0.getBounds();
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      RingPlot ringPlot1 = new RingPlot();
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertTrue(ringPlot1.isNotify());
      assertTrue(ringPlot1.getAutoPopulateSectionPaint());
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertFalse(ringPlot1.fetchElementHintingFlag());
      assertTrue(ringPlot1.isOutlineVisible());
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertFalse(ringPlot1.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot1.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot1.getLabelLinkStyle());
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertFalse(ringPlot1.isSubplot());
      assertFalse(ringPlot1.getSimpleLabels());
      assertEquals(0, ringPlot1.getPieIndex());
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertTrue(ringPlot1.isCircular());
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertEquals(Rotation.CLOCKWISE, ringPlot1.getDirection());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot1.getCenterTextMode());
      assertNull(ringPlot1.getNoDataMessage());
      assertNull(ringPlot1.getCenterText());
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(ringPlot1);
      
      // Undeclared exception!
      try { 
        ringPlot0.initialise(sunGraphics2D0, rectangle0, ringPlot1, (Integer) 850, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(ringPlot0);
      
      JFreeChart jFreeChart0 = new JFreeChart("wlOZeT .EM'", ringPlot0);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(bufferedImage0);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertNotNull(sunGraphics2D0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(10, (-2946.0F), 15, 0.0F);
      assertEquals((-2946.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(10.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(17.5, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-2946.0), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(25.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-2946.0), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-2946.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals(15.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(10.0F, rectangle2D_Float0.x, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      Rectangle rectangle0 = new Rectangle(10, 1, 10, 10);
      assertFalse(rectangle0.isEmpty());
      assertEquals(6.0, rectangle0.getCenterY(), 0.01);
      assertEquals(10.0, rectangle0.getX(), 0.01);
      assertEquals(10.0, rectangle0.getWidth(), 0.01);
      assertEquals(11.0, rectangle0.getMaxY(), 0.01);
      assertEquals(20.0, rectangle0.getMaxX(), 0.01);
      assertEquals(10.0, rectangle0.getMinX(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals(15.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1, rectangle0.y);
      assertEquals(10, rectangle0.width);
      assertEquals(10, rectangle0.x);
      assertEquals(10, rectangle0.height);
      assertNotNull(rectangle0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangle2D_Float0.createUnion(rectangle0);
      assertEquals((-2946.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(10.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(17.5, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-2946.0), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(25.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-2946.0), rectangle2D_Float0.getMinY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(6.0, rectangle0.getCenterY(), 0.01);
      assertEquals(10.0, rectangle0.getX(), 0.01);
      assertEquals(10.0, rectangle0.getWidth(), 0.01);
      assertEquals(11.0, rectangle0.getMaxY(), 0.01);
      assertEquals(20.0, rectangle0.getMaxX(), 0.01);
      assertEquals(10.0, rectangle0.getMinX(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals(15.0, rectangle0.getCenterX(), 0.01);
      assertEquals(25.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-2946.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1467.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(17.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(10.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-2946.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals(15.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(10.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(1, rectangle0.y);
      assertEquals(10, rectangle0.width);
      assertEquals(10, rectangle0.x);
      assertEquals(10, rectangle0.height);
      assertEquals(10.0, rectangle2D_Double0.x, 0.01);
      assertEquals(2957.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-2946.0), rectangle2D_Double0.y, 0.01);
      assertEquals(15.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      PiePlotState piePlotState0 = ringPlot0.initialise(sunGraphics2D0, rectangle2D_Double0, ringPlot0, (Integer) 10, plotRenderingInfo0);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals((-2946.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(10.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(17.5, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-2946.0), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(25.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-2946.0), rectangle2D_Float0.getMinY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(6.0, rectangle0.getCenterY(), 0.01);
      assertEquals(10.0, rectangle0.getX(), 0.01);
      assertEquals(10.0, rectangle0.getWidth(), 0.01);
      assertEquals(11.0, rectangle0.getMaxY(), 0.01);
      assertEquals(20.0, rectangle0.getMaxX(), 0.01);
      assertEquals(10.0, rectangle0.getMinX(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals(15.0, rectangle0.getCenterX(), 0.01);
      assertEquals(25.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-2946.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1467.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(17.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(10.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(3, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(90.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals((-2946.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals(15.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(10.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(1, rectangle0.y);
      assertEquals(10, rectangle0.width);
      assertEquals(10, rectangle0.x);
      assertEquals(10, rectangle0.height);
      assertEquals(10.0, rectangle2D_Double0.x, 0.01);
      assertEquals(2957.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-2946.0), rectangle2D_Double0.y, 0.01);
      assertEquals(15.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(piePlotState0);
      
      // Undeclared exception!
      try { 
        ringPlot0.drawItem(sunGraphics2D0, 1, rectangle2D_Double0, piePlotState0, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.RingPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(ringPlot0);
      
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertNotNull(bufferedImage0);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(255, sunGraphics2D0.pixel);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertNotNull(sunGraphics2D0);
      
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Rectangle rectangle0 = polygon0.getBounds();
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertNotNull(piePlotState0);
      
      // Undeclared exception!
      try { 
        ringPlot0.drawItem(sunGraphics2D0, (-4), rectangle0, piePlotState0, (-1084));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(ringPlot0);
      
      double double0 = ringPlot0.getSectionDepth();
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.2, double0, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertTrue(jDBCPieDataset0.getNotify());
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertNotNull(jDBCPieDataset0);
      
      RingPlot ringPlot0 = new RingPlot(jDBCPieDataset0);
      assertTrue(jDBCPieDataset0.getNotify());
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(ringPlot0);
      
      RingPlot ringPlot1 = new RingPlot();
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot1.getCenterTextMode());
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot1.getAutoPopulateSectionOutlinePaint());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot1.getLabelLinkStyle());
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertEquals(0, ringPlot1.getPieIndex());
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertTrue(ringPlot1.isNotify());
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot1.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot1.fetchElementHintingFlag());
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertNull(ringPlot1.getCenterText());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot1.getSimpleLabels());
      assertEquals(Rotation.CLOCKWISE, ringPlot1.getDirection());
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertTrue(ringPlot1.getAutoPopulateSectionPaint());
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot1.isCircular());
      assertTrue(ringPlot1.isOutlineVisible());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertFalse(ringPlot1.isSubplot());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertNotNull(ringPlot1);
      
      boolean boolean0 = ringPlot0.equals(ringPlot1);
      assertTrue(ringPlot0.equals((Object)ringPlot1));
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      assertTrue(jDBCPieDataset0.getNotify());
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot1.getCenterTextMode());
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot1.getAutoPopulateSectionOutlinePaint());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot1.getLabelLinkStyle());
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertEquals(0, ringPlot1.getPieIndex());
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertTrue(ringPlot1.isNotify());
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot1.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot1.fetchElementHintingFlag());
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertNull(ringPlot1.getCenterText());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot1.getSimpleLabels());
      assertEquals(Rotation.CLOCKWISE, ringPlot1.getDirection());
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertTrue(ringPlot1.getAutoPopulateSectionPaint());
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot1.isCircular());
      assertTrue(ringPlot1.isOutlineVisible());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertFalse(ringPlot1.isSubplot());
      assertTrue(boolean0);
      assertNotSame(ringPlot0, ringPlot1);
      assertNotSame(ringPlot1, ringPlot0);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertNull(ringPlot0.getCenterText());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertTrue(ringPlot0.isNotify());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertNotNull(ringPlot0);
      
      boolean boolean0 = ringPlot0.equals("4)mgWkR)wh}W#");
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertNull(ringPlot0.getCenterText());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertTrue(ringPlot0.isNotify());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertTrue(jDBCPieDataset0.getNotify());
      assertNotNull(jDBCPieDataset0);
      
      RingPlot ringPlot0 = new RingPlot(jDBCPieDataset0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertTrue(jDBCPieDataset0.getNotify());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertNotNull(ringPlot0);
      
      boolean boolean0 = ringPlot0.equals(ringPlot0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertTrue(jDBCPieDataset0.getNotify());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertTrue(boolean0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isCircular());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertNotNull(ringPlot0);
      
      ringPlot0.setSectionDepth(0.0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.0, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isCircular());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      RingPlot ringPlot1 = new RingPlot(defaultPieDataset0);
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot1.getSimpleLabels());
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertFalse(ringPlot1.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot1.getAutoPopulateSectionPaint());
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertEquals(Rotation.CLOCKWISE, ringPlot1.getDirection());
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertTrue(ringPlot1.isCircular());
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot1.getLabelLinkStyle());
      assertEquals(CenterTextMode.NONE, ringPlot1.getCenterTextMode());
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertFalse(ringPlot1.isSubplot());
      assertEquals(0, ringPlot1.getPieIndex());
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot1.isOutlineVisible());
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot1.getAutoPopulateSectionOutlinePaint());
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot1.isNotify());
      assertFalse(ringPlot1.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertNull(ringPlot1.getCenterText());
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(ringPlot1);
      
      boolean boolean0 = ringPlot0.equals(ringPlot1);
      assertFalse(ringPlot0.equals((Object)ringPlot1));
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.0, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.isNotify());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isCircular());
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot1.getSimpleLabels());
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertFalse(ringPlot1.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot1.getAutoPopulateSectionPaint());
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertEquals(Rotation.CLOCKWISE, ringPlot1.getDirection());
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertTrue(ringPlot1.isCircular());
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot1.getLabelLinkStyle());
      assertEquals(CenterTextMode.NONE, ringPlot1.getCenterTextMode());
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertFalse(ringPlot1.isSubplot());
      assertEquals(0, ringPlot1.getPieIndex());
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot1.isOutlineVisible());
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot1.getAutoPopulateSectionOutlinePaint());
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot1.isNotify());
      assertFalse(ringPlot1.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertNull(ringPlot1.getCenterText());
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(boolean0);
      assertNotSame(ringPlot0, ringPlot1);
      assertNotSame(ringPlot1, ringPlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.isNotify());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertNotNull(ringPlot0);
      
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(10, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertNotNull(bufferedImage0);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(10, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(255, sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertNotNull(sunGraphics2D0);
      
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Rectangle rectangle0 = polygon0.getBounds();
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertNotNull(piePlotState0);
      
      ringPlot0.drawItem(sunGraphics2D0, 0, rectangle0, piePlotState0, (-1084));
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.isNotify());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(10, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(255, sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getCenterText());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertNotNull(ringPlot0);
      
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(10, bufferedImage0.getHeight());
      assertNotNull(bufferedImage0);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(255, sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.paintState);
      assertNotNull(sunGraphics2D0);
      
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Rectangle rectangle0 = polygon0.getBounds();
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertNotNull(rectangle0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertNotNull(piePlotState0);
      
      defaultPieDataset0.setValue((Comparable) 90.0, 0.0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      ringPlot0.drawItem(sunGraphics2D0, 0, rectangle0, piePlotState0, (-1084));
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getCenterText());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(Double.NaN, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(255, sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(ringPlot0);
      
      ringPlot0.setInnerSeparatorExtension(486.7098989);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(486.7098989, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isNotify());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(ringPlot0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertNotNull(decimalFormat0);
      
      ringPlot0.setCenterTextFormatter(decimalFormat0);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isNotify());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(ringPlot0.getCenterText());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertNotNull(ringPlot0);
      
      ringPlot0.setSeparatorsVisible(false);
      assertFalse(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(ringPlot0.getCenterText());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      boolean boolean0 = ringPlot0.getSeparatorsVisible();
      assertFalse(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(ringPlot0.getCenterText());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertTrue(ringPlot0.isNotify());
      assertFalse(boolean0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.isNotify());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(ringPlot0);
      
      boolean boolean0 = ringPlot0.getSeparatorsVisible();
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertTrue(ringPlot0.isNotify());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(boolean0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertNotNull(ringPlot0);
      
      CenterTextMode centerTextMode0 = ringPlot0.getCenterTextMode();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getCenterText());
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(CenterTextMode.NONE, centerTextMode0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getCenterText());
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(ringPlot0);
      
      ringPlot0.setCenterText("\"4bHMbQ(H");
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals("\"4bHMbQ(H", ringPlot0.getCenterText());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      String string0 = ringPlot0.getCenterText();
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isNotify());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(Rotation.CLOCKWISE, ringPlot0.getDirection());
      assertFalse(ringPlot0.fetchElementHintingFlag());
      assertFalse(ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(PieLabelLinkStyle.STANDARD, ringPlot0.getLabelLinkStyle());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(CenterTextMode.NONE, ringPlot0.getCenterTextMode());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals("\"4bHMbQ(H", ringPlot0.getCenterText());
      assertEquals("\"4bHMbQ(H", string0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      NumberTickUnit numberTickUnit0 = NumberAxis.DEFAULT_TICK_UNIT;
      Stroke stroke0 = ringPlot0.lookupSectionOutlineStroke(numberTickUnit0, true);
      ringPlot0.setSeparatorStroke(stroke0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      double double0 = ringPlot0.getLabelLinkDepth();
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      PiePlotState piePlotState0 = ringPlot0.initialise(graphics2D0, rectangle0, ringPlot0, (Integer) ((SunGraphics2D) graphics2D0).antialiasHint, plotRenderingInfo0);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(3, piePlotState0.getPassesRequired());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      DecimalFormat decimalFormat0 = (DecimalFormat)ringPlot0.getCenterTextFormatter();
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      double double0 = ringPlot0.getInnerSeparatorExtension();
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, double0, 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.getSeparatorStroke();
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.getCenterTextColor();
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      double double0 = ringPlot0.getOuterSeparatorExtension();
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.2, double0, 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.getCenterText();
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      CenterTextMode centerTextMode0 = CenterTextMode.VALUE;
      ringPlot0.setCenterTextMode(centerTextMode0);
      RingPlot ringPlot1 = new RingPlot((PieDataset) null);
      boolean boolean0 = ringPlot0.equals(ringPlot1);
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      RingPlot ringPlot0 = new RingPlot(jDBCPieDataset0);
      Color color0 = (Color)ringPlot0.getSeparatorPaint();
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(128, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      // Undeclared exception!
      try { 
        ringPlot0.setCenterTextFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
