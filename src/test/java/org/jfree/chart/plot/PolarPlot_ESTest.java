/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 20:33:39 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.TextField;
import java.awt.color.ColorSpace;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ConvolveOp;
import java.awt.image.DirectColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.RasterFormatException;
import java.awt.image.RescaleOp;
import java.sql.Connection;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PropertyResourceBundle;
import java.util.ResourceBundle;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.Predicate;
import javax.swing.DefaultCellEditor;
import javax.swing.JApplet;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLayer;
import javax.swing.JPasswordField;
import javax.swing.JSpinner;
import javax.swing.JTabbedPane;
import javax.swing.JTree;
import javax.swing.JViewport;
import javax.swing.plaf.multi.MultiTabbedPaneUI;
import javax.swing.text.DefaultCaret;
import javax.swing.text.JTextComponent;
import javax.swing.tree.DefaultTreeCellEditor;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLabelLocation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTick;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.DateTickUnitType;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.StandardTickUnitSource;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnit;
import org.jfree.chart.axis.TickUnits;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.ChartChangeEventType;
import org.jfree.chart.event.MarkerChangeEvent;
import org.jfree.chart.event.PlotChangeListener;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.needle.WindNeedle;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.DefaultDrawingSupplier;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarAxisLocation;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.PolarItemRenderer;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.ui.TextAnchor;
import org.jfree.chart.util.DefaultShadowGenerator;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DefaultHeatMapDataset;
import org.jfree.data.general.DefaultKeyedValueDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PolarPlot_ESTest extends PolarPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, logAxis0, defaultPolarItemRenderer0);
      polarPlot0.setForegroundAlpha(10);
      logAxis0.setTickLabelsVisible(false);
      logAxis0.setTickMarkInsideLength(0.5F);
      polarPlot0.getLegendItems();
      TickUnits tickUnits0 = new TickUnits();
      logAxis0.setStandardTickUnits(tickUnits0);
      polarPlot0.getPlotType();
      polarPlot0.getIndexOf(defaultPolarItemRenderer0);
      int int0 = Plot.MINIMUM_HEIGHT_TO_DRAW;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      polarPlot0.getAxis();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.addCornerTextItem("");
      polarPlot0.isRangeZoomable();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      polarPlot0.setAxis((ValueAxis) periodAxis0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.setRect(0.05, (double) 2.0F, (-37.094988996399934), 0.7853981633974483);
      polarPlot0.translateToJava2D(835.0246573628, 835.0246573628, periodAxis0, defaultCaret0);
      polarPlot0.getLegendItems();
      polarPlot0.setRadiusMinorGridlinesVisible(true);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_RIGHT;
      Color color0 = Color.getColor("", (-1713));
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-3786.96F);
      floatArray0[2] = (float) 10;
      floatArray0[3] = (-3786.96F);
      floatArray0[4] = (float) 10;
      color0.getRGBColorComponents(floatArray0);
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator((-1713), color0, (-3786.96F), 2, 0.0);
      polarPlot0.getRenderer((-38));
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage((-1713), 0, 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 500
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      ThermometerPlot thermometerPlot1 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis1 = thermometerPlot1.getRangeAxis();
      thermometerPlot0.setForegroundAlpha(1244.0F);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis1);
      thermometerPlot0.addChangeListener(combinedRangeXYPlot0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(10, 1654, 2536.5632433, 500, (-90.0), 80.2628526955848);
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      defaultValueDataset0.setGroup(datasetGroup0);
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, valueAxis0, defaultPolarItemRenderer0);
      valueAxis0.setRange(valueAxis1.DEFAULT_RANGE, true, false);
      polarPlot0.getAxisLocation();
      polarPlot0.getDatasetCount();
      timePeriodValuesCollection0.getDomainUpperBound(false);
      polarPlot0.setAxis(822, valueAxis0, true);
      polarPlot0.getLegendItems();
      polarPlot0.clone();
      polarPlot0.getAxisForDataset(10);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1231.654, 0.025);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.getDataset(500);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, cyclicNumberAxis0, defaultPolarItemRenderer0);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_LEFT;
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 10;
      doubleArray2[1] = (double) 0.0F;
      doubleArray2[2] = 0.05;
      doubleArray2[3] = (double) 10;
      doubleArray2[4] = (-1861.508535562);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 0.025;
      doubleArray3[1] = 0.05;
      doubleArray3[2] = 0.05;
      doubleArray3[3] = (double) 10;
      doubleArray3[4] = 45.0;
      doubleArray3[5] = (double) 10;
      doubleArray3[6] = (double) 10;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 1.0E-8;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (double) 10;
      doubleArray5[1] = (double) 10;
      doubleArray5[2] = (double) 1.0F;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(6, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      polarPlot0.drawAxis(cyclicNumberAxis0, polarAxisLocation0, graphics2D0, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      ThermometerPlot thermometerPlot1 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis1 = thermometerPlot1.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis1);
      thermometerPlot0.addChangeListener(combinedRangeXYPlot0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, valueAxis0, defaultPolarItemRenderer0);
      PolarAxisLocation polarAxisLocation0 = polarPlot0.getAxisLocation();
      polarPlot0.setAxisLocation(2, polarAxisLocation0, true);
      polarPlot0.getDatasetCount();
      polarPlot0.setAxis(822, valueAxis0, true);
      PolarPlot polarPlot1 = (PolarPlot)polarPlot0.clone();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-33);
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(10, byteArray0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.title.CompositeTitle", valueAxis1.DEFAULT_TICK_LABEL_FONT, thermometerPlot1, true);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      BufferedImage bufferedImage0 = new BufferedImage(777, 10, 1);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, (byte) (-100), 1, 0, 776, (byte) (-115), false, true, false, false, false, false);
      DirectColorModel directColorModel0 = (DirectColorModel)chartPanel0.getColorModel();
      BufferedImage bufferedImage1 = lookupOp0.createCompatibleDestImage(bufferedImage0, directColorModel0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage1.createGraphics();
      polarPlot1.drawCornerTextItems(sunGraphics2D0, (Rectangle2D) null);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.clearCornerTextItems();
      polarPlot0.clone();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      polarPlot0.setAxis(534, valueAxis0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      JFreeChart jFreeChart0 = new JFreeChart("", thermometerPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 12, (-149), 2382, (-1821), 0, 813, true, true, true, true, true, false);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Point point0 = chartPanel0.translateJava2DToScreen(point2D_Double0);
      Point point1 = new Point(point0);
      polarPlot0.zoomRangeAxes((-90.0), plotRenderingInfo0, (Point2D) point1, true);
      polarPlot0.getAngleTickUnit();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, logAxis0, defaultPolarItemRenderer0);
      polarPlot0.setForegroundAlpha(10);
      logAxis0.setTickLabelsVisible(false);
      logAxis0.setTickMarkInsideLength(0.5F);
      polarPlot0.getLegendItems();
      polarPlot0.getPlotType();
      polarPlot0.getIndexOf(defaultPolarItemRenderer0);
      int int0 = Plot.MINIMUM_HEIGHT_TO_DRAW;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      polarPlot0.zoomRangeAxes((-2586.979860499884), plotRenderingInfo0, (Point2D) point0, false);
      // Undeclared exception!
      try { 
        polarPlot0.translateToJava2D((-4899.0484156376), 0, logAxis0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      ThermometerPlot thermometerPlot1 = new ThermometerPlot(defaultValueDataset0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("", "nR3b,", "");
      timePeriodValuesCollection0.addSeries(timePeriodValues0);
      ValueAxis valueAxis1 = thermometerPlot1.getRangeAxis();
      thermometerPlot0.setForegroundAlpha(1243.4915F);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis1);
      thermometerPlot0.addChangeListener(combinedRangeXYPlot0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultValueDataset0.removeChangeListener(thermometerPlot1);
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(10, 1654, 2536.5632433, 500, (-90.0), 80.2628526955848);
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      defaultValueDataset0.setGroup(datasetGroup0);
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, valueAxis0, defaultPolarItemRenderer0);
      PolarAxisLocation polarAxisLocation0 = polarPlot0.getAxisLocation();
      polarPlot0.setAxisLocation(2, polarAxisLocation0, true);
      polarPlot0.getDatasetCount();
      timePeriodValuesCollection0.getDomainUpperBound(false);
      polarPlot0.setAxis(822, valueAxis0, true);
      polarPlot0.getLegendItems();
      PolarPlot polarPlot1 = (PolarPlot)polarPlot0.clone();
      polarPlot1.isRadiusMinorGridlinesVisible();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getFixedLegendItems();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      RingPlot ringPlot0 = new RingPlot(jDBCPieDataset0);
      polarPlot0.setParent(ringPlot0);
      polarPlot0.fireChangeEvent();
      polarPlot0.setAngleGridlinesVisible(true);
      polarPlot0.getRenderer(18);
      polarPlot0.getAngleTickUnit();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_LEFT;
      polarPlot0.setAxisLocation(0, polarAxisLocation0);
      polarPlot0.mapDatasetToAxis(18, 2247);
      polarPlot0.getAxisForDataset(10);
      polarPlot0.setAngleLabelsVisible(false);
      polarPlot0.getAngleGridlinePaint();
      polarPlot0.setAngleOffset(272.0);
      polarPlot0.removeCornerTextItem("8m'vTk48WJ<Xc]5^LR");
      polarPlot0.isRadiusGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis numberAxis0 = new NumberAxis("org.jfree.chart.plot.LocalizationBundle");
      PolarPlot polarPlot0 = new PolarPlot(xYIntervalSeriesCollection0, numberAxis0, defaultPolarItemRenderer0);
      polarPlot0.getDataRange(numberAxis0);
      polarPlot0.setAxis(367, (ValueAxis) numberAxis0, true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getFixedLegendItems();
      polarPlot0.setAngleGridlinesVisible(true);
      polarPlot0.getRenderer(10);
      polarPlot0.getAngleTickUnit();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_LEFT;
      polarPlot0.setAxisLocation(10, polarAxisLocation0);
      polarPlot0.mapDatasetToAxis(10, 2247);
      polarPlot0.getAxisForDataset(10);
      polarPlot0.setAngleLabelsVisible(false);
      polarPlot0.getAngleGridlinePaint();
      polarPlot0.removeCornerTextItem("8'vTk^\u00048WJ<Xc]5^LR");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Font font0 = PiePlot.DEFAULT_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("Y~_bx}<vOE.!$Y(H&+T", font0, polarPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 803, 803, (-2445), 10, 6, true, false, false, true, false, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(2);
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      LogAxis logAxis0 = new LogAxis();
      Rectangle rectangle0 = new Rectangle();
      Point point0 = polarPlot0.translateToJava2D(768, 2, logAxis0, rectangle0);
      Point2D point2D0 = affineTransform1.inverseTransform((Point2D) point0, (Point2D) point0);
      polarPlot0.zoomDomainAxes(2026.85, plotRenderingInfo0, point2D0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 1);
      bufferedImage0.getAlphaRaster();
      bufferedImage0.getScaledInstance(1769, 1769, 10);
      polarPlot0.setBackgroundImage(bufferedImage0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      polarPlot0.setRenderer(1769, (PolarItemRenderer) defaultPolarItemRenderer0, false);
      polarPlot0.setBackgroundImageAlignment(2282);
      polarPlot0.setBackgroundImageAlpha(0.0F);
      PolarAxisLocation polarAxisLocation0 = polarPlot0.getAxisLocation();
      polarPlot0.getLegendItems();
      polarPlot0.getAngleTickUnit();
      List list0 = polarPlot0.refreshAngleTicks();
      polarPlot0.setCounterClockwise(true);
      polarPlot0.equals(polarAxisLocation0);
      polarPlot0.getDatasetCount();
      polarPlot0.getIndexOf(defaultPolarItemRenderer0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      yIntervalSeriesCollection0.clone();
      polarPlot0.setDataset(40, (XYDataset) yIntervalSeriesCollection0);
      polarPlot0.getAxisForDataset(1769);
      int int0 = new Integer(500);
      polarPlot0.refreshAngleTicks();
      // Undeclared exception!
      try { 
        polarPlot0.mapDatasetToAxes(2282, list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Indices must be Integer instances.
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      int int0 = 1738;
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1738, 10, (-90.0), 10, 90.0, 1738);
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      datasetGroup0.clone();
      polarPlot0.setDatasetGroup(datasetGroup0);
      TextAnchor textAnchor0 = TextAnchor.HALF_ASCENT_CENTER;
      polarPlot0.getPlotType();
      polarPlot0.mapDatasetToAxis(1738, (-1555));
      polarPlot0.clearCornerTextItems();
      int int1 = 5;
      JFreeChart jFreeChart0 = new JFreeChart(";;lg}gO6E/[O0q0kHkc", polarPlot0);
      JFreeChart jFreeChart1 = new JFreeChart(polarPlot0);
      PolarChartPanel polarChartPanel0 = new PolarChartPanel(jFreeChart1);
      ChartRenderingInfo chartRenderingInfo0 = polarChartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(9999, 1738, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getFixedLegendItems();
      polarPlot0.fireChangeEvent();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ChartEntity: ";
      stringArray0[1] = "ChartEntity: ";
      stringArray0[2] = "ChartEntity: ";
      stringArray0[3] = "ChartEntity: ";
      stringArray0[4] = "ChartEntity: ";
      stringArray0[5] = "ChartEntity: ";
      stringArray0[6] = "ChartEntity: ";
      stringArray0[7] = "ChartEntity: ";
      stringArray0[8] = "ChartEntity: ";
      SymbolAxis symbolAxis0 = new SymbolAxis("ChartEntity: ", stringArray0);
      symbolAxis0.setAutoRangeMinimumSize((double) 1.0F, false);
      polarPlot0.setAxis((ValueAxis) symbolAxis0);
      polarPlot0.setAngleGridlinesVisible(true);
      polarPlot0.getRenderer(18);
      polarPlot0.getAngleTickUnit();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_LEFT;
      polarPlot0.setAxisLocation(0, polarAxisLocation0);
      polarPlot0.mapDatasetToAxis(991, 2247);
      polarPlot0.getAxisForDataset((-770));
      polarPlot0.setAngleLabelsVisible(false);
      polarPlot0.removeCornerTextItem("8m'vTk48WJ<Xc]5^LR");
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      polarPlot0.indexOf(xIntervalSeriesCollection0);
      polarPlot0.calculateTextAnchor(2405.1);
      polarPlot0.isAngleLabelsVisible();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      ThermometerPlot thermometerPlot1 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis1 = thermometerPlot1.getRangeAxis();
      thermometerPlot0.setForegroundAlpha(1244.0F);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis1);
      thermometerPlot0.addChangeListener(combinedRangeXYPlot0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(10, 1654, 2536.5632433, 500, 3, 80.2628526955848);
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      defaultValueDataset0.setGroup(datasetGroup0);
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, valueAxis0, defaultPolarItemRenderer0);
      polarPlot0.getAxisLocation();
      polarPlot0.getDatasetCount();
      timePeriodValuesCollection0.getDomainUpperBound(false);
      polarPlot0.setAxis(822, valueAxis0, true);
      polarPlot0.getLegendItems();
      PolarPlot polarPlot1 = (PolarPlot)polarPlot0.clone();
      // Undeclared exception!
      try { 
        polarPlot1.mapDatasetToAxes(3, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getFixedLegendItems();
      polarPlot0.fireChangeEvent();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ChartEntity: ";
      stringArray0[1] = "ChartEntity: ";
      stringArray0[2] = "ChartEntity: ";
      stringArray0[3] = "ChartEntity: ";
      stringArray0[4] = "ChartEntity: ";
      stringArray0[5] = "ChartEntity: ";
      stringArray0[6] = "ChartEntity: ";
      stringArray0[7] = "ChartEntity: ";
      stringArray0[8] = "ChartEntity: ";
      SymbolAxis symbolAxis0 = new SymbolAxis("ChartEntity: ", stringArray0);
      symbolAxis0.setAutoRangeMinimumSize((double) 1.0F, false);
      polarPlot0.setAxis((ValueAxis) symbolAxis0);
      polarPlot0.setAngleGridlinesVisible(true);
      polarPlot0.getAngleTickUnit();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_LEFT;
      polarPlot0.setAxisLocation(0, polarAxisLocation0);
      polarPlot0.mapDatasetToAxis(991, 2247);
      polarPlot0.getAxisForDataset((-770));
      polarPlot0.setAngleLabelsVisible(true);
      polarPlot0.removeCornerTextItem("8m'vTk48WJ<Xc]5^LR");
      polarPlot0.getAxis();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getFixedLegendItems();
      polarPlot0.fireChangeEvent();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ChartEntity: ";
      stringArray0[1] = "ChartEntity: ";
      stringArray0[2] = "ChartEntity: ";
      stringArray0[3] = "ChartEntity: ";
      stringArray0[4] = "ChartEntity: ";
      stringArray0[5] = "ChartEntity: ";
      stringArray0[6] = "ChartEntity: ";
      stringArray0[7] = "ChartEntity: ";
      stringArray0[8] = "ChartEntity: ";
      SymbolAxis symbolAxis0 = new SymbolAxis("ChartEntity: ", stringArray0);
      symbolAxis0.pan(10);
      symbolAxis0.setAutoRangeMinimumSize((double) 1.0F, false);
      polarPlot0.setAxis((ValueAxis) symbolAxis0);
      polarPlot0.setAngleGridlinesVisible(true);
      polarPlot0.getRenderer(18);
      polarPlot0.getAngleTickUnit();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_LEFT;
      polarPlot0.setAxisLocation(0, polarAxisLocation0);
      polarPlot0.mapDatasetToAxis(991, 2247);
      polarPlot0.getAxisForDataset((-770));
      polarPlot0.setAngleLabelsVisible(false);
      polarPlot0.removeCornerTextItem("8m'vTk48WJ<Xc]5^LR");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 1);
      bufferedImage0.getAlphaRaster();
      bufferedImage0.getScaledInstance(1769, 1769, 10);
      polarPlot0.setBackgroundImage(bufferedImage0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      polarPlot0.setRenderer(1769, (PolarItemRenderer) defaultPolarItemRenderer0, false);
      polarPlot0.setBackgroundImageAlignment(2282);
      polarPlot0.setBackgroundImageAlpha(0.0F);
      PolarAxisLocation polarAxisLocation0 = polarPlot0.getAxisLocation();
      polarPlot0.getLegendItems();
      polarPlot0.getAngleTickUnit();
      polarPlot0.refreshAngleTicks();
      polarPlot0.setCounterClockwise(true);
      polarPlot0.equals(polarAxisLocation0);
      polarPlot0.getDatasetCount();
      polarPlot0.getIndexOf(defaultPolarItemRenderer0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      yIntervalSeriesCollection0.clone();
      polarPlot0.setDataset(40, (XYDataset) yIntervalSeriesCollection0);
      polarPlot0.getAxisForDataset(1769);
      polarPlot0.getIndexOf(defaultPolarItemRenderer0);
      polarPlot0.refreshAngleTicks();
      polarPlot0.getLegendItems();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1294.2, ")%d?o");
      PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, cyclicNumberAxis0, (PolarItemRenderer) null);
      LinkedList<DefaultHeatMapDataset> linkedList0 = new LinkedList<DefaultHeatMapDataset>();
      linkedList0.clear();
      polarPlot0.getLegendItems();
      polarPlot0.isAngleGridlinesVisible();
      List list0 = polarPlot0.buildRadialTicks(linkedList0);
      // Undeclared exception!
      try { 
        polarPlot0.mapDatasetToAxes(500, list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, logAxis0, defaultPolarItemRenderer0);
      polarPlot0.setForegroundAlpha(10);
      logAxis0.setTickLabelsVisible(false);
      logAxis0.setTickMarkInsideLength(0.5F);
      polarPlot0.getLegendItems();
      polarPlot0.getPlotType();
      polarPlot0.getIndexOf(defaultPolarItemRenderer0);
      polarPlot0.getDatasetCount();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      polarPlot0.zoomRangeAxes((-2586.979860499884), plotRenderingInfo0, (Point2D) point0, false);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      StandardTickUnitSource standardTickUnitSource0 = new StandardTickUnitSource();
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.DAY;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 554);
      standardTickUnitSource0.getLargerTickUnit(dateTickUnit0);
      TickUnit tickUnit0 = standardTickUnitSource0.getCeilingTickUnit(0.0);
      polarPlot0.setAngleTickUnit(tickUnit0);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.SOUTH_RIGHT;
      polarPlot0.setAxisLocation(polarAxisLocation0);
      PolarPlot polarPlot1 = (PolarPlot)polarPlot0.clone();
      polarPlot0.setRadiusGridlinesVisible(true);
      polarPlot0.getRadiusGridlinePaint();
      polarPlot1.getAngleTickUnit();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      StandardTickUnitSource standardTickUnitSource0 = new StandardTickUnitSource();
      TickUnit tickUnit0 = standardTickUnitSource0.getCeilingTickUnit(0.0);
      LogAxis logAxis0 = new LogAxis();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.EAST_ABOVE;
      JFreeChart jFreeChart0 = new JFreeChart((String) null, polarPlot0);
      PolarChartPanel polarChartPanel0 = new PolarChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = polarChartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JViewport jViewport0 = new JViewport();
      Rectangle rectangle0 = jViewport0.getViewRect();
      polarPlot0.drawAxis(logAxis0, polarAxisLocation0, graphics2D0, rectangle0);
      polarPlot0.setAngleTickUnit(tickUnit0);
      PolarAxisLocation polarAxisLocation1 = PolarAxisLocation.SOUTH_LEFT;
      polarPlot0.setAxisLocation(polarAxisLocation1);
      polarPlot0.clone();
      polarPlot0.setRadiusGridlinesVisible(true);
      polarPlot0.getAxis();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.setLegendShape(500, (Shape) null);
      numberAxis0.centerRange((double) defaultPolarItemRenderer0.ZERO);
      PolarPlot polarPlot0 = new PolarPlot(defaultTableXYDataset0, numberAxis0, defaultPolarItemRenderer0);
      polarPlot0.setNoDataMessageFont(numberAxis0.DEFAULT_TICK_LABEL_FONT);
      numberAxis0.setFixedAutoRange(280.0);
      numberAxis0.pan((-2961.1906131619817));
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(defaultTableXYDataset0, defaultTableXYDataset0);
      polarPlot0.datasetChanged(datasetChangeEvent0);
      System.setCurrentTimeMillis(500);
      DatasetGroup datasetGroup0 = new DatasetGroup("Value:");
      defaultTableXYDataset0.setGroup(datasetGroup0);
      defaultPolarItemRenderer0.setSeriesFillPaint(754, numberAxis0.DEFAULT_TICK_MARK_PAINT, true);
      numberAxis0.setVisible(true);
      polarPlot0.indexOf(defaultTableXYDataset0);
      polarPlot0.getAngleOffset();
      polarPlot0.getAxisForDataset(500);
      polarPlot0.isAngleLabelsVisible();
      polarPlot0.getDataset();
      polarPlot0.isRadiusMinorGridlinesVisible();
      polarPlot0.getFixedLegendItems();
      polarPlot0.equals(datasetChangeEvent0);
      polarPlot0.getAngleGridlineStroke();
      Stack<DefaultPieDataset> stack0 = new Stack<DefaultPieDataset>();
      DateAxis dateAxis0 = new DateAxis("]<$iajzOJ");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) dateAxis0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate2);
      stack0.removeIf(predicate3);
      // Undeclared exception!
      try { 
        polarPlot0.mapDatasetToAxes(0, stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getFixedLegendItems();
      polarPlot0.fireChangeEvent();
      polarPlot0.setAngleGridlinesVisible(true);
      polarPlot0.getRenderer(18);
      polarPlot0.getAngleTickUnit();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_LEFT;
      polarPlot0.setAxisLocation(0, polarAxisLocation0);
      Font font0 = new Font("", 2747, 10);
      JFreeChart jFreeChart0 = new JFreeChart("", font0, polarPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Rectangle rectangle0 = new Rectangle(793, 817, 300, (-3502));
      Rectangle rectangle1 = new Rectangle(rectangle0);
      Rectangle rectangle2 = chartPanel0.getBounds(rectangle1);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2247;
      floatArray0[1] = (float) 10;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      Kernel kernel0 = new Kernel(0, 768, floatArray0);
      ConvolveOp convolveOp0 = new ConvolveOp(kernel0);
      Point point0 = new Point();
      Point2D point2D0 = convolveOp0.getPoint2D(point0, point0);
      rectangle1.setFrameFromDiagonal(point2D0, point2D0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      polarPlot0.drawGridlines((Graphics2D) null, rectangle2, arrayList0, arrayList0);
      polarPlot0.mapDatasetToAxis(18, 2247);
      polarPlot0.getAxisForDataset(10);
      polarPlot0.setAngleLabelsVisible(false);
      polarPlot0.getAngleGridlinePaint();
      polarPlot0.removeCornerTextItem("8m'vTk48WJ<Xc]5^LR");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      ThermometerPlot thermometerPlot1 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis1 = thermometerPlot1.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis1);
      thermometerPlot0.addChangeListener(combinedRangeXYPlot0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, valueAxis0, defaultPolarItemRenderer0);
      PolarAxisLocation polarAxisLocation0 = polarPlot0.getAxisLocation();
      timePeriodValuesCollection0.indexOf(2.0F);
      polarPlot0.setAxisLocation(2, polarAxisLocation0, true);
      polarPlot0.getDatasetCount();
      polarPlot0.setAxis(822, valueAxis0, true);
      polarPlot0.getAxis();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      ThermometerPlot thermometerPlot1 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis1 = thermometerPlot1.getRangeAxis();
      thermometerPlot0.setForegroundAlpha(1244.0F);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis1);
      thermometerPlot0.addChangeListener(combinedRangeXYPlot0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      valueAxis0.hasListener(thermometerPlot1);
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(10, 1654, 2536.5632433, 500, (-90.0), 80.2628526955848);
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      defaultValueDataset0.setGroup(datasetGroup0);
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, valueAxis0, defaultPolarItemRenderer0);
      PolarAxisLocation polarAxisLocation0 = polarPlot0.getAxisLocation();
      polarPlot0.setAxisLocation(2, polarAxisLocation0, true);
      polarPlot0.getDatasetCount();
      timePeriodValuesCollection0.getDomainUpperBound(false);
      polarPlot0.setAxis(822, valueAxis0, true);
      polarPlot0.getLegendItems();
      polarPlot0.clone();
      polarPlot0.getRenderer(1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("unit");
      double double0 = 255.0;
      periodAxis0.setLowerBound(255.0);
      polarPlot0.setBackgroundImageAlpha(0.0F);
      polarPlot0.addChangeListener((PlotChangeListener) null);
      polarPlot0.setMargin((-1262));
      polarPlot0.setAxis(8, (ValueAxis) periodAxis0, true);
      periodAxis0.setAxisLineVisible(true);
      polarPlot0.getAxisIndex(periodAxis0);
      polarPlot0.setOutlineVisible(true);
      polarPlot0.getDataset(500);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      polarPlot0.getRadiusGridlineStroke();
      polarPlot0.getRadiusGridlinePaint();
      double double1 = 272.3087635444155;
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(10, 10);
      waferMapRenderer0.setDefaultCreateEntities(true, false);
      waferMapRenderer0.getDrawingSupplier();
      polarPlot0.setDrawingSupplier((DrawingSupplier) null, true);
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      jInternalFrame0.getUIClassID();
      // Undeclared exception!
      try { 
        rectangle0.add((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Rectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.addCornerTextItem("");
      polarPlot0.isRangeZoomable();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      DefaultCaret defaultCaret0 = new DefaultCaret();
      polarPlot0.translateToJava2D(835.0246573628, 835.0246573628, periodAxis0, defaultCaret0);
      polarPlot0.getLegendItems();
      polarPlot0.setRadiusMinorGridlinesVisible(true);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_RIGHT;
      int int0 = (-1713);
      Color color0 = Color.GRAY;
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 10;
      float float0 = 0.95F;
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      // Undeclared exception!
      try { 
        polarPlot0.setRenderer(Integer.MAX_VALUE, (PolarItemRenderer) defaultPolarItemRenderer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getFixedLegendItems();
      polarPlot0.fireChangeEvent();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ChartEntity: ";
      stringArray0[1] = "ChartEntity: ";
      stringArray0[2] = "ChartEntity: ";
      stringArray0[3] = "ChartEntity: ";
      stringArray0[4] = "ChartEntity: ";
      stringArray0[5] = "ChartEntity: ";
      stringArray0[6] = "ChartEntity: ";
      stringArray0[7] = "ChartEntity: ";
      stringArray0[8] = "ChartEntity: ";
      SymbolAxis symbolAxis0 = new SymbolAxis("ChartEntity: ", stringArray0);
      symbolAxis0.setAutoRangeMinimumSize((double) 1.0F, false);
      polarPlot0.setAxis((ValueAxis) symbolAxis0);
      polarPlot0.setAngleGridlinesVisible(true);
      polarPlot0.getRenderer(18);
      polarPlot0.getAngleTickUnit();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_LEFT;
      polarPlot0.setAxisLocation(0, polarAxisLocation0);
      polarPlot0.mapDatasetToAxis(991, 2247);
      polarPlot0.getAxisForDataset((-770));
      polarPlot0.setAngleLabelsVisible(false);
      polarPlot0.removeCornerTextItem("8m'vTk48WJ<Xc]5^LR");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      ThermometerPlot thermometerPlot1 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis1 = thermometerPlot1.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis1);
      thermometerPlot0.addChangeListener(combinedRangeXYPlot0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, valueAxis0, defaultPolarItemRenderer0);
      PolarAxisLocation polarAxisLocation0 = polarPlot0.getAxisLocation();
      polarPlot0.setAxisLocation(2, polarAxisLocation0, true);
      polarPlot0.getDatasetCount();
      polarPlot0.setAxis(0, valueAxis0, false);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("8wWljU-KU|");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYIntervalSeriesCollection0, 10);
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      dateAxis0.setPlot(combinedDomainXYPlot0);
      polarPlot0.setRenderer(10, (PolarItemRenderer) defaultPolarItemRenderer0, true);
      DefaultPolarItemRenderer defaultPolarItemRenderer1 = new DefaultPolarItemRenderer();
      dateAxis0.setFixedDimension((-4338.0978344));
      PolarPlot polarPlot1 = new PolarPlot(xYBarDataset0, dateAxis0, defaultPolarItemRenderer1);
      polarPlot1.getRadiusGridlinePaint();
      polarPlot0.getDataset();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getFixedLegendItems();
      polarPlot0.fireChangeEvent();
      polarPlot0.setAngleGridlinesVisible(true);
      polarPlot0.getRenderer(10);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_LEFT;
      polarPlot0.setAxisLocation(10, polarAxisLocation0);
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 52, (double) 1.0F, (double) 52, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      MultiTabbedPaneUI multiTabbedPaneUI0 = new MultiTabbedPaneUI();
      JTabbedPane jTabbedPane0 = null;
      try {
        jTabbedPane0 = new JTabbedPane(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal tab placement: must be TOP, BOTTOM, LEFT, or RIGHT
         //
         verifyException("javax.swing.JTabbedPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      ThermometerPlot thermometerPlot1 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.setUnits(10);
      ValueAxis valueAxis1 = thermometerPlot1.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis1);
      thermometerPlot0.addChangeListener(combinedRangeXYPlot0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, valueAxis0, defaultPolarItemRenderer0);
      PolarAxisLocation polarAxisLocation0 = polarPlot0.getAxisLocation();
      polarPlot0.setAxisLocation(2, polarAxisLocation0, true);
      polarPlot0.getDatasetCount();
      polarPlot0.setAxis(822, valueAxis0, true);
      Line2D.Float line2D_Float0 = new Line2D.Float(0.0F, 1918.66F, 1.0F, 1);
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      polarPlot0.translateToJava2D(0.5, 3808.432814294, valueAxis1, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      int int0 = 1769;
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      jFreeChart0.createBufferedImage(1, 1);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(1.0F);
      // Undeclared exception!
      polarPlot0.setDataset(2123884926, (XYDataset) simpleHistogramDataset0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, logAxis0, defaultPolarItemRenderer0);
      polarPlot0.getPlotType();
      polarPlot0.getIndexOf(defaultPolarItemRenderer0);
      polarPlot0.getAxisLocation(0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)49;
      byteArray0[0] = (byte)49;
      byte byte1 = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(2798, 10, byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, logAxis0, defaultPolarItemRenderer0);
      polarPlot0.getPlotType();
      polarPlot0.getIndexOf(defaultPolarItemRenderer0);
      polarPlot0.getDataset((-1598));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      ThermometerPlot thermometerPlot1 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis1 = thermometerPlot1.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis1);
      thermometerPlot0.addChangeListener(combinedRangeXYPlot0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, valueAxis0, defaultPolarItemRenderer0);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_LEFT;
      polarPlot0.setAxisLocation(2, polarAxisLocation0, true);
      timePeriodValuesCollection0.indexOf(true);
      polarPlot0.getDatasetCount();
      polarPlot0.setAxis(822, valueAxis0, true);
      polarPlot0.setDataset(0, (XYDataset) timePeriodValuesCollection0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      StandardTickUnitSource standardTickUnitSource0 = new StandardTickUnitSource();
      standardTickUnitSource0.getCeilingTickUnit((double) 1.0F);
      TickUnit tickUnit0 = standardTickUnitSource0.getCeilingTickUnit(0.0);
      polarPlot0.setAngleTickUnit(tickUnit0);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.SOUTH_LEFT;
      polarPlot0.setAxisLocation(polarAxisLocation0);
      PolarPlot polarPlot1 = (PolarPlot)polarPlot0.clone();
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 10;
      floatArray0[1] = 1.0F;
      Font font0 = Axis.DEFAULT_AXIS_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart((String) null, font0, polarPlot1, true);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      int int0 = 2247;
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2247, 10);
      // Undeclared exception!
      try { 
        rescaleOp0.filter(bufferedImage0, bufferedImage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of scaling constants does not equal the number of of color or color/alpha  components
         //
         verifyException("java.awt.image.RescaleOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 1);
      bufferedImage0.getScaledInstance(1769, 1769, 10);
      polarPlot0.setBackgroundImage(bufferedImage0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      polarPlot0.setRenderer(1769, (PolarItemRenderer) defaultPolarItemRenderer0, false);
      defaultPolarItemRenderer0.setDefaultStroke(polarPlot0.DEFAULT_OUTLINE_STROKE, false);
      polarPlot0.setBackgroundImageAlignment(2282);
      polarPlot0.setBackgroundImageAlpha(0.0F);
      PolarAxisLocation polarAxisLocation0 = polarPlot0.getAxisLocation();
      polarPlot0.setCounterClockwise(true);
      polarPlot0.getOrientation();
      polarPlot0.equals(polarAxisLocation0);
      polarPlot0.getDatasetCount();
      polarPlot0.getIndexOf(defaultPolarItemRenderer0);
      polarPlot0.getAngleGridlineStroke();
      polarPlot0.getRenderer(1769);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      int int0 = 1738;
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1738, 10, (-90.0), 10, 90.0, 1738);
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      datasetGroup0.clone();
      datasetGroup0.clone();
      polarPlot0.setDatasetGroup(datasetGroup0);
      polarPlot0.calculateTextAnchor(45.0);
      polarPlot0.getPlotType();
      polarPlot0.mapDatasetToAxis(1738, (-1555));
      polarPlot0.clearCornerTextItems();
      Graphics2D graphics2D0 = null;
      int int1 = 5;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1555);
      polarPlot0.setRenderer(6, (PolarItemRenderer) null, false);
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(10, 5, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 1 and should be 50
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getFixedLegendItems();
      polarPlot0.fireChangeEvent();
      polarPlot0.setAngleGridlinesVisible(true);
      polarPlot0.getRenderer(18);
      polarPlot0.getAngleTickUnit();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_LEFT;
      polarPlot0.setAxisLocation(0, polarAxisLocation0);
      polarPlot0.setRenderer(182, (PolarItemRenderer) null, true);
      polarPlot0.mapDatasetToAxis(18, 2247);
      polarPlot0.getAxisForDataset(10);
      polarPlot0.setAngleLabelsVisible(false);
      polarPlot0.getAngleGridlinePaint();
      polarPlot0.removeCornerTextItem("8m'vTk48WJ<Xc]5^LR");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      NumberAxis numberAxis0 = new NumberAxis();
      ThermometerPlot thermometerPlot1 = new ThermometerPlot(defaultValueDataset0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      thermometerPlot0.addChangeListener(combinedRangeXYPlot0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, numberAxis0, defaultPolarItemRenderer0);
      PolarAxisLocation polarAxisLocation0 = polarPlot0.getAxisLocation();
      polarPlot0.setAxisLocation(2, polarAxisLocation0, true);
      polarPlot0.getDatasetCount();
      polarPlot0.setAxis(764, (ValueAxis) numberAxis0, false);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      ThermometerPlot thermometerPlot1 = new ThermometerPlot(defaultValueDataset0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      thermometerPlot0.addChangeListener(combinedRangeXYPlot0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, valueAxis0, defaultPolarItemRenderer0);
      PolarAxisLocation polarAxisLocation0 = polarPlot0.getAxisLocation();
      polarPlot0.setAxisLocation(2, polarAxisLocation0, true);
      polarPlot0.getDatasetCount();
      polarPlot0.setAxis(822, valueAxis0, false);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      TextAnchor textAnchor0 = polarPlot0.calculateTextAnchor(1.0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 1);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(textAnchor0, dynamicTimeSeriesCollection0);
      polarPlot0.getAxisForDataset(2);
      polarPlot0.isRadiusGridlinesVisible();
      polarPlot0.datasetChanged(datasetChangeEvent0);
      polarPlot0.getAxis((-5334));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultXYDataset0, logarithmicAxis0, defaultPolarItemRenderer0);
      polarPlot0.getAxis();
      polarPlot0.isDomainZoomable();
      JFreeChart jFreeChart0 = new JFreeChart("", polarPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(10, 2.0F, renderingHints0);
      int int0 = (-2139687940);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-2139687940), 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-2139687940) and height (10) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.setDefaultStroke(polarPlot0.DEFAULT_OUTLINE_STROKE, true);
      polarPlot0.setBackgroundImageAlignment(2282);
      polarPlot0.setBackgroundImageAlpha(0.0F);
      PolarAxisLocation polarAxisLocation0 = polarPlot0.getAxisLocation();
      polarPlot0.setCounterClockwise(true);
      polarPlot0.getOrientation();
      polarPlot0.equals(polarAxisLocation0);
      polarPlot0.getDatasetCount();
      polarPlot0.getIndexOf(defaultPolarItemRenderer0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.removeCornerTextItem("-->4'");
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      DateAxis dateAxis0 = new DateAxis("-->4'", timeZone0, locale0);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.WEST_ABOVE;
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      // Undeclared exception!
      try { 
        polarPlot0.drawAxis(dateAxis0, polarAxisLocation0, (Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = (-728L);
      System.setCurrentTimeMillis((-728L));
      PolarPlot polarPlot0 = new PolarPlot();
      int int0 = 2131693327;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 10);
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.HIGH_END;
      cyclicNumberAxis0.setLabelLocation(axisLabelLocation0);
      cyclicNumberAxis0.hasListener(polarPlot0);
      PropertyResourceBundle propertyResourceBundle0 = (PropertyResourceBundle)WaferMapPlot.localizationResources;
      PolarPlot.localizationResources = (ResourceBundle) propertyResourceBundle0;
      // Undeclared exception!
      polarPlot0.setAxis(2131693327, (ValueAxis) cyclicNumberAxis0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      LinkedList<DefaultHeatMapDataset> linkedList0 = new LinkedList<DefaultHeatMapDataset>();
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, logAxis0, defaultPolarItemRenderer0);
      polarPlot0.getAxis();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.addCornerTextItem("");
      polarPlot0.isRangeZoomable();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      DefaultCaret defaultCaret0 = new DefaultCaret();
      polarPlot0.translateToJava2D(835.0246573628, 835.0246573628, periodAxis0, defaultCaret0);
      polarPlot0.getLegendItems();
      polarPlot0.setRadiusMinorGridlinesVisible(true);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_RIGHT;
      Color color0 = Color.GRAY;
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator((-1713), color0, (-3786.96F), 0, 0.0);
      Color.getColor("c", (-1713));
      polarPlot0.removeCornerTextItem("");
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.createDropShadow((BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.DefaultShadowGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timeTableXYDataset0, (ValueAxis) null, defaultPolarItemRenderer0);
      polarPlot0.isRangeZoomable();
      polarPlot0.getDataset();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ThermometerPlot thermometerPlot1 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot1.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, valueAxis0, defaultPolarItemRenderer0);
      polarPlot0.clone();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      LogAxis logAxis0 = new LogAxis();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.WEST_BELOW;
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(6, 4651, 0.0F, 88.5857106873558, 88.5857106873558, 1.0F);
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      polarPlot0.setDatasetGroup(datasetGroup0);
      logAxis0.setAutoRange(true);
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try { 
        polarPlot0.drawAxis(logAxis0, polarAxisLocation0, (Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.addCornerTextItem("");
      polarPlot0.isRangeZoomable();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      DefaultCaret defaultCaret0 = new DefaultCaret();
      periodAxis0.pan(72.0);
      polarPlot0.translateToJava2D(835.0246573628, 835.0246573628, periodAxis0, defaultCaret0);
      polarPlot0.getLegendItems();
      polarPlot0.setRadiusMinorGridlinesVisible(true);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_RIGHT;
      Color color0 = Color.GRAY;
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator((-1713), color0, (-3786.96F), 0, 0.0);
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.createDropShadow((BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.DefaultShadowGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 1);
      bufferedImage0.getAlphaRaster();
      bufferedImage0.getScaledInstance(1769, 1769, 10);
      polarPlot0.setBackgroundImage(bufferedImage0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      polarPlot0.setRenderer(1769, (PolarItemRenderer) defaultPolarItemRenderer0, false);
      polarPlot0.setBackgroundImageAlignment(2282);
      polarPlot0.setBackgroundImageAlpha(0.0F);
      polarPlot0.getAxisLocation();
      polarPlot0.setMargin((-1829));
      polarPlot0.getDataset(3638);
      // Undeclared exception!
      try { 
        PolarAxisLocation.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jfree.chart.plot.PolarAxisLocation.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.addCornerTextItem("");
      polarPlot0.isRadiusGridlinesVisible();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      DefaultCaret defaultCaret0 = new DefaultCaret();
      polarPlot0.translateToJava2D(835.0246573628, 835.0246573628, periodAxis0, defaultCaret0);
      polarPlot0.getLegendItems();
      polarPlot0.setRadiusMinorGridlinesVisible(true);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_RIGHT;
      Color color0 = Color.GRAY;
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator((-1713), color0, (-3786.96F), 0, 0.0);
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.createDropShadow((BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.DefaultShadowGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 1);
      bufferedImage0.getAlphaRaster();
      bufferedImage0.getScaledInstance(1769, 1769, 10);
      polarPlot0.setBackgroundImage(bufferedImage0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      polarPlot0.setRenderer(1769, (PolarItemRenderer) defaultPolarItemRenderer0, false);
      polarPlot0.setBackgroundImageAlignment(2282);
      polarPlot0.setBackgroundImageAlpha(0.0F);
      PolarAxisLocation polarAxisLocation0 = polarPlot0.getAxisLocation();
      polarPlot0.getLegendItems();
      polarPlot0.getAngleTickUnit();
      polarPlot0.refreshAngleTicks();
      polarPlot0.setCounterClockwise(true);
      polarPlot0.equals(polarAxisLocation0);
      polarPlot0.getDatasetCount();
      polarPlot0.getIndexOf(defaultPolarItemRenderer0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      yIntervalSeriesCollection0.clone();
      polarPlot0.setDataset(40, (XYDataset) yIntervalSeriesCollection0);
      polarPlot0.getAxisForDataset(1769);
      polarPlot0.getIndexOf(defaultPolarItemRenderer0);
      polarPlot0.refreshAngleTicks();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-530.275790193));
      numberTickUnit0.toString();
      numberTickUnit0.valueToString(1.0F);
      LinkedList<DateAxis> linkedList0 = new LinkedList<DateAxis>();
      // Undeclared exception!
      try { 
        polarPlot0.mapDatasetToAxes((-2363), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.addCornerTextItem("");
      polarPlot0.isRangeZoomable();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      DefaultCaret defaultCaret0 = new DefaultCaret();
      polarPlot0.translateToJava2D(835.0246573628, 835.0246573628, periodAxis0, defaultCaret0);
      LegendItemCollection legendItemCollection0 = polarPlot0.getLegendItems();
      polarPlot0.setRadiusMinorGridlinesVisible(true);
      Color color0 = Color.GRAY;
      polarPlot0.equals(legendItemCollection0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      String string0 = "s`j]NjT!V+N*";
      Range range0 = new Range(606.96353, 606.96353);
      ModuloAxis moduloAxis0 = new ModuloAxis("s`j]NjT!V+N*", range0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Boolean boolean0 = Boolean.valueOf("s`j]NjT!V+N*");
      defaultPolarItemRenderer0.setSeriesVisibleInLegend(500, boolean0);
      PolarPlot polarPlot0 = null;
      try {
        polarPlot0 = new PolarPlot(defaultWindDataset0, moduloAxis0, defaultPolarItemRenderer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A positive range length is required: Range[606.96353,606.96353]
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      int int0 = 0;
      // Undeclared exception!
      try { 
        polarPlot0.setAxis((-1857), (ValueAxis) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.isAngleGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      double double0 = 45.0;
      boolean boolean0 = true;
      polarPlot0.setNotify(true);
      polarPlot0.calculateTextAnchor(45.0);
      String string0 = "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer";
      polarPlot0.removeCornerTextItem("org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer");
      LinkedList<DefaultKeyedValuesDataset> linkedList0 = new LinkedList<DefaultKeyedValuesDataset>();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      linkedList0.add(defaultKeyedValuesDataset0);
      // Undeclared exception!
      try { 
        polarPlot0.buildRadialTicks(linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.general.DefaultKeyedValuesDataset cannot be cast to org.jfree.chart.axis.ValueTick
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.setAutoPopulateSeriesStroke(false);
      defaultPolarItemRenderer0.setDefaultItemLabelsVisible(false);
      polarPlot0.setRenderer((PolarItemRenderer) defaultPolarItemRenderer0);
      DefaultPolarItemRenderer defaultPolarItemRenderer1 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer1.setDataBoundsIncludesVisibleSeriesOnly(false);
      defaultPolarItemRenderer1.setDefaultLegendShape(polarPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      defaultPolarItemRenderer1.lookupSeriesPaint(10);
      polarPlot0.setRenderer(32, (PolarItemRenderer) defaultPolarItemRenderer1);
      polarPlot0.isAngleLabelsVisible();
      polarPlot0.getAngleGridlinePaint();
      polarPlot0.getAngleLabelFont();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(10, 1.0F);
      DatasetGroup datasetGroup0 = defaultKeyedValueDataset0.getGroup();
      xIntervalSeriesCollection0.setGroup(datasetGroup0);
      polarPlot0.setDataset(32, (XYDataset) xIntervalSeriesCollection0);
      polarPlot0.getRenderer();
      polarPlot0.mapDatasetToAxis(6, (-2304));
      polarPlot0.isRadiusMinorGridlinesVisible();
      polarPlot0.getAngleOffset();
      String string0 = null;
      TimeZone timeZone0 = null;
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      polarPlot0.setRenderer((PolarItemRenderer) defaultPolarItemRenderer0);
      polarPlot0.clearCornerTextItems();
      polarPlot0.getAngleLabelPaint();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(taskSeriesCollection0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      standardEntityCollection0.iterator();
      multiplePiePlot0.setBackgroundPaint(polarPlot0.DEFAULT_GRIDLINE_PAINT);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-123), 10, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-123) and height (10) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, (ValueAxis) null, defaultPolarItemRenderer0);
      polarPlot0.getMargin();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getAxisIndex((ValueAxis) null);
      polarPlot0.getLegendItems();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      StandardTickUnitSource standardTickUnitSource0 = new StandardTickUnitSource();
      TickUnit tickUnit0 = standardTickUnitSource0.getCeilingTickUnit(0.0);
      polarPlot0.setAngleTickUnit(tickUnit0);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.SOUTH_LEFT;
      polarPlot0.setAxisLocation(polarAxisLocation0);
      polarPlot0.clone();
      polarPlot0.setRadiusGridlinesVisible(true);
      polarPlot0.getAxis();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Font font0 = CompassPlot.DEFAULT_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("ZOJBsdOP=Qr;%K8", font0, polarPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      polarPlot0.zoomRangeAxes((-1970.465487802762), (-285.6916603356289), plotRenderingInfo0, (Point2D) null);
      Color color0 = (Color)CyclicNumberAxis.DEFAULT_ADVANCE_LINE_PAINT;
      polarPlot0.setBackgroundPaint(color0);
      polarPlot0.setRadiusGridlinesVisible(false);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setInsets(polarPlot0.DEFAULT_INSETS, true);
      polarPlot0.getOrientation();
      polarPlot0.calculateTextAnchor(0.0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("-Gr.ZTUZ3wOAA", true);
      DrawingSupplier drawingSupplier0 = standardChartTheme0.getDrawingSupplier();
      polarPlot0.setDrawingSupplier(drawingSupplier0, false);
      polarPlot0.getAngleGridlineStroke();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      System.setCurrentTimeMillis(4028L);
      PolarPlot polarPlot0 = new PolarPlot();
      boolean boolean0 = false;
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.util.DefaultShadowGenerator", false);
      standardChartTheme0.setLegendBackgroundPaint(polarPlot0.DEFAULT_BACKGROUND_PAINT);
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      standardChartTheme0.setLargeFont(font0);
      Paint paint0 = standardChartTheme0.getChartBackgroundPaint();
      polarPlot0.setAngleLabelPaint(paint0);
      polarPlot0.getDatasetCount();
      polarPlot0.getAxis(1);
      polarPlot0.getLegendItems();
      polarPlot0.getAxisLocation((-1));
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      ThermometerPlot thermometerPlot1 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis1 = thermometerPlot1.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis1);
      thermometerPlot0.addChangeListener(combinedRangeXYPlot0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, valueAxis0, defaultPolarItemRenderer0);
      PolarAxisLocation polarAxisLocation0 = polarPlot0.getAxisLocation();
      polarPlot0.setAxisLocation(2, polarAxisLocation0, false);
      polarPlot0.getDatasetCount();
      polarPlot0.setAxis(764, valueAxis0, true);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getAxisCount();
      Color color0 = (Color)AbstractRenderer.DEFAULT_PAINT;
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      JFreeChart jFreeChart1 = new JFreeChart("", polarPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart1, 3, (-152), 1, 0, 966, 1131, false, false, true, false, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(1455, 1455, 0, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 0
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 10, "");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, cyclicNumberAxis0, defaultPolarItemRenderer0);
      Color color0 = (Color)Axis.DEFAULT_AXIS_LINE_PAINT;
      ValueMarker valueMarker0 = new ValueMarker(4.0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT, defaultPolarItemRenderer0.DEFAULT_STROKE, color0, defaultPolarItemRenderer0.DEFAULT_OUTLINE_STROKE, 1.0F);
      MarkerChangeEvent markerChangeEvent0 = new MarkerChangeEvent(valueMarker0);
      polarPlot0.markerChanged(markerChangeEvent0);
      polarPlot0.clone();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      polarPlot0.setAngleGridlineStroke((Stroke) null);
      polarPlot0.addCornerTextItem("A/oZ$Wb");
      polarPlot0.setCounterClockwise(false);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(",bK7x8;i'_,ay9j1$H");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = null;
      try {
        polarPlot0 = new PolarPlot(jDBCXYDataset0, logarithmicAxis0, defaultPolarItemRenderer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Values less than or equal to zero not allowed with logarithmic axis
         //
         verifyException("org.jfree.chart.axis.LogarithmicAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XYDataset xYDataset0 = null;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1135.070352566), 594.7802136, "K-GWDj/4\"rfw$(@OEb");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.clearSeriesPaints(true);
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, cyclicNumberAxis0, defaultPolarItemRenderer0);
      ArrayList<CyclicNumberAxis> arrayList0 = new ArrayList<CyclicNumberAxis>();
      polarPlot0.setAxis(32, (ValueAxis) cyclicNumberAxis0);
      cyclicNumberAxis0.setTickMarkInsideLength(1.0F);
      // Undeclared exception!
      try { 
        polarPlot0.mapDatasetToAxes(500, arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      RectangleInsets rectangleInsets0 = Plot.DEFAULT_INSETS;
      polarPlot0.setMargin(2052);
      polarPlot0.setInsets(rectangleInsets0, false);
      polarPlot0.calculateTextAnchor(270.0);
      polarPlot0.getAngleLabelFont();
      polarPlot0.setNotify(false);
      polarPlot0.getAxisForDataset(1);
      polarPlot0.getDataRange((ValueAxis) null);
      polarPlot0.clone();
      polarPlot0.getRenderer(500);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage((-1171), (-1365), (-2139559354));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -2139559354
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 1);
      bufferedImage0.getAlphaRaster();
      bufferedImage0.getScaledInstance(1769, 1769, 10);
      polarPlot0.setBackgroundImage(bufferedImage0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      polarPlot0.setRenderer(1769, (PolarItemRenderer) defaultPolarItemRenderer0, false);
      polarPlot0.setBackgroundImageAlignment(2282);
      polarPlot0.setBackgroundImageAlpha(0.0F);
      polarPlot0.getAxisLocation();
      // Undeclared exception!
      try { 
        PolarAxisLocation.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jfree.chart.plot.PolarAxisLocation.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      polarPlot0.setChart(jFreeChart0);
      polarPlot0.getAxisLocation(2686);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      polarPlot0.indexOf(vectorSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      LogAxis logAxis0 = new LogAxis("Indices must be Integer instances.");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(categoryTableXYDataset0, logAxis0, defaultPolarItemRenderer0);
      polarPlot0.setOutlineStroke(defaultPolarItemRenderer0.DEFAULT_OUTLINE_STROKE);
      polarPlot0.calculateTextAnchor((-761.0980746834));
      polarPlot0.indexOf(categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      int int0 = 2124141434;
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      polarPlot0.datasetChanged((DatasetChangeEvent) null);
      // Undeclared exception!
      polarPlot0.setRenderer(2124141434, (PolarItemRenderer) defaultPolarItemRenderer0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getOrientation();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame("H9$=");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.refreshAngleTicks();
      int int0 = (-2092);
      // Undeclared exception!
      try { 
        polarPlot0.setRenderer((-2092), (PolarItemRenderer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      JLayer<JSpinner.DateEditor> jLayer0 = new JLayer<JSpinner.DateEditor>();
      xYIntervalSeriesCollection0.hasListener(jLayer0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Color color0 = (Color)PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT;
      defaultPolarItemRenderer0.setDefaultItemLabelPaint((Paint) color0);
      PolarPlot polarPlot0 = new PolarPlot(xYIntervalSeriesCollection0, (ValueAxis) null, defaultPolarItemRenderer0);
      xYIntervalSeriesCollection0.clone();
      // Undeclared exception!
      try { 
        polarPlot0.mapDatasetToAxis((-82), (-82));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.addCornerTextItem("");
      polarPlot0.isRangeZoomable();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      DefaultCaret defaultCaret0 = new DefaultCaret();
      polarPlot0.translateToJava2D(835.0246573628, 835.0246573628, periodAxis0, defaultCaret0);
      polarPlot0.getLegendItems();
      polarPlot0.setRadiusMinorGridlinesVisible(true);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_RIGHT;
      Color color0 = Color.GRAY;
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator((-1713), color0, (-3786.96F), 0, 0.0);
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.createDropShadow((BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.DefaultShadowGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getAxisForDataset((-3415));
      polarPlot0.getAngleOffset();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DateAxis dateAxis0 = new DateAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultXYZDataset0, dateAxis0, defaultPolarItemRenderer0);
      polarPlot0.getDataset();
      polarPlot0.equals(defaultPolarItemRenderer0);
      int int0 = 7;
      Vector<StandardChartTheme> vector0 = new Vector<StandardChartTheme>();
      // Undeclared exception!
      try { 
        polarPlot0.mapDatasetToAxes(7, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(defaultPolarItemRenderer0, defaultXYZDataset0);
      polarPlot0.datasetChanged(datasetChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getRenderer(0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.isCounterClockwise();
      ValueAxis valueAxis0 = null;
      polarPlot0.getDataRange((ValueAxis) null);
      double double0 = 3272.4605492;
      String string0 = "Cv4G^?pD0d9-S";
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("Cv4G^?pD0d9-S", font0, polarPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(1185);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1185, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("7j~>S", ">pX~22oY'XXU$uuX", "I;nvBD?NkKw!");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(timePeriodValuesCollection0, (-339.999));
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      TimeZone timeZone0 = TimeZone.getTimeZone("7j~>S");
      Locale locale0 = Locale.CANADA;
      PeriodAxis periodAxis0 = new PeriodAxis("7j~>S", regularTimePeriod0, regularTimePeriod0, timeZone0, locale0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYBarDataset0, periodAxis0, defaultPolarItemRenderer0);
      Stack<DefaultPolarItemRenderer> stack0 = new Stack<DefaultPolarItemRenderer>();
      // Undeclared exception!
      try { 
        polarPlot0.mapDatasetToAxes(0, stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JTree jTree0 = new JTree();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Stack<DefaultPolarItemRenderer> stack0 = new Stack<DefaultPolarItemRenderer>();
      JComboBox<DefaultPolarItemRenderer> jComboBox0 = new JComboBox<DefaultPolarItemRenderer>(stack0);
      jComboBox0.list();
      DefaultCellEditor defaultCellEditor0 = new DefaultCellEditor(jComboBox0);
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0, defaultCellEditor0);
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", false);
      defaultTreeCellEditor0.getTreeCellEditorComponent(jTree0, standardChartTheme0, false, true, true, 10);
      defaultTreeCellEditor0.getFont();
      // Undeclared exception!
      try { 
        polarPlot0.setAngleLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      Font font0 = CompassPlot.DEFAULT_LABEL_FONT;
      font0.deriveFont(0);
      stackedAreaRenderer0.setDefaultLegendTextFont(font0);
      Stroke stroke0 = stackedAreaRenderer0.getDefaultOutlineStroke();
      polarPlot0.setRadiusGridlineStroke(stroke0);
      polarPlot0.setRadiusMinorGridlinesVisible(true);
      polarPlot0.getAxisForDataset((-5171));
      polarPlot0.isAngleLabelsVisible();
      String string0 = ".C^exe5{8Ke";
      MatrixSeries matrixSeries0 = new MatrixSeries(".C^exe5{8Ke", 10, 10);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      JSpinner.ListEditor jSpinner_ListEditor0 = null;
      try {
        jSpinner_ListEditor0 = new JSpinner.ListEditor((JSpinner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.JSpinner$DefaultEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2596, 1024, 3);
      Millisecond millisecond0 = new Millisecond(mockDate0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(4, 2596, millisecond0);
      MockDate.UTC((-1311), 4, 1024, (-976), 500, 755);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8";
      stringArray0[1] = "8";
      SymbolAxis symbolAxis0 = new SymbolAxis("8", stringArray0);
      symbolAxis0.setRangeAboutValue(0.0, 2596);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      dynamicTimeSeriesCollection0.getRangeBounds(true);
      PolarPlot polarPlot0 = new PolarPlot(dynamicTimeSeriesCollection0, symbolAxis0, defaultPolarItemRenderer0);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(1052.69, 0.0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 1024;
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) (-976);
      JFreeChart jFreeChart0 = new JFreeChart("", polarPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      Point point0 = new Point();
      Point point1 = new Point(point0);
      Point2D point2D0 = rescaleOp0.getPoint2D(point1, point0);
      Point2D point2D1 = affineTransform0.transform(point2D0, (Point2D) point1);
      // Undeclared exception!
      try { 
        polarPlot0.zoomRangeAxes(646.893, (PlotRenderingInfo) null, point2D1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("%]L<08*]hINb=P");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      DateAxis dateAxis0 = new DateAxis("", timeZone0, locale0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, dateAxis0, defaultPolarItemRenderer0);
      polarPlot0.setAngleOffset(14.0);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.EAST_ABOVE;
      polarPlot0.setAxisLocation(500, polarAxisLocation0, true);
      JFreeChart jFreeChart0 = new JFreeChart("", polarPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, true, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point((-1991), 768);
      // Undeclared exception!
      try { 
        polarPlot0.zoomRangeAxes(1.0E-8, plotRenderingInfo0, (Point2D) point0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A positive range length is required: [Dec 2, 292269055 4:47:04 PM --> Dec 2, 292269055 4:47:04 PM]
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      String string0 = "U ST";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 791.65942495, "U ST");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultXYZDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      polarPlot0.getAngleLabelFont();
      int int0 = (-1401);
      // Undeclared exception!
      try { 
        polarPlot0.setRenderer((-1401), (PolarItemRenderer) defaultPolarItemRenderer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      String string0 = "/|^{8$)9VA";
      LogAxis logAxis0 = new LogAxis("/|^{8$)9VA");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultIntervalXYDataset0, logAxis0, defaultPolarItemRenderer0);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.EAST_BELOW;
      logAxis0.setVisible(true);
      polarPlot0.setAxisLocation(polarAxisLocation0, true);
      ValueAxis valueAxis0 = polarPlot0.getAxis();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(10, 0.0F, 0.0F, 10);
      Rectangle2D rectangle2D0 = rectangle2D_Float0.getBounds2D();
      polarPlot0.translateToJava2D((-549.310482085383), (-90.0), valueAxis0, rectangle2D0);
      polarPlot0.calculateTextAnchor((double) defaultPolarItemRenderer0.ZERO);
      polarPlot0.setAngleGridlinePaint(valueAxis0.DEFAULT_TICK_LABEL_PAINT);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(500, 0, byteArray0, 1203, true, 962);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      int int0 = (-2106);
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 1.0F, polarPlot0.DEFAULT_BACKGROUND_PAINT);
      MarkerChangeEvent markerChangeEvent0 = new MarkerChangeEvent(intervalMarker0);
      polarPlot0.markerChanged(markerChangeEvent0);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.EAST_BELOW;
      // Undeclared exception!
      try { 
        polarPlot0.setAxisLocation((-2106), polarAxisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      compassPlot0.getLegendItems();
      polarPlot0.setFixedLegendItems((LegendItemCollection) null);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 1);
      JFreeChart jFreeChart0 = new JFreeChart(compassPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      Kernel kernel0 = new Kernel(0, 10, floatArray0);
      ConvolveOp convolveOp0 = new ConvolveOp(kernel0);
      int int0 = 2534;
      int[] intArray0 = new int[4];
      intArray0[0] = 10;
      intArray0[1] = 15;
      intArray0[2] = 3137;
      intArray0[3] = 804;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(7, (-1136), intArray0, 0, false, 7, 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Map size (-1136) must be >= 1
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultWindDataset0, logarithmicAxis0, defaultPolarItemRenderer0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(3602.588418, 45.0, (-1190.330169), 0.0);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, false);
      Rectangle2D rectangle2D0 = defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_FONT.getStringBounds("paint", 0, 0, fontRenderContext0);
      Point2D point2D0 = rectangleAnchor0.getAnchorPoint(rectangle2D0);
      polarPlot0.zoomDomainAxes(0.6428571428571429, plotRenderingInfo0, point2D0, true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      int int0 = 1738;
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1738, 10, (-90.0), 10, 90.0, 1738);
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      polarPlot0.setDatasetGroup(datasetGroup0);
      polarPlot0.calculateTextAnchor(563.5642249995);
      polarPlot0.getPlotType();
      polarPlot0.mapDatasetToAxis(1738, (-1555));
      polarPlot0.clearCornerTextItems();
      Graphics2D graphics2D0 = null;
      int int1 = 5;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1555);
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(10, 5, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 1 and should be 50
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2248.54907462238);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      cyclicNumberAxis0.setFixedAutoRange(2248.54907462238);
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, cyclicNumberAxis0, defaultPolarItemRenderer0);
      polarPlot0.setDataset(0, (XYDataset) null);
      polarPlot0.addCornerTextItem(".g/0b4EzXP=q.q");
      cyclicNumberAxis0.setRange((-3703.85282903546), 524.0);
      polarPlot0.getDatasetCount();
      ValueAxis valueAxis0 = polarPlot0.getAxis(500);
      polarPlot0.isAngleLabelsVisible();
      polarPlot0.setDataset((XYDataset) null);
      polarPlot0.setAngleGridlinePaint(valueAxis0.DEFAULT_AXIS_LINE_PAINT);
      Stack<XYDatasetTableModel> stack0 = new Stack<XYDatasetTableModel>();
      polarPlot0.buildRadialTicks(stack0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("SansSerif");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(matrixSeriesCollection0, logarithmicAxis0, defaultPolarItemRenderer0);
      polarPlot0.setAxis((ValueAxis) logarithmicAxis0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "SansSerif";
      stringArray0[1] = "SansSerif";
      stringArray0[2] = "SansSerif";
      stringArray0[3] = "SansSerif";
      stringArray0[4] = "SansSerif";
      stringArray0[5] = "SansSerif";
      stringArray0[6] = "SansSerif";
      stringArray0[7] = "SansSerif";
      stringArray0[8] = "SansSerif";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      Point point0 = null;
      TextField textField0 = null;
      try {
        textField0 = new TextField("SansSerif", 500);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      String string0 = "";
      LogAxis logAxis0 = new LogAxis("");
      // Undeclared exception!
      try { 
        polarPlot0.setAxis((-1831), (ValueAxis) logAxis0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-3815.7), 1.0F, 1.0, 1.0, polarPlot0.DEFAULT_GRIDLINE_STROKE, polarPlot0.DEFAULT_OUTLINE_PAINT);
      AnnotationChangeEvent annotationChangeEvent0 = new AnnotationChangeEvent(polarPlot0, xYLineAnnotation0);
      ChartChangeEventType chartChangeEventType0 = ChartChangeEventType.NEW_DATASET;
      annotationChangeEvent0.setType(chartChangeEventType0);
      int int0 = (-9999);
      MeterPlot meterPlot0 = new MeterPlot();
      Font font0 = meterPlot0.getValueFont();
      font0.getTransform();
      JFreeChart jFreeChart0 = new JFreeChart("9ggEDOv*m", font0, polarPlot0, true);
      annotationChangeEvent0.setChart(jFreeChart0);
      polarPlot0.setAngleLabelsVisible(true);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.EAST_ABOVE;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        polarPlot0.setAxisLocation((-9999), polarAxisLocation0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setAngleLabelsVisible(true);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setBackgroundImageAlignment(0);
      polarPlot0.isCounterClockwise();
      DateAxis dateAxis0 = new DateAxis();
      polarPlot0.setAxis(1283, (ValueAxis) dateAxis0, true);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Stroke stroke0 = polarPlot0.getRadiusGridlineStroke();
      polarPlot0.setOutlineStroke(stroke0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("", "", "NE");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      polarPlot0.indexOf(timePeriodValuesCollection0);
      polarPlot0.getAxisLocation();
      polarPlot0.getAxis(1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getDataset(3149);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      SystemColor systemColor0 = SystemColor.textText;
      polarPlot0.setAngleGridlinePaint(systemColor0);
      polarPlot0.getAngleTickUnit();
      polarPlot0.isCounterClockwise();
      double double0 = 0.0;
      JFreeChart jFreeChart0 = new JFreeChart("", polarPlot0);
      boolean boolean0 = true;
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 15, (-782), (-1151), 10, (-1), false, true, true, false, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(300);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 300, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Paint[] paintArray0 = new Paint[9];
      paintArray0[0] = polarPlot0.DEFAULT_GRIDLINE_PAINT;
      paintArray0[1] = polarPlot0.DEFAULT_OUTLINE_PAINT;
      paintArray0[2] = polarPlot0.DEFAULT_BACKGROUND_PAINT;
      paintArray0[3] = polarPlot0.DEFAULT_OUTLINE_PAINT;
      paintArray0[4] = polarPlot0.DEFAULT_GRIDLINE_PAINT;
      paintArray0[5] = polarPlot0.DEFAULT_BACKGROUND_PAINT;
      paintArray0[6] = polarPlot0.DEFAULT_OUTLINE_PAINT;
      paintArray0[7] = polarPlot0.DEFAULT_OUTLINE_PAINT;
      paintArray0[8] = polarPlot0.DEFAULT_OUTLINE_PAINT;
      Paint[] paintArray1 = new Paint[8];
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getSeriesOutlinePaint(0);
      paintArray1[0] = null;
      paintArray1[1] = polarPlot0.DEFAULT_OUTLINE_PAINT;
      paintArray1[2] = polarPlot0.DEFAULT_OUTLINE_PAINT;
      paintArray1[3] = polarPlot0.DEFAULT_BACKGROUND_PAINT;
      paintArray1[4] = polarPlot0.DEFAULT_BACKGROUND_PAINT;
      paintArray1[5] = polarPlot0.DEFAULT_BACKGROUND_PAINT;
      paintArray1[6] = polarPlot0.DEFAULT_BACKGROUND_PAINT;
      paintArray1[7] = polarPlot0.DEFAULT_GRIDLINE_PAINT;
      Stroke[] strokeArray0 = new Stroke[4];
      strokeArray0[0] = polarPlot0.DEFAULT_OUTLINE_STROKE;
      strokeArray0[1] = defaultPolarItemRenderer0.DEFAULT_STROKE;
      strokeArray0[2] = defaultPolarItemRenderer0.DEFAULT_STROKE;
      strokeArray0[3] = defaultPolarItemRenderer0.DEFAULT_OUTLINE_STROKE;
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier(paintArray0, paintArray1, strokeArray0, strokeArray0, (Shape[]) null);
      polarPlot0.setDrawingSupplier((DrawingSupplier) defaultDrawingSupplier0);
      polarPlot0.calculateTextAnchor((-90.0));
      polarPlot0.getAngleTickUnit();
      // Undeclared exception!
      try { 
        polarPlot0.setDataset((-897), (XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(xIntervalSeriesCollection0, 0.0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYBarDataset0, (ValueAxis) null, defaultPolarItemRenderer0);
      polarPlot0.getLegendItems();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getAngleLabelPaint();
      double double0 = 14.0;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      LogAxis logAxis0 = new LogAxis((String) null);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultWindDataset0, logAxis0, defaultPolarItemRenderer0);
      polarPlot0.setRadiusMinorGridlinesVisible(true);
      polarPlot0.getDataset();
      polarPlot0.getFixedLegendItems();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.isAngleGridlinesVisible();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      defaultXYDataset0.clone();
      defaultXYDataset0.setNotify(true);
      polarPlot0.indexOf(defaultXYDataset0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setMargin(0);
      polarPlot0.calculateTextAnchor(1.0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      DatasetChangeEvent datasetChangeEvent0 = null;
      try {
        datasetChangeEvent0 = new DatasetChangeEvent((Object) null, dynamicTimeSeriesCollection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      polarPlot0.zoom((-454.79457645));
      polarPlot0.setRenderer((PolarItemRenderer) defaultPolarItemRenderer0);
      defaultPolarItemRenderer0.setDrawOutlineWhenFilled(false);
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      Font.decode("7HNs");
      defaultPolarItemRenderer0.setDefaultItemLabelFont(font0);
      polarPlot0.getRadiusGridlinePaint();
      PolarPlot polarPlot1 = new PolarPlot();
      LinkedList<DefaultPieDataset> linkedList0 = new LinkedList<DefaultPieDataset>();
      polarPlot1.buildRadialTicks(linkedList0);
      defaultPolarItemRenderer0.setPlot(polarPlot1);
      polarPlot0.isDomainZoomable();
      polarPlot0.setRenderer(0, (PolarItemRenderer) defaultPolarItemRenderer0, false);
      polarPlot0.getFixedLegendItems();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-90.0));
      polarPlot1.getAxisIndex(cyclicNumberAxis0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-1), 0.0F, 2.0F, (-1));
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      Rectangle2D rectangle2D0 = rectangle2D_Float0.createUnion(rectangle0);
      polarPlot0.translateToJava2D((-454.79457645), 2150.54656, cyclicNumberAxis0, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      valueAxis0.zoomRange(1.0F, 0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("location");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(10, (-1970));
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, valueAxis0, defaultPolarItemRenderer0);
      polarPlot0.zoom(2);
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getItemCount(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      LogAxis logAxis0 = new LogAxis("V%=cXDHTu_HSr");
      Range range0 = Range.expandToInclude(logAxis0.DEFAULT_RANGE, 2.0F);
      logAxis0.setRange(range0, true, true);
      polarPlot0.getDataRange(logAxis0);
      polarPlot0.setAngleGridlinesVisible(false);
      polarPlot0.getMargin();
      JFreeChart jFreeChart0 = new JFreeChart("V%=cXDHTu_HSr", polarPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, true, true);
      jFreeChart0.setBackgroundPaint(polarPlot0.DEFAULT_GRIDLINE_PAINT);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      plotRenderingInfo0.setPlotArea((Rectangle2D) null);
      Point point0 = new Point(200, 300);
      polarPlot0.zoomRangeAxes((double) 20, plotRenderingInfo0, (Point2D) point0, true);
      polarPlot0.getOrientation();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getFixedLegendItems();
      polarPlot0.fireChangeEvent();
      polarPlot0.setAngleGridlinesVisible(true);
      polarPlot0.getRenderer(18);
      polarPlot0.getAngleTickUnit();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_LEFT;
      polarPlot0.setAxisLocation(0, polarAxisLocation0);
      polarPlot0.mapDatasetToAxis(991, 2247);
      polarPlot0.getAxisForDataset((-770));
      polarPlot0.setAngleLabelsVisible(false);
      polarPlot0.getAngleGridlinePaint();
      polarPlot0.removeCornerTextItem("8m'vTk48WJ<Xc]5^LR");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultWindDataset0, (ValueAxis) null, defaultPolarItemRenderer0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      LogAxis logAxis0 = new LogAxis("Indices must be Integer instances.");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(categoryTableXYDataset0, logAxis0, defaultPolarItemRenderer0);
      polarPlot0.calculateTextAnchor((-761.0980746834));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.WEST_BELOW;
      polarPlot0.setAxisLocation(polarAxisLocation0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      chartRenderingInfo0.equals(polarAxisLocation0);
      point2D_Double0.setLocation((-90.0), 0.0);
      polarPlot0.zoomRangeAxes(7.0, 7.0, plotRenderingInfo0, (Point2D) point2D_Double0);
      polarPlot0.zoomRangeAxes((-1380.228800787), plotRenderingInfo0, (Point2D) point2D_Double0);
      polarPlot0.getAngleGridlineStroke();
      polarPlot0.getOrientation();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      polarPlot0.getIndexOf(defaultPolarItemRenderer0);
      polarPlot0.refreshAngleTicks();
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("p4cR!+O.k;Ib2_qV=");
      Font font0 = standardChartTheme0.getSmallFont();
      polarPlot0.setAngleLabelFont(font0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      double double0 = 0.65;
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("", font0, polarPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(jDBCCategoryDataset0, tableOrder0);
      JPasswordField jPasswordField0 = new JPasswordField("ZOOM_IN_BOTH");
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jPasswordField0.new AccessibleJTextComponent();
      int int0 = 0;
      jPasswordField0.getSelectionColor();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        polarPlot0.drawOutline(graphics2D0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Path2D$Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (ChartRenderingInfo) null);
      bufferedImage0.createGraphics();
      String string0 = "";
      bufferedImage0.flush();
      GraphicsConfiguration graphicsConfiguration0 = null;
      // Undeclared exception!
      try { 
        bufferedImage0.getSubimage(15, 10, 0, 0);
        fail("Expecting exception: RasterFormatException");
      
      } catch(RasterFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "";
      LogAxis logAxis0 = new LogAxis("");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, logAxis0, defaultPolarItemRenderer0);
      polarPlot0.isDomainZoomable();
      double double0 = 0.0;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      WindNeedle windNeedle0 = new WindNeedle();
      AffineTransform affineTransform0 = windNeedle0.getTransform();
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      Arc2D.Double arc2D_Double0 = null;
      try {
        arc2D_Double0 = new Arc2D.Double(926);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid type for Arc: 926
         //
         verifyException("java.awt.geom.Arc2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      double double0 = 0.0;
      Font font0 = new Font("$WaW {\"T,?${'", 0, 0);
      JFreeChart jFreeChart0 = new JFreeChart("$WaW {\"T,?${'", font0, polarPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(1024);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1024, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.setAutoPopulateSeriesStroke(false);
      defaultPolarItemRenderer0.setDefaultItemLabelsVisible(false);
      polarPlot0.setRenderer((PolarItemRenderer) defaultPolarItemRenderer0);
      DefaultPolarItemRenderer defaultPolarItemRenderer1 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer1.setDataBoundsIncludesVisibleSeriesOnly(false);
      defaultPolarItemRenderer1.setDefaultLegendShape(polarPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      defaultPolarItemRenderer1.lookupSeriesPaint(10);
      polarPlot0.setRenderer(32, (PolarItemRenderer) defaultPolarItemRenderer1);
      polarPlot0.isCounterClockwise();
      polarPlot0.getAngleGridlinePaint();
      polarPlot0.getAngleLabelFont();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(10, 1.0F);
      DatasetGroup datasetGroup0 = defaultKeyedValueDataset0.getGroup();
      xIntervalSeriesCollection0.setGroup(datasetGroup0);
      polarPlot0.setDataset(32, (XYDataset) xIntervalSeriesCollection0);
      polarPlot0.getRenderer();
      polarPlot0.mapDatasetToAxis(6, (-2304));
      polarPlot0.isRadiusMinorGridlinesVisible();
      polarPlot0.getAngleOffset();
      String string0 = null;
      TimeZone timeZone0 = null;
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYTaskDataset0, logAxis0, defaultPolarItemRenderer0);
      DefaultPolarItemRenderer defaultPolarItemRenderer1 = new DefaultPolarItemRenderer();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(500);
      ItemLabelPosition itemLabelPosition0 = candlestickRenderer0.getPositiveItemLabelPosition(20, (-5188));
      defaultPolarItemRenderer1.setSeriesNegativeItemLabelPosition((-5188), itemLabelPosition0, true);
      polarPlot0.setRenderer(500, (PolarItemRenderer) defaultPolarItemRenderer1, true);
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(xYTaskDataset0);
      polarPlot0.rendererChanged(rendererChangeEvent0);
      taskSeriesCollection0.hasListener(xYTaskDataset0);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.SOUTH_LEFT;
      polarPlot0.setAxisLocation(polarAxisLocation0, true);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0, 2526.730194496142);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultTableXYDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.WEST_BELOW;
      polarPlot0.setAxisLocation(polarAxisLocation0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      LogAxis logAxis0 = new LogAxis((String) null);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultWindDataset0, logAxis0, defaultPolarItemRenderer0);
      polarPlot0.getDataset();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      logAxis0.configure();
      logAxis0.setMinorTickCount((-1311));
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, logAxis0, defaultPolarItemRenderer0);
      logAxis0.setAxisLinePaint(polarPlot0.DEFAULT_OUTLINE_PAINT);
      logAxis0.removeChangeListener(polarPlot0);
      polarPlot0.setForegroundAlpha((-1.0F));
      polarPlot0.getRenderer();
      logAxis0.resizeRange((-90.0), 1851.2304264783245);
      polarPlot0.setRadiusGridlinePaint(logAxis0.DEFAULT_AXIS_LINE_PAINT);
      // Undeclared exception!
      try { 
        polarPlot0.buildRadialTicks((List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      Range range1 = Range.expand(range0, 154.5, 0.0);
      ModuloAxis moduloAxis0 = new ModuloAxis("C/@t_}WI&:p-Y`MXfMn", range1);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(moduloAxis0);
      combinedDomainXYPlot0.getDataset(5);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, moduloAxis0, defaultPolarItemRenderer0);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.EAST_ABOVE;
      polarPlot0.setAxisLocation(500, polarAxisLocation0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2451), "");
      simpleTimeZone0.setEndRule((-130), 0, 0, 0, true);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      PolarPlot polarPlot0 = new PolarPlot(timeTableXYDataset0, logarithmicAxis0, (PolarItemRenderer) null);
      polarPlot0.setDataset((XYDataset) timeTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.lookupSeriesPaint(10);
      polarPlot0.setRadiusGridlinePaint(paint0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getRenderer();
      polarPlot0.setAngleGridlineStroke((Stroke) null);
      polarPlot0.addCornerTextItem("A/oZ$WIb");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(polarPlot0);
      polarPlot0.rendererChanged(rendererChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1231.654, 0.025);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.getDataset(500);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, cyclicNumberAxis0, defaultPolarItemRenderer0);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_LEFT;
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 10;
      doubleArray2[1] = (double) 0.0F;
      doubleArray2[2] = 0.05;
      doubleArray2[3] = (double) 10;
      doubleArray2[4] = (-1861.508535562);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 0.025;
      doubleArray3[1] = 0.05;
      doubleArray3[2] = 0.05;
      doubleArray3[3] = (double) 10;
      doubleArray3[4] = 45.0;
      doubleArray3[5] = (double) 10;
      doubleArray3[6] = (double) 10;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 1.0E-8;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (double) 10;
      doubleArray5[1] = (double) 10;
      doubleArray5[2] = (double) 1.0F;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(6, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      polarPlot0.drawAxis(cyclicNumberAxis0, polarAxisLocation0, graphics2D0, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, logAxis0, defaultPolarItemRenderer0);
      polarPlot0.zoom((-2959.63697));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      String string0 = "";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1294.2, "");
      PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, cyclicNumberAxis0, (PolarItemRenderer) null);
      LinkedList<DefaultHeatMapDataset> linkedList0 = new LinkedList<DefaultHeatMapDataset>();
      List list0 = polarPlot0.buildRadialTicks(linkedList0);
      // Undeclared exception!
      try { 
        polarPlot0.mapDatasetToAxes(500, list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.setLegendShape(500, (Shape) null);
      numberAxis0.centerRange((double) defaultPolarItemRenderer0.ZERO);
      PolarPlot polarPlot0 = new PolarPlot(defaultTableXYDataset0, numberAxis0, defaultPolarItemRenderer0);
      polarPlot0.setNoDataMessageFont(numberAxis0.DEFAULT_TICK_LABEL_FONT);
      numberAxis0.pan((-2961.1906131619817));
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(defaultTableXYDataset0, defaultTableXYDataset0);
      polarPlot0.datasetChanged(datasetChangeEvent0);
      System.setCurrentTimeMillis(500);
      DatasetGroup datasetGroup0 = new DatasetGroup("Value:");
      defaultTableXYDataset0.setGroup(datasetGroup0);
      defaultPolarItemRenderer0.setSeriesFillPaint(754, numberAxis0.DEFAULT_TICK_MARK_PAINT, true);
      numberAxis0.setVisible(true);
      polarPlot0.indexOf(defaultTableXYDataset0);
      polarPlot0.getAngleOffset();
      polarPlot0.getAxisForDataset(500);
      polarPlot0.isAngleLabelsVisible();
      polarPlot0.getDataset();
      polarPlot0.isRadiusMinorGridlinesVisible();
      polarPlot0.getFixedLegendItems();
      polarPlot0.equals(datasetChangeEvent0);
      polarPlot0.getAngleGridlineStroke();
      Stack<DefaultPieDataset> stack0 = new Stack<DefaultPieDataset>();
      DateAxis dateAxis0 = new DateAxis("]<$iajzOJ");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) dateAxis0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate2);
      stack0.removeIf(predicate3);
      // Undeclared exception!
      try { 
        polarPlot0.mapDatasetToAxes(0, stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, logAxis0, defaultPolarItemRenderer0);
      polarPlot0.setForegroundAlpha(10);
      logAxis0.setTickLabelsVisible(false);
      logAxis0.setTickMarkInsideLength(0.5F);
      polarPlot0.getLegendItems();
      polarPlot0.getPlotType();
      polarPlot0.getIndexOf(defaultPolarItemRenderer0);
      int int0 = Plot.MINIMUM_HEIGHT_TO_DRAW;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      polarPlot0.zoomRangeAxes((-2586.979860499884), plotRenderingInfo0, (Point2D) point0, false);
      polarPlot0.clearCornerTextItems();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getFixedLegendItems();
      polarPlot0.fireChangeEvent();
      polarPlot0.setAngleGridlinesVisible(true);
      int int0 = 18;
      polarPlot0.getRenderer(18);
      polarPlot0.getAngleTickUnit();
      LogAxis logAxis0 = new LogAxis("");
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.EAST_ABOVE;
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(132, 18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getFixedLegendItems();
      polarPlot0.fireChangeEvent();
      polarPlot0.setAngleGridlinesVisible(true);
      polarPlot0.getRenderer(18);
      polarPlot0.getAngleTickUnit();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_LEFT;
      polarPlot0.setAxisLocation(0, polarAxisLocation0);
      Font font0 = new Font("", 2747, 10);
      JFreeChart jFreeChart0 = new JFreeChart("", font0, polarPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Rectangle rectangle0 = new Rectangle(793, 817, 300, (-3502));
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-1471.383593108373), 3175.3369192085, (-1471.383593108373), (double) 1.0F);
      rectangle0.getPathIterator(affineTransform0);
      Rectangle rectangle1 = new Rectangle(rectangle0);
      Rectangle rectangle2 = chartPanel0.getBounds(rectangle1);
      Point point0 = new Point();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      polarPlot0.drawGridlines((Graphics2D) null, rectangle2, arrayList0, arrayList0);
      polarPlot0.mapDatasetToAxis(18, 2247);
      polarPlot0.getAxisForDataset(10);
      polarPlot0.setAngleLabelsVisible(false);
      polarPlot0.getAngleGridlinePaint();
      polarPlot0.removeCornerTextItem("8m'vTk48WJ<Xc]5^LR");
      polarPlot0.getAxisLocation();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      ThermometerPlot thermometerPlot1 = new ThermometerPlot();
      ValueAxis valueAxis1 = thermometerPlot1.getRangeAxis();
      thermometerPlot0.setForegroundAlpha(1244.0F);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis1);
      thermometerPlot0.addChangeListener(combinedRangeXYPlot0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(10, 1654, 2536.5632433, 500, (-90.0), 80.2628526955848);
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      defaultValueDataset0.setGroup(datasetGroup0);
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, valueAxis0, defaultPolarItemRenderer0);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.WEST_BELOW;
      polarPlot0.setAxisLocation(2, polarAxisLocation0, true);
      polarPlot0.getDatasetCount();
      valueAxis0.setRangeWithMargins(valueAxis1.DEFAULT_RANGE);
      timePeriodValuesCollection0.getDomainUpperBound(false);
      polarPlot0.setAxis(822, valueAxis0, true);
      polarPlot0.getLegendItems();
      polarPlot0.clone();
      polarPlot0.getDataRange(valueAxis1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      ThermometerPlot thermometerPlot1 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis1 = thermometerPlot1.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis1);
      thermometerPlot0.addChangeListener(combinedRangeXYPlot0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, valueAxis0, defaultPolarItemRenderer0);
      thermometerPlot1.setParent(polarPlot0);
      PolarAxisLocation polarAxisLocation0 = polarPlot0.getAxisLocation();
      polarPlot0.setAxisLocation(2, polarAxisLocation0, false);
      polarPlot0.getDatasetCount();
      polarPlot0.setAxis(822, valueAxis0, true);
      polarPlot0.calculateTextAnchor(0.05);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.addCornerTextItem("");
      polarPlot0.isRangeZoomable();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      DefaultCaret defaultCaret0 = new DefaultCaret();
      polarPlot0.translateToJava2D(835.0246573628, 835.0246573628, periodAxis0, defaultCaret0);
      polarPlot0.getLegendItems();
      polarPlot0.setRadiusMinorGridlinesVisible(true);
      Color color0 = Color.GRAY;
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) (-1713);
      floatArray0[2] = (float) 0;
      color0.getColorComponents(floatArray0);
      Color.getColor("", 1876);
      polarPlot0.isRadiusGridlinesVisible();
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator((-1713), color0, (-3786.96F), 0, 0.0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(0, 0, (-1713));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -1713
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      StandardTickUnitSource standardTickUnitSource0 = new StandardTickUnitSource();
      TickUnit tickUnit0 = standardTickUnitSource0.getCeilingTickUnit(0.0);
      LogAxis logAxis0 = new LogAxis();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.EAST_ABOVE;
      JFreeChart jFreeChart0 = new JFreeChart((String) null, polarPlot0);
      PolarChartPanel polarChartPanel0 = new PolarChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = polarChartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JViewport jViewport0 = new JViewport();
      Rectangle rectangle0 = jViewport0.getViewRect();
      polarPlot0.drawAxis(logAxis0, polarAxisLocation0, graphics2D0, rectangle0);
      polarPlot0.setAngleTickUnit(tickUnit0);
      PolarAxisLocation polarAxisLocation1 = PolarAxisLocation.SOUTH_LEFT;
      polarPlot0.setAxisLocation(polarAxisLocation1);
      PolarPlot polarPlot1 = (PolarPlot)polarPlot0.clone();
      polarPlot0.setRadiusGridlinesVisible(true);
      PeriodAxis periodAxis0 = new PeriodAxis("ZOOM_RESET_BOTH");
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      polarPlot1.render(graphics2D0, rectangle0, plotRenderingInfo0);
      polarPlot1.getAngleGridlineStroke();
      assertEquals(PolarAxisLocation.SOUTH_LEFT, polarPlot0.getAxisLocation());
      assertFalse(polarPlot1.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      int int0 = 1738;
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1738, 10, (-90.0), 10, 90.0, 1738);
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      datasetGroup0.clone();
      datasetGroup0.clone();
      polarPlot0.setDatasetGroup(datasetGroup0);
      polarPlot0.calculateTextAnchor(45.0);
      polarPlot0.getPlotType();
      polarPlot0.setOutlineVisible(true);
      polarPlot0.mapDatasetToAxis(1738, (-1555));
      polarPlot0.clearCornerTextItems();
      JFreeChart jFreeChart0 = new JFreeChart(";;lg}gO6E/[O0q0kHkc", polarPlot0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      polarPlot0.getDataRange(valueAxis0);
      jFreeChart0.getRenderingHints();
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(5, 10, 134);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 134
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setMargin(3);
      polarPlot0.calculateTextAnchor(1.0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(3, 3);
      DatasetChangeEvent datasetChangeEvent0 = null;
      try {
        datasetChangeEvent0 = new DatasetChangeEvent((Object) null, dynamicTimeSeriesCollection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      polarPlot0.zoom((double) defaultPolarItemRenderer0.ZERO);
      defaultPolarItemRenderer0.setAutoPopulateSeriesStroke(false);
      defaultPolarItemRenderer0.setDefaultItemLabelsVisible(false);
      polarPlot0.setAngleGridlineStroke(defaultPolarItemRenderer0.DEFAULT_STROKE);
      polarPlot0.setRenderer((PolarItemRenderer) defaultPolarItemRenderer0);
      DefaultPolarItemRenderer defaultPolarItemRenderer1 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer1.setDataBoundsIncludesVisibleSeriesOnly(false);
      defaultPolarItemRenderer1.setDefaultLegendShape(polarPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      defaultPolarItemRenderer1.lookupSeriesPaint(10);
      polarPlot0.setRenderer(32, (PolarItemRenderer) defaultPolarItemRenderer1);
      polarPlot0.isCounterClockwise();
      polarPlot0.getAngleGridlinePaint();
      polarPlot0.getAngleLabelFont();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(10, 1.0F);
      DatasetGroup datasetGroup0 = defaultKeyedValueDataset0.getGroup();
      xIntervalSeriesCollection0.setGroup(datasetGroup0);
      polarPlot0.setDataset(32, (XYDataset) xIntervalSeriesCollection0);
      polarPlot0.getRenderer();
      polarPlot0.mapDatasetToAxis(6, (-2304));
      polarPlot0.isRadiusMinorGridlinesVisible();
      polarPlot0.getAngleOffset();
      String string0 = null;
      polarPlot0.setAngleLabelPaint(defaultPolarItemRenderer1.DEFAULT_VALUE_LABEL_PAINT);
      TimeZone timeZone0 = null;
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }
}
