/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:22:45 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.SystemColor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.ValueMarker;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ValueMarker_ESTest extends ValueMarker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker((-1187.0));
      ValueMarker valueMarker1 = new ValueMarker(0.0);
      boolean boolean0 = valueMarker0.equals(valueMarker1);
      assertEquals(0.0, valueMarker1.getValue(), 0.01);
      assertFalse(boolean0);
      assertFalse(valueMarker1.equals((Object)valueMarker0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(159.08);
      double double0 = valueMarker0.getValue();
      assertEquals(159.08, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker((-1445.44206));
      double double0 = valueMarker0.getValue();
      assertEquals((-1445.44206), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.windowBorder;
      BasicStroke basicStroke0 = (BasicStroke)CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
      ValueMarker valueMarker0 = null;
      try {
        valueMarker0 = new ValueMarker(402.7544877268172, systemColor0, basicStroke0, systemColor0, basicStroke0, (-45.146F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicStroke basicStroke0 = (BasicStroke)CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
      ValueMarker valueMarker0 = null;
      try {
        valueMarker0 = new ValueMarker((-1.0), (Paint) null, basicStroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Stroke stroke0 = categoryPlot0.getDomainCrosshairStroke();
      ValueMarker valueMarker0 = new ValueMarker(177.589022, systemColor0, stroke0, systemColor0, stroke0, 1.0F);
      assertEquals(177.589022, valueMarker0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      boolean boolean0 = valueMarker0.equals(valueMarker0);
      assertEquals(0.0, valueMarker0.getValue(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      ValueMarker valueMarker1 = new ValueMarker((-874.17819));
      boolean boolean0 = valueMarker0.equals(valueMarker1);
      assertFalse(boolean0);
      assertEquals((-874.17819), valueMarker1.getValue(), 0.01);
      assertFalse(valueMarker1.equals((Object)valueMarker0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      BasicStroke basicStroke0 = (BasicStroke)Plot.DEFAULT_OUTLINE_STROKE;
      ValueMarker valueMarker0 = new ValueMarker(10, categoryPlot0.DEFAULT_CROSSHAIR_PAINT, basicStroke0);
      boolean boolean0 = valueMarker0.equals(categoryPlot0);
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      valueMarker0.setValue((-874.17819));
      ValueMarker valueMarker1 = new ValueMarker((-874.17819));
      boolean boolean0 = valueMarker0.equals(valueMarker1);
      assertEquals((-874.17819), valueMarker0.getValue(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      double double0 = valueMarker0.getValue();
      assertEquals(0.0, double0, 0.01);
  }
}
