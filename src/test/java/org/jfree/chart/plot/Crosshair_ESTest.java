/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:47:25 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.labels.CrosshairLabelGenerator;
import org.jfree.chart.labels.StandardCrosshairLabelGenerator;
import org.jfree.chart.plot.Crosshair;
import org.jfree.chart.ui.RectangleAnchor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Crosshair_ESTest extends Crosshair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      Color color0 = Color.CYAN;
      crosshair0.setLabelOutlinePaint(color0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      Color color0 = Color.lightGray;
      crosshair0.setLabelPaint(color0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1.0));
      crosshair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1684.4816375737748));
      crosshair0.setVisible(false);
      crosshair0.isVisible();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      crosshair0.setLabelVisible(true);
      crosshair0.isLabelVisible();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(4473.87686973);
      crosshair0.setLabelOutlineVisible(false);
      crosshair0.isLabelOutlineVisible();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      crosshair0.getValue();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      crosshair0.setValue((-1386.525772));
      crosshair0.getValue();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-430.8982348));
      crosshair0.setStroke((Stroke) null);
      crosshair0.getStroke();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      crosshair0.setPaint((Paint) null);
      crosshair0.getPaint();
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(801.9505781821468);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      
      crosshair0.setLabelYOffset((byte)0);
      double double0 = crosshair0.getLabelYOffset();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      crosshair0.setLabelYOffset((-820.853890986));
      double double0 = crosshair0.getLabelYOffset();
      assertEquals((-820.853890986), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      crosshair0.setLabelXOffset(Double.NEGATIVE_INFINITY);
      double double0 = crosshair0.getLabelXOffset();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-566.352));
      crosshair0.setLabelBackgroundPaint((Paint) null);
      Paint paint0 = crosshair0.getLabelBackgroundPaint();
      assertTrue(crosshair0.isVisible());
      assertEquals((-566.352), crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertNull(paint0);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1290.591769));
      // Undeclared exception!
      try { 
        crosshair0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      // Undeclared exception!
      try { 
        crosshair0.setLabelOutlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      // Undeclared exception!
      try { 
        crosshair0.setLabelOutlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1.0));
      // Undeclared exception!
      try { 
        crosshair0.setLabelGenerator((CrosshairLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      // Undeclared exception!
      try { 
        crosshair0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      Crosshair crosshair0 = null;
      try {
        crosshair0 = new Crosshair(0.0, systemColor0, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.controlText;
      BasicStroke basicStroke0 = new BasicStroke(181.2065F);
      Crosshair crosshair0 = new Crosshair(Double.POSITIVE_INFINITY, systemColor0, basicStroke0);
      double double0 = crosshair0.getValue();
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1.0));
      Paint paint0 = crosshair0.getPaint();
      BasicStroke basicStroke0 = new BasicStroke(0.0F);
      Crosshair crosshair1 = new Crosshair((-820.853890986), paint0, basicStroke0);
      boolean boolean0 = crosshair0.equals(crosshair1);
      assertTrue(crosshair1.isVisible());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals((-820.853890986), crosshair1.getValue(), 0.01);
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertFalse(boolean0);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertFalse(crosshair1.isLabelVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      crosshair0.setLabelOutlineVisible(false);
      Crosshair crosshair1 = new Crosshair();
      boolean boolean0 = crosshair0.equals(crosshair1);
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      Crosshair crosshair1 = (Crosshair)crosshair0.clone();
      crosshair1.setLabelYOffset(1108.65426942608);
      boolean boolean0 = crosshair0.equals(crosshair1);
      assertEquals(1108.65426942608, crosshair1.getLabelYOffset(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      Crosshair crosshair1 = new Crosshair();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      crosshair1.setLabelAnchor(rectangleAnchor0);
      boolean boolean0 = crosshair0.equals(crosshair1);
      assertEquals(RectangleAnchor.TOP, crosshair1.getLabelAnchor());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      Crosshair crosshair1 = (Crosshair)crosshair0.clone();
      assertTrue(crosshair1.equals((Object)crosshair0));
      
      crosshair1.setStroke((Stroke) null);
      boolean boolean0 = crosshair0.equals(crosshair1);
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      assertFalse(boolean0);
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertTrue(crosshair1.isVisible());
      assertFalse(crosshair1.isLabelVisible());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      Crosshair crosshair1 = new Crosshair(3.0);
      boolean boolean0 = crosshair0.equals(crosshair1);
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertFalse(boolean0);
      assertEquals(3.0, crosshair1.getValue(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertTrue(crosshair1.isVisible());
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertFalse(crosshair1.equals((Object)crosshair0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(0.0);
      crosshair0.setVisible(false);
      Crosshair crosshair1 = new Crosshair();
      boolean boolean0 = crosshair0.equals(crosshair1);
      assertFalse(boolean0);
      assertFalse(crosshair0.isVisible());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      boolean boolean0 = crosshair0.equals(crosshair0);
      assertTrue(boolean0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      CrosshairLabelGenerator crosshairLabelGenerator0 = crosshair0.getLabelGenerator();
      boolean boolean0 = crosshair0.equals(crosshairLabelGenerator0);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy(".g4?~=^2iF!b4]2%ZW", propertyChangeListener0);
      crosshair0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(763.2);
      crosshair0.getStroke();
      assertEquals(763.2, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(763.2);
      double double0 = crosshair0.getLabelYOffset();
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(763.2, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, double0, 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(763.2);
      crosshair0.getLabelAnchor();
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(763.2, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(763.2);
      BasicStroke basicStroke0 = (BasicStroke)crosshair0.getLabelOutlineStroke();
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(763.2, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      boolean boolean0 = crosshair0.isVisible();
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(boolean0);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      BasicStroke basicStroke0 = new BasicStroke();
      crosshair0.setLabelOutlineStroke(basicStroke0);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(763.2);
      Font font0 = Font.decode("!Sf_WYhb8VhsK{");
      crosshair0.setLabelFont(font0);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(763.2, crosshair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      Crosshair crosshair1 = (Crosshair)crosshair0.clone();
      boolean boolean0 = crosshair0.equals(crosshair1);
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertTrue(crosshair1.isVisible());
      assertTrue(boolean0);
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertEquals(0.0, crosshair1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy(".g4?~=^2iF!b4]2%ZW", propertyChangeListener0);
      crosshair0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(763.2);
      Paint paint0 = crosshair0.getLabelOutlinePaint();
      crosshair0.setLabelPaint(paint0);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(763.2, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      Color color0 = (Color)crosshair0.getLabelBackgroundPaint();
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(1056964863, color0.getRGB());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      Font font0 = crosshair0.getLabelFont();
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(font0.isPlain());
      assertEquals("Tahoma", font0.getName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(763.2);
      double double0 = crosshair0.getLabelXOffset();
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(763.2, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      boolean boolean0 = crosshair0.isLabelVisible();
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      boolean boolean0 = crosshair0.isLabelOutlineVisible();
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(763.2);
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = new StandardCrosshairLabelGenerator();
      crosshair0.setLabelGenerator(standardCrosshairLabelGenerator0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(763.2, crosshair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      crosshair0.getLabelPaint();
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
  }
}
