/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 20:49:38 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Paint;
import java.awt.SystemColor;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.MarkerChangeEvent;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.util.ShadowGenerator;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Plot_ESTest extends Plot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot((PieDataset) null);
      piePlot0.setBackgroundImageAlignment((-3136));
      assertEquals((-3136), piePlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      piePlot3D0.setNoDataMessagePaint(systemColor0);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isNotify());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      compassPlot0.fireChangeEvent();
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Lu;,", combinedDomainCategoryPlot0.DEFAULT_VALUE_LABEL_FONT, combinedDomainCategoryPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 15);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartRenderingInfo0.getChartArea();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.drawNoDataMessage(sunGraphics2D0, rectangle2D_Double0);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0, sunGraphics2D0.clipState);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.getLegendItems();
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      RingPlot ringPlot0 = new RingPlot(defaultKeyedValuesDataset0);
      ringPlot0.getLegendItems();
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isNotify());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(taskSeriesCollection0);
      // Undeclared exception!
      try { 
        spiderWebPlot0.setNoDataMessageFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      // Undeclared exception!
      try { 
        Plot.resolveRangeAxisLocation(axisLocation0, (PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      // Undeclared exception!
      try { 
        thermometerPlot0.fillBackground((Graphics2D) null, (Rectangle2D) null, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      assertEquals(RectangleEdge.BOTTOM, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertTrue(thermometerPlot0.isNotify());
      
      thermometerPlot0.setNotify(false);
      assertFalse(thermometerPlot0.isNotify());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setInsets(combinedRangeXYPlot0.DEFAULT_INSETS, false);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis("R7");
      ringPlot0.setInsets(categoryAxis0.DEFAULT_AXIS_LABEL_INSETS, true);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.isNotify());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      piePlot3D0.setChart(jFreeChart0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart(multiplePiePlot0);
      multiplePiePlot0.addChangeListener(jFreeChart0);
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(multiplePiePlot0);
      multiplePiePlot0.notifyListeners(plotChangeEvent0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultBoxAndWhiskerCategoryDataset0);
      multiplePiePlot0.getParent();
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("c/AO{5tx#I", piePlot3D0.DEFAULT_LABEL_FONT, piePlot3D0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      piePlot3D0.handleClick((-7), 814, plotRenderingInfo0);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertTrue(piePlot3D0.isNotify());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      String[] stringArray0 = new String[9];
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(symbolAxis0);
      multiplePiePlot0.axisChanged(axisChangeEvent0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertTrue(multiplePiePlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(10, 2306);
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(1719, 2306);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(multiplePiePlot0, waferMapDataset0);
      waferMapPlot0.datasetChanged(datasetChangeEvent0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(10, 2306);
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(1719, 2306);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      compassPlot0.setParent(waferMapPlot0);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      RectangleEdge rectangleEdge0 = Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      assertEquals(RectangleEdge.BOTTOM, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      RectangleEdge rectangleEdge0 = Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      assertEquals(RectangleEdge.LEFT, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      RectangleEdge rectangleEdge0 = Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      assertEquals(RectangleEdge.LEFT, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      RectangleEdge rectangleEdge0 = Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      assertEquals(RectangleEdge.RIGHT, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      RectangleEdge rectangleEdge0 = Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      assertEquals(RectangleEdge.RIGHT, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      assertEquals(RectangleEdge.BOTTOM, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      assertEquals(RectangleEdge.TOP, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      assertEquals(RectangleEdge.LEFT, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      assertEquals(RectangleEdge.TOP, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      assertEquals(RectangleEdge.LEFT, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultBoxAndWhiskerCategoryDataset0);
      MultiplePiePlot multiplePiePlot1 = (MultiplePiePlot)multiplePiePlot0.clone();
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot1.isNotify());
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot1.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(10, 2306);
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(1719, 2306);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      boolean boolean0 = waferMapRenderer0.hasListener(waferMapPlot0);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      double double0 = categoryPlot0.getRectY(0.0, 0, 4060.23626, rectangleEdge0);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(0.0, double0, 0.01);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      double double0 = piePlot3D0.getRectX((-1102.73517416972), (-1102.73517416972), (-1102.73517416972), rectangleEdge0);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isNotify());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals((-1102.73517416972), double0, 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      combinedDomainCategoryPlot0.setShadowGenerator((ShadowGenerator) null);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultPieDataset0);
      piePlot3D0.setForegroundAlpha(1280.702F);
      assertEquals(1280.702F, piePlot3D0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Paint paint0 = areaRenderer0.lookupSeriesFillPaint(234);
      piePlot0.setOutlinePaint(paint0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.isNotify());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setOutlineStroke(thermometerPlot0.DEFAULT_OUTLINE_STROKE);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.setOutlineStroke(subCategoryAxis0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setBackgroundImageAlpha(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f.
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(798.709856);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      // Undeclared exception!
      try { 
        thermometerPlot0.setBackgroundImageAlpha((-2561.9258F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f.
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.setBackgroundImageAlignment(33);
      assertEquals(33, thermometerPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.setDrawingSupplier((DrawingSupplier) null, true);
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertTrue(fastScatterPlot0.isNotify());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      spiderWebPlot0.setDrawingSupplier((DrawingSupplier) null, false);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setBackgroundAlpha(2718.0095F);
      assertEquals(2718.0095F, piePlot3D0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      
      multiplePiePlot0.setBackgroundAlpha(1.0F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Paint paint0 = combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      combinedDomainXYPlot0.setBackgroundPaint(paint0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setBackgroundPaint((Paint) null);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isNotify());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultBoxAndWhiskerCategoryDataset0);
      multiplePiePlot0.setBackgroundPaint(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(10, 2306);
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(1719, 2306);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      waferMapPlot0.setInsets(compassPlot0.DEFAULT_INSETS);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.getChart();
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isNotify());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      compassPlot0.getOutlineStroke();
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertTrue(compassPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultStatisticalCategoryDataset0);
      Color color0 = (Color)spiderWebPlot0.getNoDataMessagePaint();
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, color0.getRed());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultIntervalCategoryDataset0, tableOrder0);
      float float0 = spiderWebPlot0.getBackgroundAlpha();
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isNotify());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setBackgroundImage((Image) null);
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      multiplePiePlot0.setNoDataMessageFont(ringPlot0.DEFAULT_LABEL_FONT);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isNotify());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      PolarPlot polarPlot0 = new PolarPlot();
      DrawingSupplier drawingSupplier0 = polarPlot0.getDrawingSupplier();
      spiderWebPlot0.setDrawingSupplier(drawingSupplier0);
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(polarPlot0.isNotify());
      assertTrue(polarPlot0.isOutlineVisible());
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultBoxAndWhiskerCategoryDataset0);
      multiplePiePlot0.removeChangeListener(combinedDomainXYPlot0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Font font0 = combinedDomainCategoryPlot0.getNoDataMessageFont();
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(12, font0.getSize());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(font0.isPlain());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals("SansSerif", font0.getName());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][6];
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis0, cyclicNumberAxis0, lineAndShapeRenderer0);
      boolean boolean0 = categoryPlot0.isNotify();
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(boolean0);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      boolean boolean0 = fastScatterPlot0.isOutlineVisible();
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertTrue(boolean0);
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isNotify());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultStatisticalCategoryDataset0);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      
      spiderWebPlot0.setOutlineVisible(false);
      assertFalse(spiderWebPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      RingPlot ringPlot0 = new RingPlot();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(3726.33691, 2, 72.0, 10);
      AnnotationChangeEvent annotationChangeEvent0 = new AnnotationChangeEvent(ringPlot0, xYLineAnnotation0);
      thermometerPlot0.annotationChanged(annotationChangeEvent0);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isNotify());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(thermometerPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultBoxAndWhiskerCategoryDataset0);
      multiplePiePlot0.zoom((-805.6197511));
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(10, 2306);
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(1719, 2306);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      waferMapPlot0.setNoDataMessage("");
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(10, 2306);
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(1719, 2306);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 0, thermometerPlot0.DEFAULT_BACKGROUND_PAINT, compassPlot0.DEFAULT_OUTLINE_STROKE, waferMapPlot0.DEFAULT_GRIDLINE_PAINT, waferMapPlot0.DEFAULT_OUTLINE_STROKE, 1);
      MarkerChangeEvent markerChangeEvent0 = new MarkerChangeEvent(intervalMarker0);
      thermometerPlot0.markerChanged(markerChangeEvent0);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Color color0 = (Color)thermometerPlot0.getOutlinePaint();
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(128, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.add((XYPlot) combinedDomainXYPlot0);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultBoxAndWhiskerCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
  }
}
