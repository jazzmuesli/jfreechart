/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:19:28 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Paint;
import java.awt.Stroke;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.ui.GradientPaintTransformer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IntervalMarker_ESTest extends IntervalMarker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker((-699.18994431643), (-699.18994431643));
      intervalMarker0.setStartValue(0.0);
      IntervalMarker intervalMarker1 = new IntervalMarker(0.0, 2.5);
      boolean boolean0 = intervalMarker0.equals(intervalMarker1);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker(34.0, (-2185.8608));
      Object object0 = intervalMarker0.clone();
      assertEquals(34.0, intervalMarker0.getStartValue(), 0.01);
      
      intervalMarker0.setStartValue((-2185.8608));
      boolean boolean0 = intervalMarker0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 0.0);
      double double0 = intervalMarker0.getStartValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker((-2143.0), 0.0);
      double double0 = intervalMarker0.getStartValue();
      assertEquals((-2143.0), double0, 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 0.0, paint0);
      double double0 = intervalMarker0.getEndValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker((-469.42537537222), (-469.42537537222));
      double double0 = intervalMarker0.getEndValue();
      assertEquals((-469.42537537222), double0, 0.01);
      assertEquals((-469.42537537222), intervalMarker0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, (-1.0), paint0);
      Color color0 = intervalMarker0.getLabelBackgroundColor();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker1 = null;
      try {
        intervalMarker1 = new IntervalMarker((-1278.6685794733), (-1278.6685794733), color0, stroke0, color0, stroke0, (-1.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntervalMarker intervalMarker0 = null;
      try {
        intervalMarker0 = new IntervalMarker((-1.0), 1804.2197, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker(4522.467250042765, 100.0);
      Color color0 = intervalMarker0.getLabelBackgroundColor();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker1 = new IntervalMarker(301.9, 0.0, color0, stroke0, color0, stroke0, 1.0F);
      assertEquals(0.0, intervalMarker1.getEndValue(), 0.01);
      assertEquals(301.9, intervalMarker1.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker((-661.3350608), (-661.3350608));
      Color color0 = intervalMarker0.getLabelBackgroundColor();
      IntervalMarker intervalMarker1 = new IntervalMarker((-661.3350608), 2113.125, color0);
      IntervalMarker intervalMarker2 = (IntervalMarker)intervalMarker1.clone();
      assertEquals(2113.125, intervalMarker2.getEndValue(), 0.01);
      
      intervalMarker2.setEndValue((-661.3350608));
      boolean boolean0 = intervalMarker1.equals(intervalMarker2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker((-1.164409119840401), (-1.164409119840401));
      Color color0 = intervalMarker0.getLabelBackgroundColor();
      IntervalMarker intervalMarker1 = new IntervalMarker((-1.164409119840401), (-1.164409119840401), color0);
      IntervalMarker intervalMarker2 = new IntervalMarker((-5.958248593022404), (-1020.90983), color0);
      boolean boolean0 = intervalMarker1.equals(intervalMarker2);
      assertFalse(boolean0);
      assertFalse(intervalMarker1.equals((Object)intervalMarker0));
      assertEquals((-5.958248593022404), intervalMarker2.getStartValue(), 0.01);
      assertEquals((-1020.90983), intervalMarker2.getEndValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker(1276.43590284666, 1276.43590284666);
      IntervalMarker intervalMarker1 = (IntervalMarker)intervalMarker0.clone();
      boolean boolean0 = intervalMarker0.equals(intervalMarker1);
      assertTrue(boolean0);
      assertEquals(1276.43590284666, intervalMarker1.getStartValue(), 0.01);
      assertEquals(1276.43590284666, intervalMarker1.getEndValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker((-661.3350608), (-661.3350608));
      Color color0 = intervalMarker0.getLabelBackgroundColor();
      boolean boolean0 = intervalMarker0.equals(color0);
      assertFalse(boolean0);
      assertEquals((-661.3350608), intervalMarker0.getStartValue(), 0.01);
      assertEquals((-661.3350608), intervalMarker0.getEndValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker(1276.43590284666, 1276.43590284666);
      boolean boolean0 = intervalMarker0.equals(intervalMarker0);
      assertEquals(1276.43590284666, intervalMarker0.getEndValue(), 0.01);
      assertEquals(1276.43590284666, intervalMarker0.getStartValue(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker(1276.43590284666, 1276.43590284666);
      intervalMarker0.getGradientPaintTransformer();
      assertEquals(1276.43590284666, intervalMarker0.getEndValue(), 0.01);
      assertEquals(1276.43590284666, intervalMarker0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker(1276.43590284666, 1276.43590284666);
      double double0 = intervalMarker0.getStartValue();
      assertEquals(1276.43590284666, double0, 0.01);
      assertEquals(1276.43590284666, intervalMarker0.getEndValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker(2113.125, 2113.125);
      intervalMarker0.setGradientPaintTransformer((GradientPaintTransformer) null);
      assertEquals(2113.125, intervalMarker0.getEndValue(), 0.01);
      assertEquals(2113.125, intervalMarker0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker((-661.3350608), (-661.3350608));
      Color color0 = intervalMarker0.getLabelBackgroundColor();
      IntervalMarker intervalMarker1 = new IntervalMarker((-661.3350608), 2113.125, color0);
      boolean boolean0 = intervalMarker1.equals(intervalMarker0);
      assertFalse(boolean0);
      assertEquals((-661.3350608), intervalMarker1.getStartValue(), 0.01);
      assertEquals(2113.125, intervalMarker1.getEndValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker(1276.43590284666, 1276.43590284666);
      double double0 = intervalMarker0.getEndValue();
      assertEquals(1276.43590284666, double0, 0.01);
      assertEquals(1276.43590284666, intervalMarker0.getStartValue(), 0.01);
  }
}
