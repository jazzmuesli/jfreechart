/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 20:56:06 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Area;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.text.DecimalFormat;
import java.text.Format;
import java.text.NumberFormat;
import java.util.HashMap;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JViewport;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.DialShape;
import org.jfree.chart.plot.MeterInterval;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.data.Range;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.TimeSeriesCollection;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MeterPlot_ESTest extends MeterPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.setMeterAngle(5);
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart(compassPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 5, 270, 360, 10, 10, (-2093796556), false, true, false, false, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(270, 1970, (double) 1.0F, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      meterPlot0.drawTick(graphics2D0, rectangle2D0, 3.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setTickSize((-2.147483648E9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'size' > 0.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      // Undeclared exception!
      try { 
        meterPlot0.setRange(range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range length must be positive.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("Unrecognised position.", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      meterPlot0.fillArc(graphics2D0, defaultCaret0, 15, (-4746.35717074), jFreeChart0.DEFAULT_BACKGROUND_PAINT, false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Unrecognised position.", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      meterPlot0.drawTicks(graphics2D0, defaultCaret0, 0.12, 0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.valueToAngle(10);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0, "FZ/^");
      DecimalFormat decimalFormat0 = jSpinner_NumberEditor0.getFormat();
      meterPlot0.setTickLabelFormat(decimalFormat0);
      meterPlot0.getTickLabelFormat();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.getDataset();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      // Undeclared exception!
      try { 
        meterPlot0.setValuePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setValueFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setTickLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) null);
      // Undeclared exception!
      try { 
        meterPlot0.setTickLabelFormat((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'format' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setTickLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setNeedlePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      Area area0 = new Area();
      Rectangle rectangle0 = area0.getBounds();
      // Undeclared exception!
      try { 
        meterPlot0.fillArc((Graphics2D) null, rectangle0, 0, 135.6038040866115, systemColor0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, meterPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 270, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      // Undeclared exception!
      try { 
        meterPlot0.fillArc(graphics2D0, rectangle0, 0, (-1.0), (Paint) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        meterPlot0.drawValueLabel((Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.drawTick((Graphics2D) null, (Rectangle2D) null, 4407.69304745, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(100.0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("%<0Z>|uz[/", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      // Undeclared exception!
      try { 
        meterPlot0.drawTick((Graphics2D) null, rectangle0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("'|k} qlZCBo8>;`QG", meterPlot0.DEFAULT_LABEL_FONT, combinedDomainXYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        meterPlot0.drawArc(graphics2D0, (Rectangle2D) null, 3057.143048429, 0.5F, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.addInterval((MeterInterval) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'interval' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 2481, 270, 0, 0, 2133, (-1904), false, false, true, false, true, true, false);
      Rectangle rectangle0 = chartPanel0.getBounds();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      Point2D point2D0 = spiderWebPlot0.calculateLabelLocation(rectangle0, 45.0, rectangle0, 0);
      PlotState plotState0 = new PlotState();
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        meterPlot0.draw((Graphics2D) null, rectangle0, point2D0, plotState0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.getLegendItems();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(meterPlot0.ZERO);
      meterPlot0.setDataset(defaultValueDataset0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer((-1945));
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) integer0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.getDataset();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-279.9614558521));
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.valueToAngle(3301.33218318076);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      MeterPlot meterPlot1 = (MeterPlot)meterPlot0.clone();
      meterPlot1.setTickLabelPaint(meterPlot0.DEFAULT_BACKGROUND_PAINT);
      meterPlot0.equals(meterPlot1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Color color0 = Color.black;
      meterPlot0.setTickPaint(color0);
      MeterPlot meterPlot1 = new MeterPlot();
      meterPlot0.equals(meterPlot1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      MeterPlot meterPlot1 = (MeterPlot)meterPlot0.clone();
      meterPlot1.setValuePaint(meterPlot0.DEFAULT_BACKGROUND_PAINT);
      meterPlot0.equals(meterPlot1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      MeterPlot meterPlot1 = (MeterPlot)meterPlot0.clone();
      meterPlot1.setValueFont(meterPlot0.DEFAULT_LABEL_FONT);
      meterPlot0.equals(meterPlot1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Color color0 = Color.gray;
      meterPlot0.setDialBackgroundPaint(color0);
      MeterPlot meterPlot1 = new MeterPlot();
      meterPlot0.equals(meterPlot1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      MeterPlot meterPlot1 = (MeterPlot)meterPlot0.clone();
      meterPlot1.setNoDataMessage("");
      meterPlot0.equals(meterPlot1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      MeterPlot meterPlot1 = new MeterPlot();
      meterPlot0.equals(meterPlot1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Range range0 = meterPlot0.getRange();
      meterPlot0.equals(range0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("Unrecognised position.", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      meterPlot0.drawValueLabel(graphics2D0, defaultCaret0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Unrecognised position.", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      meterPlot0.drawValueLabel(graphics2D0, defaultCaret0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("#)DyiRe", meterPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(270, 270, 3338.1588, 1258.858857464, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      meterPlot0.drawTick(graphics2D0, rectangle2D0, 3338.1588, true);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(1709.43865445);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3573.058144367, 1709.43865445);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timeSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(270, 500, (-149.96145585210002), (double) 3.0F, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(572.7334F, 3686.097F, 1926.9685F, 10, 0.0F, 15);
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      MeterInterval meterInterval0 = new MeterInterval("Invalid 'angle' (", cyclicNumberAxis0.DEFAULT_RANGE, ((SunGraphics2D) graphics2D0).foregroundColor, defaultPolarItemRenderer0.DEFAULT_OUTLINE_STROKE, defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      meterPlot0.drawArcForInterval(graphics2D0, rectangle2D0, meterInterval0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.0);
      defaultValueDataset0.setValue(1.0F);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      jFreeChart0.createBufferedImage(1291, 10, chartRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1291, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      Stroke stroke0 = combinedDomainXYPlot0.getRangeZeroBaselineStroke();
      meterPlot0.drawArc(graphics2D0, rectangle2D_Double0, 319.994456, 0.5F, jFreeChart0.DEFAULT_BACKGROUND_PAINT, stroke0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-279.9614558521));
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("RQDx]{^`+", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JScrollPane jScrollPane0 = new JScrollPane();
      JViewport jViewport0 = jScrollPane0.getViewport();
      Rectangle rectangle0 = jViewport0.getViewRect();
      // Undeclared exception!
      try { 
        meterPlot0.drawArcForInterval(graphics2D0, rectangle0, (MeterInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1625);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      PlotState plotState0 = new PlotState();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, 10, 1625, 0, (-2045222521), 1947, true, false, true, false, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      meterPlot0.draw(graphics2D0, defaultCaret0, (Point2D) null, plotState0, plotRenderingInfo0);
      assertEquals(12, defaultCaret0.x);
      assertEquals((-16.0), defaultCaret0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(3799.975870960466);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.setDataset((ValueDataset) null);
      MeterPlot meterPlot1 = (MeterPlot)meterPlot0.clone();
      assertTrue(meterPlot1.getTickLabelsVisible());
      assertEquals("Units", meterPlot1.getUnits());
      assertEquals(270, meterPlot1.getMeterAngle());
      assertEquals(10.0, meterPlot1.getTickSize(), 0.01);
      assertNotSame(meterPlot1, meterPlot0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Paint paint0 = areaRenderer0.getItemLabelPaint(270, 3598);
      meterPlot0.setTickLabelPaint(paint0);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      HashMap<Format.Field, JInternalFrame.JDesktopIcon> hashMap0 = new HashMap<Format.Field, JInternalFrame.JDesktopIcon>();
      Font font0 = new Font(hashMap0);
      meterPlot0.setTickLabelFont(font0);
      Font font1 = meterPlot0.getTickLabelFont();
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(font1.isBold());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.setTickLabelFont(meterPlot0.DEFAULT_LABEL_FONT);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      assertTrue(meterPlot0.getTickLabelsVisible());
      
      meterPlot0.setTickLabelsVisible(false);
      assertFalse(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      assertTrue(meterPlot0.getTickLabelsVisible());
      
      meterPlot0.setTickLabelsVisible(true);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      // Undeclared exception!
      try { 
        meterPlot0.setTickSize(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'size' > 0.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.setTickSize(2996.02372883);
      assertEquals(2996.02372883, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      // Undeclared exception!
      try { 
        meterPlot0.setRange(range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range length must be positive.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) null);
      Range range0 = meterPlot0.getRange();
      meterPlot0.setRange(range0);
      assertEquals(50.0, range0.getCentralValue(), 0.01);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.setMeterAngle(10);
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1625);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      PlotState plotState0 = new PlotState();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, 10, 1625, 0, (-2045222521), 1947, true, false, true, false, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      meterPlot0.draw(graphics2D0, defaultCaret0, (Point2D) null, plotState0, plotRenderingInfo0);
      assertEquals(10, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setMeterAngle(230087534);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'angle' (230087534)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      // Undeclared exception!
      try { 
        meterPlot0.setMeterAngle((-847));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'angle' (-847)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      assertEquals("Units", meterPlot0.getUnits());
      
      meterPlot0.setUnits((String) null);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.getDrawBorder();
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(3799.975870960466);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      boolean boolean0 = meterPlot0.getTickLabelsVisible();
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(3799.975870960466);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Color color0 = (Color)meterPlot0.getValuePaint();
      meterPlot0.setDialOutlinePaint(color0);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals((-256), color0.getRGB());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(3799.975870960466);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.getTickLabelFormat();
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.getDialShape();
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.getIntervals();
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) integer0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      // Undeclared exception!
      try { 
        meterPlot0.setTickPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(3799.975870960466);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Font font0 = meterPlot0.getValueFont();
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Font font0 = meterPlot0.getTickLabelFont();
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10, font0.getSize());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Paint paint0 = meterPlot0.getDialOutlinePaint();
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Object[] objectArray0 = new Object[1];
      JList<Object> jList0 = new JList<Object>(objectArray0);
      Color color0 = jList0.getSelectionBackground();
      meterPlot0.setNeedlePaint(color0);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.zoom(197.06513985573136);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) null);
      String string0 = meterPlot0.getUnits();
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Color color0 = (Color)meterPlot0.getTickLabelPaint();
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      DialShape dialShape0 = DialShape.CHORD;
      meterPlot0.setDialShape(dialShape0);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) null);
      Color color0 = (Color)meterPlot0.getDialBackgroundPaint();
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(0, color0.getGreen());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Color color0 = (Color)meterPlot0.getNeedlePaint();
      assertEquals((-16711936), color0.getRGB());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Double double0 = AbstractRenderer.ZERO;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) double0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.clearIntervals();
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) null);
      double double0 = meterPlot0.getTickSize();
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) null);
      Range range0 = meterPlot0.getRange();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Paint paint0 = stackedAreaRenderer0.getItemFillPaint((-1331), 533);
      MeterInterval meterInterval0 = new MeterInterval("Meter_Plot", range0, paint0, stackedAreaRenderer0.DEFAULT_STROKE, meterPlot0.DEFAULT_BACKGROUND_PAINT);
      meterPlot0.addInterval(meterInterval0);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(50.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) null);
      Color color0 = (Color)meterPlot0.getTickPaint();
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals((-1), color0.getRGB());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Double double0 = AbstractRenderer.ZERO;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) double0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      int int0 = meterPlot0.getMeterAngle();
      assertEquals(270, int0);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.setDrawBorder(false);
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.getPlotType();
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
  }
}
