/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:13:22 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.SystemColor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.plot.MeterInterval;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MeterInterval_ESTest extends MeterInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      MeterInterval meterInterval0 = new MeterInterval("", range0);
      Range range1 = meterInterval0.getRange();
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range((-1.0), 1.0);
      MeterInterval meterInterval0 = new MeterInterval("label", range0);
      Range range1 = meterInterval0.getRange();
      assertFalse(range1.isNaNRange());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range(4229.1793, 4229.1793);
      MeterInterval meterInterval0 = new MeterInterval("range", range0);
      Range range1 = meterInterval0.getRange();
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      BasicStroke basicStroke0 = new BasicStroke();
      MeterInterval meterInterval0 = new MeterInterval("UsT2", range0, (Paint) null, basicStroke0, (Paint) null);
      Paint paint0 = meterInterval0.getOutlinePaint();
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-2196.943855614761), 0.0);
      MeterInterval meterInterval0 = new MeterInterval("", range0);
      String string0 = meterInterval0.getLabel();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range(403.9, 403.9);
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      MeterInterval meterInterval0 = new MeterInterval("L(", range0, systemColor0, (Stroke) null, systemColor0);
      Paint paint0 = meterInterval0.getBackgroundPaint();
      assertSame(systemColor0, paint0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MeterInterval meterInterval0 = null;
      try {
        meterInterval0 = new MeterInterval("J5TX]-j6?Mn0", (Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      MeterInterval meterInterval0 = new MeterInterval("x", range0);
      MeterInterval meterInterval1 = new MeterInterval("x", range0);
      boolean boolean0 = meterInterval0.equals(meterInterval1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range((-1806.2471227), 0.0);
      MeterInterval meterInterval0 = new MeterInterval("SR-Xt~v].", range0);
      Paint paint0 = meterInterval0.getOutlinePaint();
      assertNotNull(paint0);
      
      MeterInterval meterInterval1 = new MeterInterval("SR-Xt~v].", range0, paint0, (Stroke) null, paint0);
      boolean boolean0 = meterInterval0.equals(meterInterval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      MeterInterval meterInterval0 = new MeterInterval("", range0);
      SystemColor systemColor0 = SystemColor.windowBorder;
      BasicStroke basicStroke0 = new BasicStroke(0.0F, 0, 0);
      MeterInterval meterInterval1 = new MeterInterval("", range0, systemColor0, basicStroke0, systemColor0);
      boolean boolean0 = meterInterval0.equals(meterInterval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      MeterInterval meterInterval0 = new MeterInterval("", range0);
      Stroke stroke0 = meterInterval0.getOutlineStroke();
      Paint paint0 = meterInterval0.getOutlinePaint();
      MeterInterval meterInterval1 = new MeterInterval("", range0, paint0, stroke0, paint0);
      boolean boolean0 = meterInterval0.equals(meterInterval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      MeterInterval meterInterval0 = new MeterInterval("x", range0);
      MeterInterval meterInterval1 = new MeterInterval("]", range0);
      boolean boolean0 = meterInterval0.equals(meterInterval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      MeterInterval meterInterval0 = new MeterInterval("label", range0);
      boolean boolean0 = meterInterval0.equals("label");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      MeterInterval meterInterval0 = new MeterInterval("Not possible!", range0);
      boolean boolean0 = meterInterval0.equals(meterInterval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, (-1.0));
      Range range2 = Range.expandToInclude(range1, (-1.0));
      MeterInterval meterInterval0 = new MeterInterval("label", range2);
      MeterInterval meterInterval1 = new MeterInterval("label", range0);
      boolean boolean0 = meterInterval0.equals(meterInterval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      MeterInterval meterInterval0 = new MeterInterval("label", range0);
      Range range1 = meterInterval0.getRange();
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      MeterInterval meterInterval0 = new MeterInterval("label", range0);
      String string0 = meterInterval0.getLabel();
      assertEquals("label", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      MeterInterval meterInterval0 = new MeterInterval("label", range0);
      Paint paint0 = meterInterval0.getBackgroundPaint();
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Color color0 = Color.LIGHT_GRAY;
      BasicStroke basicStroke0 = new BasicStroke(2840.91F);
      MeterInterval meterInterval0 = null;
      try {
        meterInterval0 = new MeterInterval("Negative 'factor' argument.", (Range) null, color0, basicStroke0, color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
