/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:19:01 GMT 2019
 */

package org.jfree.chart.plot.dial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLabelLocation;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.DialShape;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.dial.DialPlot;
import org.jfree.chart.plot.dial.DialValueIndicator;
import org.jfree.chart.plot.dial.StandardDialScale;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.VerticalAlignment;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.RangeType;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StandardDialScale_ESTest extends StandardDialScale_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-209.816891890403), (-209.816891890403), (-209.816891890403), (-209.816891890403), 10.408783943019797, 374);
      assertNotNull(standardDialScale0);
      assertEquals(374, standardDialScale0.getMinorTickCount());
      assertEquals((-209.816891890403), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-209.816891890403), standardDialScale0.getUpperBound(), 0.01);
      assertEquals((-209.816891890403), standardDialScale0.getStartAngle(), 0.01);
      assertEquals(10.408783943019797, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals((-209.816891890403), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      
      standardDialScale0.hashCode();
      assertEquals(374, standardDialScale0.getMinorTickCount());
      assertEquals((-209.816891890403), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-209.816891890403), standardDialScale0.getUpperBound(), 0.01);
      assertEquals((-209.816891890403), standardDialScale0.getStartAngle(), 0.01);
      assertEquals(10.408783943019797, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals((-209.816891890403), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(1.0, 1.0, 1430.07071737692, 1430.07071737692, 1430.07071737692, (-1033));
      assertNotNull(standardDialScale0);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-1033), standardDialScale0.getMinorTickCount());
      assertEquals(1.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(1430.07071737692, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(1430.07071737692, standardDialScale0.getExtent(), 0.01);
      assertEquals(1430.07071737692, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(1.0, standardDialScale0.getUpperBound(), 0.01);
      
      StandardDialScale standardDialScale1 = new StandardDialScale();
      assertNotNull(standardDialScale1);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale1.getExtent(), 0.01);
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertEquals(4, standardDialScale1.getMinorTickCount());
      assertEquals(0.0, standardDialScale1.getLowerBound(), 0.01);
      assertEquals(10.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals(100.0, standardDialScale1.getUpperBound(), 0.01);
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
      
      boolean boolean0 = standardDialScale0.equals(standardDialScale1);
      assertFalse(boolean0);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-1033), standardDialScale0.getMinorTickCount());
      assertEquals(1.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(1430.07071737692, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(1430.07071737692, standardDialScale0.getExtent(), 0.01);
      assertEquals(1430.07071737692, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(1.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale1.getExtent(), 0.01);
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertEquals(4, standardDialScale1.getMinorTickCount());
      assertEquals(0.0, standardDialScale1.getLowerBound(), 0.01);
      assertEquals(10.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals(100.0, standardDialScale1.getUpperBound(), 0.01);
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertFalse(standardDialScale0.equals((Object)standardDialScale1));
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      
      standardDialScale0.setLowerBound(1392.529154);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(1392.529154, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      
      double double0 = standardDialScale0.valueToAngle((-2024.0));
      assertEquals((-274.35926929196364), double0, 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(1392.529154, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'image' argument.");
      assertNotNull(subCategoryAxis0);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("Null 'image' argument.", subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("Null 'image' argument.", subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      
      JFreeChart jFreeChart0 = new JFreeChart("Null 'image' argument.", subCategoryAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainCategoryPlot0, true);
      assertNotNull(jFreeChart0);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("Null 'image' argument.", subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 10, chartRenderingInfo0);
      assertNotNull(bufferedImage0);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("Null 'image' argument.", subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileWidth());
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertNotNull(sunGraphics2D0);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(255, sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("Null 'image' argument.", subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileWidth());
      
      DialPlot dialPlot0 = new DialPlot((ValueDataset) null);
      assertNotNull(dialPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertNull(dialPlot0.getNoDataMessage());
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertFalse(dialPlot0.isSubplot());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(dialPlot0.isNotify());
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      
      LegendTitle legendTitle0 = new LegendTitle(dialPlot0);
      assertNotNull(legendTitle0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(legendTitle0.visible);
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertNull(dialPlot0.getNoDataMessage());
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertFalse(dialPlot0.isSubplot());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(dialPlot0.isNotify());
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(RectangleEdge.TOP, legendTitle0.getPosition());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertTrue(legendTitle0.isVisible());
      assertTrue(legendTitle0.getNotify());
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertNull(legendTitle0.getID());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)legendTitle0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(legendTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertNull(dialPlot0.getNoDataMessage());
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertFalse(dialPlot0.isSubplot());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(dialPlot0.isNotify());
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(RectangleEdge.TOP, legendTitle0.getPosition());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertTrue(legendTitle0.isVisible());
      assertTrue(legendTitle0.getNotify());
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertNull(legendTitle0.getID());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0, 0, 4281.2349, 0);
      assertNotNull(rectangle2D_Double0);
      assertEquals(4281.2349, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(4281.2349, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(2140.61745, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      
      standardDialScale0.draw(sunGraphics2D0, dialPlot0, rectangle2D_Float0, rectangle2D_Double0);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(2, sunGraphics2D0.strokeState);
      assertEquals((-16776961), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(29, sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(legendTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(4281.2349, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("Null 'image' argument.", subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(CategoryAnchor.MIDDLE, combinedDomainCategoryPlot0.getDomainGridlinePosition());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainCategoryPlot0.getDatasetRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(PlotOrientation.VERTICAL, combinedDomainCategoryPlot0.getOrientation());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertNull(dialPlot0.getNoDataMessage());
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertFalse(dialPlot0.isSubplot());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(dialPlot0.isNotify());
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(RectangleEdge.TOP, legendTitle0.getPosition());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertTrue(legendTitle0.isVisible());
      assertTrue(legendTitle0.getNotify());
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertNull(legendTitle0.getID());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(4281.2349, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(2140.61745, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      
      standardDialScale0.setMinorTickLength(0.0);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.0, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.isVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      
      standardDialScale0.setMinorTickCount(0);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0, standardDialScale0.getMinorTickCount());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      
      standardDialScale0.setMajorTickLength(5.8599124);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(5.8599124, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-1042.31159804025), (-1042.31159804025), 0.65, 0.65, 0.65, 53);
      assertNotNull(standardDialScale0);
      assertEquals((-1042.31159804025), standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.65, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.65, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(53, standardDialScale0.getMinorTickCount());
      assertEquals((-1042.31159804025), standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.65, standardDialScale0.getStartAngle(), 0.01);
      
      // Undeclared exception!
      try { 
        standardDialScale0.setMajorTickIncrement(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'increment' must be positive.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      
      // Undeclared exception!
      try { 
        standardDialScale0.setTickRadius(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'radius' must be positive.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      
      DialPlot dialPlot0 = new DialPlot();
      assertNotNull(dialPlot0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertNull(dialPlot0.getNoDataMessage());
      assertFalse(dialPlot0.isSubplot());
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertTrue(dialPlot0.isNotify());
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals("DialPlot", dialPlot0.getPlotType());
      
      Font font0 = dialPlot0.getNoDataMessageFont();
      assertNotNull(font0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertNull(dialPlot0.getNoDataMessage());
      assertFalse(dialPlot0.isSubplot());
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertTrue(dialPlot0.isNotify());
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      
      standardDialScale0.setTickLabelFont(font0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertNull(dialPlot0.getNoDataMessage());
      assertFalse(dialPlot0.isSubplot());
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertTrue(dialPlot0.isNotify());
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      
      standardDialScale0.setUpperBound(0.0);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      
      double double0 = standardDialScale0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      
      double double0 = standardDialScale0.getUpperBound();
      assertEquals(100.0, double0, 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      
      standardDialScale0.setTickLabelOffset((-3928.570662873126));
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals((-3928.570662873126), standardDialScale0.getTickLabelOffset(), 0.01);
      
      double double0 = standardDialScale0.getTickLabelOffset();
      assertEquals((-3928.570662873126), double0, 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals((-3928.570662873126), standardDialScale0.getTickLabelOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(1117.3, 1117.3, 284.57569, 284.57569, 1117.3, 2076);
      assertNotNull(standardDialScale0);
      assertEquals(284.57569, standardDialScale0.getExtent(), 0.01);
      assertEquals(1117.3, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(284.57569, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(1117.3, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(1117.3, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(2076, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.isVisible());
      
      DecimalFormat decimalFormat0 = new DecimalFormat("O1D^FfeA{J7xk");
      assertNotNull(decimalFormat0);
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("O1D^FfeA{J7xk#", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("O1D^FfeA{J7xk", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-O1D^FfeA{J7xk", decimalFormat0.getNegativePrefix());
      assertEquals("O1D^FfeA{J7xk#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      
      standardDialScale0.setTickLabelFormatter(decimalFormat0);
      assertEquals(284.57569, standardDialScale0.getExtent(), 0.01);
      assertEquals(1117.3, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(284.57569, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(1117.3, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(1117.3, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(2076, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.isVisible());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("O1D^FfeA{J7xk#", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("O1D^FfeA{J7xk", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-O1D^FfeA{J7xk", decimalFormat0.getNegativePrefix());
      assertEquals("O1D^FfeA{J7xk#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      
      DecimalFormat decimalFormat1 = (DecimalFormat)standardDialScale0.getTickLabelFormatter();
      assertNotNull(decimalFormat1);
      assertEquals(284.57569, standardDialScale0.getExtent(), 0.01);
      assertEquals(1117.3, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(284.57569, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(1117.3, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(1117.3, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(2076, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.isVisible());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(0, decimalFormat1.getMaximumFractionDigits());
      assertEquals(0, decimalFormat1.getGroupingSize());
      assertEquals("O1D^FfeA{J7xk#", decimalFormat1.toPattern());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat1.getMinimumIntegerDigits());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertFalse(decimalFormat1.isGroupingUsed());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals("-O1D^FfeA{J7xk", decimalFormat1.getNegativePrefix());
      assertEquals("O1D^FfeA{J7xk#", decimalFormat1.toLocalizedPattern());
      assertEquals("O1D^FfeA{J7xk", decimalFormat1.getPositivePrefix());
      assertSame(decimalFormat1, decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(0.0, 778.3856217003, 0.0, 0.4, 778.3856217003, 2144709121);
      assertNotNull(standardDialScale0);
      assertEquals(0.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(2144709121, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(778.3856217003, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.4, standardDialScale0.getExtent(), 0.01);
      assertEquals(778.3856217003, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      
      double double0 = standardDialScale0.getStartAngle();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(2144709121, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(778.3856217003, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.4, standardDialScale0.getExtent(), 0.01);
      assertEquals(778.3856217003, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      
      standardDialScale0.setStartAngle((-2024.0));
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-2024.0), standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      
      double double0 = standardDialScale0.getStartAngle();
      assertEquals((-2024.0), double0, 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-2024.0), standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(10.0, 135.0, 135.0, 1234.64169135605, 1234.64169135605, 0);
      assertNotNull(standardDialScale0);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(10.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(135.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0, standardDialScale0.getMinorTickCount());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(1234.64169135605, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(135.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(1234.64169135605, standardDialScale0.getExtent(), 0.01);
      
      int int0 = standardDialScale0.getMinorTickCount();
      assertEquals(0, int0);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(10.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(135.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0, standardDialScale0.getMinorTickCount());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(1234.64169135605, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(135.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(1234.64169135605, standardDialScale0.getExtent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      
      int int0 = standardDialScale0.getMinorTickCount();
      assertEquals(4, int0);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      
      double double0 = standardDialScale0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-2.476479237500518), (-1847.3), 32, (-1847.3), 32, 32);
      assertNotNull(standardDialScale0);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      
      double double0 = standardDialScale0.getLowerBound();
      assertEquals((-2.476479237500518), double0, 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(773.0, (-1034.623035283302), 773.0, (-1034.623035283302), 10.0, 1064);
      assertNotNull(standardDialScale0);
      assertEquals(1064, standardDialScale0.getMinorTickCount());
      assertEquals((-1034.623035283302), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(773.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(773.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals((-1034.623035283302), standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      
      standardDialScale0.setFirstTickLabelVisible(false);
      assertEquals(1064, standardDialScale0.getMinorTickCount());
      assertEquals((-1034.623035283302), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(773.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(773.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertFalse(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-1034.623035283302), standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      
      boolean boolean0 = standardDialScale0.getFirstTickLabelVisible();
      assertFalse(boolean0);
      assertEquals(1064, standardDialScale0.getMinorTickCount());
      assertEquals((-1034.623035283302), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(773.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(773.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertFalse(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-1034.623035283302), standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-2.476479237500518), 0.0, 32, 0.0, 32, 32);
      assertNotNull(standardDialScale0);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.0, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      
      double double0 = standardDialScale0.getExtent();
      assertEquals(0.0, double0, 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.0, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      
      standardDialScale0.setExtent(0.1);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.1, standardDialScale0.getExtent(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      
      double double0 = standardDialScale0.getExtent();
      assertEquals(0.1, double0, 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.1, standardDialScale0.getExtent(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      
      double double0 = standardDialScale0.angleToValue(1.0F);
      assertEquals(102.3529411764706, double0, 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      
      standardDialScale0.setUpperBound((-2061.775860326));
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals((-2061.775860326), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      
      double double0 = standardDialScale0.angleToValue(10);
      assertEquals((-2001.1353938458235), double0, 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals((-2061.775860326), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(773.0, (-1034.623035283302), 773.0, (-1034.623035283302), 10.0, 1064);
      assertNotNull(standardDialScale0);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.isVisible());
      assertEquals((-1034.623035283302), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(1064, standardDialScale0.getMinorTickCount());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-1034.623035283302), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(773.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(773.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      
      // Undeclared exception!
      try { 
        standardDialScale0.setTickLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      
      // Undeclared exception!
      try { 
        standardDialScale0.setTickLabelFormatter((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(20.0, 20.0, 10.0, (-1.0), 20.0, 16);
      assertNotNull(standardDialScale0);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(16, standardDialScale0.getMinorTickCount());
      assertEquals(20.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(20.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(10.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-1.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(20.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      
      // Undeclared exception!
      try { 
        standardDialScale0.setMinorTickStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      
      // Undeclared exception!
      try { 
        standardDialScale0.setMinorTickPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-5.0), (-5.0), (-5.0), 782.0, 1.0, (-1526));
      assertNotNull(standardDialScale0);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(1.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals((-5.0), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-5.0), standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-5.0), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1526), standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(782.0, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      
      // Undeclared exception!
      try { 
        standardDialScale0.setMajorTickStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      
      // Undeclared exception!
      try { 
        standardDialScale0.setMajorTickPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      
      Long long0 = new Long(274);
      assertNotNull(long0);
      assertEquals(274L, (long)long0);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) long0);
      assertNotNull(defaultValueDataset0);
      assertTrue(defaultValueDataset0.getNotify());
      
      DialPlot dialPlot0 = new DialPlot(defaultValueDataset0);
      assertNotNull(dialPlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertNull(dialPlot0.getNoDataMessage());
      assertFalse(dialPlot0.isSubplot());
      assertTrue(dialPlot0.isOutlineVisible());
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(dialPlot0.isNotify());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      
      Rectangle rectangle0 = new Rectangle(22, 896, 22, 0);
      assertNotNull(rectangle0);
      assertEquals(22, rectangle0.width);
      assertEquals(896, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(22, rectangle0.x);
      assertEquals(22.0, rectangle0.getX(), 0.01);
      assertEquals(896.0, rectangle0.getCenterY(), 0.01);
      assertEquals(33.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(896.0, rectangle0.getMinY(), 0.01);
      assertEquals(896.0, rectangle0.getY(), 0.01);
      assertEquals(22.0, rectangle0.getWidth(), 0.01);
      assertEquals(896.0, rectangle0.getMaxY(), 0.01);
      assertEquals(22.0, rectangle0.getMinX(), 0.01);
      assertEquals(44.0, rectangle0.getMaxX(), 0.01);
      
      // Undeclared exception!
      try { 
        standardDialScale0.draw((Graphics2D) null, dialPlot0, rectangle0, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-1042.31159804025), (-1042.31159804025), 0.65, 0.65, 0.65, 53);
      assertNotNull(standardDialScale0);
      assertEquals((-1042.31159804025), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.65, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.65, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-1042.31159804025), standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.65, standardDialScale0.getExtent(), 0.01);
      assertEquals(53, standardDialScale0.getMinorTickCount());
      
      DialPlot dialPlot0 = new DialPlot();
      assertNotNull(dialPlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertNull(dialPlot0.getNoDataMessage());
      assertFalse(dialPlot0.isSubplot());
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(dialPlot0.isOutlineVisible());
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(dialPlot0.isNotify());
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertEquals("DialPlot", dialPlot0.getPlotType());
      
      // Undeclared exception!
      try { 
        standardDialScale0.draw((Graphics2D) null, dialPlot0, (Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rect' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(0.0, (-1847.3), 32, (-1847.3), 32, 32);
      assertNotNull(standardDialScale0);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      
      StandardDialScale standardDialScale1 = (StandardDialScale)standardDialScale0.clone();
      assertNotNull(standardDialScale1);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals((-1847.3), standardDialScale1.getExtent(), 0.01);
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale1.getLowerBound(), 0.01);
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale1.isClippedToWindow());
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertTrue(standardDialScale1.equals((Object)standardDialScale0));
      
      standardDialScale1.setTickLabelOffset(0.0);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals((-1847.3), standardDialScale1.getExtent(), 0.01);
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale1.getLowerBound(), 0.01);
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertEquals(0.0, standardDialScale1.getTickLabelOffset(), 0.01);
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertTrue(standardDialScale1.isClippedToWindow());
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertFalse(standardDialScale0.equals((Object)standardDialScale1));
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
      
      boolean boolean0 = standardDialScale0.equals(standardDialScale1);
      assertFalse(boolean0);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals((-1847.3), standardDialScale1.getExtent(), 0.01);
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale1.getLowerBound(), 0.01);
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertEquals(0.0, standardDialScale1.getTickLabelOffset(), 0.01);
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertTrue(standardDialScale1.isClippedToWindow());
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertFalse(standardDialScale0.equals((Object)standardDialScale1));
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-2.476479237500518), (-1847.3), 32, (-1847.3), 32, 32);
      assertNotNull(standardDialScale0);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      
      StandardDialScale standardDialScale1 = (StandardDialScale)standardDialScale0.clone();
      assertNotNull(standardDialScale1);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals((-1847.3), standardDialScale1.getExtent(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale1.getLowerBound(), 0.01);
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertTrue(standardDialScale1.equals((Object)standardDialScale0));
      
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertNotNull(fastScatterPlot0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(fastScatterPlot0.isRangePannable());
      assertTrue(fastScatterPlot0.isNotify());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, fastScatterPlot0.getOrientation());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertFalse(fastScatterPlot0.isSubplot());
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertFalse(fastScatterPlot0.isDomainPannable());
      
      BasicStroke basicStroke0 = (BasicStroke)fastScatterPlot0.getDomainGridlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(fastScatterPlot0.isRangePannable());
      assertTrue(fastScatterPlot0.isNotify());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, fastScatterPlot0.getOrientation());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertFalse(fastScatterPlot0.isSubplot());
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      
      standardDialScale1.setMinorTickStroke(basicStroke0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals((-1847.3), standardDialScale1.getExtent(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale1.getLowerBound(), 0.01);
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertFalse(fastScatterPlot0.isRangePannable());
      assertTrue(fastScatterPlot0.isNotify());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(PlotOrientation.VERTICAL, fastScatterPlot0.getOrientation());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertFalse(fastScatterPlot0.isSubplot());
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertFalse(standardDialScale0.equals((Object)standardDialScale1));
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
      
      boolean boolean0 = standardDialScale0.equals(standardDialScale1);
      assertFalse(boolean0);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals((-1847.3), standardDialScale1.getExtent(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale1.getLowerBound(), 0.01);
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertFalse(standardDialScale0.equals((Object)standardDialScale1));
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-2.476479237500518), (-1847.3), 32, (-1847.3), 32, 32);
      assertNotNull(standardDialScale0);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      
      StandardDialScale standardDialScale1 = (StandardDialScale)standardDialScale0.clone();
      assertNotNull(standardDialScale1);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getExtent(), 0.01);
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals((-2.476479237500518), standardDialScale1.getLowerBound(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertTrue(standardDialScale1.equals((Object)standardDialScale0));
      
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      assertNotNull(dialValueIndicator0);
      assertTrue(dialValueIndicator0.isVisible());
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals(RectangleAnchor.CENTER, dialValueIndicator0.getFrameAnchor());
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      assertTrue(dialValueIndicator0.isClippedToWindow());
      assertEquals(RectangleAnchor.RIGHT, dialValueIndicator0.getValueAnchor());
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
      
      Color color0 = (Color)dialValueIndicator0.getOutlinePaint();
      assertNotNull(color0);
      assertTrue(dialValueIndicator0.isVisible());
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals(RectangleAnchor.CENTER, dialValueIndicator0.getFrameAnchor());
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      assertTrue(dialValueIndicator0.isClippedToWindow());
      assertEquals(RectangleAnchor.RIGHT, dialValueIndicator0.getValueAnchor());
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getGreen());
      
      standardDialScale1.setMinorTickPaint(color0);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getExtent(), 0.01);
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals((-2.476479237500518), standardDialScale1.getLowerBound(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertTrue(dialValueIndicator0.isVisible());
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals(RectangleAnchor.CENTER, dialValueIndicator0.getFrameAnchor());
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      assertTrue(dialValueIndicator0.isClippedToWindow());
      assertEquals(RectangleAnchor.RIGHT, dialValueIndicator0.getValueAnchor());
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertFalse(standardDialScale0.equals((Object)standardDialScale1));
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
      
      boolean boolean0 = standardDialScale0.equals(standardDialScale1);
      assertFalse(boolean0);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getExtent(), 0.01);
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals((-2.476479237500518), standardDialScale1.getLowerBound(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertFalse(standardDialScale0.equals((Object)standardDialScale1));
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-2.476479237500518), (-1847.3), 32, (-1847.3), 32, 32);
      assertNotNull(standardDialScale0);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      
      StandardDialScale standardDialScale1 = (StandardDialScale)standardDialScale0.clone();
      assertNotNull(standardDialScale1);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale1.getLowerBound(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getExtent(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertTrue(standardDialScale1.isClippedToWindow());
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertTrue(standardDialScale1.equals((Object)standardDialScale0));
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(255.0, "G9l@_ri#a&4ovgs+A");
      assertNotNull(cyclicNumberAxis0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals("G9l@_ri#a&4ovgs+A", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(255.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(Double.NaN, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals("G9l@_ri#a&4ovgs+A", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.8999999999999773, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(255.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeCategoryPlot0.getRangeMinorGridlineStroke();
      assertNotNull(basicStroke0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals("G9l@_ri#a&4ovgs+A", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.8999999999999773, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(255.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      
      standardDialScale1.setMajorTickStroke(basicStroke0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale1.getLowerBound(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getExtent(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals("G9l@_ri#a&4ovgs+A", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.8999999999999773, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(255.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(PlotOrientation.VERTICAL, combinedRangeCategoryPlot0.getOrientation());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedRangeCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(CategoryAnchor.MIDDLE, combinedRangeCategoryPlot0.getDomainGridlinePosition());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(DatasetRenderingOrder.REVERSE, combinedRangeCategoryPlot0.getDatasetRenderingOrder());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(SortOrder.ASCENDING, combinedRangeCategoryPlot0.getRowRenderingOrder());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertFalse(standardDialScale0.equals((Object)standardDialScale1));
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
      
      boolean boolean0 = standardDialScale0.equals(standardDialScale1);
      assertFalse(boolean0);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale1.getLowerBound(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getExtent(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertTrue(standardDialScale1.isClippedToWindow());
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertFalse(standardDialScale0.equals((Object)standardDialScale1));
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-2.476479237500518), (-1847.3), 32, (-1847.3), 32, 32);
      assertNotNull(standardDialScale0);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      
      StandardDialScale standardDialScale1 = (StandardDialScale)standardDialScale0.clone();
      assertNotNull(standardDialScale1);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals((-2.476479237500518), standardDialScale1.getLowerBound(), 0.01);
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals((-1847.3), standardDialScale1.getExtent(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertTrue(standardDialScale1.equals((Object)standardDialScale0));
      
      MeterPlot meterPlot0 = new MeterPlot();
      assertNotNull(meterPlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.isSubplot());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      
      Color color0 = (Color)meterPlot0.getValuePaint();
      assertNotNull(color0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.isSubplot());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      
      standardDialScale1.setMajorTickPaint(color0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals((-2.476479237500518), standardDialScale1.getLowerBound(), 0.01);
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals((-1847.3), standardDialScale1.getExtent(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.isSubplot());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertFalse(standardDialScale0.equals((Object)standardDialScale1));
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
      
      boolean boolean0 = standardDialScale0.equals(standardDialScale1);
      assertFalse(boolean0);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals((-2.476479237500518), standardDialScale1.getLowerBound(), 0.01);
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals((-1847.3), standardDialScale1.getExtent(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertFalse(standardDialScale0.equals((Object)standardDialScale1));
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-2.476479237500518), (-1847.3), 32, (-1847.3), 32, 32);
      assertNotNull(standardDialScale0);
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      
      StandardDialScale standardDialScale1 = (StandardDialScale)standardDialScale0.clone();
      assertNotNull(standardDialScale1);
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals((-2.476479237500518), standardDialScale1.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertEquals((-1847.3), standardDialScale1.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertTrue(standardDialScale1.equals((Object)standardDialScale0));
      
      standardDialScale1.setTickRadius(32);
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals((-2.476479237500518), standardDialScale1.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertEquals((-1847.3), standardDialScale1.getExtent(), 0.01);
      assertEquals(32.0, standardDialScale1.getTickRadius(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertFalse(standardDialScale0.equals((Object)standardDialScale1));
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
      
      boolean boolean0 = standardDialScale0.equals(standardDialScale1);
      assertFalse(boolean0);
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals((-2.476479237500518), standardDialScale1.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertEquals((-1847.3), standardDialScale1.getExtent(), 0.01);
      assertEquals(32.0, standardDialScale1.getTickRadius(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertFalse(standardDialScale0.equals((Object)standardDialScale1));
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-2.476479237500518), (-1847.3), 32, (-1847.3), 32, 32);
      assertNotNull(standardDialScale0);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      
      StandardDialScale standardDialScale1 = (StandardDialScale)standardDialScale0.clone();
      assertNotNull(standardDialScale1);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getExtent(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertEquals((-2.476479237500518), standardDialScale1.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertTrue(standardDialScale1.isVisible());
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertTrue(standardDialScale1.equals((Object)standardDialScale0));
      
      standardDialScale1.setExtent(65.36);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(65.36, standardDialScale1.getExtent(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertEquals((-2.476479237500518), standardDialScale1.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertTrue(standardDialScale1.isVisible());
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertFalse(standardDialScale0.equals((Object)standardDialScale1));
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
      
      boolean boolean0 = standardDialScale0.equals(standardDialScale1);
      assertFalse(boolean0);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(65.36, standardDialScale1.getExtent(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertEquals((-2.476479237500518), standardDialScale1.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertTrue(standardDialScale1.isVisible());
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertFalse(standardDialScale0.equals((Object)standardDialScale1));
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      
      standardDialScale0.setStartAngle(1491.834);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(1491.834, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      
      StandardDialScale standardDialScale1 = new StandardDialScale();
      assertNotNull(standardDialScale1);
      assertEquals((-170.0), standardDialScale1.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals(100.0, standardDialScale1.getUpperBound(), 0.01);
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale1.isClippedToWindow());
      assertTrue(standardDialScale1.isVisible());
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals(10.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertEquals(4, standardDialScale1.getMinorTickCount());
      assertEquals(0.0, standardDialScale1.getLowerBound(), 0.01);
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
      
      boolean boolean0 = standardDialScale0.equals(standardDialScale1);
      assertFalse(boolean0);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(1491.834, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-170.0), standardDialScale1.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals(100.0, standardDialScale1.getUpperBound(), 0.01);
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale1.isClippedToWindow());
      assertTrue(standardDialScale1.isVisible());
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals(10.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertEquals(4, standardDialScale1.getMinorTickCount());
      assertEquals(0.0, standardDialScale1.getLowerBound(), 0.01);
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertFalse(standardDialScale0.equals((Object)standardDialScale1));
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(0.1, 0.1, 0.1, 0.3, 10.580210376391369, 32);
      assertNotNull(standardDialScale0);
      assertEquals(0.1, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals(0.1, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(10.580210376391369, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.3, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.1, standardDialScale0.getUpperBound(), 0.01);
      
      StandardDialScale standardDialScale1 = new StandardDialScale(0.1, 10.580210376391369, 3226.698464750183, 2396.15802807, 32, 32);
      assertNotNull(standardDialScale1);
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals(10.580210376391369, standardDialScale1.getUpperBound(), 0.01);
      assertEquals(2396.15802807, standardDialScale1.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertTrue(standardDialScale1.isClippedToWindow());
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(3226.698464750183, standardDialScale1.getStartAngle(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertEquals(0.1, standardDialScale1.getLowerBound(), 0.01);
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
      
      boolean boolean0 = standardDialScale0.equals(standardDialScale1);
      assertFalse(boolean0);
      assertEquals(0.1, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals(0.1, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(10.580210376391369, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.3, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.1, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals(10.580210376391369, standardDialScale1.getUpperBound(), 0.01);
      assertEquals(2396.15802807, standardDialScale1.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertTrue(standardDialScale1.isClippedToWindow());
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(3226.698464750183, standardDialScale1.getStartAngle(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertEquals(0.1, standardDialScale1.getLowerBound(), 0.01);
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertFalse(standardDialScale0.equals((Object)standardDialScale1));
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-2.476479237500518), (-1847.3), 32, (-1847.3), 32, 32);
      assertNotNull(standardDialScale0);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      
      StandardDialScale standardDialScale1 = (StandardDialScale)standardDialScale0.clone();
      assertNotNull(standardDialScale1);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getExtent(), 0.01);
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals((-2.476479237500518), standardDialScale1.getLowerBound(), 0.01);
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertTrue(standardDialScale1.equals((Object)standardDialScale0));
      
      boolean boolean0 = standardDialScale0.equals(standardDialScale1);
      assertTrue(boolean0);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(32.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals((-1847.3), standardDialScale1.getExtent(), 0.01);
      assertEquals(32, standardDialScale1.getMinorTickCount());
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals((-2.476479237500518), standardDialScale1.getLowerBound(), 0.01);
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals((-1847.3), standardDialScale1.getUpperBound(), 0.01);
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale1.isVisible());
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertTrue(standardDialScale0.equals((Object)standardDialScale1));
      assertTrue(standardDialScale1.equals((Object)standardDialScale0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      
      boolean boolean0 = standardDialScale0.equals(week0.FIRST_WEEK_IN_YEAR);
      assertFalse(boolean0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-2.476479237500518), (-1847.3), 32, (-1847.3), 32, 32);
      assertNotNull(standardDialScale0);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      
      boolean boolean0 = standardDialScale0.equals(standardDialScale0);
      assertTrue(boolean0);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-1042.31159804025), (-1042.31159804025), 0.65, 0.65, 0.65, 53);
      assertNotNull(standardDialScale0);
      assertEquals(53, standardDialScale0.getMinorTickCount());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-1042.31159804025), standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.65, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-1042.31159804025), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.65, standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.65, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      
      StandardDialScale standardDialScale1 = new StandardDialScale();
      assertNotNull(standardDialScale1);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertTrue(standardDialScale1.isVisible());
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertEquals(100.0, standardDialScale1.getUpperBound(), 0.01);
      assertEquals((-170.0), standardDialScale1.getExtent(), 0.01);
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertEquals(0.0, standardDialScale1.getLowerBound(), 0.01);
      assertEquals(10.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(4, standardDialScale1.getMinorTickCount());
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale1.getStartAngle(), 0.01);
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
      
      boolean boolean0 = standardDialScale0.equals(standardDialScale1);
      assertFalse(boolean0);
      assertEquals(53, standardDialScale0.getMinorTickCount());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-1042.31159804025), standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.65, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-1042.31159804025), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.65, standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.65, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertTrue(standardDialScale1.isVisible());
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertEquals(100.0, standardDialScale1.getUpperBound(), 0.01);
      assertEquals((-170.0), standardDialScale1.getExtent(), 0.01);
      assertTrue(standardDialScale1.isClippedToWindow());
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertEquals(0.0, standardDialScale1.getLowerBound(), 0.01);
      assertEquals(10.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(4, standardDialScale1.getMinorTickCount());
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale1.getStartAngle(), 0.01);
      assertNotSame(standardDialScale0, standardDialScale1);
      assertNotSame(standardDialScale1, standardDialScale0);
      assertFalse(standardDialScale0.equals((Object)standardDialScale1));
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-2209.6157), (-2209.6157), 0.18, 0.02, 0.02, (-2145520847));
      assertNotNull(standardDialScale0);
      assertEquals(0.02, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-2209.6157), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.02, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-2145520847), standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.isVisible());
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.18, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-2209.6157), standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      
      // Undeclared exception!
      try { 
        standardDialScale0.setMinorTickLength((-2209.6157));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'length' argument.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      
      standardDialScale0.setMinorTickLength(3924.7);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(3924.7, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(0.0, 0.5, 0.0, 0.5, 6.0, 0);
      assertNotNull(standardDialScale0);
      assertEquals(6.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.5, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0, standardDialScale0.getMinorTickCount());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.5, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      
      // Undeclared exception!
      try { 
        standardDialScale0.setMinorTickCount((-4322));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'count' cannot be negative.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      
      standardDialScale0.setMinorTickCount(1);
      assertEquals(1, standardDialScale0.getMinorTickCount());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      
      // Undeclared exception!
      try { 
        standardDialScale0.setMajorTickLength((-1.5707963267948966));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'length' argument.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(0.5235987755982988, 0.02, 901.65633, 901.65633, 255.0, 32);
      assertNotNull(standardDialScale0);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(901.65633, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals(255.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.02, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.5235987755982988, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(901.65633, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      
      standardDialScale0.setMajorTickLength((byte)0);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(901.65633, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals(255.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.02, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.5235987755982988, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.0, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(901.65633, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.isVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      
      // Undeclared exception!
      try { 
        standardDialScale0.setMajorTickIncrement((-2024.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'increment' must be positive.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      
      standardDialScale0.setMajorTickIncrement(2642.917);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(2642.917, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      
      // Undeclared exception!
      try { 
        standardDialScale0.setTickRadius((-493.17923630355915));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'radius' must be positive.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StandardDialScale standardDialScale0 = null;
      try {
        standardDialScale0 = new StandardDialScale((-3327.702867789495), 32, (-3414.1363410975746), 32, (-3327.702867789495), 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'majorTickIncrement' > 0.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      
      boolean boolean0 = standardDialScale0.isClippedToWindow();
      assertTrue(boolean0);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(4.5, 4.5, 4.5, 1566.137, 1566.137, 3355);
      assertNotNull(standardDialScale0);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(4.5, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(4.5, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(3355, standardDialScale0.getMinorTickCount());
      assertEquals(1566.137, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(4.5, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(1566.137, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      
      Font font0 = standardDialScale0.getTickLabelFont();
      assertNotNull(font0);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(4.5, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(4.5, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(3355, standardDialScale0.getMinorTickCount());
      assertEquals(1566.137, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(4.5, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(1566.137, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(1, font0.getStyle());
      assertTrue(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("Dialog", font0.getName());
      assertEquals(16, font0.getSize());
      assertFalse(font0.isItalic());
      assertEquals(16.0F, font0.getSize2D(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      
      double double0 = standardDialScale0.getStartAngle();
      assertEquals(175.0, double0, 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(0.02, (-165.255491174), 0.02, 4.5, 3484.8744590151696, 647);
      assertNotNull(standardDialScale0);
      assertEquals(647, standardDialScale0.getMinorTickCount());
      assertEquals(0.02, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(3484.8744590151696, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(4.5, standardDialScale0.getExtent(), 0.01);
      assertEquals((-165.255491174), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      
      Color color0 = (Color)standardDialScale0.getTickLabelPaint();
      assertNotNull(color0);
      assertEquals(647, standardDialScale0.getMinorTickCount());
      assertEquals(0.02, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(3484.8744590151696, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(4.5, standardDialScale0.getExtent(), 0.01);
      assertEquals((-165.255491174), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(255, color0.getBlue());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(0.5235987755982988, 0.02, 901.65633, 901.65633, 255.0, 32);
      assertNotNull(standardDialScale0);
      assertEquals(901.65633, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(255.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.02, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals(901.65633, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.5235987755982988, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      
      BasicStroke basicStroke0 = (BasicStroke)standardDialScale0.getMajorTickStroke();
      assertNotNull(basicStroke0);
      assertEquals(901.65633, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(255.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.02, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals(901.65633, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.5235987755982988, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(3.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      
      standardDialScale0.setMajorTickStroke(basicStroke0);
      assertEquals(901.65633, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(255.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.02, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals(901.65633, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.5235987755982988, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(3.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(1107.4603066, 1107.4603066, 1107.4603066, (-850.819927046), 1107.4603066, 16);
      assertNotNull(standardDialScale0);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(16, standardDialScale0.getMinorTickCount());
      assertEquals(1107.4603066, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(1107.4603066, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(1107.4603066, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-850.819927046), standardDialScale0.getExtent(), 0.01);
      assertEquals(1107.4603066, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      
      // Undeclared exception!
      try { 
        standardDialScale0.setTickLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(773.0, (-1034.623035283302), 773.0, (-1034.623035283302), 10.0, 1064);
      assertNotNull(standardDialScale0);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(773.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(773.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1034.623035283302), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals((-1034.623035283302), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(1064, standardDialScale0.getMinorTickCount());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      
      boolean boolean0 = standardDialScale0.getTickLabelsVisible();
      assertTrue(boolean0);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(773.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(773.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1034.623035283302), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals((-1034.623035283302), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(1064, standardDialScale0.getMinorTickCount());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(0.02, (-165.255491174), 0.02, 4.5, 3484.8744590151696, 647);
      assertNotNull(standardDialScale0);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(4.5, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.02, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-165.255491174), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(3484.8744590151696, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.02, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(647, standardDialScale0.getMinorTickCount());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      
      Color color0 = (Color)standardDialScale0.getMinorTickPaint();
      assertNotNull(color0);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(4.5, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.02, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-165.255491174), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(3484.8744590151696, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.02, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(647, standardDialScale0.getMinorTickCount());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(773.0, (-1034.623035283302), 773.0, (-1034.623035283302), 10.0, 1064);
      assertNotNull(standardDialScale0);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(773.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-1034.623035283302), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(773.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(1064, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-1034.623035283302), standardDialScale0.getExtent(), 0.01);
      
      double double0 = standardDialScale0.getMajorTickIncrement();
      assertEquals(10.0, double0, 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(773.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-1034.623035283302), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(773.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(1064, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-1034.623035283302), standardDialScale0.getExtent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(4.5, 4.5, 4.5, 1566.137, 1566.137, 3355);
      assertNotNull(standardDialScale0);
      assertEquals(1566.137, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(4.5, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(4.5, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(1566.137, standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(3355, standardDialScale0.getMinorTickCount());
      assertEquals(4.5, standardDialScale0.getLowerBound(), 0.01);
      
      double double0 = standardDialScale0.getLowerBound();
      assertEquals(4.5, double0, 0.01);
      assertEquals(1566.137, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(4.5, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(4.5, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(1566.137, standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(3355, standardDialScale0.getMinorTickCount());
      assertEquals(4.5, standardDialScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      
      double double0 = standardDialScale0.getMajorTickLength();
      assertEquals(0.04, double0, 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-2.476479237500518), (-1847.3), 32, (-1847.3), 32, 32);
      assertNotNull(standardDialScale0);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      
      double double0 = standardDialScale0.getExtent();
      assertEquals((-1847.3), double0, 0.01);
      assertEquals((-1847.3), standardDialScale0.getExtent(), 0.01);
      assertEquals(32.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(32.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(32, standardDialScale0.getMinorTickCount());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals((-2.476479237500518), standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-1847.3), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(4.5, 4.5, 4.5, 1566.137, 1566.137, 3355);
      assertNotNull(standardDialScale0);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(4.5, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(1566.137, standardDialScale0.getExtent(), 0.01);
      assertEquals(1566.137, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(3355, standardDialScale0.getMinorTickCount());
      assertEquals(4.5, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(4.5, standardDialScale0.getLowerBound(), 0.01);
      
      boolean boolean0 = standardDialScale0.getFirstTickLabelVisible();
      assertTrue(boolean0);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(4.5, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(1566.137, standardDialScale0.getExtent(), 0.01);
      assertEquals(1566.137, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(3355, standardDialScale0.getMinorTickCount());
      assertEquals(4.5, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(4.5, standardDialScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertNotNull(standardDialScale0);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      
      double double0 = standardDialScale0.valueToAngle(10);
      assertEquals(158.0, double0, 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.isVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.isClippedToWindow());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      NumberFormat numberFormat0 = standardDialScale0.getTickLabelFormatter();
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertFalse(numberFormat0.isGroupingUsed());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(0.02, (-165.255491174), 0.02, 4.5, 3484.8744590151696, 647);
      standardDialScale0.getMajorTickPaint();
      assertEquals(0.02, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(3484.8744590151696, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(4.5, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(647, standardDialScale0.getMinorTickCount());
      assertEquals((-165.255491174), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.02, standardDialScale0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      double double0 = standardDialScale0.getTickRadius();
      assertEquals(0.7, double0, 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(773.0, (-1034.623035283302), 773.0, (-1034.623035283302), 10.0, 1064);
      standardDialScale0.getMinorTickStroke();
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-1034.623035283302), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(773.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(773.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(1064, standardDialScale0.getMinorTickCount());
      assertEquals((-1034.623035283302), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      double double0 = standardDialScale0.getTickLabelOffset();
      assertEquals(0.1, double0, 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      double double0 = standardDialScale0.getMinorTickLength();
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, double0, 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-1042.31159804025), (-1042.31159804025), 0.65, 0.65, 0.65, 53);
      double double0 = standardDialScale0.getUpperBound();
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.65, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.65, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.65, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals((-1042.31159804025), double0, 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-1042.31159804025), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(53, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertTrue(standardDialScale0.getTickLabelsVisible());
      
      standardDialScale0.setTickLabelsVisible(false);
      boolean boolean0 = standardDialScale0.getTickLabelsVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Paint paint0 = combinedDomainXYPlot0.getDomainGridlinePaint();
      standardDialScale0.setTickLabelPaint(paint0);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-1042.31159804025), (-1042.31159804025), 0.65, 0.65, 0.65, 53);
      double double0 = standardDialScale0.angleToValue(9.0);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.65, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.65, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(53, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(0.7, 0.7, 0.04, 0.7, 0.7, (-734));
      int int0 = standardDialScale0.getMinorTickCount();
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-734), int0);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.04, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.7, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getMajorTickIncrement(), 0.01);
  }
}
