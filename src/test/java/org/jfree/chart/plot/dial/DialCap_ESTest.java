/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:14:01 GMT 2019
 */

package org.jfree.chart.plot.dial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.plot.dial.DialCap;
import org.jfree.chart.plot.dial.DialPlot;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DialCap_ESTest extends DialCap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      dialCap0.setRadius(2656.68072);
      Object object0 = dialCap0.clone();
      dialCap0.setRadius(344.8537508691772);
      boolean boolean0 = dialCap0.equals(object0);
      assertEquals(344.8537508691772, dialCap0.getRadius(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      DialPlot dialPlot0 = mock(DialPlot.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getCenterX();
      doReturn(0.0).when(rectangle2D0).getCenterY();
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      dialCap0.draw(graphics2D0, dialPlot0, rectangle2D0, rectangle2D1);
      assertEquals(0.05, dialCap0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      // Undeclared exception!
      try { 
        dialCap0.setRadius((-2533.5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires radius > 0.0.
         //
         verifyException("org.jfree.chart.plot.dial.DialCap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      // Undeclared exception!
      try { 
        dialCap0.setOutlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      // Undeclared exception!
      try { 
        dialCap0.setOutlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      // Undeclared exception!
      try { 
        dialCap0.setFillPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      DialPlot dialPlot0 = mock(DialPlot.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dialCap0.draw((Graphics2D) null, dialPlot0, rectangle2D0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.dial.DialCap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      DialPlot dialPlot0 = mock(DialPlot.class, new ViolatedAssumptionAnswer());
      DialCap dialCap1 = new DialCap();
      assertTrue(dialCap1.equals((Object)dialCap0));
      
      dialCap0.setOutlineStroke(dialPlot0.DEFAULT_OUTLINE_STROKE);
      boolean boolean0 = dialCap1.equals(dialCap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      DialCap dialCap1 = (DialCap)dialCap0.clone();
      boolean boolean0 = dialCap0.equals(dialCap1);
      assertTrue(boolean0);
      assertEquals(0.05, dialCap1.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      Object object0 = dialCap0.clone();
      dialCap0.setRadius(1286.6990318001465);
      boolean boolean0 = dialCap0.equals(object0);
      assertEquals(1286.6990318001465, dialCap0.getRadius(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      boolean boolean0 = dialCap0.equals("Ii.$|ot;>");
      assertEquals(0.05, dialCap0.getRadius(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      boolean boolean0 = dialCap0.equals(dialCap0);
      assertEquals(0.05, dialCap0.getRadius(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      // Undeclared exception!
      try { 
        dialCap0.setRadius(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires radius > 0.0.
         //
         verifyException("org.jfree.chart.plot.dial.DialCap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      double double0 = dialCap0.getRadius();
      assertEquals(0.05, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      boolean boolean0 = dialCap0.isClippedToWindow();
      assertEquals(0.05, dialCap0.getRadius(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      Paint paint0 = dialCap0.getFillPaint();
      dialCap0.setOutlinePaint(paint0);
      assertEquals(0.05, dialCap0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      DialPlot dialPlot0 = mock(DialPlot.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dialCap0.draw(graphics2D0, dialPlot0, (Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rect' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      BasicStroke basicStroke0 = (BasicStroke)dialCap0.getOutlineStroke();
      dialCap0.setOutlineStroke(basicStroke0);
      assertEquals(2.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.05, dialCap0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      DialCap dialCap1 = (DialCap)dialCap0.clone();
      Color color0 = (Color)dialCap0.getFillPaint();
      assertTrue(dialCap0.equals((Object)dialCap1));
      
      dialCap1.setOutlinePaint(color0);
      boolean boolean0 = dialCap1.equals(dialCap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      Paint paint0 = dialCap0.getFillPaint();
      dialCap0.setFillPaint(paint0);
      assertEquals(0.05, dialCap0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      dialCap0.hashCode();
      assertEquals(0.05, dialCap0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      Paint paint0 = dialCap0.getOutlinePaint();
      Object object0 = dialCap0.clone();
      assertTrue(object0.equals((Object)dialCap0));
      
      dialCap0.setFillPaint(paint0);
      boolean boolean0 = dialCap0.equals(object0);
      assertFalse(boolean0);
  }
}
