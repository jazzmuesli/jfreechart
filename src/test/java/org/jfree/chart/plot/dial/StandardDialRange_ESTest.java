/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:55:40 GMT 2019
 */

package org.jfree.chart.plot.dial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.plot.dial.DialPlot;
import org.jfree.chart.plot.dial.DialScale;
import org.jfree.chart.plot.dial.StandardDialRange;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StandardDialRange_ESTest extends StandardDialRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      standardDialRange0.setOuterRadius((-127.3849120062022));
      standardDialRange0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      StandardDialRange standardDialRange0 = new StandardDialRange((-1649.4), (-1649.4), paint0);
      standardDialRange0.setInnerRadius((-4448.073619));
      standardDialRange0.hashCode();
      assertEquals((-4448.073619), standardDialRange0.getInnerRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      StandardDialRange standardDialRange0 = new StandardDialRange((-1649.4), (-1649.4), paint0);
      standardDialRange0.hashCode();
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      assertEquals((-1649.4), standardDialRange0.getUpperBound(), 0.01);
      assertEquals(0, standardDialRange0.getScaleIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      Object object0 = standardDialRange0.clone();
      standardDialRange0.setOuterRadius((-57.1898));
      boolean boolean0 = standardDialRange0.equals(object0);
      assertEquals((-57.1898), standardDialRange0.getOuterRadius(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      StandardDialRange standardDialRange1 = new StandardDialRange();
      standardDialRange0.setInnerRadius(0.52);
      boolean boolean0 = standardDialRange0.equals(standardDialRange1);
      assertEquals(0.52, standardDialRange0.getInnerRadius(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      StandardDialRange standardDialRange0 = new StandardDialRange((-1311.3469739043578), 1.0, paint0);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      StandardDialRange standardDialRange1 = new StandardDialRange((-1311.3469739043578), Double.NaN, paint1);
      boolean boolean0 = standardDialRange0.equals(standardDialRange1);
      assertEquals(0, standardDialRange1.getScaleIndex());
      assertEquals(0.52, standardDialRange1.getOuterRadius(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.48, standardDialRange1.getInnerRadius(), 0.01);
      assertEquals(1.0, standardDialRange0.getUpperBound(), 0.01);
      assertEquals((-1311.3469739043578), standardDialRange1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      StandardDialRange standardDialRange0 = new StandardDialRange(0.48, 0.0, paint0);
      StandardDialRange standardDialRange1 = new StandardDialRange();
      boolean boolean0 = standardDialRange1.equals(standardDialRange0);
      assertEquals(0.52, standardDialRange1.getOuterRadius(), 0.01);
      assertEquals(0, standardDialRange1.getScaleIndex());
      assertEquals(100.0, standardDialRange1.getUpperBound(), 0.01);
      assertEquals(0.48, standardDialRange1.getInnerRadius(), 0.01);
      assertEquals(0.0, standardDialRange1.getLowerBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      StandardDialRange standardDialRange0 = new StandardDialRange((-3312.7510271242), 3847.343929, paint0);
      Object object0 = standardDialRange0.clone();
      standardDialRange0.setScaleIndex((-1333));
      boolean boolean0 = standardDialRange0.equals(object0);
      assertEquals((-1333), standardDialRange0.getScaleIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      DialPlot dialPlot0 = mock(DialPlot.class, new ViolatedAssumptionAnswer());
      doReturn((DialScale) null).when(dialPlot0).getScale(anyInt());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangle2D0).getCenterX();
      doReturn(0.0, 0.0).when(rectangle2D0).getCenterY();
      doReturn(0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0).when(rectangle2D0).getWidth();
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        standardDialRange0.draw(graphics2D0, dialPlot0, rectangle2D0, rectangle2D1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No scale for scaleIndex = 0
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      // Undeclared exception!
      try { 
        standardDialRange0.setBounds(0.52, 0.52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Lower must be less than upper.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      StandardDialRange standardDialRange0 = new StandardDialRange(846.695831107, 846.695831107, paint0);
      standardDialRange0.setLowerBound((-367));
      // Undeclared exception!
      try { 
        standardDialRange0.setUpperBound((-367));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Lower bound must be less than upper bound.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      standardDialRange0.setUpperBound(0.52);
      // Undeclared exception!
      try { 
        standardDialRange0.setLowerBound(0.52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Lower bound must be less than upper bound.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      StandardDialRange standardDialRange0 = new StandardDialRange(0.0, 0.0, paint0);
      double double0 = standardDialRange0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, standardDialRange0.getScaleIndex());
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      assertEquals(0.0, standardDialRange0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      StandardDialRange standardDialRange0 = new StandardDialRange(276.8315, (-4.0), paint0);
      double double0 = standardDialRange0.getUpperBound();
      assertEquals(0, standardDialRange0.getScaleIndex());
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      assertEquals(276.8315, standardDialRange0.getLowerBound(), 0.01);
      assertEquals((-4.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      standardDialRange0.setScaleIndex(3313);
      int int0 = standardDialRange0.getScaleIndex();
      assertEquals(3313, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      standardDialRange0.setScaleIndex((-1622));
      int int0 = standardDialRange0.getScaleIndex();
      assertEquals((-1622), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      
      standardDialRange0.setOuterRadius(0);
      double double0 = standardDialRange0.getOuterRadius();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      StandardDialRange standardDialRange0 = new StandardDialRange((-1.0), (-1.0), paint0);
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      
      standardDialRange0.setOuterRadius((-1.0));
      double double0 = standardDialRange0.getOuterRadius();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      StandardDialRange standardDialRange0 = new StandardDialRange(1.0, 1.0, paint0);
      double double0 = standardDialRange0.getLowerBound();
      assertEquals(0, standardDialRange0.getScaleIndex());
      assertEquals(1.0, standardDialRange0.getUpperBound(), 0.01);
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      StandardDialRange standardDialRange0 = new StandardDialRange((-3312.7510271242), 3847.343929, paint0);
      double double0 = standardDialRange0.getLowerBound();
      assertEquals((-3312.7510271242), double0, 0.01);
      assertEquals(3847.343929, standardDialRange0.getUpperBound(), 0.01);
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      assertEquals(0, standardDialRange0.getScaleIndex());
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      
      standardDialRange0.setInnerRadius(0.0);
      double double0 = standardDialRange0.getInnerRadius();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      standardDialRange0.setInnerRadius((-939.4));
      double double0 = standardDialRange0.getInnerRadius();
      assertEquals((-939.4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      // Undeclared exception!
      try { 
        standardDialRange0.setPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangle2D0).getCenterX();
      doReturn(0.0, 0.0).when(rectangle2D0).getCenterY();
      doReturn(0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0).when(rectangle2D0).getWidth();
      // Undeclared exception!
      try { 
        standardDialRange0.draw((Graphics2D) null, (DialPlot) null, rectangle2D0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      DialPlot dialPlot0 = mock(DialPlot.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        standardDialRange0.draw(graphics2D0, dialPlot0, (Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rect' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StandardDialRange standardDialRange0 = null;
      try {
        standardDialRange0 = new StandardDialRange(0.0, 0.0, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      Object object0 = standardDialRange0.clone();
      standardDialRange0.setOuterRadius(1397.44);
      boolean boolean0 = standardDialRange0.equals(object0);
      assertEquals(1397.44, standardDialRange0.getOuterRadius(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      StandardDialRange standardDialRange0 = new StandardDialRange(0.0, (-1.0), paint0);
      Object object0 = standardDialRange0.clone();
      assertTrue(object0.equals((Object)standardDialRange0));
      
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      standardDialRange0.setPaint(paint1);
      boolean boolean0 = standardDialRange0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      StandardDialRange standardDialRange0 = new StandardDialRange();
      StandardDialRange standardDialRange1 = new StandardDialRange((-998), 3304.7531952915047, paint0);
      boolean boolean0 = standardDialRange0.equals(standardDialRange1);
      assertEquals(3304.7531952915047, standardDialRange1.getUpperBound(), 0.01);
      assertEquals(0, standardDialRange1.getScaleIndex());
      assertEquals(0.52, standardDialRange1.getOuterRadius(), 0.01);
      assertEquals((-998.0), standardDialRange1.getLowerBound(), 0.01);
      assertEquals(0.48, standardDialRange1.getInnerRadius(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      standardDialRange0.setScaleIndex(10);
      StandardDialRange standardDialRange1 = new StandardDialRange();
      boolean boolean0 = standardDialRange0.equals(standardDialRange1);
      assertEquals(10, standardDialRange0.getScaleIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      StandardDialRange standardDialRange1 = new StandardDialRange();
      boolean boolean0 = standardDialRange0.equals(standardDialRange1);
      assertEquals(100.0, standardDialRange1.getUpperBound(), 0.01);
      assertEquals(0, standardDialRange1.getScaleIndex());
      assertEquals(0.52, standardDialRange1.getOuterRadius(), 0.01);
      assertEquals(0.0, standardDialRange1.getLowerBound(), 0.01);
      assertEquals(0.48, standardDialRange1.getInnerRadius(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      boolean boolean0 = standardDialRange0.equals(standardDialRange0);
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      assertEquals(0, standardDialRange0.getScaleIndex());
      assertEquals(0.0, standardDialRange0.getLowerBound(), 0.01);
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      assertTrue(boolean0);
      assertEquals(100.0, standardDialRange0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      StandardDialRange standardDialRange0 = new StandardDialRange((-1.0), (-1.0), paint0);
      boolean boolean0 = standardDialRange0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      assertEquals((-1.0), standardDialRange0.getUpperBound(), 0.01);
      assertEquals((-1.0), standardDialRange0.getLowerBound(), 0.01);
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      assertEquals(0, standardDialRange0.getScaleIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      DialScale dialScale0 = mock(DialScale.class, new ViolatedAssumptionAnswer());
      doReturn(5027.0, 2314.2740031133953).when(dialScale0).valueToAngle(anyDouble());
      DialPlot dialPlot0 = mock(DialPlot.class, new ViolatedAssumptionAnswer());
      doReturn(dialScale0).when(dialPlot0).getScale(anyInt());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(4033.962833498081, (double)1.0F).when(rectangle2D0).getCenterX();
      doReturn((double)10, 4033.962833498081).when(rectangle2D0).getCenterY();
      doReturn(4033.962833498081, 4033.962833498081).when(rectangle2D0).getHeight();
      doReturn((double)10, (double)10).when(rectangle2D0).getWidth();
      standardDialRange0.draw(graphics2D0, dialPlot0, rectangle2D0, rectangle2D0);
      assertEquals(0, standardDialRange0.getScaleIndex());
      assertEquals(100.0, standardDialRange0.getUpperBound(), 0.01);
      assertEquals(0.0, standardDialRange0.getLowerBound(), 0.01);
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      StandardDialRange standardDialRange0 = new StandardDialRange(0.0, 0.0, paint0);
      // Undeclared exception!
      try { 
        standardDialRange0.setBounds(0.0, (-1669.3902));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Lower must be less than upper.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      standardDialRange0.setBounds((-1284.2), (-1.0));
      assertEquals((-1284.2), standardDialRange0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      StandardDialRange standardDialRange0 = new StandardDialRange(846.695831107, 846.695831107, paint0);
      // Undeclared exception!
      try { 
        standardDialRange0.setUpperBound((-367));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Lower bound must be less than upper bound.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      // Undeclared exception!
      try { 
        standardDialRange0.setLowerBound(2684.59373036094);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Lower bound must be less than upper bound.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      Object object0 = standardDialRange0.clone();
      standardDialRange0.setInnerRadius((-632.8266096));
      boolean boolean0 = standardDialRange0.equals(object0);
      assertEquals((-632.8266096), standardDialRange0.getInnerRadius(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      double double0 = standardDialRange0.getLowerBound();
      assertEquals(0, standardDialRange0.getScaleIndex());
      assertEquals(100.0, standardDialRange0.getUpperBound(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      int int0 = standardDialRange0.getScaleIndex();
      assertEquals(100.0, standardDialRange0.getUpperBound(), 0.01);
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      assertEquals(0.0, standardDialRange0.getLowerBound(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      boolean boolean0 = standardDialRange0.isClippedToWindow();
      assertTrue(boolean0);
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      assertEquals(0.0, standardDialRange0.getLowerBound(), 0.01);
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      assertEquals(100.0, standardDialRange0.getUpperBound(), 0.01);
      assertEquals(0, standardDialRange0.getScaleIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      double double0 = standardDialRange0.getInnerRadius();
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      assertEquals(0.48, double0, 0.01);
      assertEquals(0.0, standardDialRange0.getLowerBound(), 0.01);
      assertEquals(0, standardDialRange0.getScaleIndex());
      assertEquals(100.0, standardDialRange0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      double double0 = standardDialRange0.getUpperBound();
      assertEquals(0.0, standardDialRange0.getLowerBound(), 0.01);
      assertEquals(0, standardDialRange0.getScaleIndex());
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      assertEquals(100.0, double0, 0.01);
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      double double0 = standardDialRange0.getOuterRadius();
      assertEquals(0.52, double0, 0.01);
      assertEquals(100.0, standardDialRange0.getUpperBound(), 0.01);
      assertEquals(0, standardDialRange0.getScaleIndex());
      assertEquals(0.0, standardDialRange0.getLowerBound(), 0.01);
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      Paint paint0 = standardDialRange0.getPaint();
      StandardDialRange standardDialRange1 = new StandardDialRange(0.0, 0.0, paint0);
      boolean boolean0 = standardDialRange0.equals(standardDialRange1);
      assertFalse(standardDialRange1.equals((Object)standardDialRange0));
      assertEquals(0.52, standardDialRange1.getOuterRadius(), 0.01);
      assertEquals(0.0, standardDialRange0.getLowerBound(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.48, standardDialRange1.getInnerRadius(), 0.01);
      assertEquals(0, standardDialRange1.getScaleIndex());
      assertEquals(0.0, standardDialRange1.getUpperBound(), 0.01);
  }
}
