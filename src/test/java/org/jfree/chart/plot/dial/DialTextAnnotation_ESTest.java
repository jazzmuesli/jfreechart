/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:06:42 GMT 2019
 */

package org.jfree.chart.plot.dial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.event.ComponentListener;
import java.awt.event.KeyListener;
import java.awt.event.TextListener;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.IndexColorModel;
import java.time.chrono.ChronoLocalDate;
import java.util.EventListener;
import java.util.Hashtable;
import javax.swing.JLayeredPane;
import javax.swing.JTree;
import javax.swing.plaf.synth.SynthTreeUI;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.TextAnnotation;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.event.ChartChangeEventType;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.plot.dial.ArcDialFrame;
import org.jfree.chart.plot.dial.DialLayerChangeEvent;
import org.jfree.chart.plot.dial.DialLayerChangeListener;
import org.jfree.chart.plot.dial.DialPlot;
import org.jfree.chart.plot.dial.DialTextAnnotation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.text.TextUtils;
import org.jfree.chart.ui.TextAnchor;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DialTextAnnotation_ESTest extends DialTextAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("B\"|SwT%i");
      assertNotNull(dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("B\"|SwT%i", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      
      dialTextAnnotation0.hashCode();
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("B\"|SwT%i", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      
      DialTextAnnotation dialTextAnnotation1 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("B\"|SwT%i", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertEquals("B\"|SwT%i", dialTextAnnotation1.getLabel());
      assertTrue(dialTextAnnotation1.isVisible());
      
      dialTextAnnotation0.setAngle((-90.0));
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("B\"|SwT%i", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      
      dialTextAnnotation0.setRadius(0.05);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.05, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("B\"|SwT%i", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      
      dialTextAnnotation0.setAngle((-3691.5));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-3691.5), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.05, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("B\"|SwT%i", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      
      Font font0 = dialTextAnnotation0.getFont();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(font0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-3691.5), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.05, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("B\"|SwT%i", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertTrue(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertEquals("Dialog", font0.getName());
      assertEquals(14, font0.getSize());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      
      double double0 = dialTextAnnotation0.getRadius();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-3691.5), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.05, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("B\"|SwT%i", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.05, double0, 0.01);
      
      Color color0 = (Color)dialTextAnnotation0.getPaint();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(color0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-3691.5), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.05, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("B\"|SwT%i", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      
      System.setCurrentTimeMillis((-1882L));
      boolean boolean1 = dialTextAnnotation0.equals(dialTextAnnotation1);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-3691.5), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.05, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("B\"|SwT%i", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertEquals("B\"|SwT%i", dialTextAnnotation1.getLabel());
      assertTrue(dialTextAnnotation1.isVisible());
      assertFalse(boolean1);
      
      TextAnchor textAnchor0 = dialTextAnnotation0.getAnchor();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(textAnchor0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-3691.5), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.05, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("B\"|SwT%i", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBottom());
      
      Color color1 = (Color)dialTextAnnotation0.getPaint();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(color1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertSame(color1, color0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-3691.5), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.05, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("B\"|SwT%i", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0, color1.getBlue());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getGreen());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(0, color1.getRed());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      ChartRenderingInfo chartRenderingInfo1 = plotRenderingInfo0.getOwner();
      assertNotNull(chartRenderingInfo1);
      assertSame(chartRenderingInfo0, chartRenderingInfo1);
      assertSame(chartRenderingInfo1, chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1444, 2575, (double) 2575, 2120.0, chartRenderingInfo1);
      assertNotNull(bufferedImage0);
      assertSame(chartRenderingInfo0, chartRenderingInfo1);
      assertSame(chartRenderingInfo1, chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1444, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2575, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1444, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2575, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertNotNull(sunGraphics2D0);
      assertSame(chartRenderingInfo0, chartRenderingInfo1);
      assertSame(chartRenderingInfo1, chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1444, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2575, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1444, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2575, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) 1444);
      assertNotNull(defaultValueDataset0);
      assertTrue(defaultValueDataset0.getNotify());
      
      DialPlot dialPlot0 = new DialPlot(defaultValueDataset0);
      assertNotNull(dialPlot0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertTrue(dialPlot0.isNotify());
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertFalse(dialPlot0.isSubplot());
      assertNull(dialPlot0.getNoDataMessage());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 1.0F, 1.0F, (-1882L));
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.5, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-940.0), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-1881.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-1882.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
      
      Dimension dimension0 = new Dimension(37, (-2144768177));
      assertNotNull(dimension0);
      assertEquals(37.0, dimension0.getWidth(), 0.01);
      assertEquals((-2.144768177E9), dimension0.getHeight(), 0.01);
      assertEquals(37, dimension0.width);
      assertEquals((-2144768177), dimension0.height);
      
      Dimension dimension1 = new Dimension(dimension0);
      assertTrue(dimension1.equals((Object)dimension0));
      assertNotNull(dimension1);
      assertEquals(37.0, dimension0.getWidth(), 0.01);
      assertEquals((-2.144768177E9), dimension0.getHeight(), 0.01);
      assertEquals((-2.144768177E9), dimension1.getHeight(), 0.01);
      assertEquals(37.0, dimension1.getWidth(), 0.01);
      assertEquals(37, dimension0.width);
      assertEquals((-2144768177), dimension0.height);
      assertEquals(37, dimension1.width);
      assertEquals((-2144768177), dimension1.height);
      
      Rectangle rectangle0 = new Rectangle(dimension1);
      assertTrue(dimension0.equals((Object)dimension1));
      assertTrue(dimension1.equals((Object)dimension0));
      assertNotNull(rectangle0);
      assertEquals(37.0, dimension0.getWidth(), 0.01);
      assertEquals((-2.144768177E9), dimension0.getHeight(), 0.01);
      assertEquals((-2.144768177E9), dimension1.getHeight(), 0.01);
      assertEquals(37.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-1.0723840885E9), rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(37.0, rectangle0.getMaxX(), 0.01);
      assertEquals(18.5, rectangle0.getCenterX(), 0.01);
      assertEquals(37.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-2.144768177E9), rectangle0.getHeight(), 0.01);
      assertEquals((-2.144768177E9), rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(37, dimension0.width);
      assertEquals((-2144768177), dimension0.height);
      assertEquals(37, dimension1.width);
      assertEquals((-2144768177), dimension1.height);
      assertEquals(37, rectangle0.width);
      assertEquals((-2144768177), rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangle2D_Float0.createIntersection(rectangle0);
      assertTrue(dimension0.equals((Object)dimension1));
      assertTrue(dimension1.equals((Object)dimension0));
      assertNotNull(rectangle2D_Double0);
      assertNotSame(dimension0, dimension1);
      assertNotSame(dimension1, dimension0);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.5, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-940.0), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-1881.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(37.0, dimension0.getWidth(), 0.01);
      assertEquals((-2.144768177E9), dimension0.getHeight(), 0.01);
      assertEquals((-2.144768177E9), dimension1.getHeight(), 0.01);
      assertEquals(37.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-1.0723840885E9), rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(37.0, rectangle0.getMaxX(), 0.01);
      assertEquals(18.5, rectangle0.getCenterX(), 0.01);
      assertEquals(37.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-2.144768177E9), rectangle0.getHeight(), 0.01);
      assertEquals((-2.144768177E9), rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1.072384088E9), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-2.144768177E9), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1882.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(37, dimension0.width);
      assertEquals((-2144768177), dimension0.height);
      assertEquals(37, dimension1.width);
      assertEquals((-2144768177), dimension1.height);
      assertEquals(37, rectangle0.width);
      assertEquals((-2144768177), rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals((-2.144768178E9), rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)multiplePiePlot0.DEFAULT_INSETS.createInsetRectangle((Rectangle2D) rectangle2D_Double0);
      assertTrue(dimension0.equals((Object)dimension1));
      assertTrue(dimension1.equals((Object)dimension0));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertNotNull(rectangle2D_Double1);
      assertNotSame(dimension0, dimension1);
      assertNotSame(dimension1, dimension0);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.5, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-940.0), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-1881.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(37.0, dimension0.getWidth(), 0.01);
      assertEquals((-2.144768177E9), dimension0.getHeight(), 0.01);
      assertEquals((-2.144768177E9), dimension1.getHeight(), 0.01);
      assertEquals(37.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-1.0723840885E9), rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(37.0, rectangle0.getMaxX(), 0.01);
      assertEquals(18.5, rectangle0.getCenterX(), 0.01);
      assertEquals(37.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-2.144768177E9), rectangle0.getHeight(), 0.01);
      assertEquals((-2.144768177E9), rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1.072384088E9), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-2.144768177E9), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(5.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals((-7.0), rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(8.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.5, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-1.072384088E9), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-2.144768181E9), rectangle2D_Double1.getMaxY(), 0.01);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals((-1882.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(37, dimension0.width);
      assertEquals((-2144768177), dimension0.height);
      assertEquals(37, dimension1.width);
      assertEquals((-2144768177), dimension1.height);
      assertEquals(37, rectangle0.width);
      assertEquals((-2144768177), rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals((-2.144768178E9), rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-2.144768186E9), rectangle2D_Double1.height, 0.01);
      assertEquals(5.0, rectangle2D_Double1.y, 0.01);
      assertEquals(8.0, rectangle2D_Double1.x, 0.01);
      assertEquals((-15.0), rectangle2D_Double1.width, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      dialTextAnnotation0.draw(sunGraphics2D0, dialPlot0, rectangle2D_Double1, rectangle2D_Float0);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertTrue(dimension0.equals((Object)dimension1));
      assertTrue(dimension1.equals((Object)dimension0));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertSame(chartRenderingInfo0, chartRenderingInfo1);
      assertSame(chartRenderingInfo1, chartRenderingInfo0);
      assertNotSame(dimension0, dimension1);
      assertNotSame(dimension1, dimension0);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-3691.5), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.05, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("B\"|SwT%i", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1444, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2575, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1444, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2575, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertTrue(dialPlot0.isNotify());
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertFalse(dialPlot0.isSubplot());
      assertNull(dialPlot0.getNoDataMessage());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.5, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-940.0), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-1881.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(37.0, dimension0.getWidth(), 0.01);
      assertEquals((-2.144768177E9), dimension0.getHeight(), 0.01);
      assertEquals((-2.144768177E9), dimension1.getHeight(), 0.01);
      assertEquals(37.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-1.0723840885E9), rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(37.0, rectangle0.getMaxX(), 0.01);
      assertEquals(18.5, rectangle0.getCenterX(), 0.01);
      assertEquals(37.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-2.144768177E9), rectangle0.getHeight(), 0.01);
      assertEquals((-2.144768177E9), rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1.072384088E9), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-2.144768177E9), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(5.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals((-7.0), rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(8.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.5, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-1.072384088E9), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-2.144768181E9), rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals((-16777216), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals((-16777216), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals((-1882.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(37, dimension0.width);
      assertEquals((-2144768177), dimension0.height);
      assertEquals(37, dimension1.width);
      assertEquals((-2144768177), dimension1.height);
      assertEquals(37, rectangle0.width);
      assertEquals((-2144768177), rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals((-2.144768178E9), rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-2.144768186E9), rectangle2D_Double1.height, 0.01);
      assertEquals(5.0, rectangle2D_Double1.y, 0.01);
      assertEquals(8.0, rectangle2D_Double1.x, 0.01);
      assertEquals((-15.0), rectangle2D_Double1.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("org.jfree.chart.event.TitleChangeEvent");
      assertNotNull(dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("org.jfree.chart.event.TitleChangeEvent", dialTextAnnotation0.getLabel());
      
      TextAnchor textAnchor0 = dialTextAnnotation0.getAnchor();
      assertNotNull(textAnchor0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("org.jfree.chart.event.TitleChangeEvent", dialTextAnnotation0.getLabel());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      
      dialTextAnnotation0.hashCode();
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("org.jfree.chart.event.TitleChangeEvent", dialTextAnnotation0.getLabel());
      
      DialPlot dialPlot0 = new DialPlot((ValueDataset) null);
      assertNotNull(dialPlot0);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertTrue(dialPlot0.isNotify());
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertNull(dialPlot0.getNoDataMessage());
      assertFalse(dialPlot0.isSubplot());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      assertNotNull(synthTreeUI0);
      
      Hashtable<String, ChronoLocalDate> hashtable0 = new Hashtable<String, ChronoLocalDate>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      JTree jTree0 = new JTree(hashtable0);
      assertNotNull(jTree0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.getIgnoreRepaint());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertFalse(jTree0.isFocusCycleRoot());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      
      Rectangle rectangle0 = synthTreeUI0.getPathBounds(jTree0, (TreePath) null);
      assertNull(rectangle0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.getIgnoreRepaint());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertFalse(jTree0.isFocusCycleRoot());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      
      // Undeclared exception!
      try { 
        dialTextAnnotation0.draw((Graphics2D) null, dialPlot0, (Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rect' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("C");
      assertNotNull(dialTextAnnotation0);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      
      boolean boolean0 = dialTextAnnotation0.equals(dialTextAnnotation0);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(boolean0);
      
      dialTextAnnotation0.setAngle(0.0);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      
      TextListener textListener0 = AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      assertNull(textListener0);
      
      TextListener textListener1 = AWTEventMulticaster.remove((TextListener) null, (TextListener) null);
      assertNull(textListener1);
      
      boolean boolean1 = dialTextAnnotation0.hasListener((EventListener) null);
      assertFalse(boolean1 == boolean0);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertFalse(boolean1);
      
      Font font0 = dialTextAnnotation0.getFont();
      assertNotNull(font0);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(font0.isBold());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isItalic());
      assertEquals(1, font0.getStyle());
      assertEquals(14, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isPlain());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.isTransformed());
      
      double double0 = dialTextAnnotation0.getAngle();
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = dialTextAnnotation0.getRadius();
      assertNotEquals(double1, double0, 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, double1, 0.01);
      
      dialTextAnnotation0.setRadius(0.0);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      
      TextAnchor textAnchor0 = dialTextAnnotation0.getAnchor();
      assertNotNull(textAnchor0);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBottom());
      
      double double2 = dialTextAnnotation0.getRadius();
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, double2, 0.01);
      
      Font font1 = dialTextAnnotation0.getFont();
      assertNotNull(font1);
      assertSame(font1, font0);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertFalse(font1.hasLayoutAttributes());
      assertEquals(1, font1.getStyle());
      assertEquals(14, font1.getSize());
      assertFalse(font1.isItalic());
      assertEquals(14.0F, font1.getSize2D(), 0.01F);
      assertTrue(font1.isBold());
      assertFalse(font1.isTransformed());
      assertFalse(font1.hasUniformLineMetrics());
      assertFalse(font1.isPlain());
      assertEquals("Dialog", font1.getName());
      
      dialTextAnnotation0.setRadius(0.0);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      
      double double3 = dialTextAnnotation0.getRadius();
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, double3, 0.01);
      
      dialTextAnnotation0.setRadius(0.0);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("C");
      assertNotNull(dialTextAnnotation0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      
      DialTextAnnotation dialTextAnnotation1 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals("C", dialTextAnnotation1.getLabel());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      
      dialTextAnnotation1.setAngle((-3117.6));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-3117.6), dialTextAnnotation1.getAngle(), 0.01);
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals("C", dialTextAnnotation1.getLabel());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      
      boolean boolean0 = dialTextAnnotation0.equals(dialTextAnnotation1);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-3117.6), dialTextAnnotation1.getAngle(), 0.01);
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals("C", dialTextAnnotation1.getLabel());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertFalse(boolean0);
      
      dialTextAnnotation0.setAngle(0.0);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      
      TextListener textListener0 = AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      assertNull(textListener0);
      
      TextListener textListener1 = AWTEventMulticaster.remove((TextListener) null, (TextListener) null);
      assertNull(textListener1);
      
      boolean boolean1 = dialTextAnnotation0.hasListener((EventListener) null);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertFalse(boolean1);
      
      Font font0 = dialTextAnnotation0.getFont();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(font0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertFalse(font0.isPlain());
      assertEquals("Dialog", font0.getName());
      assertTrue(font0.isBold());
      assertEquals(1, font0.getStyle());
      assertEquals(14, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      
      double double0 = dialTextAnnotation0.getAngle();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = dialTextAnnotation0.getRadius();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, double1, 0.01);
      
      dialTextAnnotation0.setRadius(0.0);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      
      TextAnchor textAnchor0 = dialTextAnnotation0.getAnchor();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(textAnchor0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isLeft());
      
      double double2 = dialTextAnnotation0.getRadius();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, double2, 0.01);
      
      Font font1 = dialTextAnnotation0.getFont();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(font1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertSame(font1, font0);
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertFalse(font1.isTransformed());
      assertFalse(font1.hasUniformLineMetrics());
      assertFalse(font1.isPlain());
      assertEquals("Dialog", font1.getName());
      assertTrue(font1.isBold());
      assertEquals(14, font1.getSize());
      assertEquals(1, font1.getStyle());
      assertFalse(font1.isItalic());
      assertEquals(14.0F, font1.getSize2D(), 0.01F);
      assertFalse(font1.hasLayoutAttributes());
      
      dialTextAnnotation0.setRadius(0.0);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      
      double double3 = dialTextAnnotation0.getRadius();
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, double3, 0.01);
      
      dialTextAnnotation0.setRadius(0.0);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      
      dialTextAnnotation0.hashCode();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("anchor");
      assertNotNull(dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals("anchor", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      
      dialTextAnnotation0.hashCode();
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals("anchor", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      assertNotNull(font0);
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      
      Font font1 = Font.decode("\u00B0C");
      assertFalse(font1.equals((Object)font0));
      assertNotNull(font1);
      assertNotSame(font1, font0);
      assertFalse(font1.isBold());
      assertFalse(font1.isTransformed());
      assertTrue(font1.isPlain());
      assertFalse(font1.hasLayoutAttributes());
      assertEquals("\u00B0C", font1.getName());
      assertEquals(12, font1.getSize());
      assertEquals(12.0F, font1.getSize2D(), 0.01F);
      assertEquals(0, font1.getStyle());
      assertFalse(font1.isItalic());
      assertFalse(font1.hasUniformLineMetrics());
      
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("\u00B0C", 270.0, 270.0, 0.0);
      assertNotNull(xYPointerAnnotation0);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(270.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(270.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals("\u00B0C", xYPointerAnnotation0.getText());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.0, 0.0);
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(-0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      
      Font font2 = font0.deriveFont(2531, affineTransform0);
      assertFalse(font0.equals((Object)font1));
      assertFalse(font2.equals((Object)font1));
      assertFalse(font2.equals((Object)font0));
      assertNotNull(font2);
      assertNotSame(font0, font2);
      assertNotSame(font0, font1);
      assertNotSame(font2, font1);
      assertNotSame(font2, font0);
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(-0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertFalse(font2.isTransformed());
      assertFalse(font2.hasLayoutAttributes());
      assertTrue(font2.isItalic());
      assertEquals(10.0F, font2.getSize2D(), 0.01F);
      assertEquals(10, font2.getSize());
      assertFalse(font2.hasUniformLineMetrics());
      assertTrue(font2.isBold());
      assertEquals(3, font2.getStyle());
      assertEquals("SansSerif", font2.getName());
      assertFalse(font2.isPlain());
      
      TextAnchor textAnchor0 = xYPointerAnnotation0.getTextAnchor();
      assertNotNull(textAnchor0);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(270.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(270.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals("\u00B0C", xYPointerAnnotation0.getText());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isLeft());
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      
      dialTextAnnotation0.setAnchor(textAnchor0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals("anchor", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(270.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(270.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals("\u00B0C", xYPointerAnnotation0.getText());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isLeft());
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      
      dialTextAnnotation0.setFont(font0);
      assertFalse(font0.equals((Object)font2));
      assertFalse(font0.equals((Object)font1));
      assertNotSame(font0, font2);
      assertNotSame(font0, font1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals("anchor", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      
      dialTextAnnotation0.setLabel("anchor");
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals("anchor", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      
      Color color0 = (Color)dialTextAnnotation0.getPaint();
      assertNotNull(color0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals("anchor", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      
      Font font3 = dialTextAnnotation0.getFont();
      assertFalse(font3.equals((Object)font2));
      assertFalse(font3.equals((Object)font1));
      assertNotNull(font3);
      assertSame(font3, font0);
      assertNotSame(font3, font2);
      assertNotSame(font3, font1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals("anchor", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertFalse(font3.isBold());
      assertFalse(font3.isTransformed());
      assertFalse(font3.hasUniformLineMetrics());
      assertTrue(font3.isPlain());
      assertFalse(font3.isItalic());
      assertEquals("SansSerif", font3.getName());
      assertEquals(0, font3.getStyle());
      assertEquals(10.0F, font3.getSize2D(), 0.01F);
      assertEquals(10, font3.getSize());
      assertFalse(font3.hasLayoutAttributes());
      
      double double0 = dialTextAnnotation0.getRadius();
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals("anchor", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, double0, 0.01);
      
      dialTextAnnotation0.setAngle(0.95);
      assertEquals(0.95, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals("anchor", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("C");
      assertNotNull(dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      
      DialTextAnnotation dialTextAnnotation1 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertEquals("C", dialTextAnnotation1.getLabel());
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      
      boolean boolean0 = dialTextAnnotation0.equals(dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertEquals("C", dialTextAnnotation1.getLabel());
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertTrue(boolean0);
      
      dialTextAnnotation0.setAngle(0.0);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      
      TextListener textListener0 = AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      assertNull(textListener0);
      
      TextListener textListener1 = AWTEventMulticaster.remove((TextListener) null, (TextListener) null);
      assertNull(textListener1);
      
      boolean boolean1 = dialTextAnnotation0.hasListener((EventListener) null);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertFalse(boolean1);
      
      Font font0 = dialTextAnnotation0.getFont();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(font0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals(14, font0.getSize());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      
      double double0 = dialTextAnnotation0.getAngle();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = dialTextAnnotation0.getRadius();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, double1, 0.01);
      
      dialTextAnnotation0.setRadius(0.0);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      
      TextAnchor textAnchor0 = dialTextAnnotation0.getAnchor();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(textAnchor0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHalfAscent());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertTrue(textAnchor0.isHorizontalCenter());
      
      double double2 = dialTextAnnotation0.getRadius();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, double2, 0.01);
      
      Font font1 = dialTextAnnotation0.getFont();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(font1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertSame(font1, font0);
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertFalse(font1.isTransformed());
      assertFalse(font1.isPlain());
      assertEquals(14.0F, font1.getSize2D(), 0.01F);
      assertFalse(font1.hasLayoutAttributes());
      assertEquals("Dialog", font1.getName());
      assertFalse(font1.hasUniformLineMetrics());
      assertEquals(14, font1.getSize());
      assertEquals(1, font1.getStyle());
      assertFalse(font1.isItalic());
      assertTrue(font1.isBold());
      
      dialTextAnnotation0.setRadius(0.0);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      
      double double3 = dialTextAnnotation0.getRadius();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, double3, 0.01);
      
      dialTextAnnotation0.setRadius(0.0);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("'minX' cannot be INF or NaN.");
      assertNotNull(dialTextAnnotation0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("'minX' cannot be INF or NaN.", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      dialTextAnnotation0.setAngle(0.0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("'minX' cannot be INF or NaN.", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      
      dialTextAnnotation0.setAngle(1.0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("'minX' cannot be INF or NaN.", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(1.0, dialTextAnnotation0.getAngle(), 0.01);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot0.getOrientation());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getDomainAxisLocation());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot0.getSeriesRenderingOrder());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getRangeAxisLocation());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      assertNotNull(color0);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot0.getOrientation());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getDomainAxisLocation());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot0.getSeriesRenderingOrder());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getRangeAxisLocation());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      dialTextAnnotation0.setPaint(color0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("'minX' cannot be INF or NaN.", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(1.0, dialTextAnnotation0.getAngle(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(PlotOrientation.VERTICAL, combinedDomainXYPlot0.getOrientation());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getDomainAxisLocation());
      assertEquals(SeriesRenderingOrder.REVERSE, combinedDomainXYPlot0.getSeriesRenderingOrder());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, combinedDomainXYPlot0.getRangeAxisLocation());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(DatasetRenderingOrder.REVERSE, combinedDomainXYPlot0.getDatasetRenderingOrder());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      dialTextAnnotation0.setAngle(0.0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("'minX' cannot be INF or NaN.", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      
      dialTextAnnotation0.setAngle(0.0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("'minX' cannot be INF or NaN.", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      
      double double0 = dialTextAnnotation0.getAngle();
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("'minX' cannot be INF or NaN.", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = dialTextAnnotation0.getRadius();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("'minX' cannot be INF or NaN.", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, double1, 0.01);
      
      Color color1 = (Color)dialTextAnnotation0.getPaint();
      assertNotNull(color1);
      assertSame(color1, color0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("'minX' cannot be INF or NaN.", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0, color1.getGreen());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getBlue());
      assertEquals(1, color1.getTransparency());
      
      dialTextAnnotation0.setLabel(") outside valid range.");
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(") outside valid range.", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("org.jfree.chart.axis.DateTickUnitType");
      assertNotNull(dialTextAnnotation0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("org.jfree.chart.axis.DateTickUnitType", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      assertNotNull(defaultValueDataset0);
      assertTrue(defaultValueDataset0.getNotify());
      
      DialPlot dialPlot0 = new DialPlot(defaultValueDataset0);
      assertNotNull(dialPlot0);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertFalse(dialPlot0.isSubplot());
      assertTrue(dialPlot0.isNotify());
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(dialPlot0.getNoDataMessage());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(dialPlot0);
      assertNotNull(plotChangeEvent0);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertFalse(dialPlot0.isSubplot());
      assertTrue(dialPlot0.isNotify());
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(dialPlot0.getNoDataMessage());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertEquals(ChartChangeEventType.GENERAL, plotChangeEvent0.getType());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      dialPlot0.notifyListeners(plotChangeEvent0);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertFalse(dialPlot0.isSubplot());
      assertTrue(dialPlot0.isNotify());
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(dialPlot0.getNoDataMessage());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertEquals(ChartChangeEventType.GENERAL, plotChangeEvent0.getType());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      DialPlot dialPlot1 = (DialPlot)dialPlot0.getRootPlot();
      assertNotNull(dialPlot1);
      assertSame(dialPlot0, dialPlot1);
      assertSame(dialPlot1, dialPlot0);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertFalse(dialPlot0.isSubplot());
      assertTrue(dialPlot0.isNotify());
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(dialPlot0.getNoDataMessage());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertFalse(dialPlot1.fetchElementHintingFlag());
      assertEquals(0.0, dialPlot1.getViewX(), 0.01);
      assertEquals(0.0, dialPlot1.getViewY(), 0.01);
      assertEquals(1.0F, dialPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(dialPlot1.isSubplot());
      assertTrue(dialPlot1.isNotify());
      assertTrue(dialPlot1.isOutlineVisible());
      assertEquals(0.5F, dialPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(dialPlot1.getNoDataMessage());
      assertEquals("DialPlot", dialPlot1.getPlotType());
      assertEquals(1.0, dialPlot1.getViewWidth(), 0.01);
      assertEquals(1.0F, dialPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0, dialPlot1.getViewHeight(), 0.01);
      assertEquals(15, dialPlot1.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      DialLayerChangeEvent dialLayerChangeEvent0 = new DialLayerChangeEvent(dialTextAnnotation0);
      assertNotNull(dialLayerChangeEvent0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("org.jfree.chart.axis.DateTickUnitType", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(ChartChangeEventType.GENERAL, dialLayerChangeEvent0.getType());
      
      dialPlot0.dialLayerChanged(dialLayerChangeEvent0);
      assertSame(dialPlot0, dialPlot1);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("org.jfree.chart.axis.DateTickUnitType", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertFalse(dialPlot0.isSubplot());
      assertTrue(dialPlot0.isNotify());
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(dialPlot0.getNoDataMessage());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertEquals(ChartChangeEventType.GENERAL, dialLayerChangeEvent0.getType());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      defaultValueDataset0.setValue(integer0);
      assertTrue(defaultValueDataset0.getNotify());
      
      defaultValueDataset0.removeChangeListener(dialPlot1);
      assertSame(dialPlot0, dialPlot1);
      assertSame(dialPlot1, dialPlot0);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertFalse(dialPlot0.isSubplot());
      assertTrue(dialPlot0.isNotify());
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(dialPlot0.getNoDataMessage());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertFalse(dialPlot1.fetchElementHintingFlag());
      assertEquals(0.0, dialPlot1.getViewX(), 0.01);
      assertEquals(0.0, dialPlot1.getViewY(), 0.01);
      assertEquals(1.0F, dialPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(dialPlot1.isSubplot());
      assertTrue(dialPlot1.isNotify());
      assertTrue(dialPlot1.isOutlineVisible());
      assertEquals(0.5F, dialPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(dialPlot1.getNoDataMessage());
      assertEquals("DialPlot", dialPlot1.getPlotType());
      assertEquals(1.0, dialPlot1.getViewWidth(), 0.01);
      assertEquals(1.0F, dialPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0, dialPlot1.getViewHeight(), 0.01);
      assertEquals(15, dialPlot1.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      DialPlot dialPlot2 = new DialPlot(defaultValueDataset0);
      assertTrue(dialPlot2.equals((Object)dialPlot1));
      assertTrue(dialPlot2.equals((Object)dialPlot0));
      assertNotNull(dialPlot2);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(0.0, dialPlot2.getViewY(), 0.01);
      assertFalse(dialPlot2.fetchElementHintingFlag());
      assertEquals(0.0, dialPlot2.getViewX(), 0.01);
      assertTrue(dialPlot2.isOutlineVisible());
      assertEquals(15, dialPlot2.getBackgroundImageAlignment());
      assertEquals(1.0F, dialPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, dialPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1.0, dialPlot2.getViewHeight(), 0.01);
      assertEquals("DialPlot", dialPlot2.getPlotType());
      assertEquals(1.0, dialPlot2.getViewWidth(), 0.01);
      assertFalse(dialPlot2.isSubplot());
      assertEquals(0.5F, dialPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNull(dialPlot2.getNoDataMessage());
      assertTrue(dialPlot2.isNotify());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      dialTextAnnotation0.removeChangeListener(dialPlot2);
      assertTrue(dialPlot2.equals((Object)dialPlot1));
      assertTrue(dialPlot2.equals((Object)dialPlot0));
      assertNotSame(dialPlot2, dialPlot0);
      assertNotSame(dialPlot2, dialPlot1);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("org.jfree.chart.axis.DateTickUnitType", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(0.0, dialPlot2.getViewY(), 0.01);
      assertFalse(dialPlot2.fetchElementHintingFlag());
      assertEquals(0.0, dialPlot2.getViewX(), 0.01);
      assertTrue(dialPlot2.isOutlineVisible());
      assertEquals(15, dialPlot2.getBackgroundImageAlignment());
      assertEquals(1.0F, dialPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, dialPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1.0, dialPlot2.getViewHeight(), 0.01);
      assertEquals("DialPlot", dialPlot2.getPlotType());
      assertEquals(1.0, dialPlot2.getViewWidth(), 0.01);
      assertFalse(dialPlot2.isSubplot());
      assertEquals(0.5F, dialPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNull(dialPlot2.getNoDataMessage());
      assertTrue(dialPlot2.isNotify());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      TextUtils.setDrawStringsWithFontAttributes(true);
      Font font0 = dialTextAnnotation0.getFont();
      assertNotNull(font0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("org.jfree.chart.axis.DateTickUnitType", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertTrue(font0.isBold());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isPlain());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isItalic());
      assertEquals(14, font0.getSize());
      assertEquals(1, font0.getStyle());
      
      DefaultValueDataset defaultValueDataset1 = (DefaultValueDataset)dialPlot0.getDataset();
      assertTrue(dialPlot0.equals((Object)dialPlot2));
      assertNotNull(defaultValueDataset1);
      assertSame(defaultValueDataset0, defaultValueDataset1);
      assertSame(dialPlot0, dialPlot1);
      assertNotSame(dialPlot0, dialPlot2);
      assertSame(defaultValueDataset1, defaultValueDataset0);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertFalse(dialPlot0.isSubplot());
      assertTrue(dialPlot0.isNotify());
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(dialPlot0.getNoDataMessage());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertTrue(defaultValueDataset1.getNotify());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      double double0 = dialTextAnnotation0.getRadius();
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("org.jfree.chart.axis.DateTickUnitType", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, double0, 0.01);
      
      DefaultValueDataset defaultValueDataset2 = (DefaultValueDataset)defaultValueDataset0.clone();
      assertTrue(defaultValueDataset2.equals((Object)defaultValueDataset1));
      assertTrue(defaultValueDataset2.equals((Object)defaultValueDataset0));
      assertNotNull(defaultValueDataset2);
      assertNotSame(defaultValueDataset2, defaultValueDataset0);
      assertNotSame(defaultValueDataset2, defaultValueDataset1);
      assertSame(defaultValueDataset0, defaultValueDataset1);
      assertNotSame(defaultValueDataset0, defaultValueDataset2);
      assertTrue(defaultValueDataset2.getNotify());
      assertTrue(defaultValueDataset0.getNotify());
      
      boolean boolean0 = dialTextAnnotation0.equals("org.jfree.chart.axis.DateTickUnitType");
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("org.jfree.chart.axis.DateTickUnitType", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertFalse(boolean0);
      
      TextAnchor textAnchor0 = TextAnchor.BOTTOM_CENTER;
      assertNotNull(textAnchor0);
      assertTrue(textAnchor0.isBottom());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.BOTTOM_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHalfAscent());
      
      dialTextAnnotation0.setAnchor(textAnchor0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("org.jfree.chart.axis.DateTickUnitType", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertTrue(textAnchor0.isBottom());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.BOTTOM_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHalfAscent());
      
      double double1 = dialTextAnnotation0.getAngle();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("org.jfree.chart.axis.DateTickUnitType", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), double1, 0.01);
      
      dialTextAnnotation0.setRadius(10);
      assertEquals("org.jfree.chart.axis.DateTickUnitType", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(10.0, dialTextAnnotation0.getRadius(), 0.01);
      
      boolean boolean1 = dialTextAnnotation0.equals(dialPlot2);
      assertTrue(defaultValueDataset0.equals((Object)defaultValueDataset2));
      assertTrue(boolean1 == boolean0);
      assertTrue(dialPlot2.equals((Object)dialPlot1));
      assertTrue(dialPlot2.equals((Object)dialPlot0));
      assertSame(defaultValueDataset0, defaultValueDataset1);
      assertNotSame(defaultValueDataset0, defaultValueDataset2);
      assertNotSame(dialPlot2, dialPlot0);
      assertNotSame(dialPlot2, dialPlot1);
      assertEquals("org.jfree.chart.axis.DateTickUnitType", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(10.0, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(0.0, dialPlot2.getViewY(), 0.01);
      assertFalse(dialPlot2.fetchElementHintingFlag());
      assertEquals(0.0, dialPlot2.getViewX(), 0.01);
      assertTrue(dialPlot2.isOutlineVisible());
      assertEquals(15, dialPlot2.getBackgroundImageAlignment());
      assertEquals(1.0F, dialPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, dialPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1.0, dialPlot2.getViewHeight(), 0.01);
      assertEquals("DialPlot", dialPlot2.getPlotType());
      assertEquals(1.0, dialPlot2.getViewWidth(), 0.01);
      assertFalse(dialPlot2.isSubplot());
      assertEquals(0.5F, dialPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNull(dialPlot2.getNoDataMessage());
      assertTrue(dialPlot2.isNotify());
      assertFalse(boolean1);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      DialTextAnnotation dialTextAnnotation1 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertEquals("org.jfree.chart.axis.DateTickUnitType", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(10.0, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertEquals(10.0, dialTextAnnotation1.getRadius(), 0.01);
      assertEquals("org.jfree.chart.axis.DateTickUnitType", dialTextAnnotation1.getLabel());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      
      String string0 = dialTextAnnotation0.getLabel();
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(string0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals("org.jfree.chart.axis.DateTickUnitType", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(10.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("org.jfree.chart.axis.DateTickUnitType", string0);
      
      Font font1 = dialTextAnnotation0.getFont();
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(font1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertSame(font1, font0);
      assertEquals("org.jfree.chart.axis.DateTickUnitType", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(10.0, dialTextAnnotation0.getRadius(), 0.01);
      assertFalse(font1.isPlain());
      assertFalse(font1.hasLayoutAttributes());
      assertEquals(1, font1.getStyle());
      assertEquals(14, font1.getSize());
      assertEquals("Dialog", font1.getName());
      assertFalse(font1.isItalic());
      assertTrue(font1.isBold());
      assertEquals(14.0F, font1.getSize2D(), 0.01F);
      assertFalse(font1.hasUniformLineMetrics());
      assertFalse(font1.isTransformed());
      
      dialTextAnnotation0.setAngle((-143.64193139));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals("org.jfree.chart.axis.DateTickUnitType", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(10.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-143.64193139), dialTextAnnotation0.getAngle(), 0.01);
      
      Color color0 = (Color)dialTextAnnotation0.getPaint();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(color0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals("org.jfree.chart.axis.DateTickUnitType", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(10.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-143.64193139), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      
      TextAnchor textAnchor1 = dialTextAnnotation0.getAnchor();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(textAnchor1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertSame(textAnchor1, textAnchor0);
      assertEquals("org.jfree.chart.axis.DateTickUnitType", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(10.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-143.64193139), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(textAnchor1.isBottom());
      assertFalse(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isLeft());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertEquals("TextAnchor.BOTTOM_CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isRight());
      
      dialTextAnnotation0.hashCode();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals("org.jfree.chart.axis.DateTickUnitType", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(10.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-143.64193139), dialTextAnnotation0.getAngle(), 0.01);
      
      TextAnchor textAnchor2 = dialTextAnnotation0.getAnchor();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(textAnchor2);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertSame(textAnchor2, textAnchor1);
      assertSame(textAnchor2, textAnchor0);
      assertEquals("org.jfree.chart.axis.DateTickUnitType", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(10.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-143.64193139), dialTextAnnotation0.getAngle(), 0.01);
      assertFalse(textAnchor2.isVerticalCenter());
      assertFalse(textAnchor2.isBaseline());
      assertFalse(textAnchor2.isRight());
      assertEquals("TextAnchor.BOTTOM_CENTER", textAnchor2.toString());
      assertFalse(textAnchor2.isTop());
      assertTrue(textAnchor2.isHorizontalCenter());
      assertFalse(textAnchor2.isHalfAscent());
      assertFalse(textAnchor2.isLeft());
      assertTrue(textAnchor2.isBottom());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("]yw)$_S/%?2e,eDrK");
      assertNotNull(dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("]yw)$_S/%?2e,eDrK", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      dialTextAnnotation0.addChangeListener((DialLayerChangeListener) null);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("]yw)$_S/%?2e,eDrK", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      DialTextAnnotation dialTextAnnotation1 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("]yw)$_S/%?2e,eDrK", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertEquals("]yw)$_S/%?2e,eDrK", dialTextAnnotation1.getLabel());
      
      dialTextAnnotation0.hashCode();
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("]yw)$_S/%?2e,eDrK", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      String string0 = dialTextAnnotation0.getLabel();
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(string0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("]yw)$_S/%?2e,eDrK", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals("]yw)$_S/%?2e,eDrK", string0);
      
      dialTextAnnotation0.hashCode();
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("]yw)$_S/%?2e,eDrK", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "]yw)$_S/%?2e,eDrK", 0.0, 0.0);
      assertNotNull(categoryPointerAnnotation0);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      
      Color color0 = Color.red;
      assertNotNull(color0);
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-65536), color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(0, color0.getBlue());
      
      categoryPointerAnnotation0.setArrowPaint(color0);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-65536), color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      
      TextAnchor textAnchor0 = categoryPointerAnnotation0.getRotationAnchor();
      assertNotNull(textAnchor0);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isBottom());
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      
      dialTextAnnotation0.setAnchor(textAnchor0);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("]yw)$_S/%?2e,eDrK", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isBottom());
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      
      TextAnchor textAnchor1 = dialTextAnnotation0.getAnchor();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(textAnchor1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertSame(textAnchor1, textAnchor0);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("]yw)$_S/%?2e,eDrK", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isBottom());
      assertEquals("TextAnchor.CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isTop());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isLeft());
      
      dialTextAnnotation0.setLabel("]yw)$_S/%?2e,eDrK");
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("]yw)$_S/%?2e,eDrK", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("");
      assertNotNull(dialTextAnnotation0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      dialTextAnnotation0.setAngle(1795.48441);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(1795.48441, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      TextAnchor textAnchor0 = TextAnchor.HALF_ASCENT_RIGHT;
      assertNotNull(textAnchor0);
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      
      dialTextAnnotation0.setAnchor(textAnchor0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(1795.48441, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertNotNull(ganttRenderer0);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertTrue(ganttRenderer0.getDefaultCreateEntities());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertTrue(ganttRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getDefaultItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(ganttRenderer0.getDefaultSeriesVisible());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      
      Color color0 = (Color)ganttRenderer0.getIncompletePaint();
      assertNotNull(color0);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertTrue(ganttRenderer0.getDefaultCreateEntities());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertTrue(ganttRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getDefaultItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(ganttRenderer0.getDefaultSeriesVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-65536), color0.getRGB());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      
      dialTextAnnotation0.setPaint(color0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(1795.48441, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertTrue(ganttRenderer0.getDefaultCreateEntities());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertTrue(ganttRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getDefaultItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(ganttRenderer0.getDefaultSeriesVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-65536), color0.getRGB());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      
      DialTextAnnotation dialTextAnnotation1 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(1795.48441, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals("", dialTextAnnotation1.getLabel());
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals(1795.48441, dialTextAnnotation1.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      
      double double0 = dialTextAnnotation0.getAngle();
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(1795.48441, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(1795.48441, double0, 0.01);
      
      TextAnchor textAnchor1 = dialTextAnnotation0.getAnchor();
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(textAnchor1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertSame(textAnchor1, textAnchor0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(1795.48441, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(textAnchor1.isHalfAscent());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor1.toString());
      assertFalse(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isRight());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isLeft());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isBottom());
      
      Color color1 = (Color)dialTextAnnotation0.getPaint();
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(color1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertSame(color1, color0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(1795.48441, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(255, color1.getAlpha());
      assertEquals((-65536), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getRed());
      assertEquals(0, color1.getBlue());
      assertEquals(0, color1.getGreen());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("");
      assertNotNull(dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals("", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      
      dialTextAnnotation0.setRadius(0.0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals("", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("");
      assertNotNull(dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("", dialTextAnnotation0.getLabel());
      
      KeyListener keyListener0 = AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      assertNull(keyListener0);
      
      boolean boolean0 = dialTextAnnotation0.hasListener((EventListener) null);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("", dialTextAnnotation0.getLabel());
      assertFalse(boolean0);
      
      boolean boolean1 = dialTextAnnotation0.equals("");
      assertTrue(boolean1 == boolean0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("", dialTextAnnotation0.getLabel());
      assertFalse(boolean1);
      
      dialTextAnnotation0.hashCode();
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("", dialTextAnnotation0.getLabel());
      
      dialTextAnnotation0.hashCode();
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("", dialTextAnnotation0.getLabel());
      
      Font font0 = dialTextAnnotation0.getFont();
      assertNotNull(font0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("", dialTextAnnotation0.getLabel());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals("Dialog", font0.getName());
      assertTrue(font0.isBold());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(14, font0.getSize());
      
      boolean boolean2 = dialTextAnnotation0.equals("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("", dialTextAnnotation0.getLabel());
      assertFalse(boolean2);
      
      double double0 = dialTextAnnotation0.getRadius();
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("", dialTextAnnotation0.getLabel());
      assertEquals(0.3, double0, 0.01);
      
      // Undeclared exception!
      try { 
        dialTextAnnotation0.setRadius((-1132.9151690616));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'radius' cannot be negative.
         //
         verifyException("org.jfree.chart.plot.dial.DialTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("vzK_0");
      assertNotNull(dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("vzK_0", dialTextAnnotation0.getLabel());
      
      DialTextAnnotation dialTextAnnotation1 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("vzK_0", dialTextAnnotation0.getLabel());
      assertEquals("vzK_0", dialTextAnnotation1.getLabel());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertTrue(dialTextAnnotation1.isVisible());
      
      dialTextAnnotation0.hashCode();
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("vzK_0", dialTextAnnotation0.getLabel());
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1.0));
      assertNotNull(candlestickRenderer0);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDefaultCreateEntities());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getDefaultSeriesVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      ItemLabelPosition itemLabelPosition0 = candlestickRenderer0.getSeriesNegativeItemLabelPosition(0);
      assertNotNull(itemLabelPosition0);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDefaultCreateEntities());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getDefaultSeriesVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.0, itemLabelPosition0.getAngle(), 0.01);
      assertEquals(ItemLabelAnchor.OUTSIDE6, itemLabelPosition0.getItemLabelAnchor());
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      TextAnchor textAnchor0 = itemLabelPosition0.getRotationAnchor();
      assertNotNull(textAnchor0);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDefaultCreateEntities());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getDefaultSeriesVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.0, itemLabelPosition0.getAngle(), 0.01);
      assertEquals(ItemLabelAnchor.OUTSIDE6, itemLabelPosition0.getItemLabelAnchor());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isHalfAscent());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      dialTextAnnotation0.setAnchor(textAnchor0);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("vzK_0", dialTextAnnotation0.getLabel());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDefaultCreateEntities());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getDefaultSeriesVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.0, itemLabelPosition0.getAngle(), 0.01);
      assertEquals(ItemLabelAnchor.OUTSIDE6, itemLabelPosition0.getItemLabelAnchor());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isHalfAscent());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      // Undeclared exception!
      try { 
        dialTextAnnotation0.setRadius((-572.4282258018));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'radius' cannot be negative.
         //
         verifyException("org.jfree.chart.plot.dial.DialTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("");
      assertNotNull(dialTextAnnotation0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      String string1 = dialTextAnnotation0.getLabel();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals("", string1);
      
      Color color0 = (Color)SymbolAxis.DEFAULT_GRID_BAND_ALTERNATE_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getAlpha());
      assertEquals(0, color0.getRGB());
      assertEquals(2, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      
      DialLayerChangeEvent dialLayerChangeEvent0 = null;
      DialPlot dialPlot0 = new DialPlot((ValueDataset) null);
      assertNotNull(dialPlot0);
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertNull(dialPlot0.getNoDataMessage());
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertTrue(dialPlot0.isNotify());
      assertFalse(dialPlot0.isSubplot());
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartRenderingInfo0.getChartArea();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)ellipse2D_Double0.getBounds2D();
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertNotNull(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      
      // Undeclared exception!
      try { 
        dialTextAnnotation0.draw((Graphics2D) null, dialPlot0, rectangle2D_Double0, rectangle2D_Double1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.dial.DialTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("position");
      assertNotNull(dialTextAnnotation0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("position", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      Font font0 = Font.getFont("O=z-.!wN'V");
      assertNull(font0);
      
      // Undeclared exception!
      try { 
        dialTextAnnotation0.setFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = null;
      try {
        dialTextAnnotation0 = new DialTextAnnotation((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("9u8n(Vk,[[2");
      assertNotNull(dialTextAnnotation0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("9u8n(Vk,[[2", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      DialTextAnnotation dialTextAnnotation1 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("9u8n(Vk,[[2", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertEquals("9u8n(Vk,[[2", dialTextAnnotation1.getLabel());
      
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener2 = AWTEventMulticaster.remove(componentListener0, componentListener1);
      assertFalse(componentListener2.equals((Object)componentListener1));
      assertNotNull(componentListener2);
      assertNotSame(componentListener2, componentListener1);
      assertSame(componentListener2, componentListener0);
      
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener2, componentListener2);
      assertFalse(componentListener2.equals((Object)componentListener1));
      assertNotNull(aWTEventMulticaster0);
      assertNotSame(componentListener2, componentListener1);
      assertSame(componentListener2, componentListener0);
      
      boolean boolean0 = dialTextAnnotation0.hasListener(aWTEventMulticaster0);
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(componentListener2.equals((Object)componentListener1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(componentListener2, componentListener1);
      assertSame(componentListener2, componentListener0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("9u8n(Vk,[[2", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertFalse(boolean0);
      
      dialTextAnnotation0.hashCode();
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("9u8n(Vk,[[2", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      // Undeclared exception!
      try { 
        dialTextAnnotation0.setAnchor((TextAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("gWQqqr9H>^sHyg^9g");
      assertNotNull(dialTextAnnotation0);
      assertEquals("gWQqqr9H>^sHyg^9g", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      assertNotNull(defaultValueDataset0);
      assertTrue(defaultValueDataset0.getNotify());
      
      DialPlot dialPlot0 = new DialPlot(defaultValueDataset0);
      assertNotNull(dialPlot0);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(dialPlot0.isNotify());
      assertNull(dialPlot0.getNoDataMessage());
      assertFalse(dialPlot0.isSubplot());
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      boolean boolean0 = dialTextAnnotation0.hasListener(dialPlot0);
      assertEquals("gWQqqr9H>^sHyg^9g", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(dialPlot0.isNotify());
      assertNull(dialPlot0.getNoDataMessage());
      assertFalse(dialPlot0.isSubplot());
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertFalse(boolean0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      TextAnchor textAnchor0 = dialTextAnnotation0.getAnchor();
      assertNotNull(textAnchor0);
      assertEquals("gWQqqr9H>^sHyg^9g", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHalfAscent());
      assertTrue(textAnchor0.isTop());
      
      boolean boolean1 = dialTextAnnotation0.equals("gWQqqr9H>^sHyg^9g");
      assertTrue(boolean1 == boolean0);
      assertEquals("gWQqqr9H>^sHyg^9g", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertFalse(boolean1);
      
      boolean boolean2 = dialTextAnnotation0.isClippedToWindow();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals("gWQqqr9H>^sHyg^9g", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("extract");
      assertNotNull(dialTextAnnotation0);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("extract", dialTextAnnotation0.getLabel());
      
      dialTextAnnotation0.hashCode();
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("extract", dialTextAnnotation0.getLabel());
      
      dialTextAnnotation0.addChangeListener((DialLayerChangeListener) null);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("extract", dialTextAnnotation0.getLabel());
      
      DialTextAnnotation dialTextAnnotation1 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("extract", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertEquals("extract", dialTextAnnotation1.getLabel());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertTrue(dialTextAnnotation1.isVisible());
      
      TextUtils.setUseFontMetricsGetStringBounds(false);
      DialTextAnnotation dialTextAnnotation2 = new DialTextAnnotation(";3_.^N");
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation2);
      assertEquals(";3_.^N", dialTextAnnotation2.getLabel());
      assertTrue(dialTextAnnotation2.isVisible());
      assertEquals(0.3, dialTextAnnotation2.getRadius(), 0.01);
      assertTrue(dialTextAnnotation2.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation2.getAngle(), 0.01);
      
      boolean boolean0 = dialTextAnnotation0.equals(dialTextAnnotation2);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation0));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation0);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("extract", dialTextAnnotation0.getLabel());
      assertEquals(";3_.^N", dialTextAnnotation2.getLabel());
      assertTrue(dialTextAnnotation2.isVisible());
      assertEquals(0.3, dialTextAnnotation2.getRadius(), 0.01);
      assertTrue(dialTextAnnotation2.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation2.getAngle(), 0.01);
      assertFalse(boolean0);
      
      dialTextAnnotation2.setLabel(";3_.^N");
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation0));
      assertNotSame(dialTextAnnotation2, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation0);
      assertEquals(";3_.^N", dialTextAnnotation2.getLabel());
      assertTrue(dialTextAnnotation2.isVisible());
      assertEquals(0.3, dialTextAnnotation2.getRadius(), 0.01);
      assertTrue(dialTextAnnotation2.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation2.getAngle(), 0.01);
      
      dialTextAnnotation0.hashCode();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("extract", dialTextAnnotation0.getLabel());
      
      Color color0 = (Color)dialTextAnnotation0.getPaint();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(color0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("extract", dialTextAnnotation0.getLabel());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      
      dialTextAnnotation0.setRadius(658.39438829846);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(658.39438829846, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("extract", dialTextAnnotation0.getLabel());
      
      Color color1 = (Color)dialTextAnnotation2.getPaint();
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation0));
      assertNotNull(color1);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation0);
      assertSame(color1, color0);
      assertEquals(";3_.^N", dialTextAnnotation2.getLabel());
      assertTrue(dialTextAnnotation2.isVisible());
      assertEquals(0.3, dialTextAnnotation2.getRadius(), 0.01);
      assertTrue(dialTextAnnotation2.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation2.getAngle(), 0.01);
      assertEquals(0, color1.getBlue());
      assertEquals(0, color1.getGreen());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getRed());
      
      DialTextAnnotation dialTextAnnotation3 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation3.equals((Object)dialTextAnnotation2));
      assertFalse(dialTextAnnotation3.equals((Object)dialTextAnnotation1));
      assertTrue(dialTextAnnotation3.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation3);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation3, dialTextAnnotation2);
      assertNotSame(dialTextAnnotation3, dialTextAnnotation0);
      assertNotSame(dialTextAnnotation3, dialTextAnnotation1);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(658.39438829846, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("extract", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation3.isVisible());
      assertTrue(dialTextAnnotation3.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation3.getAngle(), 0.01);
      assertEquals(658.39438829846, dialTextAnnotation3.getRadius(), 0.01);
      assertEquals("extract", dialTextAnnotation3.getLabel());
      
      dialTextAnnotation2.setAngle(658.39438829846);
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation0));
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation3));
      assertNotSame(dialTextAnnotation2, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation0);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation3);
      assertEquals(";3_.^N", dialTextAnnotation2.getLabel());
      assertTrue(dialTextAnnotation2.isVisible());
      assertEquals(0.3, dialTextAnnotation2.getRadius(), 0.01);
      assertEquals(658.39438829846, dialTextAnnotation2.getAngle(), 0.01);
      assertTrue(dialTextAnnotation2.isClippedToWindow());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("");
      assertNotNull(dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      
      DialPlot dialPlot0 = new DialPlot();
      assertNotNull(dialPlot0);
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(dialPlot0.isNotify());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertTrue(dialPlot0.isOutlineVisible());
      assertFalse(dialPlot0.isSubplot());
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertNull(dialPlot0.getNoDataMessage());
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      dialTextAnnotation0.addChangeListener(dialPlot0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(dialPlot0.isNotify());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertTrue(dialPlot0.isOutlineVisible());
      assertFalse(dialPlot0.isSubplot());
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertNull(dialPlot0.getNoDataMessage());
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      DialTextAnnotation dialTextAnnotation1 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation1.getLabel());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      
      TextUtils.setUseFontMetricsGetStringBounds(true);
      String string0 = dialTextAnnotation0.getLabel();
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(string0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", string0);
      
      DialTextAnnotation dialTextAnnotation2 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertTrue(dialTextAnnotation2.equals((Object)dialTextAnnotation0));
      assertTrue(dialTextAnnotation2.equals((Object)dialTextAnnotation1));
      assertNotNull(dialTextAnnotation2);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation2.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation2.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation2.getLabel());
      assertTrue(dialTextAnnotation2.isVisible());
      assertEquals(0.3, dialTextAnnotation2.getRadius(), 0.01);
      
      boolean boolean0 = dialTextAnnotation0.equals(dialTextAnnotation2);
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertTrue(dialTextAnnotation2.equals((Object)dialTextAnnotation0));
      assertTrue(dialTextAnnotation2.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation2.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation2.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation2.getLabel());
      assertTrue(dialTextAnnotation2.isVisible());
      assertEquals(0.3, dialTextAnnotation2.getRadius(), 0.01);
      assertTrue(boolean0);
      
      String string1 = dialTextAnnotation0.getLabel();
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(string1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("");
      assertNotNull(dialTextAnnotation0);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      Color color0 = (Color)Axis.DEFAULT_AXIS_LINE_PAINT;
      assertNotNull(color0);
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      
      dialTextAnnotation0.setPaint(color0);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("F>M,");
      assertNotNull(dialTextAnnotation0);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("F>M,", dialTextAnnotation0.getLabel());
      
      double double0 = dialTextAnnotation0.getRadius();
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("F>M,", dialTextAnnotation0.getLabel());
      assertEquals(0.3, double0, 0.01);
      
      Font font0 = dialTextAnnotation0.getFont();
      assertNotNull(font0);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("F>M,", dialTextAnnotation0.getLabel());
      assertTrue(font0.isBold());
      assertEquals(1, font0.getStyle());
      assertEquals(14, font0.getSize());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertEquals("Dialog", font0.getName());
      
      int int0 = font0.canDisplayUpTo("BJey!");
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("F>M,", dialTextAnnotation0.getLabel());
      assertTrue(font0.isBold());
      assertEquals(1, font0.getStyle());
      assertEquals(14, font0.getSize());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertEquals("Dialog", font0.getName());
      assertEquals((-1), int0);
      
      boolean boolean0 = dialTextAnnotation0.equals(font0);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("F>M,", dialTextAnnotation0.getLabel());
      assertTrue(font0.isBold());
      assertEquals(1, font0.getStyle());
      assertEquals(14, font0.getSize());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertEquals("Dialog", font0.getName());
      assertFalse(boolean0);
      
      DialTextAnnotation dialTextAnnotation1 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("F>M,", dialTextAnnotation0.getLabel());
      assertEquals("F>M,", dialTextAnnotation1.getLabel());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertTrue(dialTextAnnotation1.isVisible());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("r;\";1sXva#j46Xy}");
      assertNotNull(dialTextAnnotation0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals("r;\";1sXva#j46Xy}", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      
      dialTextAnnotation0.hashCode();
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals("r;\";1sXva#j46Xy}", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        dialTextAnnotation0.setPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("[v#g");
      assertNotNull(dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("[v#g", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      
      DialPlot dialPlot0 = new DialPlot();
      assertNotNull(dialPlot0);
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(dialPlot0.isNotify());
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertNull(dialPlot0.getNoDataMessage());
      assertTrue(dialPlot0.isOutlineVisible());
      assertFalse(dialPlot0.isSubplot());
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      dialTextAnnotation0.removeChangeListener(dialPlot0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("[v#g", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(dialPlot0.isNotify());
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertNull(dialPlot0.getNoDataMessage());
      assertTrue(dialPlot0.isOutlineVisible());
      assertFalse(dialPlot0.isSubplot());
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      TextUtils.setDrawStringsWithFontAttributes(true);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Font) null).when(graphics2D0).getFont();
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      doReturn((FontRenderContext) null).when(graphics2D0).getFontRenderContext();
      Integer integer0 = (Integer)Plot.ZERO;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) integer0);
      assertNotNull(defaultValueDataset0);
      assertTrue(defaultValueDataset0.getNotify());
      
      DialPlot dialPlot1 = new DialPlot(defaultValueDataset0);
      assertTrue(dialPlot1.equals((Object)dialPlot0));
      assertNotNull(dialPlot1);
      assertTrue(defaultValueDataset0.getNotify());
      assertFalse(dialPlot1.isSubplot());
      assertTrue(dialPlot1.isOutlineVisible());
      assertEquals(0.5F, dialPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(dialPlot1.getNoDataMessage());
      assertEquals(15, dialPlot1.getBackgroundImageAlignment());
      assertFalse(dialPlot1.fetchElementHintingFlag());
      assertEquals(0.0, dialPlot1.getViewX(), 0.01);
      assertEquals(0.0, dialPlot1.getViewY(), 0.01);
      assertEquals(1.0F, dialPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0, dialPlot1.getViewWidth(), 0.01);
      assertEquals(1.0, dialPlot1.getViewHeight(), 0.01);
      assertEquals(1.0F, dialPlot1.getForegroundAlpha(), 0.01F);
      assertEquals("DialPlot", dialPlot1.getPlotType());
      assertTrue(dialPlot1.isNotify());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      DatasetGroup datasetGroup0 = defaultValueDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      ArcDialFrame arcDialFrame0 = (ArcDialFrame)dialPlot1.getDialFrame();
      assertTrue(dialPlot1.equals((Object)dialPlot0));
      assertNotNull(arcDialFrame0);
      assertNotSame(dialPlot1, dialPlot0);
      assertTrue(defaultValueDataset0.getNotify());
      assertFalse(dialPlot1.isSubplot());
      assertTrue(dialPlot1.isOutlineVisible());
      assertEquals(0.5F, dialPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(dialPlot1.getNoDataMessage());
      assertEquals(15, dialPlot1.getBackgroundImageAlignment());
      assertFalse(dialPlot1.fetchElementHintingFlag());
      assertEquals(0.0, dialPlot1.getViewX(), 0.01);
      assertEquals(0.0, dialPlot1.getViewY(), 0.01);
      assertEquals(1.0F, dialPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0, dialPlot1.getViewWidth(), 0.01);
      assertEquals(1.0, dialPlot1.getViewHeight(), 0.01);
      assertEquals(1.0F, dialPlot1.getForegroundAlpha(), 0.01F);
      assertEquals("DialPlot", dialPlot1.getPlotType());
      assertTrue(dialPlot1.isNotify());
      assertFalse(arcDialFrame0.isClippedToWindow());
      assertEquals(0.75, arcDialFrame0.getOuterRadius(), 0.01);
      assertTrue(arcDialFrame0.isVisible());
      assertEquals(0.25, arcDialFrame0.getInnerRadius(), 0.01);
      assertEquals(180.0, arcDialFrame0.getExtent(), 0.01);
      assertEquals(0.0, arcDialFrame0.getStartAngle(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      dialPlot1.setDialFrame(arcDialFrame0);
      assertTrue(dialPlot1.equals((Object)dialPlot0));
      assertNotSame(dialPlot1, dialPlot0);
      assertTrue(defaultValueDataset0.getNotify());
      assertFalse(dialPlot1.isSubplot());
      assertTrue(dialPlot1.isOutlineVisible());
      assertEquals(0.5F, dialPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(dialPlot1.getNoDataMessage());
      assertEquals(15, dialPlot1.getBackgroundImageAlignment());
      assertFalse(dialPlot1.fetchElementHintingFlag());
      assertEquals(0.0, dialPlot1.getViewX(), 0.01);
      assertEquals(0.0, dialPlot1.getViewY(), 0.01);
      assertEquals(1.0F, dialPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0, dialPlot1.getViewWidth(), 0.01);
      assertEquals(1.0, dialPlot1.getViewHeight(), 0.01);
      assertEquals(1.0F, dialPlot1.getForegroundAlpha(), 0.01F);
      assertEquals("DialPlot", dialPlot1.getPlotType());
      assertTrue(dialPlot1.isNotify());
      assertFalse(arcDialFrame0.isClippedToWindow());
      assertEquals(0.75, arcDialFrame0.getOuterRadius(), 0.01);
      assertTrue(arcDialFrame0.isVisible());
      assertEquals(0.25, arcDialFrame0.getInnerRadius(), 0.01);
      assertEquals(180.0, arcDialFrame0.getExtent(), 0.01);
      assertEquals(0.0, arcDialFrame0.getStartAngle(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      defaultValueDataset0.removeChangeListener(dialPlot1);
      assertTrue(dialPlot1.equals((Object)dialPlot0));
      assertNotSame(dialPlot1, dialPlot0);
      assertTrue(defaultValueDataset0.getNotify());
      assertFalse(dialPlot1.isSubplot());
      assertTrue(dialPlot1.isOutlineVisible());
      assertEquals(0.5F, dialPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(dialPlot1.getNoDataMessage());
      assertEquals(15, dialPlot1.getBackgroundImageAlignment());
      assertFalse(dialPlot1.fetchElementHintingFlag());
      assertEquals(0.0, dialPlot1.getViewX(), 0.01);
      assertEquals(0.0, dialPlot1.getViewY(), 0.01);
      assertEquals(1.0F, dialPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0, dialPlot1.getViewWidth(), 0.01);
      assertEquals(1.0, dialPlot1.getViewHeight(), 0.01);
      assertEquals(1.0F, dialPlot1.getForegroundAlpha(), 0.01F);
      assertEquals("DialPlot", dialPlot1.getPlotType());
      assertTrue(dialPlot1.isNotify());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      defaultValueDataset0.setGroup(datasetGroup0);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      // Undeclared exception!
      try { 
        dialTextAnnotation0.draw(graphics2D0, dialPlot1, rectangle2D_Float0, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("font");
      assertNotNull(dialTextAnnotation0);
      assertEquals("font", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      
      dialTextAnnotation0.setAngle(4486.7089);
      assertEquals("font", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(4486.7089, dialTextAnnotation0.getAngle(), 0.01);
      
      dialTextAnnotation0.hashCode();
      assertEquals("font", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(4486.7089, dialTextAnnotation0.getAngle(), 0.01);
      
      DialPlot dialPlot0 = new DialPlot();
      assertNotNull(dialPlot0);
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(dialPlot0.getNoDataMessage());
      assertTrue(dialPlot0.isNotify());
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertFalse(dialPlot0.isSubplot());
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(10, 1.0F, 10, 0.0F);
      assertNotNull(rectangle2D_Float0);
      assertEquals(1.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(15.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(20.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(10.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(10.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(1.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(10.0F, rectangle2D_Float0.x, 0.01F);
      
      // Undeclared exception!
      try { 
        dialTextAnnotation0.draw((Graphics2D) null, dialPlot0, rectangle2D_Float0, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.dial.DialTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("...");
      assertNotNull(dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("...", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      
      double double0 = dialTextAnnotation0.getRadius();
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("...", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("]8SLJ_rhiCnrC7S3IN");
      assertNotNull(dialTextAnnotation0);
      assertEquals("]8SLJ_rhiCnrC7S3IN", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      
      Color color0 = (Color)dialTextAnnotation0.getPaint();
      assertNotNull(color0);
      assertEquals("]8SLJ_rhiCnrC7S3IN", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      
      double double0 = dialTextAnnotation0.getAngle();
      assertEquals("]8SLJ_rhiCnrC7S3IN", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("paint");
      assertNotNull(dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("paint", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      
      String string0 = dialTextAnnotation0.getLabel();
      assertNotNull(string0);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("paint", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("paint", string0);
      
      TextAnchor textAnchor0 = XYTextAnnotation.DEFAULT_TEXT_ANCHOR;
      assertNotNull(textAnchor0);
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isLeft());
      
      dialTextAnnotation0.setAnchor(textAnchor0);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("paint", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isLeft());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("8C4eIQT");
      assertNotNull(dialTextAnnotation0);
      assertEquals("8C4eIQT", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      
      DialPlot dialPlot0 = new DialPlot();
      assertNotNull(dialPlot0);
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertTrue(dialPlot0.isOutlineVisible());
      assertNull(dialPlot0.getNoDataMessage());
      assertTrue(dialPlot0.isNotify());
      assertFalse(dialPlot0.isSubplot());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      dialTextAnnotation0.removeChangeListener(dialPlot0);
      assertEquals("8C4eIQT", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertTrue(dialPlot0.isOutlineVisible());
      assertNull(dialPlot0.getNoDataMessage());
      assertTrue(dialPlot0.isNotify());
      assertFalse(dialPlot0.isSubplot());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      DialTextAnnotation dialTextAnnotation1 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertEquals("8C4eIQT", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("8C4eIQT", dialTextAnnotation1.getLabel());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertTrue(dialTextAnnotation1.isVisible());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = dialTextAnnotation0.equals("8C4eIQT");
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals("8C4eIQT", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertFalse(boolean0);
      
      dialTextAnnotation0.hashCode();
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals("8C4eIQT", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("_&:M'E@Q5v:G)0l@q");
      assertNotNull(dialTextAnnotation0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("_&:M'E@Q5v:G)0l@q", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      DialPlot dialPlot0 = new DialPlot();
      assertNotNull(dialPlot0);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertNull(dialPlot0.getNoDataMessage());
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertTrue(dialPlot0.isNotify());
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(dialPlot0.isSubplot());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-838.729911001777));
      assertNotNull(candlestickRenderer0);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getDefaultCreateEntities());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals((-838.729911001777), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDefaultSeriesVisible());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      
      Color color0 = (Color)candlestickRenderer0.lookupSeriesOutlinePaint(10);
      assertNotNull(color0);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getDefaultCreateEntities());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals((-838.729911001777), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDefaultSeriesVisible());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      
      XYPlot xYPlot0 = candlestickRenderer0.getPlot();
      assertNull(xYPlot0);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getDefaultCreateEntities());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals((-838.729911001777), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDefaultSeriesVisible());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      
      dialPlot0.setParent((Plot) null);
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertNull(dialPlot0.getNoDataMessage());
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertTrue(dialPlot0.isNotify());
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(dialPlot0.isSubplot());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      dialTextAnnotation0.addChangeListener(dialPlot0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("_&:M'E@Q5v:G)0l@q", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(1.0, dialPlot0.getViewWidth(), 0.01);
      assertEquals(0.5F, dialPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("DialPlot", dialPlot0.getPlotType());
      assertEquals(15, dialPlot0.getBackgroundImageAlignment());
      assertNull(dialPlot0.getNoDataMessage());
      assertEquals(1.0, dialPlot0.getViewHeight(), 0.01);
      assertTrue(dialPlot0.isOutlineVisible());
      assertEquals(1.0F, dialPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(dialPlot0.fetchElementHintingFlag());
      assertEquals(0.0, dialPlot0.getViewX(), 0.01);
      assertEquals(0.0, dialPlot0.getViewY(), 0.01);
      assertTrue(dialPlot0.isNotify());
      assertEquals(1.0F, dialPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(dialPlot0.isSubplot());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Color color1 = (Color)dialTextAnnotation0.getPaint();
      assertFalse(color1.equals((Object)color0));
      assertNotNull(color1);
      assertNotSame(color1, color0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("_&:M'E@Q5v:G)0l@q", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0, color1.getRed());
      assertEquals(1, color1.getTransparency());
      assertEquals(0, color1.getGreen());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getBlue());
      
      dialTextAnnotation0.setVisible(true);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("_&:M'E@Q5v:G)0l@q", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      dialTextAnnotation0.setVisible(false);
      assertFalse(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("_&:M'E@Q5v:G)0l@q", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      dialTextAnnotation0.setLabel("_&:M'E@Q5v:G)0l@q");
      assertFalse(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("_&:M'E@Q5v:G)0l@q", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      System.setCurrentTimeMillis(0L);
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      System.setCurrentTimeMillis(67L);
      DialTextAnnotation dialTextAnnotation1 = new DialTextAnnotation("extract");
      assertFalse(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation1);
      assertEquals("extract", dialTextAnnotation1.getLabel());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      
      boolean boolean0 = dialTextAnnotation0.equals(dialTextAnnotation1);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertFalse(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("_&:M'E@Q5v:G)0l@q", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals("extract", dialTextAnnotation1.getLabel());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertFalse(boolean0);
      
      dialTextAnnotation0.hashCode();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertFalse(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("_&:M'E@Q5v:G)0l@q", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      String string0 = dialTextAnnotation1.getLabel();
      assertFalse(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(string0);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertEquals("extract", dialTextAnnotation1.getLabel());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertEquals("extract", string0);
      
      dialTextAnnotation1.setVisible(false);
      assertFalse(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertEquals("extract", dialTextAnnotation1.getLabel());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertFalse(dialTextAnnotation1.isVisible());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      
      Font font0 = dialTextAnnotation0.getFont();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(font0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertFalse(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("_&:M'E@Q5v:G)0l@q", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("Dialog", font0.getName());
      assertTrue(font0.isBold());
      assertEquals(14, font0.getSize());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isPlain());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      
      String string1 = dialTextAnnotation0.getLabel();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertFalse(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("_&:M'E@Q5v:G)0l@q", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals("_&:M'E@Q5v:G)0l@q", string1);
      
      boolean boolean1 = dialTextAnnotation1.isClippedToWindow();
      assertFalse(boolean1 == boolean0);
      assertFalse(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertEquals("extract", dialTextAnnotation1.getLabel());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertFalse(dialTextAnnotation1.isVisible());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertTrue(boolean1);
      
      String string2 = dialTextAnnotation1.getLabel();
      assertFalse(string2.equals((Object)string1));
      assertFalse(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(string2);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertEquals("extract", dialTextAnnotation1.getLabel());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertFalse(dialTextAnnotation1.isVisible());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertEquals("extract", string2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(4385, 2146653557, byteArray0, 10, false, 2146653557);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation(",bottom=");
      assertNotNull(dialTextAnnotation0);
      assertEquals(",bottom=", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      Font font0 = dialTextAnnotation0.getFont();
      assertNotNull(font0);
      assertEquals(",bottom=", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertFalse(font0.isItalic());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isBold());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(14, font0.getSize());
      
      dialTextAnnotation0.setAngle((-206.28322999));
      assertEquals(",bottom=", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-206.28322999), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      DialTextAnnotation dialTextAnnotation1 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertEquals(",bottom=", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-206.28322999), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals(",bottom=", dialTextAnnotation1.getLabel());
      assertEquals((-206.28322999), dialTextAnnotation1.getAngle(), 0.01);
      
      dialTextAnnotation0.setFont(font0);
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(",bottom=", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-206.28322999), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertFalse(font0.isItalic());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isBold());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(14, font0.getSize());
      
      dialTextAnnotation1.setAngle((-206.28322999));
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertEquals(",bottom=", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-206.28322999), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals(",bottom=", dialTextAnnotation1.getLabel());
      assertEquals((-206.28322999), dialTextAnnotation1.getAngle(), 0.01);
      
      TextAnchor textAnchor0 = dialTextAnnotation0.getAnchor();
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(textAnchor0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(",bottom=", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-206.28322999), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHalfAscent());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isRight());
      
      Color color0 = (Color)dialTextAnnotation0.getPaint();
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(color0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(",bottom=", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-206.28322999), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      
      dialTextAnnotation0.removeChangeListener((DialLayerChangeListener) null);
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(",bottom=", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-206.28322999), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      dialTextAnnotation0.hashCode();
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(",bottom=", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-206.28322999), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      Color color1 = (Color)dialTextAnnotation0.getPaint();
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(color1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertSame(color1, color0);
      assertEquals(",bottom=", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-206.28322999), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getGreen());
      assertEquals(0, color1.getBlue());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      
      dialTextAnnotation0.setAngle(2854);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(",bottom=", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(2854.0, dialTextAnnotation0.getAngle(), 0.01);
      
      TextAnchor textAnchor1 = dialTextAnnotation1.getAnchor();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(textAnchor1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertSame(textAnchor1, textAnchor0);
      assertEquals(",bottom=", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(2854.0, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals(",bottom=", dialTextAnnotation1.getLabel());
      assertEquals((-206.28322999), dialTextAnnotation1.getAngle(), 0.01);
      assertFalse(textAnchor1.isBaseline());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isLeft());
      assertFalse(textAnchor1.isRight());
      assertTrue(textAnchor1.isTop());
      assertFalse(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isBottom());
      
      Font font1 = dialTextAnnotation0.getFont();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(font1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertSame(font1, font0);
      assertEquals(",bottom=", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(2854.0, dialTextAnnotation0.getAngle(), 0.01);
      assertFalse(font1.hasUniformLineMetrics());
      assertFalse(font1.isItalic());
      assertTrue(font1.isBold());
      assertFalse(font1.isPlain());
      assertEquals("Dialog", font1.getName());
      assertFalse(font1.hasLayoutAttributes());
      assertFalse(font1.isTransformed());
      assertEquals(1, font1.getStyle());
      assertEquals(14.0F, font1.getSize2D(), 0.01F);
      assertEquals(14, font1.getSize());
      
      // Undeclared exception!
      try { 
        dialTextAnnotation0.setRadius((-206.28322999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'radius' cannot be negative.
         //
         verifyException("org.jfree.chart.plot.dial.DialTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("ig&L6bI.:");
      assertNotNull(dialTextAnnotation0);
      assertEquals("ig&L6bI.:", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      
      Font font0 = dialTextAnnotation0.getFont();
      assertNotNull(font0);
      assertEquals("ig&L6bI.:", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(14, font0.getSize());
      assertEquals("Dialog", font0.getName());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      
      dialTextAnnotation0.setFont(font0);
      assertEquals("ig&L6bI.:", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(14, font0.getSize());
      assertEquals("Dialog", font0.getName());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      
      boolean boolean0 = dialTextAnnotation0.equals("ig&L6bI.:");
      assertEquals("ig&L6bI.:", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertFalse(boolean0);
      
      dialTextAnnotation0.setAngle((-1804.66765052947));
      assertEquals((-1804.66765052947), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("ig&L6bI.:", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      
      dialTextAnnotation0.setAngle((-3470.65));
      assertEquals("ig&L6bI.:", dialTextAnnotation0.getLabel());
      assertEquals((-3470.65), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("J6Xt!2");
      assertNotNull(dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("J6Xt!2", dialTextAnnotation0.getLabel());
      
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("J6Xt!2", "J6Xt!2", 0.0, 0.0);
      assertNotNull(categoryPointerAnnotation0);
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals("J6Xt!2", categoryPointerAnnotation0.getText());
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      
      dialTextAnnotation0.setAnchor(categoryPointerAnnotation0.DEFAULT_ROTATION_ANCHOR);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("J6Xt!2", dialTextAnnotation0.getLabel());
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals("J6Xt!2", categoryPointerAnnotation0.getText());
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(CategoryAnchor.MIDDLE, categoryPointerAnnotation0.getCategoryAnchor());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
      assertTrue(categoryPointerAnnotation0.getNotify());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(5.0, CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, CategoryPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      
      System.setCurrentTimeMillis(196L);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("C");
      assertNotNull(dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      
      DialTextAnnotation dialTextAnnotation1 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertEquals("C", dialTextAnnotation1.getLabel());
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      
      boolean boolean0 = dialTextAnnotation0.equals(dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertEquals("C", dialTextAnnotation1.getLabel());
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertTrue(boolean0);
      
      dialTextAnnotation0.setAngle(0.0);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      TextListener textListener0 = AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      assertNull(textListener0);
      
      TextListener textListener1 = AWTEventMulticaster.remove((TextListener) null, (TextListener) null);
      assertNull(textListener1);
      
      boolean boolean1 = dialTextAnnotation0.hasListener((EventListener) null);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertFalse(boolean1);
      
      Font font0 = dialTextAnnotation0.getFont();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(font0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertTrue(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertEquals(14, font0.getSize());
      assertEquals("Dialog", font0.getName());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      
      double double0 = dialTextAnnotation0.getAngle();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      dialTextAnnotation0.setRadius(0.0);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      TextAnchor textAnchor0 = dialTextAnnotation0.getAnchor();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(textAnchor0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isTop());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isLeft());
      
      double double2 = dialTextAnnotation0.getRadius();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertEquals(double2, double0, 0.01);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, double2, 0.01);
      
      Font font1 = dialTextAnnotation0.getFont();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(font1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertSame(font1, font0);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertFalse(font1.isItalic());
      assertEquals(1, font1.getStyle());
      assertEquals(14, font1.getSize());
      assertTrue(font1.isBold());
      assertEquals(14.0F, font1.getSize2D(), 0.01F);
      assertFalse(font1.hasUniformLineMetrics());
      assertFalse(font1.hasLayoutAttributes());
      assertEquals("Dialog", font1.getName());
      assertFalse(font1.isPlain());
      assertFalse(font1.isTransformed());
      
      dialTextAnnotation0.setRadius(0.0);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      double double3 = dialTextAnnotation0.getRadius();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, double3, 0.01);
      
      dialTextAnnotation0.setRadius(0.0);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("C");
      assertNotNull(dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      
      DialTextAnnotation dialTextAnnotation1 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("C", dialTextAnnotation1.getLabel());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      
      boolean boolean0 = dialTextAnnotation0.equals(dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("C", dialTextAnnotation1.getLabel());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertTrue(boolean0);
      
      dialTextAnnotation0.setAngle(0.0);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      
      TextListener textListener0 = AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      assertNull(textListener0);
      
      TextListener textListener1 = AWTEventMulticaster.remove((TextListener) null, (TextListener) null);
      assertNull(textListener1);
      
      boolean boolean1 = dialTextAnnotation0.hasListener((EventListener) null);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertFalse(boolean1);
      
      Font font0 = dialTextAnnotation0.getFont();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(font0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertFalse(font0.isItalic());
      assertEquals(14, font0.getSize());
      assertEquals(1, font0.getStyle());
      assertTrue(font0.isBold());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isPlain());
      assertEquals("Dialog", font0.getName());
      
      double double0 = dialTextAnnotation0.getAngle();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = dialTextAnnotation0.getRadius();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, double1, 0.01);
      
      dialTextAnnotation0.setRadius(0.0);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      
      TextAnchor textAnchor0 = dialTextAnnotation0.getAnchor();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(textAnchor0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isLeft());
      
      double double2 = dialTextAnnotation0.getRadius();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, double2, 0.01);
      
      Font font1 = dialTextAnnotation0.getFont();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(font1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertSame(font1, font0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(1, font1.getStyle());
      assertEquals(14, font1.getSize());
      assertFalse(font1.isTransformed());
      assertEquals(14.0F, font1.getSize2D(), 0.01F);
      assertFalse(font1.hasLayoutAttributes());
      assertFalse(font1.hasUniformLineMetrics());
      assertFalse(font1.isPlain());
      assertEquals("Dialog", font1.getName());
      assertFalse(font1.isItalic());
      assertTrue(font1.isBold());
      
      double double3 = dialTextAnnotation0.getRadius();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, double3, 0.01);
      
      dialTextAnnotation0.setRadius(0.0);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      
      String string0 = dialTextAnnotation0.getLabel();
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(string0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("C", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("C", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("C");
      DialTextAnnotation dialTextAnnotation1 = (DialTextAnnotation)dialTextAnnotation0.clone();
      Font font0 = SpiderWebPlot.DEFAULT_LABEL_FONT;
      dialTextAnnotation1.setFont(font0);
      dialTextAnnotation0.equals(dialTextAnnotation1);
      dialTextAnnotation0.setAngle(0.0);
      AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      AWTEventMulticaster.remove((TextListener) null, (TextListener) null);
      dialTextAnnotation0.hasListener((EventListener) null);
      dialTextAnnotation0.getFont();
      dialTextAnnotation0.getAngle();
      dialTextAnnotation0.getRadius();
      dialTextAnnotation0.setRadius(0.0);
      dialTextAnnotation0.getAnchor();
      dialTextAnnotation0.getRadius();
      dialTextAnnotation0.getFont();
      dialTextAnnotation0.setRadius(0.0);
      dialTextAnnotation0.getRadius();
      dialTextAnnotation0.setRadius(0.0);
      System.setCurrentTimeMillis(768L);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("font");
      dialTextAnnotation0.setAngle(4486.7089);
      dialTextAnnotation0.hashCode();
      DialPlot dialPlot0 = new DialPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(10, 1.0F, 10, 10);
      // Undeclared exception!
      try { 
        dialTextAnnotation0.draw((Graphics2D) null, dialPlot0, rectangle2D_Float0, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.dial.DialTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "?C621U[Y>X^*}`b";
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("?C621U[Y>X^*}`b");
      dialTextAnnotation0.clone();
      TextAnchor textAnchor0 = TextAnchor.BASELINE_LEFT;
      dialTextAnnotation0.setAnchor(textAnchor0);
      dialTextAnnotation0.setLabel("?C621U[Y>X^*}`b");
      dialTextAnnotation0.hashCode();
      dialTextAnnotation0.getAnchor();
      dialTextAnnotation0.hashCode();
      dialTextAnnotation0.setRadius(1872.845);
      dialTextAnnotation0.isClippedToWindow();
      dialTextAnnotation0.getAnchor();
      dialTextAnnotation0.clone();
      // Undeclared exception!
      try { 
        dialTextAnnotation0.setPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
