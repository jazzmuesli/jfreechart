/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:45:27 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Container;
import java.awt.Paint;
import java.time.Instant;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JColorChooser;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.plot.PieLabelDistributor;
import org.jfree.chart.plot.PieLabelRecord;
import org.jfree.chart.text.TextBlock;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class PieLabelDistributor_ESTest extends PieLabelDistributor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor((-177));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.adjustDownwards((-177), 604.583699110638);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      MockDate mockDate0 = new MockDate((-1845), (-1845), 382, (-1845), 1);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
      
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      assertEquals("Tue Jan 30 03:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals(397L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals((-65257477140000L), quarter0.getLastMillisecond());
      assertEquals(99, quarter0.getYearValue());
      assertEquals((-65257477140000L), quarter0.getFirstMillisecond());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      TextBlock textBlock0 = new TextBlock();
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertNotNull(textBlock0);
      
      boolean boolean0 = timeZone0.observesDaylightTime();
      assertEquals("GMT", timeZone0.getID());
      assertFalse(boolean0);
      
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      boolean boolean1 = textBox0.equals(quarter0);
      assertTrue(boolean1 == boolean0);
      assertEquals("Tue Jan 30 03:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals(397L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals((-65257477140000L), quarter0.getLastMillisecond());
      assertEquals(99, quarter0.getYearValue());
      assertEquals((-65257477140000L), quarter0.getFirstMillisecond());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertFalse(boolean1);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord(quarter0, 1.5, (-1845), textBox0, 4, 976.18415513763, 604.583699110638);
      assertEquals("Tue Jan 30 03:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals(397L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals((-65257477140000L), quarter0.getLastMillisecond());
      assertEquals(99, quarter0.getYearValue());
      assertEquals((-65257477140000L), quarter0.getFirstMillisecond());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals((-1847.0), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(976.18415513763, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals((-1843.0), pieLabelRecord0.getUpperY(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getAngle(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getBaseY(), 0.01);
      assertNotNull(pieLabelRecord0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      assertEquals("Tue Jan 30 03:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals(397L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals((-65257477140000L), quarter0.getLastMillisecond());
      assertEquals(99, quarter0.getYearValue());
      assertEquals((-65257477140000L), quarter0.getFirstMillisecond());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals((-1847.0), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(976.18415513763, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals((-1843.0), pieLabelRecord0.getUpperY(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getAngle(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      PieLabelRecord pieLabelRecord1 = new PieLabelRecord(quarter0, 382, 1, textBox0, 604.583699110638, 1, 1308.735483);
      assertFalse(pieLabelRecord1.equals((Object)pieLabelRecord0));
      assertEquals("Tue Jan 30 03:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals(397L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals((-65257477140000L), quarter0.getLastMillisecond());
      assertEquals(99, quarter0.getYearValue());
      assertEquals((-65257477140000L), quarter0.getFirstMillisecond());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1308.735483, pieLabelRecord1.getLinkPercent(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getBaseY(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord1.getUpperY(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord1.getLowerY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord1.getLabelHeight(), 0.01);
      assertEquals(382.0, pieLabelRecord1.getAngle(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getAllocatedY(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getGap(), 0.01);
      assertNotNull(pieLabelRecord1);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord1);
      assertFalse(pieLabelRecord1.equals((Object)pieLabelRecord0));
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertEquals("Tue Jan 30 03:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals(397L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals((-65257477140000L), quarter0.getLastMillisecond());
      assertEquals(99, quarter0.getYearValue());
      assertEquals((-65257477140000L), quarter0.getFirstMillisecond());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1308.735483, pieLabelRecord1.getLinkPercent(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getBaseY(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord1.getUpperY(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord1.getLowerY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord1.getLabelHeight(), 0.01);
      assertEquals(382.0, pieLabelRecord1.getAngle(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getAllocatedY(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getGap(), 0.01);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotSame(pieLabelRecord1, pieLabelRecord0);
      
      PieLabelRecord pieLabelRecord2 = pieLabelDistributor0.getPieLabelRecord(0);
      assertFalse(pieLabelRecord2.equals((Object)pieLabelRecord1));
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertEquals(604.583699110638, pieLabelRecord2.getLinkPercent(), 0.01);
      assertEquals((-1847.0), pieLabelRecord2.getLowerY(), 0.01);
      assertEquals(4.0, pieLabelRecord2.getLabelHeight(), 0.01);
      assertEquals(976.18415513763, pieLabelRecord2.getGap(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getAllocatedY(), 0.01);
      assertEquals(1.5, pieLabelRecord2.getAngle(), 0.01);
      assertEquals((-1843.0), pieLabelRecord2.getUpperY(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getBaseY(), 0.01);
      assertNotNull(pieLabelRecord2);
      assertNotSame(pieLabelRecord2, pieLabelRecord1);
      assertSame(pieLabelRecord2, pieLabelRecord0);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord2);
      assertFalse(pieLabelRecord2.equals((Object)pieLabelRecord1));
      assertEquals(3, pieLabelDistributor0.getItemCount());
      assertEquals(604.583699110638, pieLabelRecord2.getLinkPercent(), 0.01);
      assertEquals((-1847.0), pieLabelRecord2.getLowerY(), 0.01);
      assertEquals(4.0, pieLabelRecord2.getLabelHeight(), 0.01);
      assertEquals(976.18415513763, pieLabelRecord2.getGap(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getAllocatedY(), 0.01);
      assertEquals(1.5, pieLabelRecord2.getAngle(), 0.01);
      assertEquals((-1843.0), pieLabelRecord2.getUpperY(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getBaseY(), 0.01);
      assertNotSame(pieLabelRecord2, pieLabelRecord1);
      assertSame(pieLabelRecord2, pieLabelRecord0);
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustDownwards(1.5, 1);
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.spreadEvenly(976.18415513763, 2647.39089676);
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.spreadEvenly((-601.6276688259929), 604.583699110638);
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.spreadEvenly((-1.7976931348623157E308), 1.5);
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      System.setCurrentTimeMillis((-3157L));
      pieLabelDistributor0.adjustDownwards(1, (-534.41231131));
      assertEquals(3, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor((-177));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.adjustDownwards((-177), 604.583699110638);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      MockDate mockDate0 = new MockDate((-1845), (-1845), 382, (-1), (-3));
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
      
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      assertEquals("Mon Apr 16 22:57:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals(99, quarter0.getYearValue());
      assertEquals((-65250838980000L), quarter0.getLastMillisecond());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals((-65250838980000L), quarter0.getFirstMillisecond());
      assertEquals(2, quarter0.getQuarter());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      TextBlock textBlock0 = new TextBlock();
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertNotNull(textBlock0);
      
      boolean boolean0 = timeZone0.observesDaylightTime();
      assertEquals("GMT", timeZone0.getID());
      assertFalse(boolean0);
      
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      Color color0 = Color.getColor("q\"!dtO;D");
      assertNull(color0);
      
      textBox0.setShadowPaint((Paint) null);
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      boolean boolean1 = textBox0.equals(quarter0);
      assertTrue(boolean1 == boolean0);
      assertEquals("Mon Apr 16 22:57:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals(99, quarter0.getYearValue());
      assertEquals((-65250838980000L), quarter0.getLastMillisecond());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals((-65250838980000L), quarter0.getFirstMillisecond());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertFalse(boolean1);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord(quarter0, 4, (-1845), textBox0, 4, 976.18415513763, 604.583699110638);
      assertEquals("Mon Apr 16 22:57:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals(99, quarter0.getYearValue());
      assertEquals((-65250838980000L), quarter0.getLastMillisecond());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals((-65250838980000L), quarter0.getFirstMillisecond());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(976.18415513763, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals((-1843.0), pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals((-1847.0), pieLabelRecord0.getLowerY(), 0.01);
      assertNotNull(pieLabelRecord0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      assertEquals("Mon Apr 16 22:57:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals(99, quarter0.getYearValue());
      assertEquals((-65250838980000L), quarter0.getLastMillisecond());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals((-65250838980000L), quarter0.getFirstMillisecond());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(976.18415513763, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals((-1843.0), pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals((-1847.0), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      PieLabelRecord pieLabelRecord1 = new PieLabelRecord(quarter0, 382, (-3), textBox0, 604.583699110638, (-1845), 1308.735483);
      assertFalse(pieLabelRecord1.equals((Object)pieLabelRecord0));
      assertEquals("Mon Apr 16 22:57:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals(99, quarter0.getYearValue());
      assertEquals((-65250838980000L), quarter0.getLastMillisecond());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals((-65250838980000L), quarter0.getFirstMillisecond());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals((-305.291849555319), pieLabelRecord1.getLowerY(), 0.01);
      assertEquals((-3.0), pieLabelRecord1.getBaseY(), 0.01);
      assertEquals((-3.0), pieLabelRecord1.getAllocatedY(), 0.01);
      assertEquals(382.0, pieLabelRecord1.getAngle(), 0.01);
      assertEquals(299.291849555319, pieLabelRecord1.getUpperY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord1.getLabelHeight(), 0.01);
      assertEquals(1308.735483, pieLabelRecord1.getLinkPercent(), 0.01);
      assertEquals((-1845.0), pieLabelRecord1.getGap(), 0.01);
      assertNotNull(pieLabelRecord1);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord1);
      assertFalse(pieLabelRecord1.equals((Object)pieLabelRecord0));
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertEquals("Mon Apr 16 22:57:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals(99, quarter0.getYearValue());
      assertEquals((-65250838980000L), quarter0.getLastMillisecond());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals((-65250838980000L), quarter0.getFirstMillisecond());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals((-305.291849555319), pieLabelRecord1.getLowerY(), 0.01);
      assertEquals((-3.0), pieLabelRecord1.getBaseY(), 0.01);
      assertEquals((-3.0), pieLabelRecord1.getAllocatedY(), 0.01);
      assertEquals(382.0, pieLabelRecord1.getAngle(), 0.01);
      assertEquals(299.291849555319, pieLabelRecord1.getUpperY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord1.getLabelHeight(), 0.01);
      assertEquals(1308.735483, pieLabelRecord1.getLinkPercent(), 0.01);
      assertEquals((-1845.0), pieLabelRecord1.getGap(), 0.01);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotSame(pieLabelRecord1, pieLabelRecord0);
      
      PieLabelRecord pieLabelRecord2 = pieLabelDistributor0.getPieLabelRecord(0);
      assertFalse(pieLabelRecord2.equals((Object)pieLabelRecord1));
      assertEquals(976.18415513763, pieLabelRecord2.getGap(), 0.01);
      assertEquals((-1843.0), pieLabelRecord2.getUpperY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord2.getLinkPercent(), 0.01);
      assertEquals(4.0, pieLabelRecord2.getLabelHeight(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getAllocatedY(), 0.01);
      assertEquals((-1847.0), pieLabelRecord2.getLowerY(), 0.01);
      assertEquals(4.0, pieLabelRecord2.getAngle(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getBaseY(), 0.01);
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelRecord2);
      assertSame(pieLabelRecord2, pieLabelRecord0);
      assertNotSame(pieLabelRecord2, pieLabelRecord1);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord2);
      assertFalse(pieLabelRecord2.equals((Object)pieLabelRecord1));
      assertEquals(976.18415513763, pieLabelRecord2.getGap(), 0.01);
      assertEquals((-1843.0), pieLabelRecord2.getUpperY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord2.getLinkPercent(), 0.01);
      assertEquals(4.0, pieLabelRecord2.getLabelHeight(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getAllocatedY(), 0.01);
      assertEquals((-1847.0), pieLabelRecord2.getLowerY(), 0.01);
      assertEquals(4.0, pieLabelRecord2.getAngle(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getBaseY(), 0.01);
      assertEquals(3, pieLabelDistributor0.getItemCount());
      assertSame(pieLabelRecord2, pieLabelRecord0);
      assertNotSame(pieLabelRecord2, pieLabelRecord1);
      
      pieLabelDistributor0.distributeLabels((-177), (-177));
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      String string0 = pieLabelDistributor0.toString();
      assertEquals(3, pieLabelDistributor0.getItemCount());
      assertNotNull(string0);
      
      pieLabelDistributor0.adjustDownwards(1, 1);
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustUpwards(Double.POSITIVE_INFINITY, (-1764.9));
      assertEquals(3, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor((-487));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.labels = null;
      // Undeclared exception!
      try { 
        pieLabelDistributor0.sort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor((-177));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.adjustDownwards((-177), 604.583699110638);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      MockDate mockDate0 = new MockDate((-1845), (-1845), 382, (-1), 1);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      assertEquals("Mon Apr 16 23:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals((-65250838740000L), quarter0.getLastMillisecond());
      assertEquals((-65250838740000L), quarter0.getFirstMillisecond());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals(99, quarter0.getYearValue());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      TextBlock textBlock0 = new TextBlock();
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertNotNull(textBlock0);
      
      boolean boolean0 = timeZone0.observesDaylightTime();
      assertEquals("GMT", timeZone0.getID());
      assertFalse(boolean0);
      
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      Color color0 = Color.getColor("q\"!dtO;D");
      assertNull(color0);
      
      textBox0.setShadowPaint((Paint) null);
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      boolean boolean1 = textBox0.equals(quarter0);
      assertTrue(boolean1 == boolean0);
      assertEquals("Mon Apr 16 23:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals((-65250838740000L), quarter0.getLastMillisecond());
      assertEquals((-65250838740000L), quarter0.getFirstMillisecond());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertFalse(boolean1);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord(quarter0, 1.5, (-1845), textBox0, 4, 976.18415513763, 604.583699110638);
      assertEquals("Mon Apr 16 23:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals((-65250838740000L), quarter0.getLastMillisecond());
      assertEquals((-65250838740000L), quarter0.getFirstMillisecond());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals((-1847.0), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(976.18415513763, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getAngle(), 0.01);
      assertEquals((-1843.0), pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getAllocatedY(), 0.01);
      assertNotNull(pieLabelRecord0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      assertEquals("Mon Apr 16 23:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals((-65250838740000L), quarter0.getLastMillisecond());
      assertEquals((-65250838740000L), quarter0.getFirstMillisecond());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals((-1847.0), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(976.18415513763, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getAngle(), 0.01);
      assertEquals((-1843.0), pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      PieLabelRecord pieLabelRecord1 = new PieLabelRecord(quarter0, 382, 1, textBox0, 604.583699110638, 0.0, 1308.735483);
      assertFalse(pieLabelRecord1.equals((Object)pieLabelRecord0));
      assertEquals("Mon Apr 16 23:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals((-65250838740000L), quarter0.getLastMillisecond());
      assertEquals((-65250838740000L), quarter0.getFirstMillisecond());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(382.0, pieLabelRecord1.getAngle(), 0.01);
      assertEquals(0.0, pieLabelRecord1.getGap(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord1.getLowerY(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord1.getUpperY(), 0.01);
      assertEquals(1308.735483, pieLabelRecord1.getLinkPercent(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getBaseY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord1.getLabelHeight(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getAllocatedY(), 0.01);
      assertNotNull(pieLabelRecord1);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord1);
      assertFalse(pieLabelRecord1.equals((Object)pieLabelRecord0));
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertEquals("Mon Apr 16 23:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals((-65250838740000L), quarter0.getLastMillisecond());
      assertEquals((-65250838740000L), quarter0.getFirstMillisecond());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(382.0, pieLabelRecord1.getAngle(), 0.01);
      assertEquals(0.0, pieLabelRecord1.getGap(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord1.getLowerY(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord1.getUpperY(), 0.01);
      assertEquals(1308.735483, pieLabelRecord1.getLinkPercent(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getBaseY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord1.getLabelHeight(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getAllocatedY(), 0.01);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotSame(pieLabelRecord1, pieLabelRecord0);
      
      PieLabelRecord pieLabelRecord2 = pieLabelDistributor0.getPieLabelRecord(0);
      assertFalse(pieLabelRecord2.equals((Object)pieLabelRecord1));
      assertEquals(604.583699110638, pieLabelRecord2.getLinkPercent(), 0.01);
      assertEquals((-1847.0), pieLabelRecord2.getLowerY(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getAllocatedY(), 0.01);
      assertEquals(976.18415513763, pieLabelRecord2.getGap(), 0.01);
      assertEquals(4.0, pieLabelRecord2.getLabelHeight(), 0.01);
      assertEquals(1.5, pieLabelRecord2.getAngle(), 0.01);
      assertEquals((-1843.0), pieLabelRecord2.getUpperY(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getBaseY(), 0.01);
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelRecord2);
      assertNotSame(pieLabelRecord2, pieLabelRecord1);
      assertSame(pieLabelRecord2, pieLabelRecord0);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord2);
      assertFalse(pieLabelRecord2.equals((Object)pieLabelRecord1));
      assertEquals(604.583699110638, pieLabelRecord2.getLinkPercent(), 0.01);
      assertEquals((-1847.0), pieLabelRecord2.getLowerY(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getAllocatedY(), 0.01);
      assertEquals(976.18415513763, pieLabelRecord2.getGap(), 0.01);
      assertEquals(4.0, pieLabelRecord2.getLabelHeight(), 0.01);
      assertEquals(1.5, pieLabelRecord2.getAngle(), 0.01);
      assertEquals((-1843.0), pieLabelRecord2.getUpperY(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getBaseY(), 0.01);
      assertEquals(3, pieLabelDistributor0.getItemCount());
      assertNotSame(pieLabelRecord2, pieLabelRecord1);
      assertSame(pieLabelRecord2, pieLabelRecord0);
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      String string0 = pieLabelDistributor0.toString();
      assertEquals(3, pieLabelDistributor0.getItemCount());
      assertNotNull(string0);
      
      pieLabelDistributor0.adjustDownwards(1.5, 0.0);
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.spreadEvenly(976.18415513763, 2647.39089676);
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.spreadEvenly((-601.6276688259929), 604.583699110638);
      assertEquals(3, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor((-177));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.adjustDownwards((-177), 604.583699110638);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      MockDate mockDate0 = new MockDate((-177), (-177), 382, (-1), 1);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      assertEquals("Tue Apr 16 23:01:00 GMT 1709", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals((-8227184340000L), quarter0.getFirstMillisecond());
      assertEquals((-8227184340000L), quarter0.getLastMillisecond());
      assertEquals(1709, quarter0.getYearValue());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(6838L, quarter0.getSerialIndex());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      TextBlock textBlock0 = new TextBlock();
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertNotNull(textBlock0);
      
      boolean boolean0 = timeZone0.observesDaylightTime();
      assertEquals("GMT", timeZone0.getID());
      assertFalse(boolean0);
      
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      Color color0 = Color.getColor("q\"!dtO;D");
      assertNull(color0);
      
      textBox0.setShadowPaint((Paint) null);
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      boolean boolean1 = textBox0.equals(quarter0);
      assertTrue(boolean1 == boolean0);
      assertEquals("Tue Apr 16 23:01:00 GMT 1709", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals((-8227184340000L), quarter0.getFirstMillisecond());
      assertEquals((-8227184340000L), quarter0.getLastMillisecond());
      assertEquals(1709, quarter0.getYearValue());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(6838L, quarter0.getSerialIndex());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertFalse(boolean1);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord(quarter0, 1.5, (-177), textBox0, 4, 976.18415513763, 604.583699110638);
      assertEquals("Tue Apr 16 23:01:00 GMT 1709", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals((-8227184340000L), quarter0.getFirstMillisecond());
      assertEquals((-8227184340000L), quarter0.getLastMillisecond());
      assertEquals(1709, quarter0.getYearValue());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(6838L, quarter0.getSerialIndex());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-177.0), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getAngle(), 0.01);
      assertEquals((-179.0), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals((-177.0), pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals((-175.0), pieLabelRecord0.getUpperY(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(976.18415513763, pieLabelRecord0.getGap(), 0.01);
      assertNotNull(pieLabelRecord0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      assertEquals("Tue Apr 16 23:01:00 GMT 1709", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals((-8227184340000L), quarter0.getFirstMillisecond());
      assertEquals((-8227184340000L), quarter0.getLastMillisecond());
      assertEquals(1709, quarter0.getYearValue());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(6838L, quarter0.getSerialIndex());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-177.0), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getAngle(), 0.01);
      assertEquals((-179.0), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals((-177.0), pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals((-175.0), pieLabelRecord0.getUpperY(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(976.18415513763, pieLabelRecord0.getGap(), 0.01);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      PieLabelRecord pieLabelRecord1 = new PieLabelRecord(quarter0, 382, 1, textBox0, 604.583699110638, 0.0, 1308.735483);
      assertFalse(pieLabelRecord1.equals((Object)pieLabelRecord0));
      assertEquals("Tue Apr 16 23:01:00 GMT 1709", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals((-8227184340000L), quarter0.getFirstMillisecond());
      assertEquals((-8227184340000L), quarter0.getLastMillisecond());
      assertEquals(1709, quarter0.getYearValue());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(6838L, quarter0.getSerialIndex());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(382.0, pieLabelRecord1.getAngle(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord1.getUpperY(), 0.01);
      assertEquals(0.0, pieLabelRecord1.getGap(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord1.getLowerY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord1.getLabelHeight(), 0.01);
      assertEquals(1308.735483, pieLabelRecord1.getLinkPercent(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getBaseY(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getAllocatedY(), 0.01);
      assertNotNull(pieLabelRecord1);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord1);
      assertFalse(pieLabelRecord1.equals((Object)pieLabelRecord0));
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertEquals("Tue Apr 16 23:01:00 GMT 1709", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals((-8227184340000L), quarter0.getFirstMillisecond());
      assertEquals((-8227184340000L), quarter0.getLastMillisecond());
      assertEquals(1709, quarter0.getYearValue());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(6838L, quarter0.getSerialIndex());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(382.0, pieLabelRecord1.getAngle(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord1.getUpperY(), 0.01);
      assertEquals(0.0, pieLabelRecord1.getGap(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord1.getLowerY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord1.getLabelHeight(), 0.01);
      assertEquals(1308.735483, pieLabelRecord1.getLinkPercent(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getBaseY(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getAllocatedY(), 0.01);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotSame(pieLabelRecord1, pieLabelRecord0);
      
      PieLabelRecord pieLabelRecord2 = pieLabelDistributor0.getPieLabelRecord(1);
      assertFalse(pieLabelRecord2.equals((Object)pieLabelRecord0));
      assertEquals(0.0, pieLabelRecord2.getGap(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord2.getLabelHeight(), 0.01);
      assertEquals(1.0, pieLabelRecord2.getBaseY(), 0.01);
      assertEquals(382.0, pieLabelRecord2.getAngle(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord2.getLowerY(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord2.getUpperY(), 0.01);
      assertEquals(1308.735483, pieLabelRecord2.getLinkPercent(), 0.01);
      assertEquals(1.0, pieLabelRecord2.getAllocatedY(), 0.01);
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelRecord2);
      assertSame(pieLabelRecord2, pieLabelRecord1);
      assertNotSame(pieLabelRecord2, pieLabelRecord0);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord2);
      assertFalse(pieLabelRecord2.equals((Object)pieLabelRecord0));
      assertEquals(0.0, pieLabelRecord2.getGap(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord2.getLabelHeight(), 0.01);
      assertEquals(1.0, pieLabelRecord2.getBaseY(), 0.01);
      assertEquals(382.0, pieLabelRecord2.getAngle(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord2.getLowerY(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord2.getUpperY(), 0.01);
      assertEquals(1308.735483, pieLabelRecord2.getLinkPercent(), 0.01);
      assertEquals(1.0, pieLabelRecord2.getAllocatedY(), 0.01);
      assertEquals(3, pieLabelDistributor0.getItemCount());
      assertSame(pieLabelRecord2, pieLabelRecord1);
      assertNotSame(pieLabelRecord2, pieLabelRecord0);
      
      pieLabelDistributor0.distributeLabels((-177), (-177));
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      String string0 = pieLabelDistributor0.toString();
      assertEquals(3, pieLabelDistributor0.getItemCount());
      assertNotNull(string0);
      
      pieLabelDistributor0.adjustDownwards(1.5, 0.0);
      assertEquals(3, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor((-177));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.adjustDownwards((-177), 604.583699110638);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = new Locale("no1");
      assertEquals("no1", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("no1", locale0.getLanguage());
      assertEquals("no1", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0, timeZone0, locale0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("no1", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("no1", locale0.getLanguage());
      assertEquals("no1", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      TextBox textBox0 = new TextBox("no1");
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord(millisecond0, 604.583699110638, 2.0, textBox0, 180.41231131, 1336.1, 4.0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("no1", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("no1", locale0.getLanguage());
      assertEquals("no1", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(180.41231131, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(1336.1, pieLabelRecord0.getGap(), 0.01);
      assertEquals(92.206155655, pieLabelRecord0.getUpperY(), 0.01);
      assertEquals(2.0, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals((-88.206155655), pieLabelRecord0.getLowerY(), 0.01);
      assertNotNull(pieLabelRecord0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("no1", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("no1", locale0.getLanguage());
      assertEquals("no1", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(180.41231131, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(1336.1, pieLabelRecord0.getGap(), 0.01);
      assertEquals(92.206155655, pieLabelRecord0.getUpperY(), 0.01);
      assertEquals(2.0, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals((-88.206155655), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      MockDate mockDate1 = new MockDate((-1845), (-1845), 382, (-1), 1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      TimeZone timeZone1 = TimeZone.getDefault();
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertEquals("GMT", timeZone1.getID());
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      
      Locale locale1 = Locale.ENGLISH;
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      Quarter quarter0 = new Quarter(mockDate1, timeZone1, locale1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("Mon Apr 16 23:01:00 GMT 99", mockDate1.toString());
      assertEquals("GMT", timeZone1.getID());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals((-65250838740000L), quarter0.getLastMillisecond());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals((-65250838740000L), quarter0.getFirstMillisecond());
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      TextBlock textBlock0 = new TextBlock();
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertNotNull(textBlock0);
      
      boolean boolean0 = timeZone1.observesDaylightTime();
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertEquals("GMT", timeZone1.getID());
      assertFalse(boolean0);
      assertNotSame(timeZone1, timeZone0);
      
      TextBox textBox1 = new TextBox(textBlock0);
      assertFalse(textBox1.equals((Object)textBox0));
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertNotNull(textBox1);
      
      Color color0 = Color.getColor("q\"!dtO;D");
      assertNull(color0);
      
      textBox1.setShadowPaint((Paint) null);
      assertFalse(textBox1.equals((Object)textBox0));
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertNotSame(textBox1, textBox0);
      
      PieLabelRecord pieLabelRecord1 = new PieLabelRecord(quarter0, 382, 1, textBox1, 604.583699110638, 0.0, (-1));
      assertFalse(pieLabelRecord1.equals((Object)pieLabelRecord0));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(textBox1.equals((Object)textBox0));
      assertEquals(0.0, pieLabelRecord1.getGap(), 0.01);
      assertEquals(382.0, pieLabelRecord1.getAngle(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord1.getLabelHeight(), 0.01);
      assertEquals((-1.0), pieLabelRecord1.getLinkPercent(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getAllocatedY(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord1.getUpperY(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getBaseY(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord1.getLowerY(), 0.01);
      assertEquals("Mon Apr 16 23:01:00 GMT 99", mockDate1.toString());
      assertEquals("GMT", timeZone1.getID());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals((-65250838740000L), quarter0.getLastMillisecond());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals((-65250838740000L), quarter0.getFirstMillisecond());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertNotNull(pieLabelRecord1);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord1);
      assertFalse(pieLabelRecord1.equals((Object)pieLabelRecord0));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(textBox1.equals((Object)textBox0));
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertEquals(0.0, pieLabelRecord1.getGap(), 0.01);
      assertEquals(382.0, pieLabelRecord1.getAngle(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord1.getLabelHeight(), 0.01);
      assertEquals((-1.0), pieLabelRecord1.getLinkPercent(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getAllocatedY(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord1.getUpperY(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getBaseY(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord1.getLowerY(), 0.01);
      assertEquals("Mon Apr 16 23:01:00 GMT 99", mockDate1.toString());
      assertEquals("GMT", timeZone1.getID());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals((-65250838740000L), quarter0.getLastMillisecond());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals((-65250838740000L), quarter0.getFirstMillisecond());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotSame(pieLabelRecord1, pieLabelRecord0);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(timeZone1, timeZone0);
      assertNotSame(locale1, locale0);
      assertNotSame(textBox1, textBox0);
      
      PieLabelRecord pieLabelRecord2 = pieLabelDistributor0.getPieLabelRecord(0);
      assertFalse(pieLabelRecord2.equals((Object)pieLabelRecord1));
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertEquals(1336.1, pieLabelRecord2.getGap(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord2.getAngle(), 0.01);
      assertEquals((-88.206155655), pieLabelRecord2.getLowerY(), 0.01);
      assertEquals(180.41231131, pieLabelRecord2.getLabelHeight(), 0.01);
      assertEquals(2.0, pieLabelRecord2.getBaseY(), 0.01);
      assertEquals(4.0, pieLabelRecord2.getLinkPercent(), 0.01);
      assertEquals(2.0, pieLabelRecord2.getAllocatedY(), 0.01);
      assertEquals(92.206155655, pieLabelRecord2.getUpperY(), 0.01);
      assertNotNull(pieLabelRecord2);
      assertNotSame(pieLabelRecord2, pieLabelRecord1);
      assertSame(pieLabelRecord2, pieLabelRecord0);
      
      pieLabelDistributor0.distributeLabels((-177), (-177));
      assertEquals(2, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(2, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(2, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(2, pieLabelDistributor0.getItemCount());
      
      String string0 = pieLabelDistributor0.toString();
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertNotNull(string0);
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(2, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor((-177));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.adjustDownwards((-177), 604.583699110638);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      MockDate mockDate0 = new MockDate((-1845), (-1845), 382, (-1), 1);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      assertEquals("Mon Apr 16 23:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals((-65250838740000L), quarter0.getFirstMillisecond());
      assertEquals((-65250838740000L), quarter0.getLastMillisecond());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      TextBlock textBlock0 = new TextBlock();
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertNotNull(textBlock0);
      
      boolean boolean0 = timeZone0.observesDaylightTime();
      assertEquals("GMT", timeZone0.getID());
      assertFalse(boolean0);
      
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      Color color0 = Color.getColor("q\"!dtO;D");
      assertNull(color0);
      
      textBox0.setShadowPaint((Paint) null);
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      boolean boolean1 = textBox0.equals(quarter0);
      assertTrue(boolean1 == boolean0);
      assertEquals("Mon Apr 16 23:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals((-65250838740000L), quarter0.getFirstMillisecond());
      assertEquals((-65250838740000L), quarter0.getLastMillisecond());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertFalse(boolean1);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord(quarter0, 1.5, (-1845), textBox0, 4, 976.18415513763, 604.583699110638);
      assertEquals("Mon Apr 16 23:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals((-65250838740000L), quarter0.getFirstMillisecond());
      assertEquals((-65250838740000L), quarter0.getLastMillisecond());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals((-1847.0), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getAngle(), 0.01);
      assertEquals((-1843.0), pieLabelRecord0.getUpperY(), 0.01);
      assertEquals(976.18415513763, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getBaseY(), 0.01);
      assertNotNull(pieLabelRecord0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      assertEquals("Mon Apr 16 23:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals((-65250838740000L), quarter0.getFirstMillisecond());
      assertEquals((-65250838740000L), quarter0.getLastMillisecond());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals((-1847.0), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getAngle(), 0.01);
      assertEquals((-1843.0), pieLabelRecord0.getUpperY(), 0.01);
      assertEquals(976.18415513763, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      PieLabelRecord pieLabelRecord1 = new PieLabelRecord(quarter0, 382, 1, textBox0, 604.583699110638, 0.0, 1308.735483);
      assertFalse(pieLabelRecord1.equals((Object)pieLabelRecord0));
      assertEquals("Mon Apr 16 23:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals((-65250838740000L), quarter0.getFirstMillisecond());
      assertEquals((-65250838740000L), quarter0.getLastMillisecond());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord1.getUpperY(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getBaseY(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord1.getLowerY(), 0.01);
      assertEquals(382.0, pieLabelRecord1.getAngle(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getAllocatedY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord1.getLabelHeight(), 0.01);
      assertEquals(1308.735483, pieLabelRecord1.getLinkPercent(), 0.01);
      assertEquals(0.0, pieLabelRecord1.getGap(), 0.01);
      assertNotNull(pieLabelRecord1);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord1);
      assertFalse(pieLabelRecord1.equals((Object)pieLabelRecord0));
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertEquals("Mon Apr 16 23:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals((-65250838740000L), quarter0.getFirstMillisecond());
      assertEquals((-65250838740000L), quarter0.getLastMillisecond());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord1.getUpperY(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getBaseY(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord1.getLowerY(), 0.01);
      assertEquals(382.0, pieLabelRecord1.getAngle(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getAllocatedY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord1.getLabelHeight(), 0.01);
      assertEquals(1308.735483, pieLabelRecord1.getLinkPercent(), 0.01);
      assertEquals(0.0, pieLabelRecord1.getGap(), 0.01);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotSame(pieLabelRecord1, pieLabelRecord0);
      
      PieLabelRecord pieLabelRecord2 = pieLabelDistributor0.getPieLabelRecord(0);
      assertFalse(pieLabelRecord2.equals((Object)pieLabelRecord1));
      assertEquals(976.18415513763, pieLabelRecord2.getGap(), 0.01);
      assertEquals((-1843.0), pieLabelRecord2.getUpperY(), 0.01);
      assertEquals(1.5, pieLabelRecord2.getAngle(), 0.01);
      assertEquals((-1847.0), pieLabelRecord2.getLowerY(), 0.01);
      assertEquals(4.0, pieLabelRecord2.getLabelHeight(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getAllocatedY(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getBaseY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord2.getLinkPercent(), 0.01);
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelRecord2);
      assertNotSame(pieLabelRecord2, pieLabelRecord1);
      assertSame(pieLabelRecord2, pieLabelRecord0);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord2);
      assertFalse(pieLabelRecord2.equals((Object)pieLabelRecord1));
      assertEquals(976.18415513763, pieLabelRecord2.getGap(), 0.01);
      assertEquals((-1843.0), pieLabelRecord2.getUpperY(), 0.01);
      assertEquals(1.5, pieLabelRecord2.getAngle(), 0.01);
      assertEquals((-1847.0), pieLabelRecord2.getLowerY(), 0.01);
      assertEquals(4.0, pieLabelRecord2.getLabelHeight(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getAllocatedY(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getBaseY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord2.getLinkPercent(), 0.01);
      assertEquals(3, pieLabelDistributor0.getItemCount());
      assertNotSame(pieLabelRecord2, pieLabelRecord1);
      assertSame(pieLabelRecord2, pieLabelRecord0);
      
      pieLabelDistributor0.distributeLabels((-177), (-177));
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      String string0 = pieLabelDistributor0.toString();
      assertEquals(3, pieLabelDistributor0.getItemCount());
      assertNotNull(string0);
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.spreadEvenly((-1350.5578), (-350.0));
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustDownwards(1.5, 0.0);
      assertEquals(3, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor((-177));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.adjustDownwards((-177), 604.583699110638);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      MockDate mockDate0 = new MockDate((-1845), (-1845), 382, (-1), 1);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      assertEquals("Mon Apr 16 23:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals((-65250838740000L), quarter0.getLastMillisecond());
      assertEquals((-65250838740000L), quarter0.getFirstMillisecond());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      TextBlock textBlock0 = new TextBlock();
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertNotNull(textBlock0);
      
      boolean boolean0 = timeZone0.observesDaylightTime();
      assertEquals("GMT", timeZone0.getID());
      assertFalse(boolean0);
      
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      Color color0 = Color.getColor("q\"!dtO;D");
      assertNull(color0);
      
      textBox0.setShadowPaint((Paint) null);
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord(quarter0, 382, 1, textBox0, 604.583699110638, 0.0, 1308.735483);
      assertEquals("Mon Apr 16 23:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals((-65250838740000L), quarter0.getLastMillisecond());
      assertEquals((-65250838740000L), quarter0.getFirstMillisecond());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(1308.735483, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(1.0, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getGap(), 0.01);
      assertEquals(382.0, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(1.0, pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord0.getUpperY(), 0.01);
      assertNotNull(pieLabelRecord0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      assertEquals("Mon Apr 16 23:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals((-65250838740000L), quarter0.getLastMillisecond());
      assertEquals((-65250838740000L), quarter0.getFirstMillisecond());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(1308.735483, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(1.0, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getGap(), 0.01);
      assertEquals(382.0, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(1.0, pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord0.getUpperY(), 0.01);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      PieLabelRecord pieLabelRecord1 = pieLabelDistributor0.getPieLabelRecord(0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      assertEquals(1308.735483, pieLabelRecord1.getLinkPercent(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getBaseY(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord1.getLowerY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord1.getLabelHeight(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getAllocatedY(), 0.01);
      assertEquals(382.0, pieLabelRecord1.getAngle(), 0.01);
      assertEquals(0.0, pieLabelRecord1.getGap(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord1.getUpperY(), 0.01);
      assertNotNull(pieLabelRecord1);
      assertSame(pieLabelRecord1, pieLabelRecord0);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord1);
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertEquals(1308.735483, pieLabelRecord1.getLinkPercent(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getBaseY(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord1.getLowerY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord1.getLabelHeight(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getAllocatedY(), 0.01);
      assertEquals(382.0, pieLabelRecord1.getAngle(), 0.01);
      assertEquals(0.0, pieLabelRecord1.getGap(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord1.getUpperY(), 0.01);
      assertSame(pieLabelRecord1, pieLabelRecord0);
      
      pieLabelDistributor0.distributeLabels((-177), (-177));
      assertEquals(2, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(2, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(2, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(2, pieLabelDistributor0.getItemCount());
      
      String string0 = pieLabelDistributor0.toString();
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertNotNull(string0);
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(2, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustUpwards(810.12670104329, (-354.0));
      assertEquals(2, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.spreadEvenly(2163.986742215, 1.5);
      assertEquals(2, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 1;
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(1);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.adjustDownwards(1, (-2424.3056));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustUpwards((-2671.0), 1391.28793004);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.spreadEvenly(1, (-2671.0));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustUpwards(2.0, 1.5);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      Hour hour0 = Hour.parseHour("K_?YwpPM26]d$9IC$4K");
      assertNull(hour0);
      
      TextBox textBox0 = new TextBox("K_?YwpPM26]d$9IC$4K");
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord((Comparable) null, 762.195690077, 1.5, textBox0, (-958.583699110638), 762.195690077, (-2424.3056));
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(762.195690077, pieLabelRecord0.getAngle(), 0.01);
      assertEquals((-958.583699110638), pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(480.791849555319, pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(762.195690077, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-2424.3056), pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals((-477.791849555319), pieLabelRecord0.getUpperY(), 0.01);
      assertNotNull(pieLabelRecord0);
      
      pieLabelRecord0.setAllocatedY((-958.583699110638));
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(762.195690077, pieLabelRecord0.getAngle(), 0.01);
      assertEquals((-479.291849555319), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals((-958.583699110638), pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(762.195690077, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-2424.3056), pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals((-958.583699110638), pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals((-1437.875548665957), pieLabelRecord0.getUpperY(), 0.01);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(762.195690077, pieLabelRecord0.getAngle(), 0.01);
      assertEquals((-479.291849555319), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals((-958.583699110638), pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(762.195690077, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-2424.3056), pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals((-958.583699110638), pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals((-1437.875548665957), pieLabelRecord0.getUpperY(), 0.01);
      
      pieLabelRecord0.setBaseY((-2052.9771044));
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-2052.9771044), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(762.195690077, pieLabelRecord0.getAngle(), 0.01);
      assertEquals((-479.291849555319), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals((-958.583699110638), pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(762.195690077, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-2424.3056), pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals((-958.583699110638), pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals((-1437.875548665957), pieLabelRecord0.getUpperY(), 0.01);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord0);
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-2052.9771044), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(762.195690077, pieLabelRecord0.getAngle(), 0.01);
      assertEquals((-479.291849555319), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals((-958.583699110638), pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(762.195690077, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-2424.3056), pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals((-958.583699110638), pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals((-1437.875548665957), pieLabelRecord0.getUpperY(), 0.01);
      
      pieLabelDistributor0.adjustUpwards((-2424.3056), 258.583699110638);
      assertEquals(2, pieLabelDistributor0.getItemCount());
      
      // Undeclared exception!
      try { 
        pieLabelDistributor0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor((-177));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.adjustDownwards((-177), 604.583699110638);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      MockDate mockDate0 = new MockDate((-1845), (-1845), 382, (-1), 1);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
      
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      assertEquals("Mon Apr 16 23:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals((-65250838740000L), quarter0.getFirstMillisecond());
      assertEquals((-65250838740000L), quarter0.getLastMillisecond());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals(99, quarter0.getYearValue());
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      TextBlock textBlock0 = new TextBlock();
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertNotNull(textBlock0);
      
      boolean boolean0 = timeZone0.observesDaylightTime();
      assertEquals("GMT", timeZone0.getID());
      assertFalse(boolean0);
      
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      Color color0 = Color.getColor("q\"!dtO;D");
      assertNull(color0);
      
      textBox0.setShadowPaint((Paint) null);
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord(quarter0, 382, 1, textBox0, 604.583699110638, 0.0, 1308.735483);
      assertEquals("Mon Apr 16 23:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals((-65250838740000L), quarter0.getFirstMillisecond());
      assertEquals((-65250838740000L), quarter0.getLastMillisecond());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(1308.735483, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(1.0, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getGap(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(1.0, pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(382.0, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord0.getLowerY(), 0.01);
      assertNotNull(pieLabelRecord0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      assertEquals("Mon Apr 16 23:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals((-65250838740000L), quarter0.getFirstMillisecond());
      assertEquals((-65250838740000L), quarter0.getLastMillisecond());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(398L, quarter0.getSerialIndex());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(1308.735483, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(1.0, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getGap(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(1.0, pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(382.0, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      PieLabelRecord pieLabelRecord1 = pieLabelDistributor0.getPieLabelRecord(0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      assertEquals(1.0, pieLabelRecord1.getBaseY(), 0.01);
      assertEquals(382.0, pieLabelRecord1.getAngle(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord1.getUpperY(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord1.getLowerY(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getAllocatedY(), 0.01);
      assertEquals(0.0, pieLabelRecord1.getGap(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord1.getLabelHeight(), 0.01);
      assertEquals(1308.735483, pieLabelRecord1.getLinkPercent(), 0.01);
      assertNotNull(pieLabelRecord1);
      assertSame(pieLabelRecord1, pieLabelRecord0);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord1);
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertEquals(1.0, pieLabelRecord1.getBaseY(), 0.01);
      assertEquals(382.0, pieLabelRecord1.getAngle(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord1.getUpperY(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord1.getLowerY(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getAllocatedY(), 0.01);
      assertEquals(0.0, pieLabelRecord1.getGap(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord1.getLabelHeight(), 0.01);
      assertEquals(1308.735483, pieLabelRecord1.getLinkPercent(), 0.01);
      assertSame(pieLabelRecord1, pieLabelRecord0);
      
      pieLabelDistributor0.distributeLabels((-177), (-177));
      assertEquals(2, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(2, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(2, pieLabelDistributor0.getItemCount());
      
      String string0 = pieLabelDistributor0.toString();
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertNotNull(string0);
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(2, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustDownwards((-2164.737), (-177));
      assertEquals(2, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor((-312));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.adjustDownwards((-312), 0.0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      Week week0 = new Week();
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      TextBox textBox0 = new TextBox("[qRM~\"");
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord(week0, 53, 0.0, textBox0, 0.0, 0.0, (-312));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-312.0), pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getGap(), 0.01);
      assertEquals(53.0, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getLowerY(), 0.01);
      assertNotNull(pieLabelRecord0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-312.0), pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getGap(), 0.01);
      assertEquals(53.0, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      pieLabelDistributor0.sort();
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustDownwards((-312), (-1285.1691353));
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.distributeLabels((-1285.1691353), 0.0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.spreadEvenly(0.0, (-312));
      assertEquals(1, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = (-1393);
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor((-1393));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.distributeLabels((-1393), (-1393));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      double double0 = 1.7976931348623157E308;
      pieLabelDistributor0.adjustUpwards((-1393), 1.7976931348623157E308);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      double double1 = (-666.9093818947854);
      pieLabelDistributor0.clear();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustUpwards((-666.9093818947854), (-1393));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustUpwards((-666.9093818947854), (-467.718452));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.spreadEvenly((-2925.1094), (-1393));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.labels = null;
      // Undeclared exception!
      try { 
        pieLabelDistributor0.adjustDownwards(4.0, (-864.880849966562));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PieLabelDistributor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor((-3396));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustDownwards((-3396), (-3396));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustUpwards(0.0, 593.963);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      String string0 = pieLabelDistributor0.toString();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(string0);
      assertEquals("", string0);
      
      pieLabelDistributor0.adjustDownwards(593.963, (-2661.278));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      TextBox textBox0 = new TextBox("");
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      textBox0.setShadowXOffset((-3396));
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-3396.0), textBox0.getShadowXOffset(), 0.01);
      
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord("", 0.0, (-675.63854473), textBox0, (-355.57306543), 0.0, 0.0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-3396.0), textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getAngle(), 0.01);
      assertEquals((-853.425077445), pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-675.63854473), pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-355.57306543), pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals((-675.63854473), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals((-497.852012015), pieLabelRecord0.getLowerY(), 0.01);
      assertNotNull(pieLabelRecord0);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-3396.0), textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getAngle(), 0.01);
      assertEquals((-853.425077445), pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-675.63854473), pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-355.57306543), pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals((-675.63854473), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals((-497.852012015), pieLabelRecord0.getLowerY(), 0.01);
      
      pieLabelDistributor0.adjustDownwards(0.0, 0.0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustDownwards((-532.008840471), (-532.008840471));
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.distributeLabels(593.963, 0.0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(87);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      double double0 = 3.0;
      pieLabelDistributor0.spreadEvenly(3.0, 3.0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.labels = null;
      // Undeclared exception!
      try { 
        pieLabelDistributor0.adjustUpwards(3.0, (-2.147483648E9));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PieLabelDistributor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      double double0 = 1155.368995663764;
      double double1 = (-720.79545528544);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(int0));
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(int0));
      assertTrue(linkedList0.contains(integer0));
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = Integer.getInteger("", 0);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      int int1 = Integer.divideUnsigned((-1327), (-1327));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      boolean boolean1 = linkedList0.add(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertFalse(linkedList0.contains(int1));
      assertTrue(linkedList0.contains(integer2));
      
      pieLabelDistributor0.labels = (List) linkedList0;
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertEquals(2, linkedList0.size());
      assertFalse(pieLabelDistributor0.labels.isEmpty());
      assertEquals(2, pieLabelDistributor0.labels.size());
      
      // Undeclared exception!
      try { 
        pieLabelDistributor0.adjustDownwards(1155.368995663764, (-720.79545528544));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.chart.plot.PieLabelRecord
         //
         verifyException("org.jfree.chart.plot.AbstractPieLabelDistributor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = (-562);
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor((-562));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      double double0 = 2122.6496624722;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(int0));
      
      pieLabelDistributor0.labels = (List) linkedList0;
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertEquals(0, linkedList0.size());
      assertTrue(pieLabelDistributor0.labels.isEmpty());
      assertEquals(0, pieLabelDistributor0.labels.size());
      
      pieLabelDistributor0.spreadEvenly(2122.6496624722, 2122.6496624722);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      String string0 = pieLabelDistributor0.toString();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(integer0));
      assertFalse(linkedList0.contains((-562)));
      
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(400, (int)integer1);
      
      int int1 = Integer.min((-1245), (-1245));
      assertFalse(int1 == int0);
      assertEquals((-1245), int1);
      
      boolean boolean1 = linkedList0.add(integer1);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(integer0));
      assertFalse(linkedList0.contains(int0));
      
      double double1 = (-591.0432925);
      boolean boolean2 = linkedList0.removeFirstOccurrence(pieLabelDistributor0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertEquals(2, linkedList0.size());
      assertFalse(boolean2);
      assertTrue(linkedList0.contains(integer0));
      assertFalse(linkedList0.contains(int0));
      
      // Undeclared exception!
      try { 
        pieLabelDistributor0.adjustUpwards((-591.0432925), (-562));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.chart.plot.PieLabelRecord
         //
         verifyException("org.jfree.chart.plot.AbstractPieLabelDistributor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 17;
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(17);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.clear();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      double double0 = 402.9126;
      pieLabelDistributor0.spreadEvenly(402.9126, 402.9126);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.labels = null;
      // Undeclared exception!
      try { 
        pieLabelDistributor0.adjustInwards();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PieLabelDistributor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.sort();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(0));
      
      pieLabelDistributor0.labels = (List) linkedList0;
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertEquals(0, linkedList0.size());
      assertTrue(pieLabelDistributor0.labels.isEmpty());
      assertEquals(0, pieLabelDistributor0.labels.size());
      
      pieLabelDistributor0.distributeLabels(0.0, 2602.0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(integer0));
      assertFalse(linkedList0.contains(0));
      
      pieLabelDistributor0.adjustDownwards(2602.0, (-3747.8340596627));
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      // Undeclared exception!
      try { 
        pieLabelDistributor0.distributeLabels(0, 2602.0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.chart.plot.PieLabelRecord
         //
         verifyException("org.jfree.chart.plot.AbstractPieLabelDistributor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 896;
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(896);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      Vector<JColorChooser> vector0 = new Vector<JColorChooser>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      pieLabelDistributor0.labels = (List) vector0;
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, pieLabelDistributor0.labels.size());
      assertTrue(pieLabelDistributor0.labels.isEmpty());
      
      pieLabelDistributor0.distributeLabels(2063.1319482746, 896);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      double double0 = 0.0;
      pieLabelDistributor0.sort();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      JColorChooser jColorChooser0 = new JColorChooser();
      assertTrue(jColorChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jColorChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jColorChooser0.getIgnoreRepaint());
      assertFalse(jColorChooser0.isFocusTraversalPolicySet());
      assertFalse(jColorChooser0.isFocusCycleRoot());
      assertNotNull(jColorChooser0);
      
      Container container0 = jColorChooser0.getTopLevelAncestor();
      assertTrue(jColorChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jColorChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jColorChooser0.getIgnoreRepaint());
      assertFalse(jColorChooser0.isFocusTraversalPolicySet());
      assertFalse(jColorChooser0.isFocusCycleRoot());
      assertNull(container0);
      
      boolean boolean0 = vector0.add(jColorChooser0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(jColorChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jColorChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jColorChooser0.getIgnoreRepaint());
      assertFalse(jColorChooser0.isFocusTraversalPolicySet());
      assertFalse(jColorChooser0.isFocusCycleRoot());
      assertTrue(boolean0);
      assertTrue(vector0.contains(jColorChooser0));
      
      jColorChooser0.removeAll();
      assertTrue(jColorChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jColorChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jColorChooser0.getIgnoreRepaint());
      assertFalse(jColorChooser0.isFocusTraversalPolicySet());
      assertFalse(jColorChooser0.isFocusCycleRoot());
      
      boolean boolean1 = vector0.add(jColorChooser0);
      assertTrue(boolean1 == boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(jColorChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jColorChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jColorChooser0.getIgnoreRepaint());
      assertFalse(jColorChooser0.isFocusTraversalPolicySet());
      assertFalse(jColorChooser0.isFocusCycleRoot());
      assertTrue(boolean1);
      assertTrue(vector0.contains(jColorChooser0));
      
      // Undeclared exception!
      try { 
        pieLabelDistributor0.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JColorChooser cannot be cast to org.jfree.chart.plot.PieLabelRecord
         //
         verifyException("org.jfree.chart.plot.AbstractPieLabelDistributor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(1970);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.distributeLabels(1970, (-1052.8269533025589));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      String string0 = pieLabelDistributor0.toString();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(string0);
      assertEquals("", string0);
      
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord("", 1970, 4.0, (TextBox) null, 299.0, 0.0, (-1179.0039));
      assertEquals((-1179.0039), pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(153.5, pieLabelRecord0.getUpperY(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(1970.0, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-145.5), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(299.0, pieLabelRecord0.getLabelHeight(), 0.01);
      assertNotNull(pieLabelRecord0);
      
      pieLabelRecord0.setBaseY((-1052.8269533025589));
      assertEquals((-1179.0039), pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(153.5, pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-1052.8269533025589), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(1970.0, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-145.5), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(299.0, pieLabelRecord0.getLabelHeight(), 0.01);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      assertEquals((-1179.0039), pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(153.5, pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-1052.8269533025589), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(1970.0, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-145.5), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(299.0, pieLabelRecord0.getLabelHeight(), 0.01);
      
      pieLabelDistributor0.adjustDownwards(4.0, 4.0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.spreadEvenly(4.0, 0.0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustUpwards(1970, 1970);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.distributeLabels((-1052.8269533025589), 0.0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustUpwards((-1378.646465), 0.0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      String string1 = pieLabelDistributor0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, pieLabelDistributor0.getItemCount());
      assertNotNull(string1);
      
      pieLabelDistributor0.adjustUpwards(0.0, 0.0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor((-3180));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.distributeLabels((-3180), (-3180));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      TextBlock textBlock0 = new TextBlock();
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertNotNull(textBlock0);
      
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord((Comparable) null, (-3180), (-3180), textBox0, (-1412.4556963), (-1633.0113352766164), 0.0);
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals((-3886.2278481499998), pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-1412.4556963), pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals((-3180.0), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals((-1633.0113352766164), pieLabelRecord0.getGap(), 0.01);
      assertEquals((-3180.0), pieLabelRecord0.getAngle(), 0.01);
      assertEquals((-2473.7721518500002), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals((-3180.0), pieLabelRecord0.getAllocatedY(), 0.01);
      assertNotNull(pieLabelRecord0);
      
      String string0 = pieLabelDistributor0.toString();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(string0);
      assertEquals("", string0);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals((-3886.2278481499998), pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-1412.4556963), pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals((-3180.0), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals((-1633.0113352766164), pieLabelRecord0.getGap(), 0.01);
      assertEquals((-3180.0), pieLabelRecord0.getAngle(), 0.01);
      assertEquals((-2473.7721518500002), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals((-3180.0), pieLabelRecord0.getAllocatedY(), 0.01);
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.spreadEvenly((-1.0), (-3180));
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustDownwards(1.7976931348623157E308, (-1633.0113352766164));
      assertEquals(1, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.sort();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.clear();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      double double0 = (-892.98595807);
      pieLabelDistributor0.sort();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustUpwards((-892.98595807), (-892.98595807));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      double double1 = 0.0;
      String string0 = pieLabelDistributor0.toString();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(string0);
      assertEquals("", string0);
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustUpwards((-892.98595807), 0.0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      String string1 = pieLabelDistributor0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(string1);
      assertEquals("", string1);
      
      pieLabelDistributor0.distributeLabels((-892.98595807), 0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.spreadEvenly(0, (-892.98595807));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      String string2 = pieLabelDistributor0.toString();
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(string2);
      assertEquals("", string2);
      
      pieLabelDistributor0.adjustDownwards((-892.98595807), 0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.spreadEvenly((-892.98595807), 0.0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(0));
      
      pieLabelDistributor0.labels = (List) linkedList0;
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertEquals(0, linkedList0.size());
      assertTrue(pieLabelDistributor0.labels.isEmpty());
      assertEquals(0, pieLabelDistributor0.labels.size());
      
      pieLabelDistributor0.sort();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      int int1 = Integer.compareUnsigned(0, 962);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(0));
      assertTrue(linkedList0.contains(integer0));
      
      pieLabelDistributor0.adjustUpwards(0, Double.POSITIVE_INFINITY);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      double double2 = 0.0;
      // Undeclared exception!
      try { 
        pieLabelDistributor0.spreadEvenly(Double.POSITIVE_INFINITY, 0.0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.chart.plot.PieLabelRecord
         //
         verifyException("org.jfree.chart.plot.AbstractPieLabelDistributor", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(4301);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.adjustDownwards(4301, 4301);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      TextBox textBox0 = new TextBox();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord((Comparable) null, 4301, (-1.0), textBox0, 0.0, (-2913.6947934), 34.838);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals((-2913.6947934), pieLabelRecord0.getGap(), 0.01);
      assertEquals((-1.0), pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-1.0), pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(34.838, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals((-1.0), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(4301.0, pieLabelRecord0.getAngle(), 0.01);
      assertEquals((-1.0), pieLabelRecord0.getLowerY(), 0.01);
      assertNotNull(pieLabelRecord0);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals((-2913.6947934), pieLabelRecord0.getGap(), 0.01);
      assertEquals((-1.0), pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-1.0), pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(34.838, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals((-1.0), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(4301.0, pieLabelRecord0.getAngle(), 0.01);
      assertEquals((-1.0), pieLabelRecord0.getLowerY(), 0.01);
      
      // Undeclared exception!
      try { 
        pieLabelDistributor0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(0));
      
      pieLabelDistributor0.labels = (List) linkedList0;
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertEquals(0, linkedList0.size());
      assertEquals(0, pieLabelDistributor0.labels.size());
      assertTrue(pieLabelDistributor0.labels.isEmpty());
      
      linkedList0.addFirst((Integer) null);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(0));
      
      pieLabelDistributor0.adjustDownwards((-3819.964511041284), 0.0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      // Undeclared exception!
      try { 
        pieLabelDistributor0.spreadEvenly(1910.0, 1043.544);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PieLabelDistributor", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      double double0 = 0.0;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(0));
      
      pieLabelDistributor0.labels = (List) linkedList0;
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertEquals(0, linkedList0.size());
      assertEquals(0, pieLabelDistributor0.labels.size());
      assertTrue(pieLabelDistributor0.labels.isEmpty());
      
      pieLabelDistributor0.spreadEvenly((-704.0), 0.0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      String string0 = pieLabelDistributor0.toString();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = pieLabelDistributor0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(string1);
      assertEquals("", string1);
      
      pieLabelDistributor0.adjustUpwards((-704.0), 0.0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      boolean boolean0 = linkedList0.add((Object) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertFalse(linkedList0.contains((-704.0)));
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord("", 0.0, 0.0, (TextBox) null, 2302.59328834914, (-3088.2577389146327), (-704.0));
      assertEquals((-704.0), pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals((-1151.29664417457), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals((-3088.2577389146327), pieLabelRecord0.getGap(), 0.01);
      assertEquals(1151.29664417457, pieLabelRecord0.getUpperY(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(2302.59328834914, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getBaseY(), 0.01);
      assertNotNull(pieLabelRecord0);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord0);
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertEquals((-704.0), pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals((-1151.29664417457), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals((-3088.2577389146327), pieLabelRecord0.getGap(), 0.01);
      assertEquals(1151.29664417457, pieLabelRecord0.getUpperY(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(2302.59328834914, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getBaseY(), 0.01);
      
      // Undeclared exception!
      try { 
        pieLabelDistributor0.distributeLabels(0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PieLabelDistributor", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      Month month0 = new Month();
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertNotNull(month0);
      
      TextBox textBox0 = new TextBox((TextBlock) null);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      Color color0 = Color.darkGray;
      assertEquals((-12566464), color0.getRGB());
      assertEquals(64, color0.getRed());
      assertEquals(64, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(64, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      textBox0.setOutlinePaint(color0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-12566464), color0.getRGB());
      assertEquals(64, color0.getRed());
      assertEquals(64, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(64, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord(month0, (-1.0), 1.5, textBox0, 0, 1.5, (-1.0));
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-1.0), pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals((-1.0), pieLabelRecord0.getAngle(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getUpperY(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getBaseY(), 0.01);
      assertNotNull(pieLabelRecord0);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-1.0), pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals((-1.0), pieLabelRecord0.getAngle(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getUpperY(), 0.01);
      assertEquals(0.0, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(1.5, pieLabelRecord0.getBaseY(), 0.01);
      
      pieLabelDistributor0.sort();
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustUpwards(0, 0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.distributeLabels(1.0, 1.0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.spreadEvenly((-1.0), 2.0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(1937);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.distributeLabels(0.0, 1937);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(0.0));
      
      pieLabelDistributor0.labels = (List) linkedList0;
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertEquals(0, linkedList0.size());
      assertTrue(pieLabelDistributor0.labels.isEmpty());
      assertEquals(0, pieLabelDistributor0.labels.size());
      
      boolean boolean0 = linkedList0.add((Object) pieLabelDistributor0.labels);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      assertEquals(1, linkedList0.size());
      assertEquals(1, pieLabelDistributor0.labels.size());
      assertFalse(pieLabelDistributor0.labels.isEmpty());
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(0.0));
      
      // Undeclared exception!
      try { 
        pieLabelDistributor0.distributeLabels(0.0, 1937);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to org.jfree.chart.plot.PieLabelRecord
         //
         verifyException("org.jfree.chart.plot.AbstractPieLabelDistributor", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.spreadEvenly(0.0, 1.0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(2926);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      String string0 = pieLabelDistributor0.toString();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(725);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.adjustDownwards(725, 725);
      assertEquals(0, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(152);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.distributeLabels(152, 152);
      assertEquals(0, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(93);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.sort();
      assertEquals(0, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(1504);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.spreadEvenly((-1.7976931348623157E308), 0.0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.adjustUpwards(0, 0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor((-210));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor((-177));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.adjustDownwards((-177), 604.583699110638);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      MockDate mockDate0 = new MockDate((-1845), (-1845), 382, (-1845), 1);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      assertEquals("Tue Jan 30 03:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(397L, quarter0.getSerialIndex());
      assertEquals((-65257477140000L), quarter0.getLastMillisecond());
      assertEquals((-65257477140000L), quarter0.getFirstMillisecond());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      TextBlock textBlock0 = new TextBlock();
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertNotNull(textBlock0);
      
      boolean boolean0 = timeZone0.observesDaylightTime();
      assertEquals("GMT", timeZone0.getID());
      assertFalse(boolean0);
      
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord(quarter0, 382, (-1845), textBox0, 4, 976.18415513763, 604.583699110638);
      assertEquals("Tue Jan 30 03:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(397L, quarter0.getSerialIndex());
      assertEquals((-65257477140000L), quarter0.getLastMillisecond());
      assertEquals((-65257477140000L), quarter0.getFirstMillisecond());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-1843.0), pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(976.18415513763, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-1847.0), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(382.0, pieLabelRecord0.getAngle(), 0.01);
      assertNotNull(pieLabelRecord0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      assertEquals("Tue Jan 30 03:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(397L, quarter0.getSerialIndex());
      assertEquals((-65257477140000L), quarter0.getLastMillisecond());
      assertEquals((-65257477140000L), quarter0.getFirstMillisecond());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-1843.0), pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(976.18415513763, pieLabelRecord0.getGap(), 0.01);
      assertEquals((-1847.0), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(382.0, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      PieLabelRecord pieLabelRecord1 = new PieLabelRecord(quarter0, 382, 1, textBox0, 604.583699110638, 1, 1308.735483);
      assertFalse(pieLabelRecord1.equals((Object)pieLabelRecord0));
      assertEquals("Tue Jan 30 03:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(397L, quarter0.getSerialIndex());
      assertEquals((-65257477140000L), quarter0.getLastMillisecond());
      assertEquals((-65257477140000L), quarter0.getFirstMillisecond());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord1.getUpperY(), 0.01);
      assertEquals(1308.735483, pieLabelRecord1.getLinkPercent(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getBaseY(), 0.01);
      assertEquals(382.0, pieLabelRecord1.getAngle(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord1.getLabelHeight(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord1.getLowerY(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getAllocatedY(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getGap(), 0.01);
      assertNotNull(pieLabelRecord1);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord1);
      assertFalse(pieLabelRecord1.equals((Object)pieLabelRecord0));
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertEquals("Tue Jan 30 03:01:00 GMT 99", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(99, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(397L, quarter0.getSerialIndex());
      assertEquals((-65257477140000L), quarter0.getLastMillisecond());
      assertEquals((-65257477140000L), quarter0.getFirstMillisecond());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(303.291849555319, pieLabelRecord1.getUpperY(), 0.01);
      assertEquals(1308.735483, pieLabelRecord1.getLinkPercent(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getBaseY(), 0.01);
      assertEquals(382.0, pieLabelRecord1.getAngle(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord1.getLabelHeight(), 0.01);
      assertEquals((-301.291849555319), pieLabelRecord1.getLowerY(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getAllocatedY(), 0.01);
      assertEquals(1.0, pieLabelRecord1.getGap(), 0.01);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotSame(pieLabelRecord1, pieLabelRecord0);
      
      PieLabelRecord pieLabelRecord2 = pieLabelDistributor0.getPieLabelRecord(0);
      assertFalse(pieLabelRecord2.equals((Object)pieLabelRecord1));
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertEquals(382.0, pieLabelRecord2.getAngle(), 0.01);
      assertEquals((-1847.0), pieLabelRecord2.getLowerY(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getAllocatedY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord2.getLinkPercent(), 0.01);
      assertEquals(4.0, pieLabelRecord2.getLabelHeight(), 0.01);
      assertEquals(976.18415513763, pieLabelRecord2.getGap(), 0.01);
      assertEquals((-1843.0), pieLabelRecord2.getUpperY(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getBaseY(), 0.01);
      assertNotNull(pieLabelRecord2);
      assertSame(pieLabelRecord2, pieLabelRecord0);
      assertNotSame(pieLabelRecord2, pieLabelRecord1);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord2);
      assertFalse(pieLabelRecord2.equals((Object)pieLabelRecord1));
      assertEquals(3, pieLabelDistributor0.getItemCount());
      assertEquals(382.0, pieLabelRecord2.getAngle(), 0.01);
      assertEquals((-1847.0), pieLabelRecord2.getLowerY(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getAllocatedY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord2.getLinkPercent(), 0.01);
      assertEquals(4.0, pieLabelRecord2.getLabelHeight(), 0.01);
      assertEquals(976.18415513763, pieLabelRecord2.getGap(), 0.01);
      assertEquals((-1843.0), pieLabelRecord2.getUpperY(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getBaseY(), 0.01);
      assertSame(pieLabelRecord2, pieLabelRecord0);
      assertNotSame(pieLabelRecord2, pieLabelRecord1);
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustDownwards(604.583699110638, 1);
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.spreadEvenly(976.18415513763, 2647.39089676);
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.spreadEvenly((-601.6276688259929), 604.583699110638);
      assertEquals(3, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(3, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor((-177));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.adjustDownwards((-177), 604.583699110638);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      MockDate mockDate0 = new MockDate((-1845), (-1845), (-177), (-1), (-1));
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      assertEquals("Tue Oct 04 22:59:00 GMT 101", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(101, quarter0.getYearValue());
      assertEquals((-65299136460000L), quarter0.getFirstMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(408L, quarter0.getSerialIndex());
      assertEquals((-65299136460000L), quarter0.getLastMillisecond());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      TextBlock textBlock0 = new TextBlock();
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertNotNull(textBlock0);
      
      boolean boolean0 = timeZone0.observesDaylightTime();
      assertEquals("GMT", timeZone0.getID());
      assertFalse(boolean0);
      
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      Color color0 = Color.getColor("q\"!dtO;D");
      assertNull(color0);
      
      textBox0.setShadowPaint((Paint) null);
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      boolean boolean1 = textBox0.equals(quarter0);
      assertTrue(boolean1 == boolean0);
      assertEquals("Tue Oct 04 22:59:00 GMT 101", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(101, quarter0.getYearValue());
      assertEquals((-65299136460000L), quarter0.getFirstMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(408L, quarter0.getSerialIndex());
      assertEquals((-65299136460000L), quarter0.getLastMillisecond());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertFalse(boolean1);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord(quarter0, 4, (-1845), textBox0, 4, (-177), 604.583699110638);
      assertEquals("Tue Oct 04 22:59:00 GMT 101", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(101, quarter0.getYearValue());
      assertEquals((-65299136460000L), quarter0.getFirstMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(408L, quarter0.getSerialIndex());
      assertEquals((-65299136460000L), quarter0.getLastMillisecond());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals((-177.0), pieLabelRecord0.getGap(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getAngle(), 0.01);
      assertEquals((-1843.0), pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-1847.0), pieLabelRecord0.getLowerY(), 0.01);
      assertNotNull(pieLabelRecord0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord0);
      assertEquals(1, pieLabelDistributor0.getItemCount());
      assertEquals("Tue Oct 04 22:59:00 GMT 101", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(101, quarter0.getYearValue());
      assertEquals((-65299136460000L), quarter0.getFirstMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(408L, quarter0.getSerialIndex());
      assertEquals((-65299136460000L), quarter0.getLastMillisecond());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals((-177.0), pieLabelRecord0.getGap(), 0.01);
      assertEquals((-1845.0), pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(4.0, pieLabelRecord0.getAngle(), 0.01);
      assertEquals((-1843.0), pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-1847.0), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      PieLabelRecord pieLabelRecord1 = new PieLabelRecord(quarter0, (-177), (-1845), textBox0, 604.583699110638, (-1845), 1308.735483);
      assertFalse(pieLabelRecord1.equals((Object)pieLabelRecord0));
      assertEquals("Tue Oct 04 22:59:00 GMT 101", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(101, quarter0.getYearValue());
      assertEquals((-65299136460000L), quarter0.getFirstMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(408L, quarter0.getSerialIndex());
      assertEquals((-65299136460000L), quarter0.getLastMillisecond());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals((-1542.708150444681), pieLabelRecord1.getUpperY(), 0.01);
      assertEquals((-2147.291849555319), pieLabelRecord1.getLowerY(), 0.01);
      assertEquals((-1845.0), pieLabelRecord1.getGap(), 0.01);
      assertEquals((-1845.0), pieLabelRecord1.getAllocatedY(), 0.01);
      assertEquals(1308.735483, pieLabelRecord1.getLinkPercent(), 0.01);
      assertEquals((-177.0), pieLabelRecord1.getAngle(), 0.01);
      assertEquals((-1845.0), pieLabelRecord1.getBaseY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord1.getLabelHeight(), 0.01);
      assertNotNull(pieLabelRecord1);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord1);
      assertFalse(pieLabelRecord1.equals((Object)pieLabelRecord0));
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertEquals("Tue Oct 04 22:59:00 GMT 101", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(101, quarter0.getYearValue());
      assertEquals((-65299136460000L), quarter0.getFirstMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(408L, quarter0.getSerialIndex());
      assertEquals((-65299136460000L), quarter0.getLastMillisecond());
      assertEquals(HorizontalAlignment.CENTER, textBlock0.getLineAlignment());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals((-1542.708150444681), pieLabelRecord1.getUpperY(), 0.01);
      assertEquals((-2147.291849555319), pieLabelRecord1.getLowerY(), 0.01);
      assertEquals((-1845.0), pieLabelRecord1.getGap(), 0.01);
      assertEquals((-1845.0), pieLabelRecord1.getAllocatedY(), 0.01);
      assertEquals(1308.735483, pieLabelRecord1.getLinkPercent(), 0.01);
      assertEquals((-177.0), pieLabelRecord1.getAngle(), 0.01);
      assertEquals((-1845.0), pieLabelRecord1.getBaseY(), 0.01);
      assertEquals(604.583699110638, pieLabelRecord1.getLabelHeight(), 0.01);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotSame(pieLabelRecord1, pieLabelRecord0);
      
      PieLabelRecord pieLabelRecord2 = pieLabelDistributor0.getPieLabelRecord(0);
      assertFalse(pieLabelRecord2.equals((Object)pieLabelRecord1));
      assertEquals(604.583699110638, pieLabelRecord2.getLinkPercent(), 0.01);
      assertEquals(4.0, pieLabelRecord2.getAngle(), 0.01);
      assertEquals((-177.0), pieLabelRecord2.getGap(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getAllocatedY(), 0.01);
      assertEquals((-1843.0), pieLabelRecord2.getUpperY(), 0.01);
      assertEquals((-1845.0), pieLabelRecord2.getBaseY(), 0.01);
      assertEquals(4.0, pieLabelRecord2.getLabelHeight(), 0.01);
      assertEquals((-1847.0), pieLabelRecord2.getLowerY(), 0.01);
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelRecord2);
      assertSame(pieLabelRecord2, pieLabelRecord0);
      assertNotSame(pieLabelRecord2, pieLabelRecord1);
      
      pieLabelDistributor0.distributeLabels((-177), (-177));
      assertEquals(2, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.adjustInwards();
      assertEquals(2, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.sort();
      assertEquals(2, pieLabelDistributor0.getItemCount());
      
      String string0 = pieLabelDistributor0.toString();
      assertEquals(2, pieLabelDistributor0.getItemCount());
      assertNotNull(string0);
      
      pieLabelDistributor0.adjustDownwards(1, 1);
      assertEquals(2, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(3544);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.spreadEvenly(3544, 3544);
      assertEquals(0, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor((-72));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      pieLabelDistributor0.distributeLabels((-72), (-72));
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      pieLabelDistributor0.distributeLabels((-72), (-72));
      assertEquals(0, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor((-177));
      pieLabelDistributor0.adjustDownwards((-177), (-177));
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("no1");
      Millisecond millisecond0 = new Millisecond(mockDate0, timeZone0, locale0);
      locale0.getExtensionKeys();
      TextBox textBox0 = new TextBox("no1");
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord(millisecond0, (-177), 2.0, textBox0, 180.41231131, (-177), 4.0);
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord0);
      Locale locale1 = Locale.ENGLISH;
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale1);
      TextBlock textBlock0 = new TextBlock();
      Color.getColor("no1");
      textBox0.setShadowPaint((Paint) null);
      PieLabelRecord pieLabelRecord1 = new PieLabelRecord(quarter0, 382, 1, textBox0, (-177), 0.0, 382);
      pieLabelDistributor0.addPieLabelRecord(pieLabelRecord1);
      pieLabelDistributor0.getPieLabelRecord(0);
      pieLabelDistributor0.distributeLabels((-177), (-177));
      pieLabelDistributor0.sort();
      pieLabelDistributor0.adjustInwards();
      pieLabelDistributor0.sort();
      pieLabelDistributor0.toString();
      pieLabelDistributor0.adjustInwards();
      assertEquals(2, pieLabelDistributor0.getItemCount());
  }
}
