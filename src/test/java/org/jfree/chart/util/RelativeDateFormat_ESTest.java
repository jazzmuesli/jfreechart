/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:39:42 GMT 2019
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.Clock;
import java.time.Instant;
import java.time.temporal.TemporalAdjuster;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.RelativeDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class RelativeDateFormat_ESTest extends RelativeDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      RelativeDateFormat relativeDateFormat1 = (RelativeDateFormat)relativeDateFormat0.clone();
      relativeDateFormat1.setBaseMillis(1L);
      relativeDateFormat0.equals(relativeDateFormat1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.getHourSuffix();
      relativeDateFormat0.setPositivePrefix("h");
      relativeDateFormat0.hashCode();
      MockDate mockDate0 = new MockDate(1889L);
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      DateFormat.getDateTimeInstance();
      relativeDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateFormat.getTimeInstance(0, locale0);
      DateFormat.getDateInstance(0);
      locale0.getDisplayScript();
      relativeDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      DateFormat.getDateInstance(0, locale0);
      relativeDateFormat0.hashCode();
      relativeDateFormat0.setShowZeroHours(false);
      relativeDateFormat0.hashCode();
      RelativeDateFormat relativeDateFormat1 = new RelativeDateFormat();
      relativeDateFormat1.setShowZeroHours(false);
      relativeDateFormat0.equals(relativeDateFormat1);
      relativeDateFormat0.hashCode();
      relativeDateFormat0.setPositivePrefix("h");
      relativeDateFormat0.getShowZeroDays();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      // Undeclared exception!
      try { 
        relativeDateFormat0.setMinuteSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'suffix' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      RelativeDateFormat relativeDateFormat1 = (RelativeDateFormat)relativeDateFormat0.clone();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("4*yV85-jRSaa");
      relativeDateFormat1.setSecondFormatter(choiceFormat0);
      relativeDateFormat0.equals(relativeDateFormat1);
      relativeDateFormat1.getPositivePrefix();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(28L);
      RelativeDateFormat relativeDateFormat1 = (RelativeDateFormat)relativeDateFormat0.clone();
      relativeDateFormat1.setCalendar((Calendar) null);
      // Undeclared exception!
      try { 
        relativeDateFormat0.equals(relativeDateFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.getHourSuffix();
      relativeDateFormat0.setPositivePrefix("h");
      relativeDateFormat0.hashCode();
      MockDate mockDate0 = new MockDate(1889L);
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      DateFormat.getDateTimeInstance();
      relativeDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateFormat.getTimeInstance(0, locale0);
      DateFormat.getDateInstance(0);
      locale0.getDisplayScript();
      relativeDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      DateFormat.getDateInstance(0, locale0);
      relativeDateFormat0.hashCode();
      relativeDateFormat0.setShowZeroHours(false);
      relativeDateFormat0.hashCode();
      RelativeDateFormat relativeDateFormat1 = new RelativeDateFormat();
      relativeDateFormat0.equals(relativeDateFormat1);
      relativeDateFormat0.hashCode();
      relativeDateFormat0.setPositivePrefix("h");
      relativeDateFormat0.getShowZeroDays();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      RelativeDateFormat relativeDateFormat1 = (RelativeDateFormat)relativeDateFormat0.clone();
      relativeDateFormat1.setLenient(false);
      relativeDateFormat0.equals(relativeDateFormat1);
      relativeDateFormat1.getHourSuffix();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.getHourSuffix();
      relativeDateFormat0.setPositivePrefix("h");
      relativeDateFormat0.hashCode();
      MockDate mockDate0 = new MockDate(1889L);
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      DateFormat.getDateTimeInstance();
      StringBuffer stringBuffer1 = relativeDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateFormat.getTimeInstance(0, locale0);
      DateFormat.getDateInstance(0);
      locale0.getDisplayScript();
      relativeDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      DateFormat.getDateInstance(0, locale0);
      relativeDateFormat0.hashCode();
      relativeDateFormat0.setShowZeroHours(false);
      relativeDateFormat0.hashCode();
      RelativeDateFormat relativeDateFormat1 = (RelativeDateFormat)relativeDateFormat0.clone();
      relativeDateFormat0.equals(relativeDateFormat1);
      relativeDateFormat0.hashCode();
      relativeDateFormat0.setPositivePrefix("h");
      relativeDateFormat0.getShowZeroDays();
      Object object0 = new Object();
      relativeDateFormat1.equals(object0);
      MockDate mockDate1 = new MockDate((-1254L));
      relativeDateFormat1.format((Date) mockDate1, stringBuffer1, fieldPosition0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      relativeDateFormat0.setHourFormatter(numberFormat0);
      relativeDateFormat0.getSecondSuffix();
      relativeDateFormat0.getSecondSuffix();
      RelativeDateFormat relativeDateFormat1 = new RelativeDateFormat();
      relativeDateFormat0.equals(relativeDateFormat1);
      int int0 = (-2147483646);
      MockDate mockDate0 = new MockDate((-2249), (-2147483646), 1, 1, (-2147483646));
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "s", 503, 503);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2147400944, (-2147483646), 2568, (-2147483646), (-1633), 2147400944);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(date0);
      DateFormat.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      relativeDateFormat0.setShowZeroDays(true);
      mockGregorianCalendar0.clone();
      mockGregorianCalendar0.set(32, (-734), 596, (-1430), 32);
      stringBuffer0.codePoints();
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-452));
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      relativeDateFormat0.setNumberFormat(numberFormat0);
      relativeDateFormat0.format(date0, stringBuffer0, fieldPosition0);
      relativeDateFormat0.format(date0, stringBuffer0, fieldPosition0);
      relativeDateFormat0.format(date0, stringBuffer0, fieldPosition0);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      RelativeDateFormat relativeDateFormat1 = new RelativeDateFormat((-296L));
      relativeDateFormat0.equals(relativeDateFormat1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate(19130950800228L);
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(mockDate0);
      Instant instant0 = MockInstant.ofEpochSecond(19130950800228L);
      Instant instant1 = MockInstant.plusSeconds(instant0, 19130950800228L);
      Date.from(instant1);
      relativeDateFormat0.setTimeZone((TimeZone) null);
      relativeDateFormat0.setShowZeroHours(false);
      relativeDateFormat0.getSecondSuffix();
      relativeDateFormat0.getHourSuffix();
      // Undeclared exception!
      try { 
        relativeDateFormat0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(0L);
      RelativeDateFormat relativeDateFormat1 = (RelativeDateFormat)relativeDateFormat0.clone();
      relativeDateFormat1.setDaySuffix("#e([Uuj'j3t");
      relativeDateFormat1.setSecondSuffix("h");
      relativeDateFormat0.equals(relativeDateFormat1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(0L);
      relativeDateFormat0.equals(relativeDateFormat0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-643L));
      mockDate0.getTime();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(mockDate0);
      relativeDateFormat0.setSecondSuffix("-?a3y%F$(;&a([r");
      relativeDateFormat0.getHourSuffix();
      relativeDateFormat0.getSecondSuffix();
      relativeDateFormat0.getPositivePrefix();
      relativeDateFormat0.getPositivePrefix();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuffer0, 0, 0);
      StringBuffer stringBuffer1 = stringWriter2.getBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      relativeDateFormat0.format((Date) mockDate0, stringBuffer1, fieldPosition0);
      relativeDateFormat0.setHourSuffix("-?a3y%F$(;&a([r");
      relativeDateFormat0.setPositivePrefix("eBf<>jajC");
      relativeDateFormat0.clone();
      relativeDateFormat0.getPositivePrefix();
      relativeDateFormat0.setMinuteSuffix("-?a3y%F$(;&a([r");
      ParsePosition parsePosition0 = new ParsePosition(0);
      relativeDateFormat0.parse(",o}|6O\"%;b-$+MDhu", parsePosition0);
      relativeDateFormat0.getBaseMillis();
      relativeDateFormat0.setBaseMillis(1L);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = new Locale("", "", "9uM#~-4\"u&!h&D");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      locale0.clone();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(date0);
      NumberFormat numberFormat0 = relativeDateFormat0.getNumberFormat();
      relativeDateFormat0.setSecondFormatter(numberFormat0);
      NumberFormat numberFormat1 = NumberFormat.getInstance(locale0);
      numberFormat1.setMinimumIntegerDigits(0);
      relativeDateFormat0.setMinuteFormatter(numberFormat1);
      relativeDateFormat0.getDaySuffix();
      NumberFormat numberFormat2 = NumberFormat.getIntegerInstance(locale0);
      relativeDateFormat0.setDayFormatter(numberFormat2);
      relativeDateFormat0.getSecondSuffix();
      relativeDateFormat0.setShowZeroDays(true);
      relativeDateFormat0.getShowZeroDays();
      relativeDateFormat0.getDaySuffix();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.setSecondSuffix("DvYc");
      DateFormat.getDateInstance();
      relativeDateFormat0.setDaySuffix("DvYc");
      relativeDateFormat0.setPositivePrefix("ecO;vC");
      DateFormat.getInstance();
      relativeDateFormat0.setPositivePrefix("U/e|r");
      DateFormat.getTimeInstance(0);
      DateFormat.getDateInstance(0);
      relativeDateFormat0.setMinuteSuffix("U/e|r");
      relativeDateFormat0.setHourSuffix("");
      relativeDateFormat0.getShowZeroHours();
      relativeDateFormat0.getHourSuffix();
      relativeDateFormat0.getShowZeroHours();
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("ecO;vC", (DecimalFormatSymbols) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.parseObject("L", (ParsePosition) null);
      relativeDateFormat0.setSecondSuffix("");
      String string0 = "0qT:=";
      relativeDateFormat0.setMinuteSuffix("0qT:=");
      relativeDateFormat0.setHourSuffix("4b?5gnteR)Y^");
      relativeDateFormat0.getShowZeroDays();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setMultiplier((-1));
      decimalFormat0.format(0L);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      relativeDateFormat0.setHourFormatter(decimalFormat0);
      relativeDateFormat0.setMinuteSuffix("");
      relativeDateFormat0.getPositivePrefix();
      relativeDateFormat0.getSecondSuffix();
      relativeDateFormat0.setSecondSuffix("Cc+{ijkUi&{.@%");
      relativeDateFormat0.getPositivePrefix();
      relativeDateFormat0.getShowZeroHours();
      relativeDateFormat0.setShowZeroDays(false);
      relativeDateFormat0.setHourFormatter(numberFormat0);
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.setShowZeroHours(false);
      boolean boolean0 = true;
      String string0 = "ef";
      relativeDateFormat0.setMinuteSuffix("ef");
      // Undeclared exception!
      try { 
        relativeDateFormat0.setDayFormatter((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(0L);
      Locale locale0 = Locale.FRENCH;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale1 = Locale.GERMAN;
      locale0.getDisplayVariant(locale1);
      locale0.getScript();
      Locale.setDefault(locale_Category0, locale0);
      locale0.toLanguageTag();
      DateFormat.getInstance();
      DateFormat.getTimeInstance(0, locale0);
      NumberFormat numberFormat0 = relativeDateFormat0.getNumberFormat();
      relativeDateFormat0.setNumberFormat(numberFormat0);
      relativeDateFormat0.getShowZeroDays();
      relativeDateFormat0.clone();
      relativeDateFormat0.getPositivePrefix();
      TimeZone timeZone0 = relativeDateFormat0.getTimeZone();
      relativeDateFormat0.setTimeZone(timeZone0);
      relativeDateFormat0.setMinuteSuffix("");
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      decimalFormatSymbols0.setMonetaryDecimalSeparator(']');
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      relativeDateFormat0.setDayFormatter(decimalFormat0);
      relativeDateFormat0.equals(decimalFormat0);
      relativeDateFormat0.getMinuteSuffix();
      relativeDateFormat0.getSecondSuffix();
      relativeDateFormat0.getShowZeroDays();
      relativeDateFormat0.getHourSuffix();
      relativeDateFormat0.setSecondSuffix("4T}Ug,,$Z)lS)V?n)AL");
      relativeDateFormat0.setHourSuffix("4T}Ug,,$Z)lS)V?n)AL");
      relativeDateFormat0.setHourFormatter(decimalFormat0);
      relativeDateFormat0.setMinuteFormatter(decimalFormat0);
      relativeDateFormat0.setPositivePrefix("Ay5eR8XV.JU(?K");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = 3600000L;
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(3600000L);
      String string0 = null;
      // Undeclared exception!
      try { 
        relativeDateFormat0.setPositivePrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'prefix' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(date0);
      relativeDateFormat0.clone();
      relativeDateFormat0.clone();
      // Undeclared exception!
      try { 
        relativeDateFormat0.setHourSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'suffix' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      DateFormat.getDateInstance();
      relativeDateFormat0.setSecondSuffix("");
      DateFormat.getDateTimeInstance();
      relativeDateFormat0.clone();
      relativeDateFormat0.clone();
      boolean boolean0 = false;
      String string0 = null;
      relativeDateFormat0.clone();
      // Undeclared exception!
      try { 
        relativeDateFormat0.setDaySuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'suffix' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(mockDate0);
      NumberFormat numberFormat0 = null;
      mockDate0.toInstant();
      // Undeclared exception!
      try { 
        relativeDateFormat0.setHourFormatter((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(698L);
      DateFormat.getTimeInstance();
      relativeDateFormat0.setShowZeroHours(true);
      relativeDateFormat0.getPositivePrefix();
      // Undeclared exception!
      try { 
        relativeDateFormat0.setSecondFormatter((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3013), (-3013), 0, 0, 0, 1043);
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(mockDate0);
      relativeDateFormat0.format((Date) mockDate0);
      relativeDateFormat0.getBaseMillis();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat((String) null, decimalFormatSymbols0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat((-2085L));
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      Locale locale0 = Locale.ITALIAN;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      StringBuffer stringBuffer1 = decimalFormat0.format((double) (-2085L), stringBuffer0, fieldPosition0);
      stringBuffer1.insert(0, "S'y");
      numberFormat0.format((double) (-2085L), stringBuffer1, fieldPosition0);
      NumberFormat.getNumberInstance(locale0);
      relativeDateFormat0.setNumberFormat(numberFormat0);
      relativeDateFormat0.hashCode();
      relativeDateFormat0.getBaseMillis();
      relativeDateFormat0.setDayFormatter(numberFormat0);
      relativeDateFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long long0 = 0L;
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(0L);
      String string0 = null;
      // Undeclared exception!
      try { 
        relativeDateFormat0.setSecondSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'suffix' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      Instant instant0 = MockInstant.now(clock0);
      Instant instant1 = MockInstant.from(instant0);
      Date date0 = Date.from(instant1);
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(date0);
      relativeDateFormat0.setShowZeroDays(false);
      relativeDateFormat0.getDaySuffix();
      relativeDateFormat0.equals(instant0);
      relativeDateFormat0.getDaySuffix();
      relativeDateFormat0.getBaseMillis();
      relativeDateFormat0.getMinuteSuffix();
      relativeDateFormat0.getShowZeroDays();
      relativeDateFormat0.setMinuteSuffix("S[13]QLo<^&9]U:h");
      relativeDateFormat0.getShowZeroDays();
      relativeDateFormat0.setShowZeroHours(false);
      relativeDateFormat0.setShowZeroDays(false);
      relativeDateFormat0.setShowZeroHours(false);
      relativeDateFormat0.setPositivePrefix("ZnA$A~");
      relativeDateFormat0.getShowZeroDays();
      relativeDateFormat0.hashCode();
      relativeDateFormat0.setBaseMillis(0L);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.getBaseMillis();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      int int0 = 0;
      MockDate mockDate1 = new MockDate(3249, 0, 0, 3249, 3249);
      mockDate1.getTime();
      Instant instant0 = mockDate0.toInstant();
      Instant instant1 = MockInstant.with(instant0, (TemporalAdjuster) instant0);
      Date.from(instant1);
      Instant instant2 = mockDate1.toInstant();
      Date.from(instant2);
      mockDate0.after(mockDate1);
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(mockDate0);
      relativeDateFormat0.getDaySuffix();
      relativeDateFormat0.getShowZeroDays();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-803));
      // Undeclared exception!
      try { 
        relativeDateFormat0.format((Date) mockDate1, (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RelativeDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(0L);
      relativeDateFormat0.setShowZeroHours(false);
      relativeDateFormat0.equals("f5XsV$T!'}3(|JckxK");
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      Locale locale0 = Locale.FRANCE;
      NumberFormat numberFormat1 = NumberFormat.getCurrencyInstance(locale0);
      NumberFormat.getCurrencyInstance(locale0);
      relativeDateFormat0.setNumberFormat(numberFormat1);
      Locale locale1 = new Locale("f5XsV$T!'}3(|JckxK", "~}3ry/ig>*]Kc", "org.jfree.chart.util.RelativeDateFormat");
      DateFormat.getTimeInstance(0, locale1);
      NumberFormat.getCurrencyInstance();
      NumberFormat.getCurrencyInstance();
      relativeDateFormat0.setDayFormatter(numberFormat0);
      relativeDateFormat0.setHourFormatter(numberFormat0);
      relativeDateFormat0.getMinuteSuffix();
      relativeDateFormat0.getPositivePrefix();
      ParsePosition parsePosition0 = new ParsePosition(0);
      parsePosition0.setErrorIndex((-2319));
      relativeDateFormat0.parse("", parsePosition0);
      relativeDateFormat0.getShowZeroHours();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-56L));
      mockDate0.toInstant();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(mockDate0);
      relativeDateFormat0.setShowZeroDays(false);
      DateFormat.getDateInstance();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      relativeDateFormat0.setDayFormatter(numberFormat0);
      relativeDateFormat0.hashCode();
      relativeDateFormat0.setHourFormatter(numberFormat0);
      relativeDateFormat0.setShowZeroDays(false);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(2375L);
      relativeDateFormat0.setShowZeroHours(false);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(mockDate0);
      relativeDateFormat0.getTimeZone();
      relativeDateFormat0.setMinuteSuffix("W>U@.';Q");
      relativeDateFormat0.setDaySuffix("suffix");
      relativeDateFormat0.getSecondSuffix();
      relativeDateFormat0.setHourSuffix("s");
      mockDate0.clone();
      relativeDateFormat0.getDaySuffix();
      relativeDateFormat0.getShowZeroHours();
      relativeDateFormat0.getSecondSuffix();
      relativeDateFormat0.getPositivePrefix();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3570, 3570, 3570);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(date0);
      Locale locale0 = Locale.CANADA_FRENCH;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      relativeDateFormat0.setSecondFormatter(numberFormat0);
      relativeDateFormat0.getMinuteSuffix();
      relativeDateFormat0.setBaseMillis(3570);
      relativeDateFormat0.equals(locale0);
      relativeDateFormat0.setShowZeroDays(false);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat((-1312L));
      relativeDateFormat0.setPositivePrefix("");
      ParsePosition parsePosition0 = new ParsePosition((-1022));
      parsePosition0.setIndex((-712));
      parsePosition0.setErrorIndex((-1022));
      parsePosition0.setErrorIndex((-66));
      parsePosition0.setIndex((-1591));
      relativeDateFormat0.parseObject("(KFd", parsePosition0);
      relativeDateFormat0.getSecondSuffix();
      relativeDateFormat0.hashCode();
      relativeDateFormat0.setSecondSuffix("s");
      NumberFormat numberFormat0 = null;
      // Undeclared exception!
      try { 
        relativeDateFormat0.setMinuteFormatter((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(3048L);
      relativeDateFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(2916L);
      relativeDateFormat0.setSecondSuffix("");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(0L);
      Object object0 = relativeDateFormat0.clone();
      relativeDateFormat0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.clone();
      ParsePosition parsePosition0 = new ParsePosition(163);
      relativeDateFormat0.parse("b~Ck(n7:|I?i-~", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = null;
      try {
        relativeDateFormat0 = new RelativeDateFormat((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RelativeDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.getShowZeroDays();
      relativeDateFormat0.setDaySuffix("prefix");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-495), (-495), (-1), (-1), 0, (-1));
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(mockDate0);
      String string0 = "0";
      ParsePosition parsePosition0 = new ParsePosition((-1));
      mockDate0.setTime((-772L));
      StringBuffer stringBuffer0 = new StringBuffer("");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.CANADA_FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      relativeDateFormat0.setCalendar(mockGregorianCalendar0);
      relativeDateFormat0.format((Date) mockDate0, stringBuffer0, (FieldPosition) null);
      // Undeclared exception!
      try { 
        relativeDateFormat0.format((Object) parsePosition0, stringBuffer0, (FieldPosition) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(1072L);
      MockDate mockDate0 = new MockDate((-2434), (-2434), 1, (-2434), 0, (-89));
      relativeDateFormat0.format((Date) mockDate0);
      relativeDateFormat0.getPositivePrefix();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      mockDate0.toInstant();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(mockDate0);
      Locale locale0 = Locale.GERMAN;
      DateFormat.getDateTimeInstance(0, 0, locale0);
      relativeDateFormat0.getHourSuffix();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(2588L);
      relativeDateFormat0.getDaySuffix();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.setMinuteSuffix("");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(0L);
      Locale locale0 = Locale.JAPANESE;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      relativeDateFormat0.setSecondFormatter(numberFormat0);
      relativeDateFormat0.getMinuteSuffix();
      relativeDateFormat0.setDaySuffix("m");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      relativeDateFormat0.setMinuteFormatter(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(mockDate0);
      relativeDateFormat0.setShowZeroDays(false);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.setShowZeroDays(true);
      relativeDateFormat0.getSecondSuffix();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.setPositivePrefix("^<7\"l");
      relativeDateFormat0.setBaseMillis(3600000L);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      NumberFormat.getIntegerInstance();
      try { 
        numberFormat0.parse("/x1Ged+`w0rT/mM+p1");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable number: \"/x1Ged+`w0rT/mM+p1\"
         //
         verifyException("java.text.NumberFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      RelativeDateFormat relativeDateFormat1 = (RelativeDateFormat)relativeDateFormat0.clone();
      MockDate mockDate0 = new MockDate((-337), 3258, 3258);
      relativeDateFormat1.format((Date) mockDate0);
      relativeDateFormat1.setShowZeroHours(false);
      relativeDateFormat0.equals(relativeDateFormat1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(0L);
      RelativeDateFormat relativeDateFormat1 = (RelativeDateFormat)relativeDateFormat0.clone();
      relativeDateFormat1.setHourSuffix("");
      relativeDateFormat0.equals(relativeDateFormat1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      RelativeDateFormat relativeDateFormat1 = (RelativeDateFormat)relativeDateFormat0.clone();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance();
      relativeDateFormat1.setSecondFormatter(decimalFormat0);
      relativeDateFormat0.equals(relativeDateFormat1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(2438L);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      relativeDateFormat0.setHourFormatter(decimalFormat0);
      relativeDateFormat0.getSecondSuffix();
      RelativeDateFormat relativeDateFormat1 = new RelativeDateFormat();
      relativeDateFormat0.equals(relativeDateFormat1);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      MockDate mockDate0 = new MockDate(0L);
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(mockDate0);
      RelativeDateFormat relativeDateFormat1 = (RelativeDateFormat)relativeDateFormat0.clone();
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition((-1));
      relativeDateFormat1.getSecondSuffix();
      // Undeclared exception!
      try { 
        relativeDateFormat1.format((Object) instant0, stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Locale locale0 = Locale.UK;
      Locale locale1 = Locale.GERMAN;
      locale0.getDisplayVariant(locale1);
      locale0.getScript();
      locale0.toLanguageTag();
      DateFormat.getInstance();
      DateFormat.getTimeInstance(0, locale0);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      decimalFormatSymbols0.setMonetaryDecimalSeparator(']');
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("ZLy{Ct1xU:a3CG");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      relativeDateFormat0.isLenient();
      Calendar.getAvailableCalendarTypes();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      relativeDateFormat0.setPositivePrefix("ZLy{Ct1xU:a3CG");
      mockDate0.after(date0);
      relativeDateFormat0.format((Date) mockDate0);
      relativeDateFormat0.getHourSuffix();
      relativeDateFormat0.getSecondSuffix();
      relativeDateFormat0.getSecondSuffix();
      DecimalFormat decimalFormat0 = new DecimalFormat("ZLy{Ct1xU:a3CG16,115d20h21m21.320s");
      StringBuffer stringBuffer0 = new StringBuffer("s");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      mockDate0.toInstant();
      fieldPosition0.setBeginIndex((-3979));
      StringBuffer stringBuffer1 = relativeDateFormat0.format(date0, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = decimalFormat0.format(1533.593759, stringBuffer1, fieldPosition0);
      relativeDateFormat0.format((Date) mockDate0, stringBuffer2, fieldPosition0);
      relativeDateFormat0.setDayFormatter(decimalFormat0);
      relativeDateFormat0.getBaseMillis();
      relativeDateFormat0.setMinuteSuffix("h");
      relativeDateFormat0.hashCode();
      relativeDateFormat0.setShowZeroHours(true);
      relativeDateFormat0.setDaySuffix("s");
      relativeDateFormat0.setPositivePrefix("s");
      ParsePosition parsePosition0 = new ParsePosition((-3979));
      parsePosition0.setIndex(374);
      relativeDateFormat0.parse("ZLy{Ct1xU:a3CG16,115d20h21m21.320s", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      relativeDateFormat0.getTimeZone();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      numberFormat0.setMinimumIntegerDigits(1114);
      NumberFormat.getPercentInstance();
      relativeDateFormat0.setSecondFormatter(numberFormat0);
      Long long0 = new Long(1114);
      relativeDateFormat0.equals(long0);
      DateFormat.getDateInstance();
      relativeDateFormat0.getSecondSuffix();
      relativeDateFormat0.getBaseMillis();
      relativeDateFormat0.setBaseMillis(293L);
      relativeDateFormat0.setSecondSuffix("");
      relativeDateFormat0.setMinuteFormatter(numberFormat0);
      relativeDateFormat0.clone();
      relativeDateFormat0.setShowZeroHours(true);
      relativeDateFormat0.setMinuteSuffix("");
      relativeDateFormat0.getMinuteSuffix();
      relativeDateFormat0.getHourSuffix();
      relativeDateFormat0.getPositivePrefix();
      relativeDateFormat0.setBaseMillis(2084L);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(0L);
      relativeDateFormat0.clone();
      relativeDateFormat0.getShowZeroHours();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      Object object0 = relativeDateFormat0.clone();
      relativeDateFormat0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      String string0 = "d";
      relativeDateFormat0.setShowZeroDays(false);
      relativeDateFormat0.setSecondSuffix("d");
      long long0 = 0L;
      relativeDateFormat0.setBaseMillis(0L);
      int int0 = 3;
      relativeDateFormat0.getNumberFormat();
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.getHourSuffix();
      relativeDateFormat0.setPositivePrefix("h");
      relativeDateFormat0.hashCode();
      MockDate mockDate0 = new MockDate(1889L);
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      DateFormat.getDateTimeInstance();
      relativeDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateFormat.getTimeInstance(0, locale0);
      DateFormat.getDateInstance(0);
      locale0.getDisplayScript();
      StringBuffer stringBuffer1 = relativeDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      DateFormat.getDateInstance(0, locale0);
      relativeDateFormat0.hashCode();
      relativeDateFormat0.setShowZeroHours(false);
      relativeDateFormat0.hashCode();
      RelativeDateFormat relativeDateFormat1 = new RelativeDateFormat();
      relativeDateFormat1.setShowZeroHours(false);
      relativeDateFormat0.equals(relativeDateFormat1);
      relativeDateFormat0.hashCode();
      relativeDateFormat0.setPositivePrefix("h");
      relativeDateFormat0.getShowZeroDays();
      relativeDateFormat1.format((Date) mockDate0, stringBuffer1, fieldPosition0);
      assertEquals(30, stringBuffer1.length());
      
      relativeDateFormat1.getMinuteSuffix();
      assertEquals("d", relativeDateFormat1.getDaySuffix());
  }
}
