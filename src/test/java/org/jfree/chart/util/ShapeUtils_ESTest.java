/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 20:58:28 GMT 2019
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Path2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.Size2D;
import org.jfree.chart.util.ShapeUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ShapeUtils_ESTest extends ShapeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      boolean boolean0 = ShapeUtils.isPointInRect(rectangle2D0, 0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JTable jTable0 = new JTable();
      Rectangle rectangle0 = jTable0.getBounds();
      boolean boolean0 = ShapeUtils.intersects(rectangle0, rectangle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, (-1.0F), 3691.0F, (-1.0F));
      Rectangle2D rectangle2D0 = rectangle2D_Float0.getBounds2D();
      boolean boolean0 = ShapeUtils.contains(rectangle2D0, rectangle2D_Float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1229.879, (-1.0), (-663.49), 2486.911526336797);
      Size2D size2D0 = new Size2D();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 935.35234516634, (-1.0), rectangleAnchor0);
      rectangle2D_Double0.setRect(1933.63232421875, 279.98751416707, (-1.0), 0.0);
      boolean boolean0 = ShapeUtils.contains(rectangle2D0, rectangle2D_Double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, 1.0F, 126.36073F, 0.0F);
      rectangle2D_Float0.x = 126.36073F;
      boolean boolean0 = ShapeUtils.contains(rectangle2D_Float0, rectangle2D_Float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Point2D.Double point2D_Double0 = (Point2D.Double)ShapeUtils.getPointInRectangle(0, 2.0, rectangle0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.setLine(320.6786F, 320.6786F, 0.0F, 2328.756F);
      GeneralPath generalPath0 = (GeneralPath)ShapeUtils.createLineRegion(line2D_Float0, 320.6786F);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.setLine((-511.959), Double.NaN, Double.NaN, (-511.959));
      line2D_Float0.x2 = (float) 0;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtils.createLineRegion(line2D_Float0, 0.0F);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      Rectangle rectangle0 = new Rectangle(0, (-775), 0, 0);
      Point2D point2D0 = rectangleAnchor0.getAnchorPoint(rectangle0);
      Line2D.Float line2D_Float0 = new Line2D.Float(point2D0, point2D0);
      GeneralPath generalPath0 = (GeneralPath)ShapeUtils.createLineRegion(line2D_Float0, 0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GeneralPath generalPath0 = (GeneralPath)ShapeUtils.createRegularCross(0.0F, (-1.0F));
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = ShapeUtils.createDiamond(0.0F);
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtils.rotateShape(shape0, 0.5, 704.027F, 0.0F);
      assertEquals(1, path2D_Double0.getWindingRule());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      Size2D size2D0 = new Size2D();
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 2.0, (-1.0F), rectangleAnchor0);
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtils.createTranslatedShape((Shape) rectangle2D0, rectangleAnchor0, 70.94425715, 1859.02313107002);
      assertEquals(1, path2D_Double0.getWindingRule());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Polygon polygon1 = new Polygon();
      boolean boolean0 = ShapeUtils.equal(polygon0, polygon1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      boolean boolean0 = ShapeUtils.equal((Arc2D) arc2D_Double0, (Arc2D) arc2D_Float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Line2D.Float line2D_Float1 = (Line2D.Float)ShapeUtils.clone(line2D_Float0);
      boolean boolean0 = ShapeUtils.equal((Line2D) line2D_Float1, (Line2D) line2D_Float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = ShapeUtils.createDiagonalCross((-1.0F), 0);
      Shape shape1 = ShapeUtils.createRegularCross(0.0F, 0.0F);
      boolean boolean0 = ShapeUtils.equal(shape0, shape1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Polygon polygon1 = new Polygon(polygon0.ypoints, polygon0.ypoints, 0);
      boolean boolean0 = ShapeUtils.equal((Shape) polygon1, (Shape) polygon0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Shape shape0 = ShapeUtils.clone(polygon0);
      assertNull(shape0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ShapeUtils.isPointInRect((Rectangle2D) null, 0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ShapeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        ShapeUtils.intersects((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ShapeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        ShapeUtils.getPointInRectangle((-653.32), 0.0F, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ShapeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        ShapeUtils.createLineRegion((Line2D) null, (-1075.2F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ShapeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0, (-775), 0, 0);
      // Undeclared exception!
      try { 
        ShapeUtils.contains(rectangle0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ShapeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GeneralPath generalPath0 = (GeneralPath)ShapeUtils.createDownTriangle((-1.0F));
      boolean boolean0 = ShapeUtils.equal(generalPath0, generalPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      boolean boolean0 = ShapeUtils.equal((Ellipse2D) ellipse2D_Float0, (Ellipse2D) ellipse2D_Float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      boolean boolean0 = ShapeUtils.isPointInRect(rectangle2D0, 0, 24.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((-2330.253815354302), 2.0, 2464.347337237587, (-2.147483648E9));
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      boolean boolean0 = ShapeUtils.isPointInRect(rectangle2D0, 2.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-738.14025432), (-738.14025432), (-4066.3814504431352), (-738.14025432));
      boolean boolean0 = ShapeUtils.isPointInRect(rectangle2D_Double0, (-738.14025432), (-738.14025432));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((-663.49), 0.0, 703.7533F, 1229.879);
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      boolean boolean0 = ShapeUtils.isPointInRect(rectangle2D0, (-472.59), 279.98751416707);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      boolean boolean0 = ShapeUtils.isPointInRect(rectangle2D0, (-3068.477297191397), Double.NaN);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1229.879, (-1.0), (-663.49), 2486.911526336797);
      Size2D size2D0 = new Size2D();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 935.35234516634, (-1.0), rectangleAnchor0);
      rectangle2D_Double0.add(rectangle2D0);
      boolean boolean0 = ShapeUtils.intersects(rectangle2D_Double0, rectangle2D_Double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1229.879, 0.5, (-663.49), 2486.911526336797);
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((-663.49), 0.0, 703.7533F, 1229.879);
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      boolean boolean0 = ShapeUtils.intersects(rectangle2D0, rectangle2D_Double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, (-1.0F), 3691.0F, (-1.0F));
      Rectangle2D.Float rectangle2D_Float1 = new Rectangle2D.Float();
      boolean boolean0 = ShapeUtils.intersects(rectangle2D_Float0, rectangle2D_Float1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, (-1.0F), 3691.0F, (-1.0F));
      boolean boolean0 = ShapeUtils.intersects(rectangle2D_Float0, rectangle2D_Float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      boolean boolean0 = ShapeUtils.intersects(rectangle0, rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      boolean boolean0 = ShapeUtils.contains(rectangle0, rectangle2D_Float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Shape shape0 = ShapeUtils.rotateShape((Shape) null, (-1.0F), 57.2F, 1698.0F);
      assertNull(shape0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      // Undeclared exception!
      try { 
        ShapeUtils.createTranslatedShape((Shape) null, rectangleAnchor0, 1.0, (double) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.ShapeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        ShapeUtils.createTranslatedShape((Shape) null, (-1989.51260255), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.ShapeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Shape shape0 = ShapeUtils.createUpTriangle((-1.0F));
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      Shape shape1 = ShapeUtils.createTranslatedShape(shape0, rectangleAnchor0, 0.0, (double) (-1.0F));
      Shape shape2 = ShapeUtils.createTranslatedShape(shape1, 0.0, 2331.475);
      assertNotSame(shape2, shape1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      GeneralPath generalPath0 = (GeneralPath)ShapeUtils.createLineRegion(line2D_Float0, 0.0F);
      GeneralPath generalPath1 = (GeneralPath)ShapeUtils.createDiagonalCross(Float.NaN, 512);
      boolean boolean0 = ShapeUtils.equal(generalPath0, generalPath1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      boolean boolean0 = ShapeUtils.equal(generalPath0, generalPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath(0, 0);
      GeneralPath generalPath1 = (GeneralPath)ShapeUtils.createDiagonalCross((-2201.9844F), 0);
      boolean boolean0 = ShapeUtils.equal(generalPath0, generalPath1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GeneralPath generalPath0 = (GeneralPath)ShapeUtils.createDiagonalCross((-1.0F), 1698.2F);
      boolean boolean0 = ShapeUtils.equal(generalPath0, (GeneralPath) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GeneralPath generalPath0 = (GeneralPath)ShapeUtils.createDiagonalCross((-1.0F), (-1.0F));
      boolean boolean0 = ShapeUtils.equal((GeneralPath) null, generalPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = ShapeUtils.equal((GeneralPath) null, (GeneralPath) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Polygon polygon1 = new Polygon(polygon0.xpoints, polygon0.ypoints, 0);
      boolean boolean0 = ShapeUtils.equal(polygon1, polygon0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      boolean boolean0 = ShapeUtils.equal((Polygon) null, polygon0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = ShapeUtils.equal((Polygon) null, (Polygon) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      boolean boolean0 = ShapeUtils.equal((Arc2D) arc2D_Double0, (Arc2D) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = ShapeUtils.equal((Arc2D) null, (Arc2D) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(0.0F, (-1.0), 2.0F, 0.0);
      boolean boolean0 = ShapeUtils.equal((Ellipse2D) ellipse2D_Float0, (Ellipse2D) ellipse2D_Double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      boolean boolean0 = ShapeUtils.equal((Ellipse2D) ellipse2D_Float0, (Ellipse2D) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = ShapeUtils.equal((Ellipse2D) null, (Ellipse2D) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      boolean boolean0 = ShapeUtils.equal((Ellipse2D) null, (Ellipse2D) ellipse2D_Double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.setLine((-511.959), Double.NaN, Double.NaN, (-511.959));
      line2D_Float0.y1 = (float) 0;
      boolean boolean0 = ShapeUtils.equal((Line2D) line2D_Float0, (Line2D) line2D_Float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.setLine((-511.959), Double.NaN, Double.NaN, (-511.959));
      boolean boolean0 = ShapeUtils.equal((Line2D) line2D_Float0, (Line2D) line2D_Float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(0.0, 0.0, 0.0, 4446.4985298555);
      boolean boolean0 = ShapeUtils.equal((Line2D) line2D_Double0, (Line2D) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      boolean boolean0 = ShapeUtils.equal((Line2D) null, (Line2D) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float(0.0F, 703.7533F, 0.0F, 0.0F);
      boolean boolean0 = ShapeUtils.equal((Line2D) null, (Line2D) line2D_Float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Shape shape0 = ShapeUtils.createDiagonalCross(1.0F, 1.0F);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, 1.0F, 126.36073F, 0.0F);
      boolean boolean0 = ShapeUtils.equal(shape0, (Shape) rectangle2D_Float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Shape shape0 = ShapeUtils.createDiagonalCross((-1984.4531F), 0.0F);
      boolean boolean0 = ShapeUtils.equal(shape0, shape0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      boolean boolean0 = ShapeUtils.equal((Shape) polygon0, (Shape) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      boolean boolean0 = ShapeUtils.equal((Shape) arc2D_Float0, (Shape) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      boolean boolean0 = ShapeUtils.equal((Shape) arc2D_Float0, (Shape) arc2D_Float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(0.0, 0.0, 0.0, 0.0);
      boolean boolean0 = ShapeUtils.equal((Shape) ellipse2D_Double0, (Shape) ellipse2D_Double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      Shape shape0 = ShapeUtils.createDiagonalCross((-1.0F), 0);
      boolean boolean0 = ShapeUtils.equal((Shape) ellipse2D_Double0, shape0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(0, 0, 0, 0);
      boolean boolean0 = ShapeUtils.equal((Shape) line2D_Double0, (Shape) line2D_Double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Shape shape0 = ShapeUtils.createDiagonalCross((-1.0F), (-1.0F));
      Line2D.Float line2D_Float0 = new Line2D.Float();
      boolean boolean0 = ShapeUtils.equal((Shape) line2D_Float0, shape0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Shape shape0 = ShapeUtils.createUpTriangle((-1.0F));
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      Shape shape1 = ShapeUtils.createTranslatedShape(shape0, rectangleAnchor0, 0.0, (double) (-1.0F));
      // Undeclared exception!
      try { 
        ShapeUtils.drawRotatedShape((Graphics2D) null, shape1, 444.64, 500.0F, (-1329.74F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ShapeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      Size2D size2D0 = new Size2D();
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 2.0, (-1.0F), rectangleAnchor0);
      Point2D.Double point2D_Double0 = (Point2D.Double)ShapeUtils.getPointInRectangle(0.0, 2.0, rectangle2D0);
      assertEquals(2.0, point2D_Double0.x, 0.01);
      assertEquals((-1.0), point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      GeneralPath generalPath0 = (GeneralPath)ShapeUtils.createDiagonalCross((-1.0F), 0);
      GeneralPath generalPath1 = new GeneralPath();
      boolean boolean0 = ShapeUtils.equal(generalPath1, generalPath0);
      assertFalse(boolean0);
  }
}
