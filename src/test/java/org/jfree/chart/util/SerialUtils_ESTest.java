/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:02:08 GMT 2019
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Composite;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.SystemColor;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.text.AttributedCharacterIterator;
import java.text.AttributedString;
import java.util.HashMap;
import javax.swing.DebugGraphics;
import javax.swing.JInternalFrame;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jfree.chart.util.SerialUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SerialUtils_ESTest extends SerialUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Ellipse2D.Double> class0 = Ellipse2D.Double.class;
      boolean boolean0 = SerialUtils.isSerializable(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<AlphaComposite> class0 = AlphaComposite.class;
      boolean boolean0 = SerialUtils.isSerializable(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<AttributedCharacterIterator.Attribute, Ellipse2D.Double> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Ellipse2D.Double>();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      hashMap0.put(attributedCharacterIterator_Attribute0, ellipse2D_Double0);
      AttributedString attributedString0 = new AttributedString("<$,,", hashMap0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<$,,", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      try { 
        SerialUtils.writeAttributedString(attributedString0, objectOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.jfree.chart.util.SerialUtils");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      SerialUtils.writeAttributedString((AttributedString) null, objectOutputStream0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AttributedString attributedString0 = new AttributedString("nK{>");
      // Undeclared exception!
      try { 
        SerialUtils.writeAttributedString(attributedString0, (ObjectOutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<AttributedCharacterIterator.Attribute, Ellipse2D.Double> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Ellipse2D.Double>();
      AttributedString attributedString0 = new AttributedString("<$,,", hashMap0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<$,,", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      SerialUtils.writeAttributedString(attributedString0, objectOutputStream0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerialUtils.readAttributedString((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JDBCPieDataset - unknown data type");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("JDBCPieDataset - unknown data type");
      ObjectInputStream objectInputStream0 = new ObjectInputStream(mockFileInputStream0);
      try { 
        SerialUtils.readAttributedString(objectInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$BlockDataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      SerialUtils.writePoint2D((Point2D) null, objectOutputStream0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerialUtils.writePoint2D((Point2D) null, (ObjectOutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      SerialUtils.writePoint2D(point2D_Double0, objectOutputStream0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerialUtils.readPoint2D((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<$,,", false);
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(794.851, 794.851, 794.851, 533.4164);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      SerialUtils.writeShape(ellipse2D_Double0, objectOutputStream0);
      assertEquals(533.4164, ellipse2D_Double0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      File file0 = MockFile.createTempFile("<\"P1!5nHk1{FQ/*", "<\"P1!5nHk1{FQ/*");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      SerialUtils.writeShape((Shape) null, objectOutputStream0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerialUtils.writeShape((Shape) null, (ObjectOutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("-$eb", true, true, true, true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      PrintStream printStream0 = DebugGraphics.logStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      SerialUtils.writeShape(rectangle0, objectOutputStream0);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerialUtils.readShape((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(printStream0);
      SerialUtils.writeComposite((Composite) null, objectOutputStream0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AlphaComposite alphaComposite0 = AlphaComposite.Src;
      // Undeclared exception!
      try { 
        SerialUtils.writeComposite(alphaComposite0, (ObjectOutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AlphaComposite alphaComposite0 = AlphaComposite.Src;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<$,,", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      SerialUtils.writeComposite(alphaComposite0, objectOutputStream0);
      assertEquals(1.0F, alphaComposite0.getAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerialUtils.readComposite((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BasicStroke basicStroke0 = new BasicStroke(2993.5205F);
      // Undeclared exception!
      try { 
        SerialUtils.writeStroke(basicStroke0, (ObjectOutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<$,,", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      BasicStroke basicStroke0 = new BasicStroke();
      SerialUtils.writeStroke(basicStroke0, objectOutputStream0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerialUtils.readStroke((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JDBCPieDataset - unknown data type");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      SerialUtils.writePaint((Paint) null, objectOutputStream0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerialUtils.writePaint((Paint) null, (ObjectOutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<$,,", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      SystemColor systemColor0 = SystemColor.windowText;
      try { 
        SerialUtils.writePaint(systemColor0, objectOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerialUtils.readPaint((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerialUtils.isSerializable((Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
