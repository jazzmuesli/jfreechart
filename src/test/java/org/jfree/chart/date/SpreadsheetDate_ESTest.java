/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:23:29 GMT 2019
 */

package org.jfree.chart.date;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.date.MonthConstants;
import org.jfree.chart.date.SerialDate;
import org.jfree.chart.date.SpreadsheetDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SpreadsheetDate_ESTest extends SpreadsheetDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(33);
      MockDate mockDate0 = new MockDate(1900, 2, 3, 5, 3, 2);
      Instant instant0 = mockDate0.toInstant();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      spreadsheetDate0.equals(instant0);
      serialDate0.getPreviousDayOfWeek(5);
      spreadsheetDate0.isAfter(serialDate0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0);
      SerialDate.isLeapYear(7);
      SerialDate.createInstance((Date) mockDate0);
      int int0 = 12;
      // Undeclared exception!
      try { 
        SerialDate.createInstance(693963, 7, 2557);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'day' argument.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(45);
      SerialDate serialDate0 = SerialDate.addYears(0, spreadsheetDate0);
      Object object0 = new Object();
      SerialDate.isLeapYear(3);
      spreadsheetDate0.isInRange(serialDate0, serialDate0);
      spreadsheetDate0.equals("");
      SerialDate serialDate1 = spreadsheetDate0.getNearestDayOfWeek(1);
      spreadsheetDate0.isInRange(serialDate0, serialDate1, 4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1834);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(1776);
      SerialDate serialDate0 = spreadsheetDate1.getFollowingDayOfWeek(4);
      spreadsheetDate0.compare(spreadsheetDate1);
      spreadsheetDate0.toSerial();
      spreadsheetDate0.getMonth();
      spreadsheetDate1.compare(serialDate0);
      spreadsheetDate1.compareTo(spreadsheetDate0);
      SerialDate.getFollowingDayOfWeek(3, (SerialDate) spreadsheetDate0);
      SerialDate serialDate1 = SerialDate.getNearestDayOfWeek(3, (SerialDate) spreadsheetDate0);
      serialDate1.isBefore(spreadsheetDate0);
      spreadsheetDate0.isOn(serialDate1);
      serialDate1.toString();
      spreadsheetDate0.toDate();
      spreadsheetDate1.isAfter(serialDate1);
      SerialDate serialDate2 = SerialDate.addYears(1, serialDate0);
      spreadsheetDate0.toDate();
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.getDayOfMonth();
      MockDate mockDate0 = new MockDate(4, 7, 1, 4, 3);
      SerialDate serialDate3 = serialDate2.getPreviousDayOfWeek(4);
      spreadsheetDate0.compare(spreadsheetDate1);
      serialDate3.isAfter(spreadsheetDate1);
      serialDate3.isAfter(serialDate0);
      spreadsheetDate0.isOnOrBefore(serialDate1);
      spreadsheetDate1.isInRange(serialDate1, (SerialDate) spreadsheetDate1, 3);
      serialDate0.isInRange(serialDate3, serialDate2, 2958465);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1237;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1237);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(3);
      spreadsheetDate0.isBefore(spreadsheetDate1);
      spreadsheetDate0.setDescription("");
      System.setCurrentTimeMillis(1);
      spreadsheetDate0.getDayOfMonth();
      SerialDate.createInstance(6);
      spreadsheetDate0.isInRange((SerialDate) spreadsheetDate1, (SerialDate) spreadsheetDate0, 2);
      // Undeclared exception!
      try { 
        SerialDate.createInstance(3, 1900, 2958465);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1155);
      spreadsheetDate0.toSerial();
      spreadsheetDate0.getDayOfWeek();
      SerialDate serialDate0 = SerialDate.addDays(3, spreadsheetDate0);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      Date date0 = spreadsheetDate0.toDate();
      spreadsheetDate0.getMonth();
      SerialDate serialDate1 = SerialDate.createInstance(date0);
      SerialDate.isValidMonthCode(7);
      System.setCurrentTimeMillis(1391L);
      serialDate0.isInRange(serialDate1, (SerialDate) spreadsheetDate0, 1);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      System.setCurrentTimeMillis(0);
      spreadsheetDate0.compare(serialDate1);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.equals((Object) null);
      spreadsheetDate0.compare(serialDate0);
      spreadsheetDate0.isOnOrBefore(serialDate1);
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.isBefore(serialDate1);
      spreadsheetDate0.isBefore(serialDate0);
      SerialDate.stringToMonthCode("_M/");
      spreadsheetDate0.isInRange(serialDate0, serialDate1, 1);
      System.setCurrentTimeMillis((-2628L));
      System.setCurrentTimeMillis(1);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.toDate();
      spreadsheetDate0.getYYYY();
      System.setCurrentTimeMillis(9999);
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 2);
      serialDate1.isInRange(serialDate0, (SerialDate) spreadsheetDate0, 3);
      serialDate0.getDayOfMonth();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1155);
      spreadsheetDate0.toSerial();
      spreadsheetDate0.getDayOfWeek();
      SerialDate serialDate0 = SerialDate.addDays(3, spreadsheetDate0);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      spreadsheetDate0.toDate();
      spreadsheetDate0.getMonth();
      SerialDate.isValidMonthCode(7);
      System.setCurrentTimeMillis(1391L);
      serialDate0.isInRange((SerialDate) spreadsheetDate0, (SerialDate) spreadsheetDate0, 1);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      System.setCurrentTimeMillis(0);
      spreadsheetDate0.compare(serialDate0);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.equals(spreadsheetDate0);
      spreadsheetDate0.compare(serialDate0);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.isBefore(spreadsheetDate0);
      spreadsheetDate0.isBefore(serialDate0);
      spreadsheetDate0.isInRange(serialDate0, (SerialDate) spreadsheetDate0, 1);
      System.setCurrentTimeMillis((-2628L));
      System.setCurrentTimeMillis(1);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.toDate();
      spreadsheetDate0.getYYYY();
      System.setCurrentTimeMillis(9999);
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1834);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(1776);
      SerialDate serialDate0 = spreadsheetDate1.getFollowingDayOfWeek(4);
      spreadsheetDate0.compare(spreadsheetDate1);
      spreadsheetDate0.toSerial();
      spreadsheetDate0.getMonth();
      spreadsheetDate1.compare(serialDate0);
      spreadsheetDate1.compareTo(spreadsheetDate0);
      SerialDate serialDate1 = SerialDate.addYears(46, serialDate0);
      SerialDate serialDate2 = SerialDate.getFollowingDayOfWeek(3, serialDate1);
      SerialDate serialDate3 = SerialDate.getNearestDayOfWeek(3, (SerialDate) spreadsheetDate0);
      serialDate3.isBefore(spreadsheetDate0);
      spreadsheetDate0.isOn(serialDate3);
      serialDate3.toString();
      spreadsheetDate0.toDate();
      spreadsheetDate1.isAfter(serialDate3);
      SerialDate serialDate4 = SerialDate.addYears(1, serialDate0);
      spreadsheetDate0.toDate();
      serialDate4.isInRange(serialDate2, serialDate3);
      serialDate0.setDescription("-");
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.getDayOfMonth();
      MockDate mockDate0 = new MockDate(4, 7, 1, 4, 3);
      SerialDate serialDate5 = serialDate4.getPreviousDayOfWeek(4);
      spreadsheetDate0.compare(serialDate1);
      spreadsheetDate0.toDate();
      serialDate5.isAfter(spreadsheetDate1);
      serialDate5.isAfter(serialDate1);
      spreadsheetDate0.isOnOrBefore(serialDate3);
      spreadsheetDate1.isInRange(serialDate3, serialDate1, 1900);
      serialDate1.isInRange(serialDate5, serialDate4, 2958465);
      serialDate5.isInRange(serialDate2, (SerialDate) spreadsheetDate1, 1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2187);
      // Undeclared exception!
      try { 
        spreadsheetDate0.compare((SerialDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(152);
      SerialDate serialDate0 = SerialDate.getFollowingDayOfWeek(6, (SerialDate) spreadsheetDate0);
      serialDate0.isInRange((SerialDate) spreadsheetDate0, (SerialDate) spreadsheetDate0);
      serialDate0.getDayOfWeek();
      spreadsheetDate0.compareTo(serialDate0);
      SerialDate serialDate1 = null;
      // Undeclared exception!
      try { 
        serialDate0.isOn((SerialDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 694328;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(694328);
      // Undeclared exception!
      try { 
        SerialDate.addMonths(2958465, spreadsheetDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Call to addMonths resulted in unsupported year
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(45);
      SerialDate serialDate0 = SerialDate.addYears(0, spreadsheetDate0);
      spreadsheetDate0.getDayOfWeek();
      SerialDate.monthCodeToString(3);
      Object object0 = new Object();
      spreadsheetDate0.equals(object0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0);
      spreadsheetDate0.equals("");
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 14);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(383);
      spreadsheetDate0.toSerial();
      spreadsheetDate0.getDayOfWeek();
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(3);
      Date date0 = spreadsheetDate0.toDate();
      spreadsheetDate0.getMonth();
      SerialDate serialDate0 = SerialDate.createInstance(date0);
      spreadsheetDate1.isOn(spreadsheetDate0);
      System.setCurrentTimeMillis(1409L);
      spreadsheetDate1.isInRange(serialDate0, (SerialDate) spreadsheetDate0, 1);
      spreadsheetDate0.isOnOrBefore(spreadsheetDate1);
      System.setCurrentTimeMillis(0);
      spreadsheetDate0.compare(serialDate0);
      spreadsheetDate0.getDayOfWeek();
      SerialDate.isLeapYear(9999);
      spreadsheetDate0.compare(spreadsheetDate1);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.isBefore(serialDate0);
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToQuarter(383);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToQuarter: invalid month code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1247);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(3);
      SerialDate.isValidWeekInMonthCode(3);
      spreadsheetDate0.setDescription("%S");
      spreadsheetDate0.getDayOfMonth();
      SerialDate serialDate0 = SerialDate.createInstance(6);
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 2);
      spreadsheetDate0.getDayOfWeek();
      SerialDate serialDate1 = null;
      // Undeclared exception!
      try { 
        spreadsheetDate0.isInRange((SerialDate) null, (SerialDate) null, 1247);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(365);
      spreadsheetDate0.toSerial();
      spreadsheetDate0.getDayOfWeek();
      SerialDate serialDate0 = SerialDate.addDays(3, spreadsheetDate0);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      spreadsheetDate0.toDate();
      spreadsheetDate0.getMonth();
      serialDate0.isOn(spreadsheetDate0);
      System.setCurrentTimeMillis(1900);
      serialDate0.isInRange(serialDate0, (SerialDate) spreadsheetDate0, 1);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      System.setCurrentTimeMillis(0);
      spreadsheetDate0.compare(serialDate0);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.equals((Object) null);
      spreadsheetDate0.compare(serialDate0);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      spreadsheetDate0.isBefore(spreadsheetDate0);
      spreadsheetDate0.isBefore(serialDate0);
      System.setCurrentTimeMillis((-2628L));
      System.setCurrentTimeMillis(1);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.toDate();
      spreadsheetDate0.getYYYY();
      serialDate0.getDayOfMonth();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(365);
      int int0 = MonthConstants.AUGUST;
      spreadsheetDate0.getDayOfWeek();
      SerialDate serialDate0 = SerialDate.addDays(3, spreadsheetDate0);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      spreadsheetDate0.toDate();
      spreadsheetDate0.getMonth();
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(4);
      serialDate0.isOn(spreadsheetDate0);
      System.setCurrentTimeMillis(1391L);
      serialDate0.isInRange((SerialDate) spreadsheetDate1, (SerialDate) spreadsheetDate0, 1);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      System.setCurrentTimeMillis(0);
      spreadsheetDate0.compare(spreadsheetDate1);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.equals((Object) null);
      spreadsheetDate0.compare(serialDate0);
      spreadsheetDate0.isOnOrBefore(spreadsheetDate1);
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.isBefore(spreadsheetDate1);
      spreadsheetDate0.isBefore(serialDate0);
      System.setCurrentTimeMillis((-2628L));
      System.setCurrentTimeMillis(1);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.toDate();
      spreadsheetDate0.getYYYY();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1247;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1247);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(3);
      spreadsheetDate0.isBefore(spreadsheetDate1);
      spreadsheetDate0.setDescription("%S");
      System.setCurrentTimeMillis(1);
      spreadsheetDate0.getDayOfMonth();
      SpreadsheetDate spreadsheetDate2 = new SpreadsheetDate(4);
      spreadsheetDate0.isInRange((SerialDate) spreadsheetDate2, (SerialDate) spreadsheetDate2, 2);
      spreadsheetDate0.getMonth();
      SerialDate.monthCodeToString(2, false);
      spreadsheetDate2.isInRange((SerialDate) spreadsheetDate1, (SerialDate) spreadsheetDate0, 30);
      spreadsheetDate0.getMonth();
      spreadsheetDate0.getDayOfWeek();
      // Undeclared exception!
      try { 
        SerialDate.createInstance(3, 1900, 2958465);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1155);
      spreadsheetDate0.toSerial();
      spreadsheetDate0.getDayOfWeek();
      SerialDate serialDate0 = SerialDate.addDays(3, spreadsheetDate0);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      Date date0 = spreadsheetDate0.toDate();
      spreadsheetDate0.getMonth();
      SerialDate serialDate1 = SerialDate.createInstance(date0);
      serialDate0.isOn(spreadsheetDate0);
      System.setCurrentTimeMillis(1391L);
      serialDate0.isInRange(serialDate1, (SerialDate) spreadsheetDate0, 1);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      System.setCurrentTimeMillis(0);
      spreadsheetDate0.compare(serialDate1);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.equals((Object) null);
      spreadsheetDate0.compare(serialDate0);
      spreadsheetDate0.isOnOrBefore(serialDate1);
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.isBefore(serialDate1);
      spreadsheetDate0.isBefore(serialDate0);
      System.setCurrentTimeMillis((-2628L));
      System.setCurrentTimeMillis(1);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.toDate();
      spreadsheetDate0.getYYYY();
      System.setCurrentTimeMillis(9999);
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 1247;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1247);
      SpreadsheetDate spreadsheetDate1 = null;
      try {
        spreadsheetDate1 = new SpreadsheetDate((-1), 2, 9999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'day' argument.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 1247;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1247);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(3);
      spreadsheetDate0.isBefore(spreadsheetDate1);
      spreadsheetDate0.setDescription("%S");
      System.setCurrentTimeMillis(1);
      spreadsheetDate0.getDayOfMonth();
      spreadsheetDate0.isInRange((SerialDate) spreadsheetDate0, (SerialDate) spreadsheetDate0, 2);
      spreadsheetDate0.getMonth();
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToString((-3909));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToString: month outside valid range.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(33);
      MockDate mockDate0 = new MockDate(1900, 2, 3, 5, 3, 2);
      Instant instant0 = mockDate0.toInstant();
      spreadsheetDate0.equals(instant0);
      SerialDate serialDate0 = spreadsheetDate0.getPreviousDayOfWeek(5);
      spreadsheetDate0.isInRange((SerialDate) spreadsheetDate0, (SerialDate) spreadsheetDate0);
      spreadsheetDate0.equals(serialDate0);
      SerialDate serialDate1 = SerialDate.createInstance((Date) mockDate0);
      spreadsheetDate0.compare(spreadsheetDate0);
      SerialDate serialDate2 = spreadsheetDate0.getEndOfCurrentMonth(spreadsheetDate0);
      spreadsheetDate0.compareTo(serialDate2);
      serialDate0.getDayOfMonth();
      spreadsheetDate0.isOnOrAfter(serialDate1);
      spreadsheetDate0.isAfter(spreadsheetDate0);
      spreadsheetDate0.isOn(spreadsheetDate0);
      spreadsheetDate0.isOnOrBefore(serialDate2);
      System.setCurrentTimeMillis(3010L);
      serialDate2.isInRange(serialDate1, serialDate1, (-2196));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(365);
      spreadsheetDate0.toSerial();
      spreadsheetDate0.getDayOfWeek();
      SerialDate serialDate0 = SerialDate.addDays(3, spreadsheetDate0);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      Date date0 = spreadsheetDate0.toDate();
      spreadsheetDate0.getMonth();
      SerialDate serialDate1 = SerialDate.createInstance(date0);
      serialDate0.isOn(spreadsheetDate0);
      System.setCurrentTimeMillis(1391L);
      serialDate0.isInRange(serialDate1, (SerialDate) spreadsheetDate0, 1);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      System.setCurrentTimeMillis(0);
      spreadsheetDate0.compare(serialDate1);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.equals((Object) null);
      spreadsheetDate0.compare(serialDate0);
      spreadsheetDate0.isOnOrBefore(serialDate1);
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.isBefore(serialDate1);
      spreadsheetDate0.isBefore(serialDate0);
      System.setCurrentTimeMillis((-2628L));
      System.setCurrentTimeMillis(1);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.toDate();
      spreadsheetDate0.getYYYY();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1247;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1247);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(3);
      spreadsheetDate0.isBefore(spreadsheetDate1);
      spreadsheetDate0.setDescription("%S");
      System.setCurrentTimeMillis(1);
      spreadsheetDate0.getDayOfMonth();
      SerialDate serialDate0 = SerialDate.createInstance(6);
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 2);
      spreadsheetDate0.getMonth();
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToString((-3909));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToString: month outside valid range.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(365);
      spreadsheetDate0.toSerial();
      spreadsheetDate0.getDayOfWeek();
      SerialDate serialDate0 = SerialDate.addDays(3, spreadsheetDate0);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      Date date0 = spreadsheetDate0.toDate();
      spreadsheetDate0.getMonth();
      SerialDate serialDate1 = SerialDate.createInstance(date0);
      serialDate0.isOn(spreadsheetDate0);
      System.setCurrentTimeMillis(1391L);
      serialDate0.isOnOrBefore(serialDate0);
      System.setCurrentTimeMillis(0);
      spreadsheetDate0.compare(serialDate1);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.equals((Object) null);
      spreadsheetDate0.compare(serialDate0);
      spreadsheetDate0.isOnOrBefore(serialDate1);
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.isBefore(serialDate1);
      spreadsheetDate0.isBefore(serialDate0);
      System.setCurrentTimeMillis((-2628L));
      System.setCurrentTimeMillis(1);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.toDate();
      spreadsheetDate0.getYYYY();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(33);
      MockDate mockDate0 = new MockDate(1900, 2, 3, 5, 3, 2);
      Instant instant0 = mockDate0.toInstant();
      spreadsheetDate0.equals(instant0);
      spreadsheetDate0.getPreviousDayOfWeek(5);
      spreadsheetDate0.isAfter(spreadsheetDate0);
      spreadsheetDate0.isInRange((SerialDate) spreadsheetDate0, (SerialDate) spreadsheetDate0);
      SerialDate.isValidWeekdayCode(2);
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      spreadsheetDate0.compareTo(serialDate0);
      spreadsheetDate0.compare(spreadsheetDate0);
      // Undeclared exception!
      try { 
        spreadsheetDate0.getPreviousDayOfWeek((-710));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(365);
      spreadsheetDate0.toSerial();
      // Undeclared exception!
      try { 
        SerialDate.createInstance(0, 1, 1900);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'day' argument.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(45);
      SerialDate.monthCodeToQuarter(3);
      SerialDate serialDate0 = SerialDate.addYears(0, spreadsheetDate0);
      spreadsheetDate0.getDayOfWeek();
      Object object0 = new Object();
      serialDate0.isOn(spreadsheetDate0);
      spreadsheetDate0.equals(object0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0);
      spreadsheetDate0.equals("");
      spreadsheetDate0.getDayOfWeek();
      serialDate0.isBefore(spreadsheetDate0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(33);
      MockDate mockDate0 = new MockDate(1900, 2, 3, 5, 3, 2);
      Instant instant0 = mockDate0.toInstant();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      spreadsheetDate0.equals(instant0);
      spreadsheetDate0.isAfter(serialDate0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0);
      spreadsheetDate0.equals(spreadsheetDate0);
      SerialDate serialDate1 = SerialDate.createInstance((Date) mockDate0);
      spreadsheetDate0.compareTo(serialDate1);
      spreadsheetDate0.compare(serialDate0);
      // Undeclared exception!
      try { 
        spreadsheetDate0.getPreviousDayOfWeek((-710));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1563);
      SerialDate serialDate0 = SerialDate.addMonths(0, spreadsheetDate0);
      spreadsheetDate0.isOnOrAfter(serialDate0);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(4);
      spreadsheetDate0.isAfter(spreadsheetDate1);
      spreadsheetDate0.getMonth();
      SerialDate.addYears((-1), spreadsheetDate0);
      // Undeclared exception!
      try { 
        SerialDate.getFollowingDayOfWeek(1366, (SerialDate) spreadsheetDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(365);
      spreadsheetDate0.toSerial();
      spreadsheetDate0.getDayOfWeek();
      SerialDate serialDate0 = SerialDate.addDays(3, spreadsheetDate0);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      Date date0 = spreadsheetDate0.toDate();
      spreadsheetDate0.getMonth();
      SerialDate serialDate1 = SerialDate.createInstance(date0);
      serialDate0.isOn(spreadsheetDate0);
      System.setCurrentTimeMillis(1391L);
      spreadsheetDate0.toDate();
      spreadsheetDate0.isOnOrBefore(serialDate0);
      System.setCurrentTimeMillis(0);
      spreadsheetDate0.compare(serialDate1);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.equals((Object) null);
      spreadsheetDate0.compare(serialDate0);
      spreadsheetDate0.isOnOrBefore(serialDate1);
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.isBefore(serialDate1);
      spreadsheetDate0.isBefore(serialDate0);
      System.setCurrentTimeMillis((-2628L));
      System.setCurrentTimeMillis(1);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.toDate();
      spreadsheetDate0.toDate();
      spreadsheetDate0.getYYYY();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(33);
      MockDate mockDate0 = new MockDate(1900, 2, 3, 5, 3, 2);
      Instant instant0 = mockDate0.toInstant();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      spreadsheetDate0.equals(instant0);
      SerialDate serialDate1 = serialDate0.getPreviousDayOfWeek(5);
      spreadsheetDate0.isAfter(serialDate0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0);
      spreadsheetDate0.equals(serialDate1);
      SerialDate serialDate2 = SerialDate.createInstance((Date) mockDate0);
      spreadsheetDate0.compare(serialDate0);
      SerialDate serialDate3 = spreadsheetDate0.getEndOfCurrentMonth(serialDate0);
      spreadsheetDate0.compareTo(serialDate3);
      serialDate1.getDayOfMonth();
      spreadsheetDate0.isOnOrAfter(serialDate2);
      spreadsheetDate0.isAfter(serialDate0);
      spreadsheetDate0.isOn(spreadsheetDate0);
      SerialDate serialDate4 = spreadsheetDate0.getPreviousDayOfWeek(5);
      spreadsheetDate0.isOnOrBefore(serialDate4);
      serialDate4.getDayOfWeek();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(33);
      MockDate mockDate0 = new MockDate(1900, 2, 3, 5, 3, 2);
      mockDate0.toInstant();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      SerialDate.isLeapYear(0);
      SerialDate serialDate1 = serialDate0.getPreviousDayOfWeek(5);
      SerialDate.isValidWeekInMonthCode(1);
      SerialDate.isLeapYear(9999);
      spreadsheetDate0.equals(serialDate1);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(2);
      spreadsheetDate0.compareTo(spreadsheetDate1);
      spreadsheetDate0.compare(serialDate0);
      // Undeclared exception!
      try { 
        spreadsheetDate0.getPreviousDayOfWeek((-710));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1834);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(1776);
      spreadsheetDate1.equals(")+");
      SerialDate serialDate0 = spreadsheetDate1.getFollowingDayOfWeek(4);
      spreadsheetDate0.compare(spreadsheetDate1);
      spreadsheetDate0.toSerial();
      spreadsheetDate0.getMonth();
      spreadsheetDate1.compare(serialDate0);
      spreadsheetDate1.compareTo(spreadsheetDate0);
      SerialDate serialDate1 = SerialDate.addYears(46, serialDate0);
      SerialDate.getFollowingDayOfWeek(3, serialDate1);
      serialDate1.isBefore(spreadsheetDate0);
      spreadsheetDate0.isOn(serialDate0);
      spreadsheetDate1.toString();
      spreadsheetDate0.toString();
      spreadsheetDate0.toDate();
      spreadsheetDate1.isAfter(spreadsheetDate1);
      SerialDate.addYears(1, serialDate0);
      spreadsheetDate0.toDate();
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.getDayOfMonth();
      MockDate mockDate0 = new MockDate(4, 7, (-2712), 4, 3);
      // Undeclared exception!
      try { 
        SerialDate.createInstance((Date) mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 46;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(46);
      SerialDate serialDate0 = SerialDate.addDays(1, spreadsheetDate0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 46);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("}4L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(873);
      spreadsheetDate0.hashCode();
      SerialDate serialDate0 = SerialDate.getPreviousDayOfWeek(1, (SerialDate) spreadsheetDate0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 5);
      spreadsheetDate0.equals(serialDate0);
      spreadsheetDate0.toDate();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3);
      SerialDate serialDate0 = SerialDate.getFollowingDayOfWeek(7, (SerialDate) spreadsheetDate0);
      SerialDate serialDate1 = spreadsheetDate0.getEndOfCurrentMonth(serialDate0);
      ((SpreadsheetDate) serialDate0).equals(serialDate1);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        SerialDate.addDays(2958465, spreadsheetDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(152);
      int int0 = 3;
      SerialDate serialDate0 = SerialDate.getFollowingDayOfWeek(3, (SerialDate) spreadsheetDate0);
      serialDate0.isInRange((SerialDate) spreadsheetDate0, (SerialDate) spreadsheetDate0);
      serialDate0.getDayOfWeek();
      SerialDate serialDate1 = SerialDate.createInstance(3);
      serialDate0.getDayOfMonth();
      ((SpreadsheetDate) serialDate0).equals(serialDate1);
      spreadsheetDate0.compareTo(serialDate0);
      SerialDate serialDate2 = null;
      // Undeclared exception!
      try { 
        spreadsheetDate0.isInRange((SerialDate) null, (SerialDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(152);
      int int0 = 3;
      SerialDate serialDate0 = SerialDate.getFollowingDayOfWeek(3, (SerialDate) spreadsheetDate0);
      serialDate0.isInRange((SerialDate) spreadsheetDate0, (SerialDate) spreadsheetDate0);
      serialDate0.getDayOfWeek();
      // Undeclared exception!
      try { 
        SerialDate.createInstance(2, 9999, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1563);
      SerialDate serialDate0 = SerialDate.addMonths(0, spreadsheetDate0);
      spreadsheetDate0.isOnOrAfter(serialDate0);
      // Undeclared exception!
      try { 
        spreadsheetDate0.getPreviousDayOfWeek(1563);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1834);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(1776);
      spreadsheetDate1.equals(")+");
      SerialDate serialDate0 = spreadsheetDate1.getFollowingDayOfWeek(4);
      spreadsheetDate0.compare(spreadsheetDate1);
      spreadsheetDate0.toSerial();
      spreadsheetDate0.getMonth();
      spreadsheetDate1.compare(serialDate0);
      spreadsheetDate1.compareTo(spreadsheetDate0);
      SerialDate serialDate1 = SerialDate.addYears(46, serialDate0);
      SerialDate.getFollowingDayOfWeek(3, serialDate1);
      SerialDate serialDate2 = SerialDate.getNearestDayOfWeek(3, (SerialDate) spreadsheetDate0);
      serialDate2.isBefore(spreadsheetDate0);
      spreadsheetDate0.isOn(serialDate2);
      serialDate2.toString();
      spreadsheetDate0.toDate();
      spreadsheetDate1.isAfter(serialDate2);
      SerialDate.addYears(1, serialDate0);
      spreadsheetDate0.toDate();
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.getDayOfMonth();
      MockDate mockDate0 = new MockDate(4, 7, (-2712), 4, 3);
      // Undeclared exception!
      try { 
        SerialDate.createInstance((Date) mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(33);
      MockDate mockDate0 = new MockDate(1900, 2, 3, 5, 3, 2);
      Instant instant0 = mockDate0.toInstant();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      spreadsheetDate0.equals(instant0);
      SerialDate serialDate1 = serialDate0.getPreviousDayOfWeek(5);
      spreadsheetDate0.isAfter(serialDate0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0);
      spreadsheetDate0.equals(serialDate1);
      SerialDate serialDate2 = SerialDate.createInstance((Date) mockDate0);
      spreadsheetDate0.compareTo(serialDate2);
      spreadsheetDate0.compare(serialDate0);
      // Undeclared exception!
      try { 
        spreadsheetDate0.getPreviousDayOfWeek((-710));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(45);
      SerialDate serialDate0 = SerialDate.addYears(0, spreadsheetDate0);
      spreadsheetDate0.getDayOfWeek();
      Object object0 = new Object();
      spreadsheetDate0.equals(object0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0);
      spreadsheetDate0.equals("");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(873);
      spreadsheetDate0.hashCode();
      SerialDate serialDate0 = SerialDate.getPreviousDayOfWeek(1, (SerialDate) spreadsheetDate0);
      spreadsheetDate0.equals(serialDate0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2958465);
      // Undeclared exception!
      try { 
        SerialDate.getNearestDayOfWeek(1900, (SerialDate) spreadsheetDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(12);
      SerialDate serialDate0 = SerialDate.addYears(1, spreadsheetDate0);
      serialDate0.isOnOrAfter(spreadsheetDate0);
      int int0 = 243;
      // Undeclared exception!
      try { 
        SerialDate.createInstance(3, 0, 2958465);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 365;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(365);
      SerialDate serialDate0 = null;
      // Undeclared exception!
      try { 
        spreadsheetDate0.isOnOrAfter((SerialDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2545);
      spreadsheetDate0.setDescription("");
      // Undeclared exception!
      try { 
        spreadsheetDate0.compareTo("z5Qa]r 4'AU<");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.chart.date.SerialDate
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(7);
      spreadsheetDate0.getYYYY();
      SerialDate serialDate0 = spreadsheetDate0.getNearestDayOfWeek(7);
      spreadsheetDate0.compareTo(serialDate0);
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToQuarter(2958465);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToQuarter: invalid month code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(334);
      spreadsheetDate0.setDescription("fs9OQ_<MTr=gb}25!");
      SerialDate.addYears(6, spreadsheetDate0);
      spreadsheetDate0.hashCode();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(274);
      spreadsheetDate0.toDate();
      SerialDate serialDate0 = SerialDate.getNearestDayOfWeek(4, (SerialDate) spreadsheetDate0);
      spreadsheetDate0.isOn(serialDate0);
      spreadsheetDate0.getDayOfMonth();
      spreadsheetDate0.toSerial();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(31, 2958465, 2958465);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2496);
      spreadsheetDate0.hashCode();
      SpreadsheetDate spreadsheetDate1 = null;
      try {
        spreadsheetDate1 = new SpreadsheetDate(1900, 7, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2356);
      SerialDate serialDate0 = SerialDate.getFollowingDayOfWeek(3, (SerialDate) spreadsheetDate0);
      serialDate0.isBefore(spreadsheetDate0);
      SerialDate.getFollowingDayOfWeek(1, (SerialDate) spreadsheetDate0);
      // Undeclared exception!
      try { 
        spreadsheetDate0.getPreviousDayOfWeek(487);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(12);
      int int0 = 0;
      // Undeclared exception!
      try { 
        spreadsheetDate0.isBefore((SerialDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate((-7), (-7), 2878);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'month' argument must be in the range 1 to 12.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        spreadsheetDate0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2589);
      SpreadsheetDate spreadsheetDate1 = null;
      try {
        spreadsheetDate1 = new SpreadsheetDate(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(12);
      // Undeclared exception!
      try { 
        SerialDate.getPreviousDayOfWeek(1900, (SerialDate) spreadsheetDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1680);
      // Undeclared exception!
      try { 
        spreadsheetDate0.getFollowingDayOfWeek(1680);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1284);
      SerialDate.addDays(397, spreadsheetDate0);
      SerialDate.getPreviousDayOfWeek(6, (SerialDate) spreadsheetDate0);
      // Undeclared exception!
      try { 
        spreadsheetDate0.getPreviousDayOfWeek(1900);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(210);
      spreadsheetDate0.getDayOfWeek();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(966, 1302, 1302);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(3653, 3653, 9999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'month' argument must be in the range 1 to 12.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(18383);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(6, 2, 1900);
      spreadsheetDate0.isOnOrBefore(spreadsheetDate1);
      SpreadsheetDate spreadsheetDate2 = null;
      try {
        spreadsheetDate2 = new SpreadsheetDate((-156), 2958465, 2958465);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(3145, 3145, 3145);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'month' argument must be in the range 1 to 12.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(2266, (-587), 9999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'month' argument must be in the range 1 to 12.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(365);
      spreadsheetDate0.toSerial();
      spreadsheetDate0.getDayOfWeek();
      SerialDate serialDate0 = SerialDate.addDays(3, spreadsheetDate0);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      spreadsheetDate0.toDate();
      spreadsheetDate0.getMonth();
      serialDate0.isOn(spreadsheetDate0);
      System.setCurrentTimeMillis(1900);
      serialDate0.toString();
      serialDate0.isInRange(serialDate0, (SerialDate) spreadsheetDate0, 1);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      System.setCurrentTimeMillis(0);
      spreadsheetDate0.compare(serialDate0);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.equals((Object) null);
      spreadsheetDate0.compare(serialDate0);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      spreadsheetDate0.isBefore(spreadsheetDate0);
      spreadsheetDate0.isBefore(serialDate0);
      System.setCurrentTimeMillis((-2628L));
      System.setCurrentTimeMillis(1);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.toDate();
      spreadsheetDate0.getYYYY();
      serialDate0.getDayOfMonth();
      spreadsheetDate0.getDayOfMonth();
      System.setCurrentTimeMillis((-2628L));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(45);
      SerialDate serialDate0 = SerialDate.addYears(0, spreadsheetDate0);
      spreadsheetDate0.getDayOfWeek();
      Object object0 = new Object();
      spreadsheetDate0.equals(object0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0);
      spreadsheetDate0.equals("K");
      System.setCurrentTimeMillis(3);
      spreadsheetDate0.getMonth();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(31);
      SerialDate serialDate0 = SerialDate.getFollowingDayOfWeek(3, (SerialDate) spreadsheetDate0);
      spreadsheetDate0.toDate();
      spreadsheetDate0.toDate();
      spreadsheetDate0.isOn(serialDate0);
      SerialDate.createInstance(2958465);
      spreadsheetDate0.isBefore(serialDate0);
      spreadsheetDate0.toSerial();
      SerialDate.stringToMonthCode("fk2Vh");
      serialDate0.getEndOfCurrentMonth(spreadsheetDate0);
      long long0 = 0L;
      // Undeclared exception!
      try { 
        spreadsheetDate0.getPreviousDayOfWeek(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 1237;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1237);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(3);
      spreadsheetDate0.isBefore(spreadsheetDate1);
      spreadsheetDate0.setDescription("%S");
      System.setCurrentTimeMillis(1);
      spreadsheetDate0.getDayOfMonth();
      SerialDate serialDate0 = SerialDate.createInstance(6);
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 2);
      // Undeclared exception!
      try { 
        SerialDate.createInstance(3, 1900, 2958465);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1155);
      spreadsheetDate0.toSerial();
      spreadsheetDate0.getDayOfWeek();
      SerialDate serialDate0 = SerialDate.addDays(3, spreadsheetDate0);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      Date date0 = spreadsheetDate0.toDate();
      spreadsheetDate0.getMonth();
      SerialDate serialDate1 = SerialDate.createInstance(date0);
      SerialDate.isValidMonthCode(7);
      System.setCurrentTimeMillis(1391L);
      serialDate0.isInRange(serialDate1, (SerialDate) spreadsheetDate0, 1);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      System.setCurrentTimeMillis(0);
      spreadsheetDate0.compare(serialDate1);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.equals(spreadsheetDate0);
      spreadsheetDate0.isOnOrBefore(serialDate1);
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.isBefore(serialDate1);
      spreadsheetDate0.isBefore(serialDate0);
      spreadsheetDate0.isInRange(serialDate0, serialDate1, 1);
      System.setCurrentTimeMillis((-2628L));
      System.setCurrentTimeMillis(1);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.toDate();
      spreadsheetDate0.getYYYY();
      System.setCurrentTimeMillis(9999);
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 2);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1778);
      spreadsheetDate0.getYYYY();
      SerialDate serialDate0 = spreadsheetDate0.getPreviousDayOfWeek(2);
      SerialDate.addMonths(1140, serialDate0);
      spreadsheetDate0.isAfter(serialDate0);
      spreadsheetDate0.hashCode();
      SerialDate.getFollowingDayOfWeek(5, (SerialDate) spreadsheetDate0);
      spreadsheetDate0.getDayOfMonth();
      spreadsheetDate0.toString();
      spreadsheetDate0.isAfter(serialDate0);
      spreadsheetDate0.compare(serialDate0);
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.getDayOfMonth();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(33);
      MockDate mockDate0 = new MockDate(1900, 2, 3, 5, 3, 2);
      Instant instant0 = mockDate0.toInstant();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      spreadsheetDate0.equals(instant0);
      serialDate0.getPreviousDayOfWeek(5);
      // Undeclared exception!
      try { 
        SerialDate.getFollowingDayOfWeek((-2071), (SerialDate) spreadsheetDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(152);
      SerialDate serialDate0 = SerialDate.getFollowingDayOfWeek(6, (SerialDate) spreadsheetDate0);
      serialDate0.isInRange((SerialDate) spreadsheetDate0, (SerialDate) spreadsheetDate0);
      serialDate0.getDayOfWeek();
      spreadsheetDate0.compareTo(serialDate0);
      SerialDate serialDate1 = null;
      // Undeclared exception!
      try { 
        SerialDate.createInstance((-1), 4079, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1834);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(1776);
      SerialDate serialDate0 = spreadsheetDate1.getFollowingDayOfWeek(4);
      spreadsheetDate0.compare(spreadsheetDate1);
      spreadsheetDate0.toSerial();
      spreadsheetDate0.getMonth();
      spreadsheetDate1.compare(serialDate0);
      spreadsheetDate1.compareTo(spreadsheetDate0);
      SerialDate serialDate1 = SerialDate.addYears(46, serialDate0);
      SerialDate.getFollowingDayOfWeek(3, serialDate1);
      SerialDate serialDate2 = SerialDate.getNearestDayOfWeek(3, (SerialDate) spreadsheetDate0);
      boolean boolean0 = serialDate2.isBefore(spreadsheetDate0);
      spreadsheetDate0.isOn(serialDate2);
      serialDate2.toString();
      spreadsheetDate0.toDate();
      spreadsheetDate1.isAfter(serialDate2);
      SerialDate serialDate3 = SerialDate.addYears(1, serialDate0);
      spreadsheetDate0.toDate();
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.getDayOfMonth();
      MockDate mockDate0 = new MockDate(4, 7, 1, 4, 3);
      SerialDate serialDate4 = serialDate3.getPreviousDayOfWeek(4);
      int int0 = spreadsheetDate0.compare(serialDate1);
      assertEquals((-16749), int0);
      
      spreadsheetDate0.toDate();
      boolean boolean1 = serialDate4.isInRange(serialDate1, (SerialDate) spreadsheetDate0, 1752);
      boolean boolean2 = serialDate4.isAfter(spreadsheetDate1);
      assertTrue(boolean2);
      
      serialDate4.isAfter(serialDate1);
      spreadsheetDate0.isOnOrBefore(serialDate2);
      boolean boolean3 = spreadsheetDate1.isInRange(serialDate2, serialDate1, 1900);
      assertFalse(boolean3 == boolean1);
      assertEquals(7, spreadsheetDate0.getDayOfMonth());
      
      boolean boolean4 = serialDate1.isInRange(serialDate4, serialDate3, 2958465);
      assertTrue(boolean4 == boolean0);
      assertEquals(18583, serialDate1.toSerial());
      assertEquals(1950, serialDate1.getYYYY());
      assertEquals(1904, serialDate0.getYYYY());
      assertEquals(11, serialDate1.getMonth());
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1562);
      SerialDate serialDate0 = SerialDate.addMonths(0, spreadsheetDate0);
      spreadsheetDate0.isOnOrAfter(serialDate0);
      // Undeclared exception!
      try { 
        spreadsheetDate0.getPreviousDayOfWeek(1562);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }
}
