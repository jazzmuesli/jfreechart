/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:18:39 GMT 2019
 */

package org.jfree.chart.editor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.Paint;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import javax.swing.JPanel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLabelLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.editor.DefaultNumberAxisEditor;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.RangeType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DefaultNumberAxisEditor_ESTest extends DefaultNumberAxisEditor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(symbolAxis0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals("", symbolAxis0.getLabel());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertTrue(symbolAxis0.isAutoRange());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertEquals(AxisLabelLocation.MIDDLE, symbolAxis0.getLabelLocation());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertEquals(RangeType.FULL, symbolAxis0.getRangeType());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(symbolAxis0.isInverted());
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(symbolAxis0);
      assertEquals(4, stringArray0.length);
      assertNotNull(defaultNumberAxisEditor0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals("", symbolAxis0.getLabel());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertTrue(symbolAxis0.isAutoRange());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertEquals(AxisLabelLocation.MIDDLE, symbolAxis0.getLabelLocation());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertEquals(RangeType.FULL, symbolAxis0.getRangeType());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(symbolAxis0.isInverted());
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicySet());
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
      assertFalse(defaultNumberAxisEditor0.getIgnoreRepaint());
      assertTrue(defaultNumberAxisEditor0.getFocusTraversalKeysEnabled());
      assertTrue(defaultNumberAxisEditor0.isAutoRange());
      assertEquals(1.0, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
      assertEquals(0.0, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
      
      JPanel jPanel0 = defaultNumberAxisEditor0.createTickUnitPanel();
      assertEquals(4, stringArray0.length);
      assertNotNull(jPanel0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals("", symbolAxis0.getLabel());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertTrue(symbolAxis0.isAutoRange());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertEquals(AxisLabelLocation.MIDDLE, symbolAxis0.getLabelLocation());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertEquals(RangeType.FULL, symbolAxis0.getRangeType());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(symbolAxis0.isInverted());
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicySet());
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
      assertFalse(defaultNumberAxisEditor0.getIgnoreRepaint());
      assertTrue(defaultNumberAxisEditor0.getFocusTraversalKeysEnabled());
      assertTrue(defaultNumberAxisEditor0.isAutoRange());
      assertEquals(1.0, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
      assertEquals(0.0, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
      assertFalse(jPanel0.getIgnoreRepaint());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      assertNotNull(moduloAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(moduloAxis0);
      assertNotNull(defaultNumberAxisEditor0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicySet());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
      assertTrue(defaultNumberAxisEditor0.isAutoRange());
      assertFalse(defaultNumberAxisEditor0.getIgnoreRepaint());
      assertEquals(1.0, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
      assertTrue(defaultNumberAxisEditor0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
      
      // Undeclared exception!
      try { 
        defaultNumberAxisEditor0.setAxisProperties(moduloAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("?K$}4yO5a1 3!C-");
      assertNotNull(logarithmicAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(RangeType.FULL, logarithmicAxis0.getRangeType());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, logarithmicAxis0.getLabelLocation());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals("?K$}4yO5a1 3!C-", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(logarithmicAxis0);
      assertNotNull(defaultNumberAxisEditor0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(RangeType.FULL, logarithmicAxis0.getRangeType());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(AxisLabelLocation.MIDDLE, logarithmicAxis0.getLabelLocation());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals("?K$}4yO5a1 3!C-", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(defaultNumberAxisEditor0.getFocusTraversalKeysEnabled());
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
      assertEquals(1.0, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
      assertTrue(defaultNumberAxisEditor0.isAutoRange());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicySet());
      assertFalse(defaultNumberAxisEditor0.getIgnoreRepaint());
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertNotNull(categoryAxis0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(AxisLabelLocation.MIDDLE, categoryAxis0.getLabelLocation());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      
      // Undeclared exception!
      try { 
        defaultNumberAxisEditor0.setAxisProperties(categoryAxis0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.axis.CategoryAxis cannot be cast to org.jfree.chart.axis.ValueAxis
         //
         verifyException("org.jfree.chart.editor.DefaultValueAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[7];
      SymbolAxis symbolAxis0 = new SymbolAxis("Auto-TickUnit_Selection", stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(symbolAxis0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, symbolAxis0.getLabelLocation());
      assertEquals("Auto-TickUnit_Selection", symbolAxis0.getLabel());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isAutoRange());
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertEquals(RangeType.FULL, symbolAxis0.getRangeType());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isVisible());
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertFalse(symbolAxis0.isInverted());
      
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(symbolAxis0);
      assertEquals(7, stringArray0.length);
      assertNotNull(defaultNumberAxisEditor0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, symbolAxis0.getLabelLocation());
      assertEquals("Auto-TickUnit_Selection", symbolAxis0.getLabel());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isAutoRange());
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertEquals(RangeType.FULL, symbolAxis0.getRangeType());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isVisible());
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertFalse(symbolAxis0.isInverted());
      assertTrue(defaultNumberAxisEditor0.getFocusTraversalKeysEnabled());
      assertTrue(defaultNumberAxisEditor0.isAutoRange());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicySet());
      assertFalse(defaultNumberAxisEditor0.getIgnoreRepaint());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
      assertEquals(1.0, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
      
      // Undeclared exception!
      try { 
        defaultNumberAxisEditor0.focusLost((FocusEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultValueAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1212.76574, (-3500.6166207));
      assertNotNull(cyclicNumberAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1212.76574, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals((-3500.6166207), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertEquals((-1075.0851407), cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1212.76574, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(cyclicNumberAxis0);
      assertNotNull(defaultNumberAxisEditor0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1212.76574, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals((-3500.6166207), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertEquals((-1075.0851407), cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1212.76574, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicyProvider());
      assertEquals(1.0, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
      assertFalse(defaultNumberAxisEditor0.getIgnoreRepaint());
      assertEquals(0.0, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
      assertTrue(defaultNumberAxisEditor0.getFocusTraversalKeysEnabled());
      assertTrue(defaultNumberAxisEditor0.isAutoRange());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicySet());
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
      
      // Undeclared exception!
      try { 
        defaultNumberAxisEditor0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultNumberAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.5707963267948966, 315.151776012778, (String) null);
      assertNotNull(cyclicNumberAxis0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.9925106537986608, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.5707963267948966, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.5707963267948966, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(315.151776012778, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(cyclicNumberAxis0);
      assertNotNull(defaultNumberAxisEditor0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.9925106537986608, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.5707963267948966, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.5707963267948966, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(315.151776012778, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicySet());
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
      assertTrue(defaultNumberAxisEditor0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
      assertTrue(defaultNumberAxisEditor0.isAutoRange());
      assertFalse(defaultNumberAxisEditor0.getIgnoreRepaint());
      assertEquals(1.0, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicyProvider());
      
      defaultNumberAxisEditor0.validateTickUnit();
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.9925106537986608, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.5707963267948966, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.5707963267948966, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(315.151776012778, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicySet());
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
      assertTrue(defaultNumberAxisEditor0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
      assertTrue(defaultNumberAxisEditor0.isAutoRange());
      assertFalse(defaultNumberAxisEditor0.getIgnoreRepaint());
      assertEquals(1.0, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      assertNotNull(moduloAxis0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(moduloAxis0.isAutoRange());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", moduloAxis0.getLabel());
      assertTrue(moduloAxis0.isVisible());
      
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(moduloAxis0);
      assertNotNull(defaultNumberAxisEditor0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(moduloAxis0.isAutoRange());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", moduloAxis0.getLabel());
      assertTrue(moduloAxis0.isVisible());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicyProvider());
      assertEquals(1.0, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
      assertEquals(0.0, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
      assertTrue(defaultNumberAxisEditor0.getFocusTraversalKeysEnabled());
      assertTrue(defaultNumberAxisEditor0.isAutoRange());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicySet());
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
      assertFalse(defaultNumberAxisEditor0.getIgnoreRepaint());
      
      defaultNumberAxisEditor0.toggleAutoTick();
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(moduloAxis0.isAutoRange());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(RangeType.FULL, moduloAxis0.getRangeType());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(AxisLabelLocation.MIDDLE, moduloAxis0.getLabelLocation());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", moduloAxis0.getLabel());
      assertTrue(moduloAxis0.isVisible());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicyProvider());
      assertEquals(1.0, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
      assertEquals(0.0, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
      assertTrue(defaultNumberAxisEditor0.getFocusTraversalKeysEnabled());
      assertTrue(defaultNumberAxisEditor0.isAutoRange());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicySet());
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
      assertFalse(defaultNumberAxisEditor0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(symbolAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(symbolAxis0.isVisible());
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertEquals(RangeType.FULL, symbolAxis0.getRangeType());
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isAutoRange());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, symbolAxis0.getLabelLocation());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertEquals("", symbolAxis0.getLabel());
      assertFalse(symbolAxis0.isInverted());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(symbolAxis0);
      assertEquals(4, stringArray0.length);
      assertNotNull(defaultNumberAxisEditor0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(symbolAxis0.isVisible());
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertEquals(RangeType.FULL, symbolAxis0.getRangeType());
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isAutoRange());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, symbolAxis0.getLabelLocation());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertEquals("", symbolAxis0.getLabel());
      assertFalse(symbolAxis0.isInverted());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertTrue(defaultNumberAxisEditor0.getFocusTraversalKeysEnabled());
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
      assertTrue(defaultNumberAxisEditor0.isAutoRange());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicySet());
      assertFalse(defaultNumberAxisEditor0.getIgnoreRepaint());
      assertEquals(1.0, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
      
      defaultNumberAxisEditor0.setAxisProperties(symbolAxis0);
      assertEquals(4, stringArray0.length);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(symbolAxis0.isVisible());
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertEquals(RangeType.FULL, symbolAxis0.getRangeType());
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isAutoRange());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, symbolAxis0.getLabelLocation());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertEquals("", symbolAxis0.getLabel());
      assertFalse(symbolAxis0.isInverted());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertTrue(defaultNumberAxisEditor0.getFocusTraversalKeysEnabled());
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
      assertTrue(defaultNumberAxisEditor0.isAutoRange());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicySet());
      assertFalse(defaultNumberAxisEditor0.getIgnoreRepaint());
      assertEquals(1.0, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.5707963267948966, 315.151776012778, (String) null);
      assertNotNull(cyclicNumberAxis0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(315.151776012778, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.5707963267948966, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.9925106537986608, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.5707963267948966, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(cyclicNumberAxis0);
      assertNotNull(defaultNumberAxisEditor0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(315.151776012778, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.5707963267948966, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.9925106537986608, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.5707963267948966, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(defaultNumberAxisEditor0.getFocusTraversalKeysEnabled());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicySet());
      assertFalse(defaultNumberAxisEditor0.getIgnoreRepaint());
      assertTrue(defaultNumberAxisEditor0.isAutoRange());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicyProvider());
      assertEquals(1.0, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
      assertEquals(0.0, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
      
      defaultNumberAxisEditor0.setAxisProperties(cyclicNumberAxis0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(315.151776012778, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.5707963267948966, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.9925106537986608, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.5707963267948966, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(RangeType.FULL, cyclicNumberAxis0.getRangeType());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(AxisLabelLocation.MIDDLE, cyclicNumberAxis0.getLabelLocation());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(defaultNumberAxisEditor0.getFocusTraversalKeysEnabled());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicySet());
      assertFalse(defaultNumberAxisEditor0.getIgnoreRepaint());
      assertTrue(defaultNumberAxisEditor0.isAutoRange());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicyProvider());
      assertEquals(1.0, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
      assertEquals(0.0, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(symbolAxis0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertFalse(symbolAxis0.isInverted());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertEquals(RangeType.FULL, symbolAxis0.getRangeType());
      assertEquals("", symbolAxis0.getLabel());
      assertEquals(AxisLabelLocation.MIDDLE, symbolAxis0.getLabelLocation());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isAutoRange());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(symbolAxis0);
      assertEquals(4, stringArray0.length);
      assertNotNull(defaultNumberAxisEditor0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertFalse(symbolAxis0.isInverted());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertEquals(RangeType.FULL, symbolAxis0.getRangeType());
      assertEquals("", symbolAxis0.getLabel());
      assertEquals(AxisLabelLocation.MIDDLE, symbolAxis0.getLabelLocation());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isAutoRange());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicySet());
      assertEquals(1.0, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
      assertTrue(defaultNumberAxisEditor0.getFocusTraversalKeysEnabled());
      assertTrue(defaultNumberAxisEditor0.isAutoRange());
      assertFalse(defaultNumberAxisEditor0.getIgnoreRepaint());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
      
      defaultNumberAxisEditor0.toggleAutoTick();
      assertEquals(4, stringArray0.length);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertFalse(symbolAxis0.isInverted());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertEquals(RangeType.FULL, symbolAxis0.getRangeType());
      assertEquals("", symbolAxis0.getLabel());
      assertEquals(AxisLabelLocation.MIDDLE, symbolAxis0.getLabelLocation());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isAutoRange());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicySet());
      assertEquals(1.0, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
      assertTrue(defaultNumberAxisEditor0.getFocusTraversalKeysEnabled());
      assertTrue(defaultNumberAxisEditor0.isAutoRange());
      assertFalse(defaultNumberAxisEditor0.getIgnoreRepaint());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      assertNotNull(numberAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(numberAxis0);
      assertNotNull(defaultNumberAxisEditor0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultNumberAxisEditor0.getIgnoreRepaint());
      assertEquals(0.0, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
      assertEquals(1.0, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicySet());
      assertTrue(defaultNumberAxisEditor0.getFocusTraversalKeysEnabled());
      assertTrue(defaultNumberAxisEditor0.isAutoRange());
      
      FocusEvent focusEvent0 = new FocusEvent(defaultNumberAxisEditor0, 180, false);
      assertNotNull(focusEvent0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultNumberAxisEditor0.getIgnoreRepaint());
      assertEquals(0.0, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
      assertEquals(1.0, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicySet());
      assertTrue(defaultNumberAxisEditor0.getFocusTraversalKeysEnabled());
      assertTrue(defaultNumberAxisEditor0.isAutoRange());
      assertEquals(180, focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      
      defaultNumberAxisEditor0.focusLost(focusEvent0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(RangeType.FULL, numberAxis0.getRangeType());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(AxisLabelLocation.MIDDLE, numberAxis0.getLabelLocation());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultNumberAxisEditor0.getIgnoreRepaint());
      assertEquals(0.0, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
      assertEquals(1.0, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicySet());
      assertTrue(defaultNumberAxisEditor0.getFocusTraversalKeysEnabled());
      assertTrue(defaultNumberAxisEditor0.isAutoRange());
      assertEquals(180, focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-644.0), (-644.0));
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(cyclicNumberAxis0);
      ActionEvent actionEvent0 = new ActionEvent(defaultNumberAxisEditor0, 500, "TickUnitValue");
      defaultNumberAxisEditor0.actionPerformed(actionEvent0);
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(numberAxis0);
      ActionEvent actionEvent0 = new ActionEvent(defaultNumberAxisEditor0, 500, "AutoTickOnOff", 180);
      defaultNumberAxisEditor0.actionPerformed(actionEvent0);
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(numberAxis0).getLabel();
      doReturn((Font) null).when(numberAxis0).getLabelFont();
      doReturn((RectangleInsets) null).when(numberAxis0).getLabelInsets();
      doReturn((Paint) null).when(numberAxis0).getLabelPaint();
      doReturn((Font) null).when(numberAxis0).getTickLabelFont();
      doReturn((RectangleInsets) null).when(numberAxis0).getTickLabelInsets();
      doReturn((Paint) null).when(numberAxis0).getTickLabelPaint();
      doReturn(false).when(numberAxis0).isTickLabelsVisible();
      doReturn(false).when(numberAxis0).isTickMarksVisible();
      doReturn((NumberTickUnit) null).when(numberAxis0).getTickUnit();
      doReturn(0.0).when(numberAxis0).getLowerBound();
      doReturn(0.0).when(numberAxis0).getUpperBound();
      doReturn(false).when(numberAxis0).isAutoRange();
      doReturn(false).when(numberAxis0).isAutoTickUnitSelection();
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = null;
      try {
        defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(numberAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultNumberAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (String) null);
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        defaultNumberAxisEditor0.setAxisProperties((Axis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultAxisEditor", e);
      }
  }
}
