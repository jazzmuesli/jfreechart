/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:59:48 GMT 2019
 */

package org.jfree.chart.editor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Paint;
import java.awt.event.ActionEvent;
import javax.swing.JTabbedPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.editor.DefaultAxisEditor;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.ui.RectangleInsets;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultAxisEditor_ESTest extends DefaultAxisEditor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(846.0, "7c;6PBj0zZy+z4kO2:");
      DefaultAxisEditor defaultAxisEditor0 = DefaultAxisEditor.getInstance(cyclicNumberAxis0);
      defaultAxisEditor0.isTickMarksVisible();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DefaultAxisEditor defaultAxisEditor0 = new DefaultAxisEditor(categoryAxis0);
      defaultAxisEditor0.isTickLabelsVisible();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      DefaultAxisEditor defaultAxisEditor0 = new DefaultAxisEditor(cyclicNumberAxis0);
      defaultAxisEditor0.getTickLabelPaint();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      DefaultAxisEditor defaultAxisEditor0 = new DefaultAxisEditor(cyclicNumberAxis0);
      defaultAxisEditor0.getTickLabelFont();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DefaultAxisEditor defaultAxisEditor0 = new DefaultAxisEditor(categoryAxis0);
      defaultAxisEditor0.getLabelFont();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(846.0, "7c;6PBj0zZy+z4kO2:");
      DefaultAxisEditor defaultAxisEditor0 = DefaultAxisEditor.getInstance(cyclicNumberAxis0);
      defaultAxisEditor0.getLabel();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(axis0).getLabel();
      doReturn((Font) null).when(axis0).getLabelFont();
      doReturn((RectangleInsets) null).when(axis0).getLabelInsets();
      doReturn((Paint) null).when(axis0).getLabelPaint();
      doReturn((Font) null).when(axis0).getTickLabelFont();
      doReturn((RectangleInsets) null).when(axis0).getTickLabelInsets();
      doReturn((Paint) null).when(axis0).getTickLabelPaint();
      doReturn(false).when(axis0).isTickLabelsVisible();
      doReturn(false).when(axis0).isTickMarksVisible();
      DefaultAxisEditor defaultAxisEditor0 = new DefaultAxisEditor(axis0);
      // Undeclared exception!
      try { 
        defaultAxisEditor0.attemptTickLabelFontSelection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.FontChooserPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DefaultAxisEditor defaultAxisEditor0 = new DefaultAxisEditor(categoryAxis0);
      // Undeclared exception!
      try { 
        defaultAxisEditor0.attemptTickLabelFontSelection();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DefaultAxisEditor defaultAxisEditor0 = DefaultAxisEditor.getInstance(dateAxis0);
      ActionEvent actionEvent0 = new ActionEvent(defaultAxisEditor0, 500, (String) null);
      // Undeclared exception!
      try { 
        defaultAxisEditor0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultAxisEditor defaultAxisEditor0 = null;
      try {
        defaultAxisEditor0 = new DefaultAxisEditor((Axis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxisForDataset(1414);
      DefaultAxisEditor defaultAxisEditor0 = new DefaultAxisEditor(valueAxis0);
      ActionEvent actionEvent0 = new ActionEvent(combinedDomainXYPlot0.MINIMUM_HEIGHT_TO_DRAW, 1414, "org.jfree.data.xy.XIntervalDataItem");
      defaultAxisEditor0.actionPerformed(actionEvent0);
      assertEquals("org.jfree.data.xy.XIntervalDataItem", actionEvent0.getActionCommand());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis((String) null);
      DefaultAxisEditor defaultAxisEditor0 = DefaultAxisEditor.getInstance(dateAxis0);
      RectangleInsets rectangleInsets0 = defaultAxisEditor0.getLabelInsets();
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(axis0).getLabel();
      doReturn((Font) null).when(axis0).getLabelFont();
      doReturn((RectangleInsets) null).when(axis0).getLabelInsets();
      doReturn((Paint) null).when(axis0).getLabelPaint();
      doReturn((Font) null).when(axis0).getTickLabelFont();
      doReturn((RectangleInsets) null).when(axis0).getTickLabelInsets();
      doReturn((Paint) null).when(axis0).getTickLabelPaint();
      doReturn(false).when(axis0).isTickLabelsVisible();
      doReturn(false).when(axis0).isTickMarksVisible();
      DefaultAxisEditor defaultAxisEditor0 = DefaultAxisEditor.getInstance(axis0);
      RectangleInsets rectangleInsets0 = defaultAxisEditor0.getLabelInsets();
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertNotNull(rectangleInsets0);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "");
      DefaultAxisEditor defaultAxisEditor0 = new DefaultAxisEditor(cyclicNumberAxis0);
      RectangleInsets rectangleInsets0 = defaultAxisEditor0.getTickLabelInsets();
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2652.2433, 2652.2433);
      DefaultAxisEditor defaultAxisEditor0 = new DefaultAxisEditor(cyclicNumberAxis0);
      String string0 = defaultAxisEditor0.getLabel();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(axis0).getLabel();
      doReturn((Font) null).when(axis0).getLabelFont();
      doReturn((RectangleInsets) null).when(axis0).getLabelInsets();
      doReturn((Paint) null).when(axis0).getLabelPaint();
      doReturn((Font) null).when(axis0).getTickLabelFont();
      doReturn((RectangleInsets) null).when(axis0).getTickLabelInsets();
      doReturn((Paint) null).when(axis0).getTickLabelPaint();
      doReturn(false).when(axis0).isTickLabelsVisible();
      doReturn(false).when(axis0).isTickMarksVisible();
      DefaultAxisEditor defaultAxisEditor0 = DefaultAxisEditor.getInstance(axis0);
      Font font0 = defaultAxisEditor0.getTickLabelFont();
      assertNull(font0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(axis0).getLabel();
      doReturn((Font) null).when(axis0).getLabelFont();
      doReturn((RectangleInsets) null).when(axis0).getLabelInsets();
      doReturn((Paint) null).when(axis0).getLabelPaint();
      doReturn((Font) null).when(axis0).getTickLabelFont();
      doReturn((RectangleInsets) null).when(axis0).getTickLabelInsets();
      doReturn((Paint) null).when(axis0).getTickLabelPaint();
      doReturn(false).when(axis0).isTickLabelsVisible();
      doReturn(false).when(axis0).isTickMarksVisible();
      DefaultAxisEditor defaultAxisEditor0 = DefaultAxisEditor.getInstance(axis0);
      boolean boolean0 = defaultAxisEditor0.isTickMarksVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(axis0).getLabel();
      doReturn((Font) null).when(axis0).getLabelFont();
      doReturn((RectangleInsets) null).when(axis0).getLabelInsets();
      doReturn((Paint) null).when(axis0).getLabelPaint();
      doReturn((Font) null).when(axis0).getTickLabelFont();
      doReturn((RectangleInsets) null).when(axis0).getTickLabelInsets();
      doReturn((Paint) null).when(axis0).getTickLabelPaint();
      doReturn(false).when(axis0).isTickLabelsVisible();
      doReturn(false).when(axis0).isTickMarksVisible();
      DefaultAxisEditor defaultAxisEditor0 = DefaultAxisEditor.getInstance(axis0);
      Font font0 = defaultAxisEditor0.getLabelFont();
      assertNull(font0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      DefaultAxisEditor defaultAxisEditor0 = new DefaultAxisEditor(cyclicNumberAxis0);
      Color color0 = (Color)defaultAxisEditor0.getLabelPaint();
      assertEquals((-16777216), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(axis0).getLabel();
      doReturn((Font) null).when(axis0).getLabelFont();
      doReturn((RectangleInsets) null).when(axis0).getLabelInsets();
      doReturn((Paint) null).when(axis0).getLabelPaint();
      doReturn((Font) null).when(axis0).getTickLabelFont();
      doReturn((RectangleInsets) null).when(axis0).getTickLabelInsets();
      doReturn((Paint) null).when(axis0).getTickLabelPaint();
      doReturn(false).when(axis0).isTickLabelsVisible();
      doReturn(false).when(axis0).isTickMarksVisible();
      DefaultAxisEditor defaultAxisEditor0 = new DefaultAxisEditor(axis0);
      boolean boolean0 = defaultAxisEditor0.isTickLabelsVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(axis0).getLabel();
      doReturn((Font) null).when(axis0).getLabelFont();
      doReturn((RectangleInsets) null).when(axis0).getLabelInsets();
      doReturn((Paint) null).when(axis0).getLabelPaint();
      doReturn((Font) null).when(axis0).getTickLabelFont();
      doReturn((RectangleInsets) null).when(axis0).getTickLabelInsets();
      doReturn((Paint) null).when(axis0).getTickLabelPaint();
      doReturn(false).when(axis0).isTickLabelsVisible();
      doReturn(false).when(axis0).isTickMarksVisible();
      DefaultAxisEditor defaultAxisEditor0 = DefaultAxisEditor.getInstance(axis0);
      Paint paint0 = defaultAxisEditor0.getTickLabelPaint();
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DefaultAxisEditor defaultAxisEditor0 = new DefaultAxisEditor(categoryAxis0);
      defaultAxisEditor0.setAxisProperties(categoryAxis0);
      assertTrue(categoryAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      DefaultAxisEditor defaultAxisEditor0 = DefaultAxisEditor.getInstance(logAxis0);
      assertFalse(defaultAxisEditor0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(7.2E7, "org.jfree.data.xy.XYSeriesCollection");
      DefaultAxisEditor defaultAxisEditor0 = DefaultAxisEditor.getInstance(cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        defaultAxisEditor0.setAxisProperties((Axis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultAxisEditor defaultAxisEditor0 = DefaultAxisEditor.getInstance((Axis) null);
      assertNull(defaultAxisEditor0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(axis0).getLabel();
      doReturn((Font) null).when(axis0).getLabelFont();
      doReturn((RectangleInsets) null).when(axis0).getLabelInsets();
      doReturn((Paint) null).when(axis0).getLabelPaint();
      doReturn((Font) null).when(axis0).getTickLabelFont();
      doReturn((RectangleInsets) null).when(axis0).getTickLabelInsets();
      doReturn((Paint) null).when(axis0).getTickLabelPaint();
      doReturn(false).when(axis0).isTickLabelsVisible();
      doReturn(false).when(axis0).isTickMarksVisible();
      DefaultAxisEditor defaultAxisEditor0 = DefaultAxisEditor.getInstance(axis0);
      Axis axis1 = mock(Axis.class, new ViolatedAssumptionAnswer());
      defaultAxisEditor0.setAxisProperties(axis1);
      assertTrue(defaultAxisEditor0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(axis0).getLabel();
      doReturn((Font) null).when(axis0).getLabelFont();
      doReturn((RectangleInsets) null).when(axis0).getLabelInsets();
      doReturn((Paint) null).when(axis0).getLabelPaint();
      doReturn((Font) null).when(axis0).getTickLabelFont();
      doReturn((RectangleInsets) null).when(axis0).getTickLabelInsets();
      doReturn((Paint) null).when(axis0).getTickLabelPaint();
      doReturn(false).when(axis0).isTickLabelsVisible();
      doReturn(false).when(axis0).isTickMarksVisible();
      DefaultAxisEditor defaultAxisEditor0 = DefaultAxisEditor.getInstance(axis0);
      JTabbedPane jTabbedPane0 = defaultAxisEditor0.getOtherTabs();
      assertTrue(jTabbedPane0.getFocusTraversalKeysEnabled());
  }
}
