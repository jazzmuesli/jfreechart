/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:58:34 GMT 2019
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.block.LineBorder;
import org.jfree.chart.ui.RectangleInsets;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LineBorder_ESTest extends LineBorder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn("insets").when(stroke0).toString();
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      doReturn((-142.174625633)).when(rectangleInsets0).calculateBottomInset(anyDouble());
      doReturn((-2168.562241)).when(rectangleInsets0).calculateLeftInset(anyDouble());
      doReturn(1698.159167930954).when(rectangleInsets0).calculateRightInset(anyDouble());
      doReturn(2984.6745).when(rectangleInsets0).calculateTopInset(anyDouble());
      LineBorder lineBorder0 = new LineBorder(systemColor0, stroke0, rectangleInsets0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn("=U9ybmR2wJ").when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(226.0).when(rectangle2D0).getHeight();
      doReturn(226.0).when(rectangle2D0).getWidth();
      doReturn(2984.6745).when(rectangle2D0).getX();
      doReturn(2984.6745).when(rectangle2D0).getY();
      lineBorder0.draw(graphics2D0, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      RectangleInsets rectangleInsets0 = lineBorder0.getInsets();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(rectangleInsets0).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(1224.0570024259).when(rectangle2D0).getHeight();
      doReturn(1224.0570024259).when(rectangle2D0).getWidth();
      doReturn(1224.0570024259).when(rectangle2D0).getX();
      doReturn(294.970700204003).when(rectangle2D0).getY();
      lineBorder0.draw(graphics2D0, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(rectangle2D0).getHeight();
      doReturn(2429.92261).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      lineBorder0.draw(graphics2D0, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Color color0 = Color.orange;
      GradientPaint gradientPaint0 = new GradientPaint((-3073.91F), (-3073.91F), color0, 868.1115F, 868.1115F, color0);
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      LineBorder lineBorder0 = new LineBorder(gradientPaint0, stroke0, rectangleInsets0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(135.81).when(rectangle2D0).getWidth();
      lineBorder0.draw(graphics2D0, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      lineBorder0.draw(graphics2D0, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      // Undeclared exception!
      try { 
        lineBorder0.draw((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.LineBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Color color0 = Color.green;
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LineBorder lineBorder0 = null;
      try {
        lineBorder0 = new LineBorder(color0, stroke0, (RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.activeCaption;
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stroke0).toString();
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      LineBorder lineBorder0 = new LineBorder(systemColor0, stroke0, rectangleInsets0);
      Stroke stroke1 = lineBorder0.getStroke();
      RectangleInsets rectangleInsets1 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      LineBorder lineBorder1 = new LineBorder(systemColor0, stroke1, rectangleInsets1);
      boolean boolean0 = lineBorder0.equals(lineBorder1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      LineBorder lineBorder1 = new LineBorder();
      boolean boolean0 = lineBorder0.equals(lineBorder1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      RectangleInsets rectangleInsets0 = lineBorder0.getInsets();
      Stroke stroke0 = lineBorder0.getStroke();
      SystemColor systemColor0 = SystemColor.scrollbar;
      LineBorder lineBorder1 = new LineBorder(systemColor0, stroke0, rectangleInsets0);
      boolean boolean0 = lineBorder0.equals(lineBorder1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      RectangleInsets rectangleInsets0 = lineBorder0.getInsets();
      Paint paint0 = lineBorder0.getPaint();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LineBorder lineBorder1 = new LineBorder(paint0, stroke0, rectangleInsets0);
      boolean boolean0 = lineBorder0.equals(lineBorder1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      boolean boolean0 = lineBorder0.equals(lineBorder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Color color0 = Color.green;
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stroke0).toString();
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleInsets0).calculateBottomInset(anyDouble());
      doReturn(0.0).when(rectangleInsets0).calculateLeftInset(anyDouble());
      doReturn(0.0).when(rectangleInsets0).calculateRightInset(anyDouble());
      doReturn(0.0).when(rectangleInsets0).calculateTopInset(anyDouble());
      LineBorder lineBorder0 = new LineBorder(color0, stroke0, rectangleInsets0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(685.854627).when(rectangle2D0).getHeight();
      doReturn(685.854627).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      lineBorder0.draw(graphics2D0, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-3060.362376579636)).when(rectangle2D0).getHeight();
      doReturn(1.0).when(rectangle2D0).getWidth();
      lineBorder0.draw(graphics2D0, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(1508.5774898975753).when(rectangle2D0).getHeight();
      doReturn((-1321.1864249579494)).when(rectangle2D0).getWidth();
      lineBorder0.draw(graphics2D0, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      RectangleInsets rectangleInsets0 = lineBorder0.getInsets();
      boolean boolean0 = lineBorder0.equals(rectangleInsets0);
      assertFalse(boolean0);
  }
}
