/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:23:19 GMT 2019
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.color.ICC_Profile;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.IndexColorModel;
import java.text.AttributedCharacterIterator;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.LineBorder;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.ui.Size2D;
import org.jfree.chart.ui.VerticalAlignment;
import org.jfree.chart.util.UnitType;
import org.jfree.data.Range;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.Minute;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesTableModel;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ColumnArrangement_ESTest extends ColumnArrangement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      columnArrangement0.add(blockContainer0, timeSeriesTableModel0);
      columnArrangement0.clear();
      Range range0 = new Range(1343.9639, 1343.9639);
      Size2D size2D0 = columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      Size2D size2D1 = columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      EmptyBlock emptyBlock0 = new EmptyBlock(1098.3, 3506.576927);
      blockContainer0.add((Block) emptyBlock0, (Object) size2D1);
      RectangleConstraint rectangleConstraint1 = new RectangleConstraint(1902.602, 3506.576927);
      rectangleConstraint1.calculateConstrainedSize(size2D0);
      columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      columnArrangement0.add(blockContainer0, timeSeriesTableModel0);
      EmptyBlock emptyBlock0 = new EmptyBlock(812, (-255.0));
      blockContainer0.add((Block) emptyBlock0);
      Graphics2D graphics2D0 = null;
      Range range0 = new Range(812, 812);
      columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      blockContainer0.add((Block) blockContainer0);
      // Undeclared exception!
      try { 
        columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      columnArrangement0.add(blockContainer0, timeSeriesTableModel0);
      EmptyBlock emptyBlock0 = new EmptyBlock(812, (-255.0));
      blockContainer0.add((Block) emptyBlock0);
      Range range0 = new Range(812, 812);
      columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      BlockContainer blockContainer1 = new BlockContainer(columnArrangement0);
      blockContainer0.add((Block) blockContainer1);
      columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      RectangleConstraint rectangleConstraint1 = new RectangleConstraint(1902.602, 3506.576927);
      columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      columnArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeRR(blockContainer1, (Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      columnArrangement0.add(blockContainer0, timeSeriesTableModel0);
      columnArrangement0.clear();
      blockContainer0.setArrangement(columnArrangement0);
      Range range0 = new Range(0.0, 0.0);
      Size2D size2D0 = columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      Size2D size2D1 = columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertTrue(size2D1.equals((Object)size2D0));
      
      RectangleConstraint rectangleConstraint1 = new RectangleConstraint(range0, 3506.576927);
      columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      Size2D size2D2 = columnArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      assertEquals(0.0, size2D2.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      Range range0 = new Range(812, 812);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      RectangleConstraint rectangleConstraint1 = new RectangleConstraint(1902.602, 3506.576927);
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 3506.576927, 3506.576927);
      BlockContainer blockContainer0 = new BlockContainer();
      Size2D size2D0 = columnArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(812.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      columnArrangement0.add(blockContainer0, timeSeriesTableModel0);
      columnArrangement0.clear();
      Range range0 = new Range(0.0, 0.0);
      Size2D size2D0 = columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      Size2D size2D1 = columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertTrue(size2D1.equals((Object)size2D0));
      
      RectangleConstraint rectangleConstraint1 = new RectangleConstraint(1902.602, 3506.576927);
      Size2D size2D2 = columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      assertEquals(0.0, size2D2.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      ColumnArrangement columnArrangement1 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 0.0, 0.0);
      boolean boolean0 = columnArrangement0.equals(columnArrangement1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      columnArrangement0.add(blockContainer0, timeSeriesTableModel0);
      columnArrangement0.clear();
      Range range0 = new Range(0.0, 0.0);
      Size2D size2D0 = columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      Size2D size2D1 = columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertTrue(size2D1.equals((Object)size2D0));
      
      RectangleConstraint rectangleConstraint1 = new RectangleConstraint(1902.602, 3506.576927);
      Size2D size2D2 = columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      assertEquals(0.0, size2D2.getWidth(), 0.01);
      
      Size2D size2D3 = columnArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertTrue(size2D3.equals((Object)size2D0));
      
      Size2D size2D4 = columnArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertTrue(size2D4.equals((Object)size2D1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 0.0, 0.0);
      boolean boolean0 = columnArrangement0.equals(columnArrangement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      columnArrangement0.add(blockContainer0, timeSeriesTableModel0);
      columnArrangement0.clear();
      Range range0 = new Range(0.0, 0.0);
      Size2D size2D0 = columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      Size2D size2D1 = columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertTrue(size2D1.equals((Object)size2D0));
      
      RectangleConstraint rectangleConstraint1 = new RectangleConstraint(1902.602, 3506.576927);
      columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      Size2D size2D2 = columnArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      assertEquals(0.0, size2D2.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 0.0, 0.0);
      ColumnArrangement columnArrangement1 = new ColumnArrangement(horizontalAlignment0, (VerticalAlignment) null, 0.0, 0.0);
      boolean boolean0 = columnArrangement0.equals(columnArrangement1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      // Undeclared exception!
      try { 
        columnArrangement0.arrange(blockContainer0, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 5261.1543, 0.0);
      BlockContainer blockContainer0 = new BlockContainer();
      columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      columnArrangement0.equals(blockContainer0);
      columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      BlockContainer blockContainer1 = new BlockContainer();
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 318.794694858654, 318.794694858654, 0.0, 0.0);
      blockContainer1.setMargin(rectangleInsets0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, (-117.477133298));
      rectangleConstraint0.toFixedWidth(0.0);
      RectangleConstraint rectangleConstraint1 = blockContainer1.toContentConstraint(rectangleConstraint0);
      columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      columnArrangement0.clear();
      Range range0 = new Range(0.0, 0.0);
      Size2D size2D0 = columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      Size2D size2D1 = columnArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertTrue(size2D1.equals((Object)size2D0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.jfree.chart.block.ColumnArrangement");
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(4L);
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      double double0 = 716.017;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 0L, 716.017);
      BlockContainer blockContainer0 = null;
      Graphics2D graphics2D0 = null;
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeNN((BlockContainer) null, (Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      Color color0 = Color.lightGray;
      ColorBlock colorBlock0 = new ColorBlock(color0, (-246.3173712), (-246.3173712));
      columnArrangement0.add((Block) null, colorBlock0);
      BlockContainer blockContainer0 = new BlockContainer();
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      colorBlock0.setWidth(1378.81);
      Color.getColor("", color0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      Size2D size2D0 = columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      rectangleConstraint1.calculateConstrainedSize(size2D0);
      columnArrangement0.equals(color0);
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 0.0);
      emptyBlock0.clone();
      emptyBlock0.setHeight(0.0);
      columnArrangement0.equals(emptyBlock0);
      columnArrangement0.equals((Object) null);
      RectangleConstraint rectangleConstraint2 = blockContainer0.toContentConstraint(rectangleConstraint1);
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      timeSeriesCollection0.getDomainBounds((List) linkedList0, true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, 0.0);
      Size2D size2D0 = blockContainer0.arrange((Graphics2D) null);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      columnArrangement0.equals(lengthConstraintType0);
      // Undeclared exception!
      try { 
        columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      Graphics2D graphics2D0 = null;
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 1.7976931348623157E308);
      Range range2 = Range.scale(range1, Double.POSITIVE_INFINITY);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range2);
      blockContainer0.toContentConstraint(rectangleConstraint0);
      // Undeclared exception!
      try { 
        columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, (-5317.50314), (-5317.50314));
      BlockContainer blockContainer0 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeNF((BlockContainer) null, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, (-1.0), 44.594324);
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      blockContainer0.setWidth(1591.495);
      Size2D size2D0 = columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      
      columnArrangement0.clear();
      BlockContainer blockContainer1 = new BlockContainer(columnArrangement0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.FIXED;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(Double.POSITIVE_INFINITY, (Range) null, lengthConstraintType0, (-661.4222692919), (Range) null, lengthConstraintType1);
      columnArrangement0.arrangeNF(blockContainer1, (Graphics2D) null, rectangleConstraint0);
      Size2D size2D1 = columnArrangement0.arrangeFF(blockContainer1, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D1.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      double double0 = 0.0;
      double double1 = (-3322.47898);
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 0.0, (-3322.47898));
      BlockContainer blockContainer0 = new BlockContainer();
      Object object0 = new Object();
      BlockContainer blockContainer1 = new BlockContainer(columnArrangement0);
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeFF(blockContainer1, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 2526.5283186732277, (-3182.982944134777));
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      BufferedImage bufferedImage0 = new BufferedImage(6, 6, 6);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Range range0 = new Range((-3182.982944134777), (-3182.982944134777));
      Range range1 = Range.expandToInclude(range0, (-3182.982944134777));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range1, 0.0);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeRR(blockContainer0, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, (-1861.064761), (-1861.064761));
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1861.064761), (-1861.064761));
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      Size2D size2D0 = columnArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      Graphics2D graphics2D0 = null;
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, true, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      LineBorder lineBorder0 = new LineBorder();
      blockContainer0.setFrame(lineBorder0);
      xYSeriesCollection0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1483.75102), (Range) null);
      rectangleConstraint0.toFixedHeight(59);
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 5261.1543, 0.0);
      BlockContainer blockContainer0 = new BlockContainer();
      columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      columnArrangement0.equals(blockContainer0);
      columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      BlockContainer blockContainer1 = new BlockContainer();
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 318.794694858654, 318.794694858654, 0.0, 0.0);
      blockContainer1.setMargin(rectangleInsets0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, (-117.477133298));
      RectangleConstraint rectangleConstraint1 = blockContainer1.toContentConstraint(rectangleConstraint0);
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = null;
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 6994.887501826372, 6994.887501826372);
      columnArrangement0.clear();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-2630.07), (-2630.07));
      Size2D size2D0 = columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals((-2630.07), size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      boolean boolean0 = columnArrangement0.equals(sunHints_Key0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 0.0);
      columnArrangement0.add(emptyBlock0, emptyBlock0);
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp((RenderingHints) null);
      int int0 = 2146672645;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(2146672645, 2146672645, (-456));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -456
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      columnArrangement0.add(blockContainer0, timeSeriesTableModel0);
      columnArrangement0.clear();
      Range range0 = new Range(1343.9639, 1343.9639);
      Size2D size2D0 = columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      RectangleConstraint rectangleConstraint1 = new RectangleConstraint(1902.602, 3506.576927);
      rectangleConstraint1.calculateConstrainedSize(size2D0);
      columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, (-1634.100621066405), (-1634.100621066405));
      ColumnArrangement columnArrangement1 = new ColumnArrangement();
      boolean boolean0 = columnArrangement0.equals(columnArrangement1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      columnArrangement0.add(blockContainer0, timeSeriesTableModel0);
      Range range0 = new Range(812, 812);
      columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      BlockContainer blockContainer1 = new BlockContainer(columnArrangement0);
      blockContainer0.add((Block) blockContainer1);
      columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      RectangleConstraint rectangleConstraint1 = new RectangleConstraint(1902.602, 3506.576927);
      columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      Size2D size2D0 = columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(812.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      columnArrangement0.add(blockContainer0, timeSeriesTableModel0);
      EmptyBlock emptyBlock0 = new EmptyBlock(812, (-255.0));
      blockContainer0.add((Block) emptyBlock0);
      Range range0 = new Range(812, 812);
      Size2D size2D0 = columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      assertEquals(812.0, size2D0.width, 0.01);
      assertEquals((-255.0), size2D0.height, 0.01);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      BlockContainer blockContainer1 = new BlockContainer(columnArrangement0);
      blockContainer0.add((Block) blockContainer1);
      columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      RectangleConstraint rectangleConstraint1 = new RectangleConstraint(1902.602, 3506.576927);
      Size2D size2D1 = columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      assertEquals(812.0, size2D1.width, 0.01);
      
      Size2D size2D2 = columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(812.0, size2D2.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      columnArrangement0.add(blockContainer0, timeSeriesTableModel0);
      columnArrangement0.clear();
      Graphics2D graphics2D0 = null;
      Range range0 = new Range(812, 812);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(812, range0);
      // Undeclared exception!
      try { 
        columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      columnArrangement0.add(blockContainer0, timeSeriesTableModel0);
      columnArrangement0.clear();
      Graphics2D graphics2D0 = null;
      Range range0 = new Range(0.0, 0.0);
      Size2D size2D0 = new Size2D();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range0);
      rectangleConstraint0.toFixedWidth(0.0);
      // Undeclared exception!
      try { 
        columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      columnArrangement0.add(blockContainer0, timeSeriesTableModel0);
      columnArrangement0.clear();
      Graphics2D graphics2D0 = null;
      Range range0 = new Range(0.0, 0.0);
      columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range0);
      // Undeclared exception!
      try { 
        columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      columnArrangement0.add(blockContainer0, timeSeriesTableModel0);
      columnArrangement0.clear();
      blockContainer0.setArrangement(columnArrangement0);
      Range range0 = new Range(0.0, 0.0);
      columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      RectangleConstraint rectangleConstraint1 = new RectangleConstraint(1902.602, 3506.576927);
      columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, (-3866.9711279));
      UnitType unitType0 = UnitType.ABSOLUTE;
      emptyBlock0.setPadding(0.0, (-3866.9711279), 0.0, 0.0);
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.0, (-3866.9711279), 0.0, 0.0);
      Hashtable<AttributedCharacterIterator.Attribute, EmptyBlock> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, EmptyBlock>();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.0, 0.0, (-3866.9711279), (-1324.01));
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      rectangleConstraint0.toFixedWidth(1.7976931348623157E308);
      rectangleConstraint0.toFixedWidth(0.0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Size2D size2D0 = columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform1, true, true);
      Object object0 = new Object();
      columnArrangement0.equals(object0);
      emptyBlock0.setPadding(rectangleInsets0);
      boolean boolean0 = columnArrangement0.equals(emptyBlock0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 0.0, 0.0);
      ColumnArrangement columnArrangement1 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 0.0, 0.0);
      boolean boolean0 = columnArrangement0.equals(columnArrangement1);
      assertTrue(boolean0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      byte[] byteArray0 = new byte[0];
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-194), (-194), byteArray0, byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, Double.NaN);
      columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      columnArrangement0.equals(verticalAlignment0);
      columnArrangement0.clear();
      BlockContainer blockContainer1 = new BlockContainer(columnArrangement0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }
}
