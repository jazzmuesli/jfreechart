/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:43:46 GMT 2019
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.font.FontRenderContext;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.IndexColorModel;
import java.awt.image.TileObserver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.CenterArrangement;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.ui.Size2D;
import org.jfree.data.Range;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CenterArrangement_ESTest extends CenterArrangement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Range range0 = new Range(0.0, 0.0);
      RectangleInsets rectangleInsets0 = blockContainer0.getPadding();
      blockContainer0.setPadding(rectangleInsets0);
      ColorBlock colorBlock0 = new ColorBlock(((SunGraphics2D) graphics2D0).backgroundColor, 2784.1023, 1);
      blockContainer0.add((Block) colorBlock0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      Size2D size2D0 = centerArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      assertEquals((-1392.05115), size2D0.width, 0.01);
      
      RectangleConstraint rectangleConstraint2 = RectangleConstraint.NONE;
      Size2D size2D1 = centerArrangement0.arrangeFR(blockContainer0, graphics2D0, rectangleConstraint0);
      assertEquals(1.0, size2D1.height, 0.01);
      
      centerArrangement0.arrangeFR(blockContainer0, graphics2D0, rectangleConstraint1);
      centerArrangement0.arrangeNF(blockContainer0, graphics2D0, rectangleConstraint2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Range range0 = new Range(0.0, 0.0);
      RectangleInsets rectangleInsets0 = blockContainer0.getPadding();
      blockContainer0.setPadding(rectangleInsets0);
      ColorBlock colorBlock0 = new ColorBlock(((SunGraphics2D) graphics2D0).backgroundColor, 2784.1023, 1);
      blockContainer0.add((Block) colorBlock0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      rectangleConstraint0.toUnconstrainedHeight();
      centerArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      RectangleConstraint rectangleConstraint1 = RectangleConstraint.NONE;
      centerArrangement0.arrangeFR(blockContainer0, graphics2D0, rectangleConstraint0);
      centerArrangement0.arrangeFF(blockContainer0, graphics2D0, rectangleConstraint1);
      centerArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Range range0 = new Range(0.0, 0.0);
      RectangleInsets rectangleInsets0 = blockContainer0.getPadding();
      blockContainer0.setPadding(rectangleInsets0);
      ColorBlock colorBlock0 = new ColorBlock(((SunGraphics2D) graphics2D0).backgroundColor, 2784.1023, 1);
      EmptyBlock emptyBlock0 = new EmptyBlock(0, 0);
      blockContainer0.add((Block) colorBlock0, (Object) emptyBlock0);
      blockContainer0.add((Block) colorBlock0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      rectangleConstraint0.toUnconstrainedHeight();
      centerArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      RectangleConstraint rectangleConstraint1 = RectangleConstraint.NONE;
      centerArrangement0.arrangeFR(blockContainer0, graphics2D0, rectangleConstraint0);
      centerArrangement0.arrangeNN(blockContainer0, graphics2D0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      BlockContainer blockContainer1 = new BlockContainer();
      blockContainer0.add((Block) blockContainer1, (Object) null);
      Range range0 = new Range(0.0, 2.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      blockContainer0.setBorder(0.3323321103763035, 0.0, (-1.0), (-1.0));
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.RANGE;
      BlockContainer blockContainer2 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      blockContainer1.setPadding(0.3323321103763035, (-1199.37448809345), 0.0, 0.0);
      RectangleConstraint rectangleConstraint1 = blockContainer2.toContentConstraint(rectangleConstraint0);
      centerArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      Range.shift(range0, 0.0, false);
      RectangleConstraint rectangleConstraint2 = new RectangleConstraint((-1.0), range0, lengthConstraintType0, 0.0, range0, lengthConstraintType1);
      rectangleConstraint2.toRangeWidth(range0);
      centerArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint2);
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeFN(blockContainer1, (Graphics2D) null, rectangleConstraint2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Range range0 = new Range(0.0, 0.0);
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      blockContainer0.setPadding(rectangleInsets0);
      ColorBlock colorBlock0 = new ColorBlock(((SunGraphics2D) graphics2D0).backgroundColor, 2784.1023, 0.0);
      blockContainer0.add((Block) colorBlock0);
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      centerArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      RectangleConstraint rectangleConstraint1 = RectangleConstraint.NONE;
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeRN(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.CenterArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      EmptyBlock emptyBlock0 = new EmptyBlock((-14.776759755427399), (-14.776759755427399));
      blockContainer0.add((Block) emptyBlock0, (Object) centerArrangement0);
      int int0 = (-1732);
      Range range0 = new Range((-1732), (-1732));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, (-1732));
      centerArrangement0.arrangeRN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      BlockContainer blockContainer1 = new BlockContainer();
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeNF(blockContainer1, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Range range0 = new Range(0.0, 0.0);
      RectangleInsets rectangleInsets0 = blockContainer0.getPadding();
      blockContainer0.setPadding(rectangleInsets0);
      ColorBlock colorBlock0 = new ColorBlock(((SunGraphics2D) graphics2D0).backgroundColor, 2784.1023, 0.0);
      blockContainer0.add((Block) colorBlock0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      centerArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      RectangleConstraint rectangleConstraint1 = RectangleConstraint.NONE;
      assertEquals(LengthConstraintType.NONE, rectangleConstraint1.getWidthConstraintType());
      
      centerArrangement0.arrangeRN(blockContainer0, graphics2D0, rectangleConstraint0);
      centerArrangement0.arrangeRR(blockContainer0, graphics2D0, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Range range0 = new Range(0.0, 0.0);
      RectangleInsets rectangleInsets0 = blockContainer0.getPadding();
      blockContainer0.setPadding(rectangleInsets0);
      ColorBlock colorBlock0 = new ColorBlock(((SunGraphics2D) graphics2D0).backgroundColor, 2784.1023, 0.0);
      blockContainer0.add((Block) colorBlock0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      centerArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      RectangleConstraint rectangleConstraint1 = RectangleConstraint.NONE;
      centerArrangement0.arrangeRN(blockContainer0, graphics2D0, rectangleConstraint0);
      centerArrangement0.arrangeFF(blockContainer0, graphics2D0, rectangleConstraint1);
      centerArrangement0.arrangeFF(blockContainer0, graphics2D0, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      Graphics2D graphics2D0 = null;
      BlockContainer blockContainer1 = new BlockContainer();
      blockContainer0.add((Block) blockContainer1, (Object) null);
      Range range0 = new Range(0.0, 13.953651897676);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      blockContainer0.setBorder(0.0, 0.0, (-1.0), (-1.0));
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.RANGE;
      BlockContainer blockContainer2 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      blockContainer1.setPadding(0.0, (-1.0), 0.0, 0.0);
      RectangleConstraint rectangleConstraint1 = blockContainer2.toContentConstraint(rectangleConstraint0);
      centerArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      Range.shift(range0, 0.0, true);
      RectangleConstraint rectangleConstraint2 = new RectangleConstraint((-1.0), range0, lengthConstraintType0, 0.0, range0, lengthConstraintType1);
      rectangleConstraint2.toRangeWidth(range0);
      centerArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint2);
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeFN(blockContainer1, (Graphics2D) null, rectangleConstraint2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      BlockContainer blockContainer1 = new BlockContainer();
      blockContainer0.add((Block) blockContainer1, (Object) null);
      Range range0 = new Range(0.0, 2.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      blockContainer0.setBorder(0.0, 0.0, (-1.0), (-1.0));
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.RANGE;
      BlockContainer blockContainer2 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      blockContainer0.setWidth(620.22);
      blockContainer1.setPadding(0.0, (-1199.37448809345), 0.0, 0.0);
      RectangleConstraint rectangleConstraint1 = blockContainer2.toContentConstraint(rectangleConstraint0);
      centerArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      Range.shift(range0, 0.0, true);
      RectangleConstraint rectangleConstraint2 = new RectangleConstraint((-1.0), range0, lengthConstraintType0, 0.0, range0, lengthConstraintType1);
      rectangleConstraint2.toRangeWidth(range0);
      centerArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      centerArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint2);
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeFN(blockContainer1, (Graphics2D) null, rectangleConstraint2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Range range0 = new Range(0.0, 0.0);
      RectangleInsets rectangleInsets0 = blockContainer0.getPadding();
      blockContainer0.setPadding(rectangleInsets0);
      ColorBlock colorBlock0 = new ColorBlock(((SunGraphics2D) graphics2D0).backgroundColor, 2784.1023, 0.0);
      blockContainer0.add((Block) colorBlock0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      centerArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      Range range1 = Range.shift(range0, (double) 0);
      RectangleConstraint rectangleConstraint1 = RectangleConstraint.NONE;
      centerArrangement0.arrangeRN(blockContainer0, graphics2D0, rectangleConstraint0);
      RectangleConstraint rectangleConstraint2 = new RectangleConstraint(range1, range1);
      centerArrangement0.arrangeRF(blockContainer0, graphics2D0, rectangleConstraint2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Range range0 = new Range(0.0, 0.0);
      RectangleInsets rectangleInsets0 = blockContainer0.getPadding();
      Rectangle2D rectangle2D0 = blockContainer0.getBounds();
      Rectangle2D rectangle2D1 = rectangleInsets0.createInsetRectangle(rectangle2D0, true, true);
      rectangleInsets0.createInsetRectangle(rectangle2D1);
      blockContainer0.setPadding(rectangleInsets0);
      ColorBlock colorBlock0 = new ColorBlock(((SunGraphics2D) graphics2D0).backgroundColor, 2784.1023, 0.0);
      blockContainer0.add((Block) colorBlock0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      centerArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      RectangleConstraint rectangleConstraint1 = RectangleConstraint.NONE;
      centerArrangement0.arrangeRN(blockContainer0, graphics2D0, rectangleConstraint0);
      centerArrangement0.arrangeFN(blockContainer0, graphics2D0, rectangleConstraint1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, 0.0);
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeRR((BlockContainer) null, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.CenterArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Range range0 = new Range(0.0, 0.0);
      RectangleInsets rectangleInsets0 = blockContainer0.getPadding();
      blockContainer0.setPadding(rectangleInsets0);
      ColorBlock colorBlock0 = new ColorBlock(((SunGraphics2D) graphics2D0).backgroundColor, 2784.1023, 0.0);
      blockContainer0.add((Block) colorBlock0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      centerArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      RectangleConstraint rectangleConstraint1 = RectangleConstraint.NONE;
      Graphics2D graphics2D1 = bufferedImage0.createGraphics();
      centerArrangement0.arrangeNF(blockContainer0, graphics2D1, rectangleConstraint1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Range range0 = new Range(0.0, 0.0);
      RectangleInsets rectangleInsets0 = blockContainer0.getPadding();
      blockContainer0.setPadding(rectangleInsets0);
      ColorBlock colorBlock0 = new ColorBlock(((SunGraphics2D) graphics2D0).backgroundColor, 2784.1023, 0.0);
      blockContainer0.add((Block) colorBlock0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      centerArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      RectangleConstraint rectangleConstraint1 = RectangleConstraint.NONE;
      centerArrangement0.arrangeNN(blockContainer0, graphics2D0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      BlockContainer blockContainer1 = new BlockContainer();
      blockContainer0.add((Block) blockContainer1, (Object) null);
      Range range0 = new Range(0.0, 2.0);
      BlockContainer blockContainer2 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      RectangleConstraint rectangleConstraint1 = blockContainer2.toContentConstraint(rectangleConstraint0);
      centerArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      Range.shift(range0, 0.0, true);
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.CenterArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      BlockContainer blockContainer1 = new BlockContainer();
      blockContainer0.add((Block) blockContainer1, (Object) null);
      Range range0 = new Range(0.0, 2.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.RANGE;
      BlockContainer blockContainer2 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      RectangleConstraint rectangleConstraint1 = blockContainer2.toContentConstraint(rectangleConstraint0);
      Size2D size2D0 = centerArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      assertEquals(0.0, size2D0.width, 0.01);
      assertTrue(blockContainer2.equals((Object)blockContainer1));
      
      Range.shift(range0, 0.0, true);
      RectangleConstraint rectangleConstraint2 = new RectangleConstraint((-1.0), range0, lengthConstraintType0, 0.0, range0, lengthConstraintType1);
      Size2D size2D1 = centerArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint2);
      assertEquals((-0.5), size2D1.width, 0.01);
      assertEquals(0.0, size2D1.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      Graphics2D graphics2D0 = null;
      double double0 = (-1.0);
      double double1 = 0.0;
      BlockContainer blockContainer1 = new BlockContainer(centerArrangement0);
      blockContainer0.add((Block) blockContainer1, (Object) null);
      Range range0 = new Range(0.0, 2.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.RANGE;
      boolean boolean0 = true;
      BlockContainer blockContainer2 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Range range0 = new Range(0.0, 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1, range0);
      // Undeclared exception!
      try { 
        centerArrangement0.arrange((BlockContainer) null, graphics2D0, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.CenterArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      BlockContainer blockContainer1 = null;
      BufferedImage bufferedImage0 = new BufferedImage(2, 1760, 2);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeRF((BlockContainer) null, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.CenterArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      Graphics2D graphics2D0 = null;
      double double0 = (-1.0);
      double double1 = 0.0;
      blockContainer0.add((Block) blockContainer0, (Object) null);
      Range range0 = new Range(0.0, 2.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.NONE;
      boolean boolean0 = true;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = null;
      Graphics2D graphics2D0 = null;
      double double0 = 0.0;
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0);
      Range range2 = Range.scale(range1, 0.0);
      Range range3 = Range.combine(range0, range2);
      Range range4 = Range.shift(range3, 0.0);
      Range.combineIgnoringNaN(range0, range1);
      Range range5 = Range.expandToInclude(range2, 0.0);
      Range.combineIgnoringNaN(range4, range3);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range5, range2);
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeFN((BlockContainer) null, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.CenterArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Range range0 = new Range(0.0, 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0);
      // Undeclared exception!
      try { 
        centerArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      blockContainer0.setArrangement(centerArrangement0);
      Range range0 = new Range(0.0, 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeRN(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      // Undeclared exception!
      try { 
        centerArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      centerArrangement0.equals(centerArrangement0);
      BlockContainer blockContainer0 = new BlockContainer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-33);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(16, 3637, byteArray0, 2426, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2426
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Range range0 = new Range(0.0, 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      // Undeclared exception!
      try { 
        centerArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0);
      Range range2 = Range.combine(range0, range1);
      Range range3 = Range.shift(range2, 0.0);
      Range.expandToInclude(range0, 0.0);
      Range.combineIgnoringNaN(range3, range2);
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeNN((BlockContainer) null, (Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.CenterArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      bufferedImage0.createGraphics();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-722.8054985382429), (-326.0645));
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeRR(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-2355.02), (-1757.0));
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeFF((BlockContainer) null, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.CenterArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0);
      Range range2 = Range.scale(range1, 0.0);
      Range range3 = Range.combine(range0, range2);
      Range.shift(range3, 0.0);
      Range range4 = Range.expandToInclude(range2, 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range4, range2);
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeNF((BlockContainer) null, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.CenterArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, 0.0);
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      CenterArrangement centerArrangement1 = new CenterArrangement();
      centerArrangement0.equals(centerArrangement1);
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.setArrangement(centerArrangement1);
      centerArrangement0.add(blockContainer0, centerArrangement1);
      Graphics2D graphics2D0 = null;
      double double0 = 2288.5726266;
      Range range0 = new Range(2288.5726266, 2288.5726266);
      Range range1 = Range.scale(range0, 2288.5726266);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range1, range0);
      blockContainer0.toContentConstraint(rectangleConstraint0);
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      centerArrangement0.add((Block) null, (Object) null);
      CenterArrangement centerArrangement1 = new CenterArrangement();
      centerArrangement0.equals(centerArrangement1);
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement1);
      BlockContainer blockContainer1 = new BlockContainer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 442, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Range range0 = new Range((-1360.8684412128766), 442);
      Range range1 = Range.scale(range0, 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range1, 442);
      // Undeclared exception!
      try { 
        centerArrangement1.arrangeFF(blockContainer1, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      Range range0 = Range.expandToInclude((Range) null, (-1442.75));
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      Range range2 = Range.shift(range1, 107.29, false);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(107.29, range2);
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = null;
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = null;
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeRN((BlockContainer) null, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.CenterArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      Graphics2D graphics2D0 = null;
      Range range0 = new Range((-2809.5004), (-2809.5004));
      Range range1 = Range.shift(range0, 0.0, false);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-2809.5004), range1);
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      centerArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      boolean boolean0 = false;
      int int0 = 2667;
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(2667);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      Graphics2D graphics2D0 = null;
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      Range range2 = Range.expand(range1, 0.0, 0.0);
      Range range3 = Range.shift(range0, (-1109.764503882), false);
      Range range4 = Range.expandToInclude(range3, (-1109.764503882));
      Range.combineIgnoringNaN(range4, range1);
      Range range5 = Range.combine(range2, range4);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range5, lengthConstraintType0, 0.0, range5, lengthConstraintType0);
      FlowArrangement flowArrangement0 = new FlowArrangement();
      Size2D size2D0 = flowArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      rectangleConstraint0.calculateConstrainedSize(size2D0);
      // Undeclared exception!
      try { 
        centerArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.CenterArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      SystemColor systemColor0 = SystemColor.windowBorder;
      ColorBlock colorBlock0 = new ColorBlock(systemColor0, (-2465.0239), (-2465.0239));
      CenterArrangement centerArrangement1 = new CenterArrangement();
      centerArrangement0.add(colorBlock0, centerArrangement1);
      assertTrue(centerArrangement1.equals((Object)centerArrangement0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      Graphics2D graphics2D0 = null;
      double double0 = (-1.0);
      double double1 = 0.0;
      BlockContainer blockContainer1 = new BlockContainer(centerArrangement0);
      blockContainer0.add((Block) blockContainer1, (Object) null);
      Range range0 = new Range(0.0, 2.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.RANGE;
      boolean boolean0 = true;
      BlockContainer blockContainer2 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      RectangleConstraint rectangleConstraint1 = blockContainer2.toContentConstraint(rectangleConstraint0);
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      BlockContainer blockContainer1 = new BlockContainer();
      blockContainer0.add((Block) blockContainer1, (Object) null);
      Range range0 = new Range(0.0, 2.0);
      BlockContainer blockContainer2 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      rectangleConstraint0.toString();
      RectangleConstraint rectangleConstraint1 = blockContainer2.toContentConstraint(rectangleConstraint0);
      centerArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      Range range1 = Range.shift(range0, 0.0, true);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      Graphics2D graphics2D0 = null;
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      Range range2 = Range.expand(range1, 0.0, 0.0);
      Range range3 = Range.shift(range0, (-1109.764503882), false);
      Range range4 = Range.expandToInclude(range3, (-1109.764503882));
      Range.combineIgnoringNaN(range4, range1);
      Range range5 = Range.combine(range2, range4);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range5, lengthConstraintType0, 0.0, range5, lengthConstraintType0);
      // Undeclared exception!
      try { 
        centerArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.CenterArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Range range0 = new Range(0.0, 0.0);
      RectangleInsets rectangleInsets0 = blockContainer0.getMargin();
      blockContainer0.setPadding(rectangleInsets0);
      ColorBlock colorBlock0 = new ColorBlock(((SunGraphics2D) graphics2D0).backgroundColor, 0, 0.0);
      blockContainer0.add((Block) colorBlock0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      centerArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      RectangleConstraint rectangleConstraint1 = RectangleConstraint.NONE;
      centerArrangement0.arrangeRN(blockContainer0, graphics2D0, rectangleConstraint0);
      Size2D size2D0 = centerArrangement0.arrangeFF(blockContainer0, graphics2D0, rectangleConstraint0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      
      centerArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint1);
      RectangleConstraint rectangleConstraint2 = new RectangleConstraint(0, (-1001.378266566));
      Size2D size2D1 = centerArrangement0.arrangeNF(blockContainer0, graphics2D0, rectangleConstraint2);
      assertEquals(0.0, size2D1.height, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      BlockContainer blockContainer1 = new BlockContainer();
      blockContainer0.add((Block) blockContainer1, (Object) null);
      Range range0 = new Range(0.0, 2.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      blockContainer0.setBorder(0.0, 0.0, (-1.0), (-1.0));
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.RANGE;
      BlockContainer blockContainer2 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      blockContainer1.setPadding(0.0, (-1199.37448809345), 0.0, 0.0);
      RectangleConstraint rectangleConstraint1 = blockContainer2.toContentConstraint(rectangleConstraint0);
      centerArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      Range.shift(range0, 0.0, true);
      RectangleConstraint rectangleConstraint2 = new RectangleConstraint((-1.0), range0, lengthConstraintType0, 0.0, range0, lengthConstraintType1);
      rectangleConstraint2.toRangeWidth(range0);
      centerArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint2);
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeFN(blockContainer1, (Graphics2D) null, rectangleConstraint2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      CenterArrangement centerArrangement1 = new CenterArrangement();
      centerArrangement0.equals(centerArrangement1);
      BlockContainer blockContainer0 = new BlockContainer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-79);
      byteArray1[2] = (byte)0;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((byte)0, (byte)0, byteArray0, byteArray1, byteArray1, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Range range0 = new Range(0.0, 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1, range0);
      // Undeclared exception!
      try { 
        centerArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.CenterArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Range range0 = new Range(0.0, 9.764523146087338);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0);
      // Undeclared exception!
      try { 
        centerArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      LabelBlock labelBlock0 = new LabelBlock("");
      boolean boolean0 = centerArrangement0.equals(labelBlock0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 0.0);
      blockContainer0.add((Block) emptyBlock0, (Object) centerArrangement0);
      int int0 = (-1732);
      Range range0 = new Range((-1732), (-1732));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, (-1732));
      centerArrangement0.arrangeRN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      BlockContainer blockContainer1 = new BlockContainer();
      // Undeclared exception!
      try { 
        centerArrangement0.arrangeNF(blockContainer1, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
