/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:56:47 GMT 2019
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.IndexColorModel;
import java.awt.image.LookupOp;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import javax.swing.JApplet;
import javax.swing.JLayeredPane;
import javax.swing.JTree;
import javax.swing.plaf.multi.MultiTreeUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BlockParams;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.block.CenterArrangement;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.block.GridArrangement;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.chart.ui.LengthAdjustmentType;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.ui.Size2D;
import org.jfree.chart.ui.VerticalAlignment;
import org.jfree.data.Range;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BlockContainer_ESTest extends BlockContainer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 1.516089864302753, 1.516089864302753);
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = new Size2D();
      BlockContainer blockContainer1 = new BlockContainer(columnArrangement0);
      BlockContainer blockContainer2 = new BlockContainer();
      blockContainer0.equals(blockContainer2);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      blockContainer0.equals(integer0);
      blockContainer1.equals(columnArrangement0);
      blockContainer1.setArrangement(columnArrangement0);
      blockContainer1.clear();
      blockContainer1.equals("5*wWE");
      BlockContainer blockContainer3 = (BlockContainer)blockContainer1.clone();
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      blockContainer3.add((Block) blockContainer1, (Object) integer1);
      blockContainer0.equals(blockContainer3);
      BlockContainer blockContainer4 = (BlockContainer)blockContainer0.clone();
      blockContainer4.setPadding((-766.6663313143032), 1700.6933, 0.0, 0.0);
      blockContainer0.equals("org.jfree.chart.ui.HorizontalAlignment");
      blockContainer1.isEmpty();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-3373.0), range0, lengthConstraintType0, 0.0, range0, lengthConstraintType0);
      // Undeclared exception!
      try { 
        blockContainer3.arrange(graphics2D0, rectangleConstraint0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 1.516089864302753, 1.516089864302753);
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = new Size2D();
      BlockContainer blockContainer1 = new BlockContainer(columnArrangement0);
      BlockContainer blockContainer2 = new BlockContainer();
      blockContainer0.equals(blockContainer2);
      blockContainer1.equals(columnArrangement0);
      blockContainer1.setArrangement(columnArrangement0);
      blockContainer1.clear();
      blockContainer1.equals("5*wWE");
      BlockContainer blockContainer3 = (BlockContainer)blockContainer1.clone();
      LabelBlock labelBlock0 = new LabelBlock("qXB<V<SN69'");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      blockContainer3.add((Block) labelBlock0, (Object) byteArrayInputStream0);
      blockContainer0.equals(blockContainer3);
      BlockContainer blockContainer4 = (BlockContainer)blockContainer0.clone();
      blockContainer4.setPadding((-766.6663313143032), 1700.6933, 0.0, 0.0);
      blockContainer0.equals("org.jfree.chart.ui.HorizontalAlignment");
      blockContainer1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      blockContainer0.setHeight((-3195.5147384639313));
      blockContainer0.setMargin((-3195.5147384639313), 0.0, (-3195.5147384639313), (-3195.5147384639313));
      Object object0 = blockContainer0.clone();
      blockContainer0.equals(columnArrangement0);
      System.setCurrentTimeMillis(2027L);
      blockContainer0.equals(blockContainer0);
      Object[] objectArray0 = new Object[8];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) columnArrangement0;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) blockContainer0;
      Object object2 = blockContainer0.clone();
      objectArray0[6] = object2;
      objectArray0[7] = object0;
      blockContainer0.clone();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FlowArrangement flowArrangement0 = new FlowArrangement();
      BlockContainer blockContainer0 = new BlockContainer(flowArrangement0);
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      flowArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      Rectangle2D rectangle2D0 = rectangleInsets0.createAdjustedRectangle(rectangle0, lengthAdjustmentType0, lengthAdjustmentType0);
      Rectangle2D rectangle2D1 = blockContainer0.trimPadding(rectangle2D0);
      blockContainer0.equals(flowArrangement0);
      BlockContainer blockContainer1 = (BlockContainer)blockContainer0.clone();
      assertTrue(blockContainer1.equals((Object)blockContainer0));
      
      blockContainer1.setBorder(1.0, 0, 0.0, 1.0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      rectangle0.add(1505.0, (double) 0);
      Object object0 = new Object();
      blockContainer0.draw(graphics2D1, (Rectangle2D) rectangle0, object0);
      BlockContainer blockContainer2 = new BlockContainer();
      rectangleInsets0.createAdjustedRectangle(rectangle0, lengthAdjustmentType0, lengthAdjustmentType0);
      rectangle0.setFrameFromCenter((-400.043), (-1280.6249577), 0.0, Double.POSITIVE_INFINITY);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      blockContainer2.draw(graphics2D2, rectangle2D1);
      blockContainer0.equals(blockContainer2);
      blockContainer2.equals(blockContainer1);
      blockContainer2.getArrangement();
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      blockContainer0.arrange(graphics2D3, rectangleConstraint0);
      boolean boolean0 = blockContainer1.isEmpty();
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertFalse(blockContainer1.equals((Object)blockContainer0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.getArrangement();
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 0.0);
      blockContainer0.clear();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle rectangle0 = new Rectangle(0, 0);
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      Color color0 = Color.white;
      BlockBorder blockBorder0 = new BlockBorder((-2886.9081245), 375.51, (-2886.9081245), 0, color0);
      blockContainer0.setFrame(blockBorder0);
      rectangle0.setFrame(rectangle2D0);
      emptyBlock0.draw(graphics2D0, (Rectangle2D) rectangle0);
      blockContainer0.equals(emptyBlock0);
      blockContainer0.getArrangement();
      blockContainer0.add((Block) emptyBlock0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        blockContainer0.arrange(graphics2D1, (RectangleConstraint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'c' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      Arrangement arrangement0 = blockContainer0.getArrangement();
      RectangleInsets rectangleInsets0 = blockContainer0.getPadding();
      blockContainer0.setPadding(rectangleInsets0);
      List list0 = blockContainer0.getBlocks();
      blockContainer0.getArrangement();
      BlockContainer blockContainer1 = new BlockContainer(arrangement0);
      blockContainer0.add((Block) blockContainer1);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      blockContainer1.draw(graphics2D0, rectangle2D0);
      blockContainer0.setArrangement(arrangement0);
      blockContainer0.isEmpty();
      blockContainer1.clear();
      blockContainer1.equals(list0);
      blockContainer1.clone();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      BlockParams blockParams0 = new BlockParams();
      blockContainer1.draw(graphics2D1, rectangle2D0, (Object) blockParams0);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      blockContainer1.draw(graphics2D2, rectangle2D0);
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      blockContainer1.draw(graphics2D3, rectangle2D0);
      Graphics2D graphics2D4 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      blockContainer1.draw(graphics2D4, rectangle2D0);
      blockContainer0.getBlocks();
      blockContainer1.add((Block) blockContainer0);
      blockContainer1.clear();
      Graphics2D graphics2D5 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.setPadding(0.0, 899.383, 0.0, 0.0);
      blockContainer0.setMargin(0.0, 767.0, 0.0, 0.0);
      blockContainer0.isEmpty();
      blockContainer0.getBlocks();
      BlockParams blockParams0 = new BlockParams();
      blockParams0.setTranslateY(182.810403111378);
      blockContainer0.equals(blockParams0);
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer1 = new BlockContainer(centerArrangement0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        blockContainer1.arrange(graphics2D0, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.CenterArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1699.88324, 1699.88324);
      blockContainer0.arrange((Graphics2D) null, rectangleConstraint0);
      SystemColor systemColor0 = SystemColor.windowText;
      ColorBlock colorBlock0 = new ColorBlock(systemColor0, 0.0, 1699.88324);
      String string0 = "BOTTOM_LEFT";
      LabelBlock labelBlock0 = new LabelBlock("BOTTOM_LEFT");
      labelBlock0.setWidth(0.0);
      blockContainer0.add((Block) colorBlock0, (Object) labelBlock0);
      Font font0 = new Font("BOTTOM_LEFT", 1297, (-265));
      Font.getFont("BOTTOM_LEFT", font0);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, (-1.7976931348623157E308), 961.26955);
      blockContainer0.setArrangement(columnArrangement0);
      assertTrue(blockContainer0.isEmpty());
      
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 0.0);
      blockContainer0.add((Block) emptyBlock0, (Object) emptyBlock0);
      blockContainer0.clone();
      boolean boolean0 = blockContainer0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      rectangleInsets0.toString();
      blockContainer0.setPadding(rectangleInsets0);
      blockContainer0.getArrangement();
      BlockContainer blockContainer1 = new BlockContainer(centerArrangement0);
      BlockContainer blockContainer2 = new BlockContainer();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 0.0F, (-2995.5F), 1.0F);
      Rectangle rectangle0 = new Rectangle(3, 3);
      Rectangle2D rectangle2D0 = rectangle0.getBounds2D();
      Rectangle2D rectangle2D1 = rectangle2D_Float0.createUnion(rectangle2D0);
      // Undeclared exception!
      try { 
        blockContainer2.draw((Graphics2D) null, rectangle2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle rectangle0 = new Rectangle();
      blockContainer0.draw(graphics2D0, (Rectangle2D) rectangle0, (Object) graphics2D0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(3279.0382, 3279.0382, (-1408.6), 3279.0382);
      Rectangle2D rectangle2D0 = rectangle2D_Double0.createIntersection(rectangle0);
      rectangle0.setFrame(rectangle2D0);
      Point2D.Float point2D_Float0 = new Point2D.Float(0.0F, 3279);
      rectangle0.setFrameFromDiagonal((Point2D) point2D_Float0, (Point2D) point2D_Float0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      blockContainer0.draw(graphics2D1, (Rectangle2D) rectangle0, (Object) null);
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 1018.005);
      blockContainer0.add((Block) emptyBlock0, (Object) null);
      blockContainer0.getArrangement();
      blockContainer0.getBlocks();
      blockContainer0.clear();
      blockContainer0.clone();
      blockContainer0.add((Block) emptyBlock0);
      blockContainer0.add((Block) emptyBlock0);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range0 = new Range(0.0F, 0);
      Range range1 = Range.shift(range0, 1.0, true);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      Point2D point2D0 = rectangleAnchor0.getAnchorPoint(rectangle0);
      point2D_Float0.setLocation(point2D0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range1, 0.0);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      // Undeclared exception!
      try { 
        blockContainer0.arrange(graphics2D2, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(917, 917);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      blockContainer0.equals(gridArrangement0);
      Graphics2D graphics2D0 = null;
      float float0 = 2975.47F;
      float float1 = (-1.0F);
      Rectangle rectangle0 = new Rectangle((-222), (-222));
      Dimension dimension0 = new Dimension((-222), 0);
      Dimension dimension1 = new Dimension(dimension0);
      rectangle0.setSize(dimension1);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      rectangle2D_Float0.setFrameFromDiagonal(4593.0, 2610.030352869498, (double) 0, (-228.02030666427));
      // Undeclared exception!
      try { 
        blockContainer0.draw((Graphics2D) null, (Rectangle2D) rectangle0, (Object) rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.setHeight((-319.62198336813));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-632.361), (-632.361));
      blockContainer0.arrange(graphics2D0, rectangleConstraint0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      blockContainer0.arrange(graphics2D1, rectangleConstraint0);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = new Rectangle(rectangle0);
      rectangle0.y = 3213;
      Rectangle2D rectangle2D0 = blockContainer0.trimPadding(rectangle1);
      Rectangle2D rectangle2D1 = blockContainer0.trimBorder(rectangle2D0);
      blockContainer0.draw(graphics2D2, rectangle2D1);
      blockContainer0.getArrangement();
      ColorBlock colorBlock0 = null;
      try {
        colorBlock0 = new ColorBlock((Paint) null, 0.0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      Size2D size2D0 = new Size2D(1158.486041817783, 2258.2485593);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 1158.486041817783, 0.0, rectangleAnchor0);
      blockContainer0.trimPadding(rectangle2D0);
      blockContainer0.isEmpty();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      blockContainer0.draw(graphics2D0, rectangle2D0);
      blockContainer0.equals(size2D0);
      EmptyBlock emptyBlock0 = new EmptyBlock(2258.2485593, 2258.2485593);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      size2D0.width = 0.0;
      emptyBlock0.setWidth(1829.116844788);
      Rectangle2D rectangle2D1 = blockContainer0.trimBorder(rectangle2D0);
      emptyBlock0.draw(graphics2D1, rectangle2D1);
      assertTrue(blockContainer0.isEmpty());
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      rectangle2D_Float0.setFrame(rectangle2D0);
      rectangle2D_Float0.setFrame(0.0, 0.0, 1251.433, 1158.486041817783);
      blockContainer0.add((Block) emptyBlock0, (Object) rectangle2D_Float0);
      Arrangement arrangement0 = blockContainer0.getArrangement();
      blockContainer0.getArrangement();
      blockContainer0.clone();
      List list0 = blockContainer0.getBlocks();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      blockContainer0.draw(graphics2D2, rectangle2D1);
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      blockContainer0.draw(graphics2D3, rectangle2D0);
      blockContainer0.getBlocks();
      blockContainer0.setArrangement(arrangement0);
      blockContainer0.add((Block) emptyBlock0, (Object) list0);
      assertFalse(blockContainer0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer1 = new BlockContainer(borderArrangement0);
      blockContainer0.add((Block) blockContainer1);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Object object0 = blockContainer0.draw(graphics2D0, (Rectangle2D) rectangle2D_Double0, (Object) graphics2D0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      Arrangement arrangement0 = blockContainer0.getArrangement();
      blockContainer0.setArrangement(arrangement0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BlockContainer blockContainer0 = null;
      try {
        blockContainer0 = new BlockContainer((Arrangement) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'arrangement' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      // Undeclared exception!
      try { 
        blockContainer0.setArrangement((Arrangement) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'arrangement' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer1 = new BlockContainer(centerArrangement0);
      blockContainer0.equals(blockContainer1);
      blockContainer0.clone();
      blockContainer0.getBlocks();
      blockContainer1.clear();
      int int0 = 1900;
      byte[][] byteArray0 = new byte[3][6];
      byte[] byteArray1 = new byte[7];
      byte byte0 = (byte) (-115);
      byteArray1[0] = (byte) (-115);
      byteArray1[1] = (byte) (-82);
      byte byte1 = (byte) (-111);
      byteArray1[2] = (byte) (-111);
      byte byte2 = (byte)17;
      byteArray1[3] = (byte)17;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)13;
      byteArray1[6] = (byte) (-1);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)17;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)13;
      byteArray3[1] = (byte)17;
      byteArray3[2] = (byte)13;
      byteArray3[3] = (byte) (-1);
      byteArray0[2] = byteArray3;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(1900, byteArray0);
      // Undeclared exception!
      try { 
        ColorSpace.getInstance((byte) (-111));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      blockContainer0.setHeight((-3195.5147384639313));
      blockContainer0.setMargin((-3195.5147384639313), 0.0, 1927.050531942, 1927.050531942);
      blockContainer0.clone();
      Object object0 = blockContainer0.clone();
      blockContainer0.equals(columnArrangement0);
      System.setCurrentTimeMillis(2027L);
      blockContainer0.equals(object0);
      Vector<ColorBlock> vector0 = new Vector<ColorBlock>();
      int int0 = 1;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 1);
      int int1 = (-1185);
      // Undeclared exception!
      try { 
        defaultTableModel0.getValueAt((-1185), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1185
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, verticalAlignment0, (-564.6077921973), (-564.6077921973));
      BlockContainer blockContainer0 = new BlockContainer(flowArrangement0);
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      blockContainer0.arrange((Graphics2D) null, rectangleConstraint0);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      flowArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      Enumeration<InputStream> enumeration0 = vector0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      blockContainer0.equals(sequenceInputStream0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      // Undeclared exception!
      try { 
        blockContainer0.draw((Graphics2D) null, (Rectangle2D) rectangle0, (Object) enumeration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      blockContainer0.getBlocks();
      boolean boolean0 = blockContainer0.isEmpty();
      assertTrue(boolean0);
      
      blockContainer0.getArrangement();
      assertTrue(blockContainer0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FlowArrangement flowArrangement0 = new FlowArrangement();
      BlockContainer blockContainer0 = new BlockContainer(flowArrangement0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      BlockParams blockParams0 = new BlockParams();
      blockParams0.setGenerateEntities(true);
      blockContainer0.draw(graphics2D0, (Rectangle2D) rectangle2D_Double0, (Object) blockParams0);
      BlockContainer blockContainer1 = new BlockContainer();
      BlockParams blockParams1 = new BlockParams();
      blockContainer0.add((Block) blockContainer1, (Object) blockParams1);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      Range range1 = Range.combine(range0, range0);
      Range.combine((Range) null, (Range) null);
      Range.combineIgnoringNaN((Range) null, range1);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range1, lengthConstraintType0, 0.0, range1, lengthConstraintType1);
      // Undeclared exception!
      try { 
        rectangleConstraint0.toRangeWidth((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.setMargin(0.0, 1154.208, 0.0, 0.0);
      GridArrangement gridArrangement0 = new GridArrangement(377, 377);
      blockContainer0.setArrangement(gridArrangement0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(377, 0, 377);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 377
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Arrangement arrangement0 = null;
      BlockContainer blockContainer0 = new BlockContainer();
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 0.0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle rectangle0 = new Rectangle(0, 0);
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      rectangle2D0.setFrameFromDiagonal((double) 0, 135.68, 0.0, (-1310.715081));
      rectangle0.setFrame(rectangle2D0);
      emptyBlock0.draw(graphics2D0, (Rectangle2D) rectangle0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage((-1311), 213, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 0
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      assertTrue(blockContainer0.isEmpty());
      
      EmptyBlock emptyBlock0 = new EmptyBlock(1.0, (-1197.0));
      blockContainer0.add((Block) emptyBlock0, (Object) emptyBlock0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      blockContainer0.isEmpty();
      Rectangle rectangle0 = new Rectangle(2165, 3862, 3862, 3862);
      emptyBlock0.draw(graphics2D1, (Rectangle2D) rectangle0);
      blockContainer0.arrange(graphics2D0, rectangleConstraint0);
      blockContainer0.add((Block) emptyBlock0);
      blockContainer0.getBlocks();
      blockContainer0.equals(rectangleConstraint0);
      blockContainer0.getBlocks();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      ColorBlock colorBlock0 = new ColorBlock(systemColor0, 0.0, (-987.5159153209));
      blockContainer0.draw(graphics2D2, (Rectangle2D) rectangle0, (Object) colorBlock0);
      assertFalse(blockContainer0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 2795.01, 2795.01);
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      Object object0 = blockContainer0.clone();
      assertNotSame(object0, blockContainer0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 1.516089864302753, 1.516089864302753);
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = new Size2D();
      BlockContainer blockContainer1 = new BlockContainer(columnArrangement0);
      blockContainer0.equals(blockContainer0);
      blockContainer1.equals(columnArrangement0);
      blockContainer1.setArrangement(columnArrangement0);
      blockContainer1.clear();
      boolean boolean0 = blockContainer1.equals("5*wWE");
      assertFalse(boolean0);
      
      Object object0 = blockContainer1.clone();
      blockContainer0.equals(object0);
      BlockContainer blockContainer2 = (BlockContainer)blockContainer0.clone();
      assertTrue(blockContainer2.equals((Object)blockContainer1));
      
      blockContainer2.setPadding((-766.6663313143032), 1700.6933, 0.0, 0.0);
      boolean boolean1 = blockContainer1.isEmpty();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 1.516089864302753, 1.516089864302753);
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = new Size2D();
      BlockContainer blockContainer1 = new BlockContainer(columnArrangement0);
      BlockContainer blockContainer2 = new BlockContainer();
      blockContainer0.equals(blockContainer2);
      blockContainer1.equals(columnArrangement0);
      blockContainer1.setArrangement(columnArrangement0);
      blockContainer1.clear();
      blockContainer1.equals("5*wWE");
      BlockContainer blockContainer3 = (BlockContainer)blockContainer1.clone();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      blockContainer3.add((Block) blockContainer1, (Object) integer0);
      blockContainer0.equals(blockContainer3);
      BlockContainer blockContainer4 = (BlockContainer)blockContainer0.clone();
      blockContainer4.setPadding((-766.6663313143032), 1700.6933, 0.0, 0.0);
      blockContainer0.equals("org.jfree.chart.ui.HorizontalAlignment");
      boolean boolean0 = blockContainer1.isEmpty();
      assertFalse(blockContainer1.equals((Object)blockContainer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      blockContainer0.draw(graphics2D0, (Rectangle2D) rectangle2D_Double0, (Object) rectangle2D_Double0);
      Object object0 = new Object();
      blockContainer0.equals(object0);
      blockContainer0.setBorder((-2150.03520363), (-762.0), (-1730.5), (-2150.03520363));
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      Rectangle rectangle0 = new Rectangle(point0);
      blockContainer0.draw(graphics2D1, (Rectangle2D) rectangle0);
      BlockParams blockParams0 = new BlockParams();
      blockContainer0.add((Block) null, (Object) blockParams0);
      blockContainer0.add((Block) null);
      assertFalse(blockContainer0.isEmpty());
      
      blockContainer0.clear();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      blockContainer0.draw(graphics2D2, (Rectangle2D) rectangle0);
      blockContainer0.isEmpty();
      blockContainer0.isEmpty();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      boolean boolean0 = blockContainer0.equals(rectangle2D_Float0);
      assertTrue(blockContainer0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FlowArrangement flowArrangement0 = new FlowArrangement();
      BlockContainer blockContainer0 = new BlockContainer(flowArrangement0);
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      flowArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      Rectangle2D rectangle2D0 = rectangleInsets0.createAdjustedRectangle(rectangle0, lengthAdjustmentType0, lengthAdjustmentType0);
      Rectangle2D rectangle2D1 = blockContainer0.trimPadding(rectangle2D0);
      blockContainer0.equals(flowArrangement0);
      BlockContainer blockContainer1 = (BlockContainer)blockContainer0.clone();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      rectangle0.add(1505.0, (double) 0);
      Object object0 = new Object();
      blockContainer0.draw(graphics2D1, (Rectangle2D) rectangle0, object0);
      BlockContainer blockContainer2 = new BlockContainer();
      rectangleInsets0.createAdjustedRectangle(rectangle0, lengthAdjustmentType0, lengthAdjustmentType0);
      rectangle0.setFrameFromCenter((-400.043), (-1280.6249577), 0.0, Double.POSITIVE_INFINITY);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      blockContainer1.setMargin(rectangleInsets0);
      blockContainer2.draw(graphics2D2, rectangle2D1);
      blockContainer0.equals(blockContainer2);
      blockContainer2.equals(blockContainer1);
      assertFalse(blockContainer1.equals((Object)blockContainer0));
      
      blockContainer2.getArrangement();
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      blockContainer0.arrange(graphics2D3, rectangleConstraint0);
      BlockContainer blockContainer3 = (BlockContainer)blockContainer0.clone();
      assertTrue(blockContainer3.equals((Object)blockContainer0));
      assertEquals(0.0, blockContainer3.getContentYOffset(), 0.01);
  }
}
