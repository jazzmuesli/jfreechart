/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 20:59:28 GMT 2019
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.SystemColor;
import java.awt.color.ICC_Profile;
import java.awt.image.BufferedImage;
import java.awt.image.IndexColorModel;
import java.awt.image.RescaleOp;
import java.text.AttributedCharacterIterator;
import java.util.HashMap;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JToolBar;
import javax.swing.plaf.basic.BasicCheckBoxUI;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.plaf.multi.MultiListUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.ui.Size2D;
import org.jfree.data.Range;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BorderArrangement_ESTest extends BorderArrangement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      HashMap<AttributedCharacterIterator.Attribute, Integer> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Integer>();
      Font font0 = new Font(hashMap0);
      Font font1 = Font.getFont("e0E", font0);
      SystemColor systemColor0 = SystemColor.controlShadow;
      LabelBlock labelBlock0 = new LabelBlock("'%jzY/i>+y6]|uH4", font1, systemColor0);
      borderArrangement0.add(labelBlock0, systemColor0);
      borderArrangement0.clear();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      borderArrangement0.equals(integer0);
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.setBorder((-1.0), 1065.0346183, 0.0, 0.0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.0);
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      timeTableXYDataset0.getDomainBounds(false);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.FIXED;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1136.11694), (Range) null, lengthConstraintType0, 0.0, (Range) null, lengthConstraintType1);
      // Undeclared exception!
      try { 
        borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<JToolBar.Separator> vector0 = new Vector<JToolBar.Separator>();
      JList<JToolBar.Separator> jList0 = new JList<JToolBar.Separator>(vector0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      jList0.setVisibleRowCount(37);
      jList0.getTopLevelAncestor();
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getPreferredSize(jList0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator((Dimension) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BlockContainer blockContainer1 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      Range range1 = Range.expandToInclude(range0, (-636.6218));
      Range.shift(range1, 2595.955243009);
      borderArrangement0.arrangeRR(blockContainer1, range0, range0, (Graphics2D) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      borderArrangement0.add(blockContainer1, rectangleEdge0);
      borderArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range1);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      Range range2 = null;
      try {
        range2 = new Range(0.0, (-3656.8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-3656.8).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      borderArrangement0.add(blockContainer0, "&$zYG8ND+WKGQt");
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<JToolBar.Separator> vector0 = new Vector<JToolBar.Separator>();
      JList<JToolBar.Separator> jList0 = new JList<JToolBar.Separator>(vector0);
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jList0.removeFocusListener(basicComboBoxEditor_UIResource0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      jList0.setVisibleRowCount(37);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getPreferredSize(jList0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator((Dimension) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BlockContainer blockContainer1 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      Range.expandToInclude(range0, (-636.6218));
      Range range1 = Range.shift(range0, (double) 37);
      borderArrangement0.arrangeRR(blockContainer1, range0, range1, (Graphics2D) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      borderArrangement0.add(blockContainer1, rectangleEdge0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(2.0, range1);
      RectangleConstraint rectangleConstraint1 = blockContainer1.toContentConstraint(rectangleConstraint0);
      borderArrangement0.arrangeNN(blockContainer1, (Graphics2D) null);
      borderArrangement0.arrange(blockContainer1, (Graphics2D) null, rectangleConstraint1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      borderArrangement0.add(blockContainer0, "&$zYG8ND+WKGQt");
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<JToolBar.Separator> vector0 = new Vector<JToolBar.Separator>();
      JList<JToolBar.Separator> jList0 = new JList<JToolBar.Separator>(vector0);
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      jList0.removeFocusListener(basicComboBoxEditor_UIResource0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      jList0.setVisibleRowCount(37);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getPreferredSize(jList0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator((Dimension) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BlockContainer blockContainer1 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      Range.expandToInclude(range0, (-636.6218));
      Range range1 = Range.shift(range0, (double) 37);
      borderArrangement0.arrangeRR(blockContainer1, range0, range1, (Graphics2D) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      borderArrangement0.add(blockContainer1, rectangleEdge0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(2.0, range1);
      blockContainer1.toContentConstraint(rectangleConstraint0);
      borderArrangement0.arrangeNN(blockContainer1, (Graphics2D) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      borderArrangement0.add(blockContainer0, "&$zYG8ND+WKGQt");
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<JToolBar.Separator> vector0 = new Vector<JToolBar.Separator>();
      JList<JToolBar.Separator> jList0 = new JList<JToolBar.Separator>(vector0);
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      jList0.removeFocusListener(basicComboBoxEditor_UIResource0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      jList0.setVisibleRowCount(37);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getPreferredSize(jList0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator((Dimension) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BlockContainer blockContainer1 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      Range range1 = Range.expandToInclude(range0, (-636.6218));
      Range range2 = Range.shift(range0, (double) 37);
      borderArrangement0.arrangeRR(blockContainer1, range0, range2, (Graphics2D) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      borderArrangement0.add(blockContainer1, rectangleEdge0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range1, range1);
      RectangleConstraint rectangleConstraint1 = blockContainer1.toContentConstraint(rectangleConstraint0);
      borderArrangement0.arrange(blockContainer1, (Graphics2D) null, rectangleConstraint1);
      borderArrangement0.arrange(blockContainer1, (Graphics2D) null, rectangleConstraint1);
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      HashMap<AttributedCharacterIterator.Attribute, Integer> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Integer>();
      SystemColor systemColor0 = SystemColor.controlShadow;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      borderArrangement0.equals(integer0);
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.setBorder(2242.058080413601, (-1318.61), (-1318.61), 0.0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<JToolBar.Separator> vector0 = new Vector<JToolBar.Separator>();
      JList<JToolBar.Separator> jList0 = new JList<JToolBar.Separator>();
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      jList0.setVisibleRowCount(37);
      jList0.getTopLevelAncestor();
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getPreferredSize(jList0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator((Dimension) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BlockContainer blockContainer1 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      Range range1 = Range.expandToInclude(range0, (-636.6218));
      Range.shift(range1, 2595.955243009);
      borderArrangement0.arrangeRR(blockContainer1, range0, range0, (Graphics2D) null);
      blockContainer1.setBorder(37.0, 37, 2595.955243009, 2595.955243009);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      borderArrangement0.add(blockContainer1, rectangleEdge0);
      borderArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range1);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      Range range2 = new Range(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      borderArrangement0.add(blockContainer0, "&$zYG8ND+WKGQt");
      Graphics2D graphics2D0 = null;
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<JToolBar.Separator> vector0 = new Vector<JToolBar.Separator>();
      JList<JToolBar.Separator> jList0 = new JList<JToolBar.Separator>(vector0);
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      jList0.removeFocusListener(basicComboBoxEditor_UIResource0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      jList0.setVisibleRowCount(37);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.contains(jList0, 3236, 37);
      basicCheckBoxUI0.getPreferredSize(jList0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator((Dimension) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BlockContainer blockContainer1 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      Range.expandToInclude(range0, (-636.6218));
      Range range1 = Range.shift(range0, (double) 37);
      borderArrangement0.arrangeRR(blockContainer1, range0, range1, (Graphics2D) null);
      double double0 = 0.0;
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      borderArrangement0.add(blockContainer1, rectangleEdge0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, 0.0);
      // Undeclared exception!
      try { 
        borderArrangement0.arrange(blockContainer1, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<JToolBar.Separator> vector0 = new Vector<JToolBar.Separator>();
      JList<JToolBar.Separator> jList0 = new JList<JToolBar.Separator>(vector0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      jList0.setVisibleRowCount(37);
      jList0.getTopLevelAncestor();
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getPreferredSize(jList0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator((Dimension) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BlockContainer blockContainer1 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      Range range1 = Range.expandToInclude(range0, (-636.6218));
      Range.shift(range1, 2595.955243009);
      borderArrangement0.arrangeRR(blockContainer1, range0, range0, (Graphics2D) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      borderArrangement0.add(blockContainer1, rectangleEdge0);
      borderArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range1);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      Range range2 = new Range(0.0, 1306.9034738265);
      BorderArrangement borderArrangement1 = new BorderArrangement();
      borderArrangement0.equals(borderArrangement1);
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      borderArrangement0.add(blockContainer0, "&$zYG8ND+WKGQt");
      Graphics2D graphics2D0 = null;
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<JToolBar.Separator> vector0 = new Vector<JToolBar.Separator>();
      JList<JToolBar.Separator> jList0 = new JList<JToolBar.Separator>(vector0);
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      jList0.removeFocusListener(basicComboBoxEditor_UIResource0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      jList0.setVisibleRowCount(37);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getPreferredSize(jList0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator((Dimension) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BlockContainer blockContainer1 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      Range.expandToInclude(range0, (-636.6218));
      Range range1 = Range.shift(range0, (double) 37);
      borderArrangement0.arrangeRR(blockContainer1, range0, range1, (Graphics2D) null);
      double double0 = 0.0;
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      borderArrangement0.add(blockContainer1, rectangleEdge0);
      double double1 = (-3656.8);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(2.0, range1);
      RectangleConstraint rectangleConstraint1 = blockContainer1.toContentConstraint(rectangleConstraint0);
      // Undeclared exception!
      try { 
        borderArrangement0.arrange(blockContainer1, (Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      borderArrangement0.add(blockContainer0, "&$zYG8ND+WKGQt");
      Graphics2D graphics2D0 = null;
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<JToolBar.Separator> vector0 = new Vector<JToolBar.Separator>();
      JList<JToolBar.Separator> jList0 = new JList<JToolBar.Separator>(vector0);
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      jList0.removeFocusListener(basicComboBoxEditor_UIResource0);
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      blockContainer0.setPadding(rectangleInsets0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      jList0.setVisibleRowCount(37);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getPreferredSize(jList0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator((Dimension) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BlockContainer blockContainer1 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      Range.expandToInclude(range0, (-636.6218));
      Range range1 = Range.shift(range0, (double) 37);
      borderArrangement0.arrangeRR(blockContainer1, range0, range1, (Graphics2D) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      borderArrangement0.add(blockContainer1, rectangleEdge0);
      Range range2 = null;
      try {
        range2 = new Range(0.0, (-3656.8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-3656.8).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      HashMap<AttributedCharacterIterator.Attribute, Integer> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Integer>();
      SystemColor systemColor0 = SystemColor.controlShadow;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      borderArrangement0.equals(integer0);
      BlockContainer blockContainer0 = new BlockContainer();
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.0);
      Object object0 = new Object();
      borderArrangement0.add(blockContainer0, object0);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      borderArrangement0.add(blockContainer0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      HashMap<AttributedCharacterIterator.Attribute, Integer> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Integer>();
      Font font0 = new Font(hashMap0);
      Font font1 = Font.getFont("e0E", font0);
      Font.decode("e0E");
      SystemColor systemColor0 = SystemColor.controlShadow;
      LabelBlock labelBlock0 = new LabelBlock("@LP*ld)Va\"d6QkH7c(O", font1, systemColor0);
      borderArrangement0.add(labelBlock0, systemColor0);
      borderArrangement0.clear();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      borderArrangement0.equals(integer0);
      BlockContainer blockContainer0 = new BlockContainer();
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.0);
      Range range0 = Range.expandToInclude((Range) null, 1329.01);
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      Range range2 = Range.scale(range1, 0.0);
      Range range3 = Range.shift(range2, (double) 964, false);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range2, range3);
      rectangleConstraint0.toUnconstrainedHeight();
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<JToolBar.Separator> vector0 = new Vector<JToolBar.Separator>();
      JList<JToolBar.Separator> jList0 = new JList<JToolBar.Separator>(vector0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      jList0.setVisibleRowCount(37);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getPreferredSize(jList0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator((Dimension) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BlockContainer blockContainer1 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      Range range1 = Range.expandToInclude(range0, (-636.6218));
      Range range2 = Range.shift(range1, 2595.955243009);
      borderArrangement0.arrangeRR(blockContainer1, range0, range0, (Graphics2D) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      borderArrangement0.add(blockContainer1, rectangleEdge0);
      borderArrangement0.arrangeRR(blockContainer0, range1, range2, (Graphics2D) null);
      Range range3 = null;
      try {
        range3 = new Range(0.0, (-3656.8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-3656.8).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<JToolBar.Separator> vector0 = new Vector<JToolBar.Separator>();
      JList<JToolBar.Separator> jList0 = new JList<JToolBar.Separator>(vector0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      jList0.setVisibleRowCount(37);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getPreferredSize(jList0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator((Dimension) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BlockContainer blockContainer1 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      Range range1 = Range.expandToInclude(range0, (-636.6218));
      Range.shift(range1, 2595.955243009);
      borderArrangement0.arrangeRR(blockContainer1, range0, range0, (Graphics2D) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      borderArrangement0.add(blockContainer1, rectangleEdge0);
      borderArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      Range range2 = null;
      try {
        range2 = new Range(0.0, (-3656.8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-3656.8).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      Graphics2D graphics2D0 = null;
      double double0 = 0.0;
      borderArrangement0.add(blockContainer0, blockContainer0);
      RectangleInsets rectangleInsets0 = new RectangleInsets(0.0, (-1.0), 0.0, 4657.58623024633);
      blockContainer0.setPadding(rectangleInsets0);
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFR(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      borderArrangement0.add(blockContainer0, "&$zYG8ND+WKGQt");
      Graphics2D graphics2D0 = null;
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<JToolBar.Separator> vector0 = new Vector<JToolBar.Separator>();
      JList<JToolBar.Separator> jList0 = new JList<JToolBar.Separator>(vector0);
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      jList0.removeFocusListener(basicComboBoxEditor_UIResource0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      jList0.setVisibleRowCount(37);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getPreferredSize(jList0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator((Dimension) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BlockContainer blockContainer1 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      Range.expandToInclude(range0, (-636.6218));
      Range range1 = Range.shift(range0, (double) 37);
      borderArrangement0.arrangeRR(blockContainer1, range0, range1, (Graphics2D) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      borderArrangement0.add(blockContainer1, rectangleEdge0);
      Range range2 = null;
      try {
        range2 = new Range(0.0, (-3656.8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-3656.8).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.setPadding(2662.6866, 2662.6866, 4386.0, 2683.745901742);
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<JToolBar.Separator> vector0 = new Vector<JToolBar.Separator>();
      JList<JToolBar.Separator> jList0 = new JList<JToolBar.Separator>(vector0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      jList0.setVisibleRowCount(37);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getPreferredSize(jList0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator((Dimension) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BlockContainer blockContainer1 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      Range range1 = Range.shift(range0, (double) 37);
      borderArrangement0.arrangeRR(blockContainer1, range0, range1, (Graphics2D) null);
      Range range2 = null;
      try {
        range2 = new Range(0.0, (-3656.8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-3656.8).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<JToolBar.Separator> vector0 = new Vector<JToolBar.Separator>();
      JList<JToolBar.Separator> jList0 = new JList<JToolBar.Separator>(vector0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      jList0.setVisibleRowCount(37);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getPreferredSize(jList0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator((Dimension) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BlockContainer blockContainer1 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      Range range1 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      borderArrangement0.arrangeRR(blockContainer1, range0, range1, (Graphics2D) null);
      Range range2 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range2, range1);
      RectangleConstraint rectangleConstraint1 = blockContainer1.toContentConstraint(rectangleConstraint0);
      borderArrangement0.arrangeFR(blockContainer1, (Graphics2D) null, rectangleConstraint1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.arrange((Graphics2D) null);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, (Range) null);
      // Undeclared exception!
      try { 
        borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.arrange((Graphics2D) null);
      borderArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      System.setCurrentTimeMillis(2240L);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, 0.0);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      // Undeclared exception!
      try { 
        borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      HashMap<AttributedCharacterIterator.Attribute, Integer> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Integer>();
      Font font0 = new Font(hashMap0);
      Font font1 = Font.getFont("org.jfree.data.time.SimpleTimePeriod", font0);
      SystemColor systemColor0 = SystemColor.controlShadow;
      font1.getBaselineFor('!');
      LabelBlock labelBlock0 = new LabelBlock("'%jzY/i>+y6]|uH4", font1, systemColor0);
      borderArrangement0.add(labelBlock0, systemColor0);
      borderArrangement0.clear();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      borderArrangement0.equals(integer0);
      BlockContainer blockContainer0 = new BlockContainer();
      Graphics2D graphics2D0 = null;
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.0);
      int int0 = (-3049);
      int int1 = 481;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range0);
      borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(481, "&:kH)nDO<!", (-1743), (-3049), (-3049), (-3049), 964, 0, 0, (-3049));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1743
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<JToolBar.Separator> vector0 = new Vector<JToolBar.Separator>();
      JList<JToolBar.Separator> jList0 = new JList<JToolBar.Separator>(vector0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      jList0.setVisibleRowCount(37);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getPreferredSize(jList0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator((Dimension) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BlockContainer blockContainer1 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      Range range1 = Range.expandToInclude(range0, (-636.6218));
      Range.shift(range1, 2595.955243009);
      Range range2 = Range.shift(range0, (double) 37);
      borderArrangement0.arrangeRR(blockContainer1, range0, range2, (Graphics2D) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      borderArrangement0.add(blockContainer1, rectangleEdge0);
      borderArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      Range range3 = null;
      try {
        range3 = new Range(0.0, (-3656.8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-3656.8).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<JToolBar.Separator> vector0 = new Vector<JToolBar.Separator>();
      JList<JToolBar.Separator> jList0 = new JList<JToolBar.Separator>(vector0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      jList0.setVisibleRowCount(37);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getPreferredSize(jList0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator((Dimension) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BlockContainer blockContainer1 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      Range.expandToInclude(range0, (-636.6218));
      Range range1 = Range.shift(range0, (double) 37);
      borderArrangement0.arrangeRR(blockContainer1, range0, range1, (Graphics2D) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      borderArrangement0.add(blockContainer1, rectangleEdge0);
      Range range2 = null;
      try {
        range2 = new Range(0.0, (-3656.8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-3656.8).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      RectangleInsets rectangleInsets0 = new RectangleInsets(0.0, (-1.0), 0.0, 4657.58623024633);
      blockContainer0.setPadding(rectangleInsets0);
      borderArrangement0.clear();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1.0), (-1.0));
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-1.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, 0.0);
      RectangleInsets rectangleInsets0 = new RectangleInsets(0.0, (-1.0), 0.0, 4657.58623024633);
      blockContainer0.setPadding(rectangleInsets0);
      borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      borderArrangement0.clear();
      RectangleConstraint rectangleConstraint1 = RectangleConstraint.NONE;
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      assertEquals(0.0, size2D0.height, 0.01);
      
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1.0), (-1.0));
      RectangleInsets rectangleInsets0 = new RectangleInsets((-1.0), (-1.0), 0.0, 4657.58623024633);
      blockContainer0.setPadding(rectangleInsets0);
      borderArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      borderArrangement0.clear();
      RectangleConstraint rectangleConstraint1 = RectangleConstraint.NONE;
      borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BlockContainer blockContainer0 = new BlockContainer();
      MultiListUI multiListUI0 = new MultiListUI();
      Size2D size2D0 = borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 744.1779654);
      borderArrangement0.add(blockContainer0, (Object) null);
      size2D0.height = 866.74237774;
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 866.74237774);
      borderArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      borderArrangement0.clear();
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      borderArrangement0.add(blockContainer0, sunHints_Key0);
      borderArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      Graphics2D graphics2D0 = null;
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<JToolBar.Separator> vector0 = new Vector<JToolBar.Separator>();
      JList<JToolBar.Separator> jList0 = new JList<JToolBar.Separator>(vector0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      jList0.setVisibleRowCount(37);
      int int0 = 0;
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getPreferredSize(jList0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator((Dimension) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BlockContainer blockContainer1 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      Range range1 = Range.shift(range0, (double) 37);
      borderArrangement0.arrangeRR(blockContainer1, range0, range1, (Graphics2D) null);
      Range range2 = null;
      try {
        range2 = new Range(0.0, (-3656.8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-3656.8).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(0.0, (-1.0), (-3.119820004330565), 4657.58623024633);
      blockContainer0.setPadding(rectangleInsets0);
      borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      borderArrangement0.clear();
      RectangleConstraint rectangleConstraint1 = RectangleConstraint.NONE;
      blockContainer0.arrange((Graphics2D) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, 0.0);
      RectangleInsets rectangleInsets0 = new RectangleInsets(0.0, (-1.0), 0.0, (-445.0192572611601));
      blockContainer0.setPadding(rectangleInsets0);
      borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      borderArrangement0.clear();
      RectangleConstraint rectangleConstraint1 = RectangleConstraint.NONE;
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, 0.0);
      RectangleInsets rectangleInsets0 = new RectangleInsets(0.0, 0.0, 0.0, 0.0);
      blockContainer0.setPadding(rectangleInsets0);
      borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      borderArrangement0.clear();
      RectangleConstraint rectangleConstraint1 = RectangleConstraint.NONE;
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      HashMap<AttributedCharacterIterator.Attribute, Integer> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Integer>();
      Font font0 = new Font(hashMap0);
      Font font1 = Font.getFont("e0E", font0);
      SystemColor systemColor0 = SystemColor.controlShadow;
      LabelBlock labelBlock0 = new LabelBlock("'%jzY/i>+y6]|uH4", font1, systemColor0);
      borderArrangement0.add(labelBlock0, systemColor0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      borderArrangement0.equals(integer0);
      BlockContainer blockContainer0 = new BlockContainer();
      Graphics2D graphics2D0 = null;
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.LabelBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.equals(borderArrangement0);
      borderArrangement0.equals(borderArrangement0);
      BlockContainer blockContainer0 = new BlockContainer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.getRangeBounds(true);
      Range.combineIgnoringNaN((Range) null, (Range) null);
      float[] floatArray0 = new float[4];
      floatArray0[0] = 967.485F;
      float float0 = 4021.4F;
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getRowKey(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BorderArrangement borderArrangement1 = new BorderArrangement();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      BlockContainer blockContainer0 = new BlockContainer();
      borderArrangement1.add(blockContainer0, blockContainer0);
      borderArrangement1.equals(integer0);
      borderArrangement0.equals(borderArrangement1);
      borderArrangement0.clear();
      BlockContainer blockContainer1 = new BlockContainer();
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[7];
      String string0 = "";
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid ICC Profile Data
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      borderArrangement0.add(blockContainer0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(2558.0, 2558.0);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeRR(blockContainer0, (Range) null, (Range) null, (Graphics2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      Range range0 = new Range((-1997.7358286664426), 0.0);
      Range range1 = Range.shift(range0, 0.0);
      Range range2 = Range.combineIgnoringNaN(range1, range0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1997.7358286664426), range2, lengthConstraintType0, 3510.12102, range2, lengthConstraintType0);
      borderArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      Object object0 = new Object();
      borderArrangement0.equals(object0);
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(2816.0, 1.7976931348623157E308);
      borderArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid ICC Profile Data
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      Graphics2D graphics2D0 = null;
      double double0 = 1581.0;
      Range range0 = null;
      Range.combineIgnoringNaN((Range) null, (Range) null);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1581.0, (Range) null);
      // Undeclared exception!
      try { 
        borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      blockContainer0.setPadding(rectangleInsets0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.0);
      borderArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      borderArrangement0.clear();
      borderArrangement0.clear();
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-1.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      BufferedImage bufferedImage0 = new BufferedImage(4, 4, 4);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      borderArrangement0.arrangeNN(blockContainer0, graphics2D0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      Object object0 = new Object();
      borderArrangement0.equals(object0);
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(", ", ", ", ", ");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      timePeriodValuesCollection0.getDomainBounds(true);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getRangeBounds(true);
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeRR(blockContainer0, (Range) null, (Range) null, (Graphics2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      Graphics2D graphics2D0 = null;
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-1.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      MockDate mockDate0 = new MockDate(0L);
      Day day0 = new Day(mockDate0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(day0);
      defaultBoxAndWhiskerXYDataset0.getRangeBounds(false);
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeRR(blockContainer0, (Range) null, (Range) null, (Graphics2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, 0.0);
      borderArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BorderArrangement borderArrangement1 = new BorderArrangement();
      borderArrangement0.equals(borderArrangement1);
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      Graphics2D graphics2D0 = null;
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 1047.82);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.getRangeBounds(true);
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 1856.0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.LANGUAGE;
      borderArrangement0.equals(attributedCharacterIterator_Attribute0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.add((Block) null, "u<05RX'q{V4]");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, 0.0);
      RectangleInsets rectangleInsets0 = new RectangleInsets(0.0, (-1.0), 0.0, 4657.58623024633);
      blockContainer0.setPadding(rectangleInsets0);
      borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      borderArrangement0.clear();
      RectangleConstraint rectangleConstraint1 = RectangleConstraint.NONE;
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      borderArrangement0.clear();
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = null;
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 734.366076878831);
      borderArrangement0.clear();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      HashMap<AttributedCharacterIterator.Attribute, Integer> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Integer>();
      Font font0 = new Font(hashMap0);
      Font font1 = Font.getFont("e0E", font0);
      SystemColor systemColor0 = SystemColor.controlShadow;
      LabelBlock labelBlock0 = new LabelBlock("'%jzY/i>+y6]|uH4", font1, systemColor0);
      borderArrangement0.add(labelBlock0, systemColor0);
      borderArrangement0.clear();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      borderArrangement0.equals(integer0);
      BlockContainer blockContainer0 = new BlockContainer();
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.0);
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      timeTableXYDataset0.getDomainBounds(false);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.FIXED;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1136.11694), (Range) null, lengthConstraintType0, 0.0, (Range) null, lengthConstraintType1);
      // Undeclared exception!
      try { 
        borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.arrange((Graphics2D) null);
      borderArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, 1.0);
      // Undeclared exception!
      try { 
        borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<JToolBar.Separator> vector0 = new Vector<JToolBar.Separator>();
      JList<JToolBar.Separator> jList0 = new JList<JToolBar.Separator>(vector0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      jList0.setVisibleRowCount(37);
      jList0.getTopLevelAncestor();
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getPreferredSize(jList0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator((Dimension) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BlockContainer blockContainer1 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      Range range1 = Range.expandToInclude(range0, (-636.6218));
      Range.shift(range1, 2595.955243009);
      borderArrangement0.arrangeRR(blockContainer1, range0, range0, (Graphics2D) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      borderArrangement0.add(blockContainer1, rectangleEdge0);
      borderArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range1);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      Range range2 = null;
      try {
        range2 = new Range(0.0, (-3656.8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-3656.8).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      borderArrangement0.add(blockContainer0, "&$zYG8ND+WKGQt");
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<JToolBar.Separator> vector0 = new Vector<JToolBar.Separator>();
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      FileSystemHandling.shouldAllThrowIOExceptions();
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BlockContainer blockContainer1 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      Range range1 = Range.expandToInclude(range0, (-636.6218));
      Range range2 = Range.shift(range0, (double) 37);
      borderArrangement0.arrangeRR(blockContainer1, range0, range2, (Graphics2D) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      borderArrangement0.add(blockContainer1, rectangleEdge0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(2.0, range2);
      RectangleConstraint rectangleConstraint1 = blockContainer1.toContentConstraint(rectangleConstraint0);
      borderArrangement0.arrangeNN(blockContainer1, (Graphics2D) null);
      borderArrangement0.arrange(blockContainer1, (Graphics2D) null, rectangleConstraint1);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      borderArrangement0.add(blockContainer1, jToolBar_Separator0);
      borderArrangement0.arrange(blockContainer1, (Graphics2D) null, rectangleConstraint1);
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      Size2D size2D1 = borderArrangement0.arrangeRR(blockContainer1, range1, range1, (Graphics2D) null);
      assertNotSame(size2D1, size2D0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      borderArrangement0.add(blockContainer0, "&$zYG8ND+WKGQt");
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<JToolBar.Separator> vector0 = new Vector<JToolBar.Separator>();
      JList<JToolBar.Separator> jList0 = new JList<JToolBar.Separator>(vector0);
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jList0.removeFocusListener(basicComboBoxEditor_UIResource0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 37);
      jList0.setVisibleRowCount(37);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getPreferredSize(jList0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator((Dimension) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BlockContainer blockContainer1 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      Range.expandToInclude(range0, (-636.6218));
      Range range1 = Range.shift(range0, (double) 37);
      borderArrangement0.arrangeRR(blockContainer1, range0, range1, (Graphics2D) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      borderArrangement0.add(blockContainer1, rectangleEdge0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(2.0, range1);
      RectangleConstraint rectangleConstraint1 = blockContainer1.toContentConstraint(rectangleConstraint0);
      borderArrangement0.arrangeNN(blockContainer1, (Graphics2D) null);
      // Undeclared exception!
      try { 
        borderArrangement0.arrange(blockContainer1, (Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BorderArrangement borderArrangement1 = new BorderArrangement();
      borderArrangement0.equals(borderArrangement1);
      borderArrangement1.equals(borderArrangement0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.getRangeBounds(true);
      float[] floatArray0 = new float[4];
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      floatArray0[0] = 967.485F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 4021.4F;
      floatArray0[3] = 0.0F;
      HashMap<RenderingHints.Key, JToolBar.Separator> hashMap0 = new HashMap<RenderingHints.Key, JToolBar.Separator>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-5);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-58);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)79;
      byteArray1[5] = (byte)103;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-3237), 0, byteArray1, 2349, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      BlockContainer blockContainer1 = new BlockContainer();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      blockContainer1.add((Block) blockContainer0, (Object) rectangleEdge1);
      blockContainer0.add((Block) blockContainer1);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 8;
      floatArray0[1] = (float) 7;
      floatArray0[3] = (float) 8;
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      borderArrangement0.clear();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      HashMap<AttributedCharacterIterator.Attribute, Integer> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Integer>();
      SystemColor systemColor0 = SystemColor.controlShadow;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      borderArrangement0.equals(integer0);
      BlockContainer blockContainer0 = new BlockContainer();
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.0);
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      Range range1 = Range.combineIgnoringNaN((Range) null, range0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range1);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
  }
}
