/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:27:41 GMT 2019
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.ui.Size2D;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ColorBlock_ESTest extends ColorBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      ColorBlock colorBlock0 = new ColorBlock(paint0, 0.0, 0.0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      colorBlock0.arrange(graphics2D0, (RectangleConstraint) null);
      assertEquals(0.0, colorBlock0.getHeight(), 0.01);
      assertEquals(0.0, colorBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      ColorBlock colorBlock0 = new ColorBlock(paint0, (-41.1074484925), (-41.1074484925));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = colorBlock0.arrange(graphics2D0, (RectangleConstraint) null);
      assertEquals((-41.1074484925), size2D0.height, 0.01);
      assertEquals((-41.1074484925), size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      ColorBlock colorBlock0 = new ColorBlock(paint0, (-2020.352), 1345.2468883);
      Rectangle2D rectangle2D0 = colorBlock0.getBounds();
      // Undeclared exception!
      try { 
        colorBlock0.draw((Graphics2D) null, rectangle2D0, (Object) colorBlock0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      ColorBlock colorBlock0 = new ColorBlock(paint0, 0.0, 865.884193472);
      Rectangle2D rectangle2D0 = colorBlock0.getBounds();
      // Undeclared exception!
      try { 
        colorBlock0.draw((Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColorBlock colorBlock0 = null;
      try {
        colorBlock0 = new ColorBlock((Paint) null, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      ColorBlock colorBlock0 = new ColorBlock(paint0, (-2020.352), 1345.2468883);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = colorBlock0.getBounds();
      colorBlock0.draw(graphics2D0, rectangle2D0);
      assertEquals(1345.2468883, colorBlock0.getHeight(), 0.01);
      assertEquals((-2020.352), colorBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      ColorBlock colorBlock0 = new ColorBlock(paint0, 1.0261144960815052, 1.0261144960815052);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      ColorBlock colorBlock1 = new ColorBlock(paint1, 0.0, 0.0);
      boolean boolean0 = colorBlock1.equals(colorBlock0);
      assertFalse(boolean0);
      assertEquals(0.0, colorBlock1.getHeight(), 0.01);
      assertEquals(0.0, colorBlock1.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      ColorBlock colorBlock0 = new ColorBlock(paint0, 2164.3945773037, 2164.3945773037);
      ColorBlock colorBlock1 = (ColorBlock)colorBlock0.clone();
      boolean boolean0 = colorBlock0.equals(colorBlock1);
      assertEquals(2164.3945773037, colorBlock1.getWidth(), 0.01);
      assertTrue(boolean0);
      assertEquals(2164.3945773037, colorBlock1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      ColorBlock colorBlock0 = new ColorBlock(paint0, 2164.3945773037, 2164.3945773037);
      boolean boolean0 = colorBlock0.equals(colorBlock0);
      assertEquals(2164.3945773037, colorBlock0.getHeight(), 0.01);
      assertTrue(boolean0);
      assertEquals(2164.3945773037, colorBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      ColorBlock colorBlock0 = new ColorBlock(paint0, 1.0261144960815052, 1.0261144960815052);
      boolean boolean0 = colorBlock0.equals("E");
      assertEquals(1.0261144960815052, colorBlock0.getWidth(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0261144960815052, colorBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn("fUnE4t@]za8txv").when(paint0).toString();
      ColorBlock colorBlock0 = new ColorBlock(paint0, 2164.3945773037, 2164.3945773037);
      colorBlock0.getPaint();
      assertEquals(2164.3945773037, colorBlock0.getWidth(), 0.01);
      assertEquals(2164.3945773037, colorBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      ColorBlock colorBlock0 = new ColorBlock(paint0, 2164.3945773037, 2164.3945773037);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((double)0.0F, (double)0.0F).when(range0).getLowerBound();
      doReturn((double)0.0F, (double)0.0F, (double)0.0F, (double)0.0F).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      RectangleConstraint rectangleConstraint1 = colorBlock0.toContentConstraint(rectangleConstraint0);
      Size2D size2D0 = colorBlock0.arrange((Graphics2D) null, rectangleConstraint1);
      assertEquals(2164.3945773037, size2D0.width, 0.01);
      assertEquals(2164.3945773037, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      ColorBlock colorBlock0 = new ColorBlock(paint0, (-2020.352), 1345.2468883);
      Rectangle2D rectangle2D0 = colorBlock0.getBounds();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      colorBlock0.draw(graphics2D0, rectangle2D0, (Object) rectangle2D0);
      assertEquals(1345.2468883, colorBlock0.getHeight(), 0.01);
      assertEquals((-2020.352), colorBlock0.getWidth(), 0.01);
  }
}
