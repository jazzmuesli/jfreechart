/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:52:24 GMT 2019
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.ui.Size2D;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class RectangleConstraint_ESTest extends RectangleConstraint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-1072.948), 1608.9);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeWidth(range0);
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.toUnconstrainedWidth();
      assertEquals(LengthConstraintType.NONE, rectangleConstraint2.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(1608.9, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint2.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range((-1072.948), 1608.9);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedHeight(1608.9);
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.toUnconstrainedWidth();
      assertEquals(1608.9, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint2.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint2.getHeightConstraintType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range((-1731.314), (-1731.314));
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1731.314), range0, lengthConstraintType0, (-1.0), range0, lengthConstraintType0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      assertSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals((-1731.314), rectangleConstraint1.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range0, lengthConstraintType0, (-566.891957001119), range0, lengthConstraintType0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals((-566.891957001119), rectangleConstraint1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-146.7004463), 0.0);
      Range range1 = Range.shift(range0, (-146.7004463));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range1);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeWidth(range1);
      assertEquals((-146.7004463), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 2.0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeWidth(range0);
      assertEquals(2.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint1.getHeightConstraintType());
      assertEquals(2.0, rectangleConstraint1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range0, lengthConstraintType0, (-566.891957001119), range0, lengthConstraintType0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeWidth(range0);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint1.getHeightConstraintType());
      assertEquals((-566.891957001119), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-566.891957001119), rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range((-1072.948), 1608.9);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeWidth(range0);
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.toRangeHeight(range0);
      assertEquals(1608.9, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(1608.9, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(1608.9, rectangleConstraint1.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range((-1731.314), (-1731.314));
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1731.314), range0, lengthConstraintType0, (-1.0), range0, lengthConstraintType0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeHeight(range0);
      assertEquals((-1731.314), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint1.getHeightConstraintType());
      assertEquals((-1731.314), rectangleConstraint1.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range((-1072.948), 1608.9);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      Range range1 = Range.scale(range0, 0.0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeHeight(range1);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range((-1072.948), 1608.9);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedWidth(0.0);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint1.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range0, lengthConstraintType0, (-566.891957001119), range0, lengthConstraintType0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedWidth((-566.891957001119));
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.toUnconstrainedHeight();
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-566.891957001119), rectangleConstraint2.getHeight(), 0.01);
      assertEquals((-566.891957001119), rectangleConstraint2.getWidth(), 0.01);
      assertEquals((-566.891957001119), rectangleConstraint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 2.0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedWidth(1.0);
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.toFixedHeight(0.0);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(1.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(2.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1834.3506057568), range0, lengthConstraintType0, 0.0, range0, lengthConstraintType0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedHeight((-1834.3506057568));
      assertEquals((-1834.3506057568), rectangleConstraint1.getWidth(), 0.01);
      assertEquals((-1834.3506057568), rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-1834.3506057568), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range0);
      Range range1 = rectangleConstraint0.getWidthRange();
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range((-1393.431386113001), (-1393.431386113001));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, (-1393.431386113001));
      Range range1 = rectangleConstraint0.getWidthRange();
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertEquals((-1393.431386113001), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range(85.0, 85.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(85.0, range0, lengthConstraintType0, 0.0, range0, lengthConstraintType0);
      rectangleConstraint0.getWidthRange();
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(85.0, rectangleConstraint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 2.0);
      Range range1 = rectangleConstraint0.getWidthRange();
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(2.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range((-1072.948), 1608.9);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      rectangleConstraint0.getWidthRange();
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 2.0);
      double double0 = rectangleConstraint0.getWidth();
      assertEquals(0.0, double0, 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertEquals(2.0, rectangleConstraint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range((-1731.314), (-1731.314));
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1731.314), range0, lengthConstraintType0, (-1.0), range0, lengthConstraintType0);
      double double0 = rectangleConstraint0.getWidth();
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1731.314), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 2.0);
      rectangleConstraint0.getHeightRange();
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(2.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range((-146.7004463), 0.0);
      Range range1 = Range.shift(range0, (-146.7004463));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range1);
      rectangleConstraint0.getHeightRange();
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range0, lengthConstraintType0, (-566.891957001119), range0, lengthConstraintType0);
      rectangleConstraint0.getHeightRange();
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-566.891957001119), rectangleConstraint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, 1542.6478788989225);
      double double0 = rectangleConstraint0.getHeight();
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(1542.6478788989225, double0, 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range0, lengthConstraintType0, (-566.891957001119), range0, lengthConstraintType0);
      double double0 = rectangleConstraint0.getHeight();
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-566.891957001119), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = new Range((-1393.431386113001), (-1393.431386113001));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, (-1393.431386113001));
      Size2D size2D0 = new Size2D((-1393.431386113001), (-651.123150533));
      Size2D size2D1 = rectangleConstraint0.NONE.calculateConstrainedSize(size2D0);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertTrue(size2D1.equals((Object)size2D0));
      assertEquals((-1393.431386113001), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1.0, (Range) null, lengthConstraintType0, 1.0, (Range) null, lengthConstraintType0);
      // Undeclared exception!
      try { 
        rectangleConstraint0.toRangeWidth((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, (-361.829761974661));
      // Undeclared exception!
      try { 
        rectangleConstraint0.toRangeHeight((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range0, lengthConstraintType0, (-948.56815166771), range0, lengthConstraintType0);
      // Undeclared exception!
      try { 
        rectangleConstraint0.calculateConstrainedSize((Size2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.RectangleConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range(85.0, 85.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = null;
      try {
        rectangleConstraint0 = new RectangleConstraint(85.0, (Range) null, lengthConstraintType0, 0.0, range0, (LengthConstraintType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'heightConstraintType' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, 0.0);
      Size2D size2D0 = new Size2D();
      Size2D size2D1 = rectangleConstraint0.calculateConstrainedSize(size2D0);
      assertEquals(0.0, size2D1.width, 0.01);
      assertEquals(0.0, size2D1.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, 0.0);
      Size2D size2D0 = new Size2D();
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      Size2D size2D1 = rectangleConstraint1.calculateConstrainedSize(size2D0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint1.getHeightConstraintType());
      assertEquals(0.0, size2D1.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range((-2543.8583205905165), 2498.29361595222);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      Size2D size2D0 = new Size2D(2498.29361595222, 2498.29361595222);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedHeight(2498.29361595222);
      Size2D size2D1 = rectangleConstraint1.calculateConstrainedSize(size2D0);
      assertTrue(size2D1.equals((Object)size2D0));
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint1.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range(85.0, 85.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(85.0, range0, lengthConstraintType0, 85.0, range0, lengthConstraintType1);
      Size2D size2D0 = new Size2D(85.0, 85.0);
      Size2D size2D1 = rectangleConstraint0.calculateConstrainedSize(size2D0);
      assertEquals(85.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(85.0, rectangleConstraint0.getHeight(), 0.01);
      assertTrue(size2D1.equals((Object)size2D0));
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range(85.0, 85.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(85.0, range0, lengthConstraintType0, 85.0, range0, lengthConstraintType0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedWidth(85.0);
      Size2D size2D0 = new Size2D(85.0, 85.0);
      Size2D size2D1 = rectangleConstraint1.calculateConstrainedSize(size2D0);
      assertEquals(85.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint1.getHeightConstraintType());
      assertEquals(85.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(85.0, size2D1.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      Size2D size2D0 = new Size2D();
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedHeight(0.0);
      Size2D size2D1 = rectangleConstraint1.calculateConstrainedSize(size2D0);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint1.getHeightConstraintType());
      assertEquals(0.0, size2D1.height, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range((-2543.8583205905165), 2498.29361595222);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      Size2D size2D0 = new Size2D(2498.29361595222, 2498.29361595222);
      Size2D size2D1 = rectangleConstraint0.calculateConstrainedSize(size2D0);
      assertTrue(size2D1.equals((Object)size2D0));
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range(85.0, 85.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(85.0, range0, lengthConstraintType0, 85.0, range0, lengthConstraintType1);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      assertEquals(85.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(85.0, rectangleConstraint1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range(85.0, 85.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(85.0, range0, lengthConstraintType0, 85.0, range0, lengthConstraintType0);
      double double0 = rectangleConstraint0.getWidth();
      assertEquals(85.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(85.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, (Range) null);
      double double0 = rectangleConstraint0.getHeight();
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range(85.0, 85.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(85.0, range0, lengthConstraintType0, 85.0, range0, lengthConstraintType0);
      rectangleConstraint0.getHeightRange();
      assertEquals(85.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(85.0, rectangleConstraint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, (-361.829761974661));
      rectangleConstraint0.getWidthConstraintType();
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-361.829761974661), rectangleConstraint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range((-2543.8583205905165), 2498.29361595222);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.NONE.toRangeHeight(range0);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint1.getWidthConstraintType());
      
      Size2D size2D0 = new Size2D(2498.29361595222, 2498.29361595222);
      Size2D size2D1 = rectangleConstraint1.calculateConstrainedSize(size2D0);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertTrue(size2D1.equals((Object)size2D0));
      assertEquals(2498.29361595222, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint1.getHeightConstraintType());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range((-2543.8583205905165), 2498.29361595222);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      String string0 = rectangleConstraint0.toString();
      assertEquals("RectangleConstraint[RANGE: width=0.0, height=0.0]", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range((-2543.8583205905165), 2498.29361595222);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      rectangleConstraint0.getHeightConstraintType();
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
  }
}
