/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:45:46 GMT 2019
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ComponentColorModel;
import java.awt.image.DirectColorModel;
import java.awt.image.ImageObserver;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.Raster;
import java.awt.image.VolatileImage;
import java.awt.image.WritableRaster;
import java.sql.Connection;
import java.text.AttributedCharacterIterator;
import java.text.DateFormat;
import java.util.Collection;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Stack;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.JViewport;
import javax.swing.plaf.basic.BasicPanelUI;
import javax.swing.plaf.multi.MultiTreeUI;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLabelLocation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.block.AbstractBlock;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BlockFrame;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.LineBorder;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.ChartProgressEvent;
import org.jfree.chart.event.MarkerChangeEvent;
import org.jfree.chart.event.TitleChangeListener;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DialShape;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.title.ImageTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.ShortTextTitle;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.chart.ui.LengthAdjustmentType;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.ui.Size2D;
import org.jfree.chart.ui.VerticalAlignment;
import org.jfree.chart.util.DefaultShadowGenerator;
import org.jfree.chart.util.Rotation;
import org.jfree.chart.util.SortOrder;
import org.jfree.chart.util.TableOrder;
import org.jfree.chart.util.UnitType;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractBlock_ESTest extends AbstractBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      BlockContainer blockContainer0 = new BlockContainer();
      compositeTitle0.setTitleContainer(blockContainer0);
      blockContainer0.equals(compositeTitle0);
      compositeTitle0.setBorder((-1629.0), 324.5, 324.5, 1.0);
      compositeTitle0.setVisible(true);
      compositeTitle0.setTitleContainer(blockContainer0);
      compositeTitle0.getID();
      compositeTitle0.getID();
      compositeTitle0.setWidth(844.79);
      compositeTitle0.clone();
      compositeTitle0.getContentXOffset();
      blockContainer0.getMargin();
      compositeTitle0.getContentYOffset();
      blockContainer0.getHeight();
      compositeTitle0.getHeight();
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      blockContainer0.trimBorder(rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 3016.575806, 0.0, 3016.575806, 324.12604045389);
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)ellipse2D_Float0.getBounds2D();
      rectangle2D_Float0.x = 0.0F;
      rectangleInsets0.trim(rectangle2D_Float0);
      assertEquals(3016.575927734375, rectangle2D_Float0.getMinY(), 0.01);
      
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, verticalAlignment0, 0.0F, (-324.12604F));
      BlockContainer blockContainer0 = new BlockContainer(flowArrangement0);
      blockContainer0.trimMargin(rectangle2D_Float0);
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("MU~*@HRJC][T9ssQe", false);
      blockContainer0.equals(standardChartTheme0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1229, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.5F, 0.5F, (-1.0), (-1291.68969303214));
      Rectangle2D.union(rectangle2D_Double0, rectangle2D_Double0, rectangle2D_Double0);
      compositeTitle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Double0);
      compositeTitle0.visible = true;
      Rectangle rectangle0 = new Rectangle((-1), 0);
      Point point0 = rectangle0.getLocation();
      point0.clone();
      point0.y = 760;
      point0.setLocation(0, (-2972));
      point0.clone();
      rectangle0.add(point0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      compositeTitle0.setPosition(rectangleEdge0);
      compositeTitle0.setBounds(rectangle0);
      compositeTitle0.setWidth((-1.5031314344787636));
      compositeTitle0.getFrame();
      compositeTitle0.getFrame();
      compositeTitle0.setWidth(1387.86);
      compositeTitle0.getBounds();
      compositeTitle0.getFrame();
      compositeTitle0.getBounds();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("domainAxis");
      textTitle0.setURLText("domainAxis");
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      textTitle0.setTextAlignment(horizontalAlignment0);
      textTitle0.clone();
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.getDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.getDrawingSupplier();
      thermometerPlot0.setDrawingSupplier((DrawingSupplier) null);
      RectangleInsets rectangleInsets0 = thermometerPlot0.getPadding();
      textTitle0.setPadding(rectangleInsets0);
      ThermometerPlot thermometerPlot1 = new ThermometerPlot();
      thermometerPlot1.setOutlineStroke(ganttRenderer0.DEFAULT_OUTLINE_STROKE);
      thermometerPlot1.setNoDataMessageFont(textTitle0.DEFAULT_FONT);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JFreeChart jFreeChart0 = new JFreeChart("", textTitle0.DEFAULT_FONT, thermometerPlot1, true);
      textTitle0.removeChangeListener(jFreeChart0);
      // Undeclared exception!
      try { 
        textTitle0.arrange((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(range0).constrain(anyDouble());
      doReturn(0.0).when(range0).getLowerBound();
      doReturn(1.0E-100, 0.0).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, (-2729.13));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = abstractBlock0.arrange(graphics2D0, rectangleConstraint0);
      Size2D size2D1 = rectangleConstraint0.calculateConstrainedSize(size2D0);
      rectangleConstraint0.calculateConstrainedSize(size2D1);
      abstractBlock0.toContentConstraint(rectangleConstraint0);
      abstractBlock0.calculateTotalHeight(1.0);
      rectangleConstraint0.toUnconstrainedWidth();
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)abstractBlock0.getBounds();
      rectangle2D_Float0.height = (-2834.4F);
      abstractBlock0.setMargin((-590.441294059), (-2729.13), 2737.916, 1.0);
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)abstractBlock0.trimPadding(rectangle2D_Float0);
      abstractBlock0.getContentXOffset();
      abstractBlock0.setWidth(1598.8024);
      abstractBlock0.setID("+k3F\"R$\"UI");
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 180.0, (-590.441294059), 2707.86227719156, (-2729.13));
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangleInsets0.createOutsetRectangle((Rectangle2D) rectangle2D_Float1, true, true);
      rectangleInsets0.createOutsetRectangle((Rectangle2D) rectangle2D_Double0);
      abstractBlock0.setMargin(rectangleInsets0);
      abstractBlock0.getBounds();
      abstractBlock0.getID();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(range0).constrain(anyDouble());
      doReturn(0.0).when(range0).getLowerBound();
      doReturn(1.0E-100, 0.0).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, (-2729.13));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = abstractBlock0.arrange(graphics2D0, rectangleConstraint0);
      Size2D size2D1 = rectangleConstraint0.calculateConstrainedSize(size2D0);
      rectangleConstraint0.calculateConstrainedSize(size2D1);
      abstractBlock0.toContentConstraint(rectangleConstraint0);
      abstractBlock0.calculateTotalHeight(1.0);
      rectangleConstraint0.toUnconstrainedWidth();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      abstractBlock0.setMargin((-590.441294059), (-2729.13), 2737.916, 1.0);
      Rectangle2D rectangle2D1 = abstractBlock0.trimPadding(rectangle2D0);
      abstractBlock0.getContentXOffset();
      abstractBlock0.setID("+k3F\"R$\"UI");
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 180.0, (-590.441294059), 2707.86227719156, (-2729.13));
      Rectangle2D rectangle2D2 = rectangleInsets0.createOutsetRectangle(rectangle2D1, true, true);
      rectangleInsets0.createOutsetRectangle(rectangle2D2);
      abstractBlock0.setMargin(rectangleInsets0);
      abstractBlock0.getBounds();
      Line2D.Double line2D_Double0 = new Line2D.Double(7.0, (-4310.432), (-590.441294059), 1.5707963267948966);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      abstractBlock0.trimMargin(rectangle0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1232, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.5F, 0.5F, (-1.0), (-1291.68969303214));
      rectangle2D_Double0.add((double) 1, (double) 1.0F);
      Rectangle2D.union(rectangle2D_Double0, rectangle2D_Double0, rectangle2D_Double0);
      compositeTitle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Double0);
      compositeTitle0.visible = true;
      Rectangle rectangle0 = new Rectangle();
      Point point0 = rectangle0.getLocation();
      point0.clone();
      point0.y = 760;
      rectangle0.setFrame((-1.0), 1495.165995680389, 552.13653, (double) 10);
      point0.setLocation((-1), (-2972));
      point0.clone();
      rectangle0.add(point0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      compositeTitle0.setPosition(rectangleEdge0);
      compositeTitle0.setBounds(rectangle0);
      compositeTitle0.setWidth(35.97482291242043);
      compositeTitle0.getFrame();
      compositeTitle0.getFrame();
      compositeTitle0.setWidth(1387.86);
      compositeTitle0.getBounds();
      compositeTitle0.getFrame();
      rectangle2D_Double0.getBounds();
      compositeTitle0.equals(graphics2D0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis((-1207L));
      EmptyBlock emptyBlock0 = new EmptyBlock((-1207L), 1940.775522874);
      emptyBlock0.setPadding(1940.775522874, 1940.775522874, (double) (-1207L), 0.0);
      emptyBlock0.getBounds();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      emptyBlock0.arrange((Graphics2D) null, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      BlockContainer blockContainer0 = new BlockContainer();
      compositeTitle0.setTitleContainer(blockContainer0);
      blockContainer0.equals(compositeTitle0);
      compositeTitle0.setBorder((-1629.0), (-1629.0), (-1629.0), 1.0);
      compositeTitle0.setVisible(true);
      compositeTitle0.setTitleContainer(blockContainer0);
      compositeTitle0.getID();
      compositeTitle0.getID();
      compositeTitle0.setWidth(844.79);
      compositeTitle0.clone();
      compositeTitle0.getContentXOffset();
      blockContainer0.getMargin();
      compositeTitle0.getContentYOffset();
      blockContainer0.getHeight();
      compositeTitle0.getHeight();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Font font0 = categoryAxis0.getLabelFont();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 2.0F);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, true);
      Rectangle2D rectangle2D0 = font0.getStringBounds("Eg'vd[l7", fontRenderContext0);
      blockContainer0.trimMargin(rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1229, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.5F, 0.5F, (-1.0), (-1291.68969303214));
      rectangle2D_Double0.add((double) 1, (double) 1.0F);
      Rectangle2D.union(rectangle2D_Double0, rectangle2D_Double0, rectangle2D_Double0);
      compositeTitle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Double0);
      compositeTitle0.visible = true;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-78);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Rectangle rectangle0 = new Rectangle();
      Point point0 = rectangle0.getLocation();
      point0.clone();
      point0.y = 760;
      point0.clone();
      rectangle0.add(point0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      compositeTitle0.setPosition(rectangleEdge0);
      compositeTitle0.setBounds(rectangle0);
      compositeTitle0.setWidth((-1.5031314344787636));
      compositeTitle0.getFrame();
      compositeTitle0.getFrame();
      compositeTitle0.setWidth(1387.86);
      compositeTitle0.getBounds();
      compositeTitle0.getFrame();
      compositeTitle0.getBounds();
      compositeTitle0.equals(graphics2D0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1229, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.5F, 0.5F, (-1.0), (-1291.68969303214));
      Rectangle2D.union(rectangle2D_Double0, rectangle2D_Double0, rectangle2D_Double0);
      compositeTitle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Double0);
      compositeTitle0.visible = true;
      Rectangle rectangle0 = new Rectangle();
      Point point0 = rectangle0.getLocation();
      point0.clone();
      point0.y = 760;
      point0.setLocation(0, (-2972));
      point0.clone();
      rectangle0.add(point0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      compositeTitle0.setPosition(rectangleEdge0);
      compositeTitle0.setBounds(rectangle0);
      compositeTitle0.setWidth((-1.5031314344787636));
      compositeTitle0.getFrame();
      compositeTitle0.getFrame();
      compositeTitle0.setWidth(1387.86);
      compositeTitle0.getBounds();
      compositeTitle0.getFrame();
      compositeTitle0.getBounds();
      compositeTitle0.getPadding();
      Graphics2D graphics2D1 = bufferedImage0.createGraphics();
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      compositeTitle0.arrange(graphics2D1, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).getLowerBound();
      doReturn(1.0E-100, 0.0).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, (-2729.13));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textTitle0.arrange(graphics2D0, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      BlockContainer blockContainer0 = compositeTitle0.getContainer();
      blockContainer0.getHeight();
      compositeTitle0.setPadding(0.0, 1.860354287076595, 0.0, (-1.0));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      blockContainer0.setMargin(compositeTitle0.DEFAULT_PADDING);
      blockContainer0.calculateTotalHeight(2414.286753593);
      Object object0 = new Object();
      compositeTitle0.setMargin((-1.0), 3039.5086, 0.0, 1.0);
      blockContainer0.equals(object0);
      blockContainer0.getHeight();
      blockContainer0.getMargin();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.y2 = (-0.27233428F);
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      Rectangle2D rectangle2D1 = blockContainer0.trimMargin(rectangle2D0);
      blockContainer0.clone();
      blockContainer0.calculateTotalHeight(0.0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, (-0.27233428F), 0.0, 0.0);
      rectangle2D_Double0.height = 1381.53558;
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      ellipse2D_Double0.setFrame((Rectangle2D) rectangle2D_Double0);
      Rectangle2D rectangle2D2 = ellipse2D_Double0.getBounds2D();
      rectangle2D_Double0.setFrame(rectangle2D2);
      rectangle2D_Double0.intersects(rectangle2D1);
      RectangleInsets rectangleInsets0 = blockContainer0.getMargin();
      blockContainer0.equals(rectangleInsets0);
      blockContainer0.trimPadding(rectangle2D_Double0);
      rectangleInsets0.createOutsetRectangle(rectangle2D0, false, false);
      blockContainer0.trimToContentHeight(0.0);
      blockContainer0.getPadding();
      blockContainer0.setPadding(rectangleInsets0);
      blockContainer0.getContentXOffset();
      blockContainer0.setWidth(1.0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      blockContainer0.setPadding((-1624.42789935), 1.860354287076595, (double) (-0.27233428F), 0.0);
      blockContainer0.calculateTotalWidth(0.0);
      blockContainer0.getHeight();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(range0).constrain(anyDouble());
      doReturn(0.0, 0.0).when(range0).getLowerBound();
      doReturn(1.0E-100, 0.0, 0.0, 0.0).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, (-2729.13));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = abstractBlock0.arrange(graphics2D0, rectangleConstraint0);
      Size2D size2D1 = rectangleConstraint0.calculateConstrainedSize(size2D0);
      rectangleConstraint0.calculateConstrainedSize(size2D1);
      abstractBlock0.toContentConstraint(rectangleConstraint0);
      abstractBlock0.calculateTotalHeight(1.0);
      rectangleConstraint0.toUnconstrainedWidth();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      abstractBlock0.setMargin((-590.441294059), (-2729.13), 2737.916, 1.0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      rectangle2D0.add((Point2D) point2D_Double0);
      Rectangle2D rectangle2D1 = abstractBlock0.trimPadding(rectangle2D0);
      abstractBlock0.getContentXOffset();
      abstractBlock0.setWidth(1598.8024);
      abstractBlock0.setID("+k3F\"R$\"UI");
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 180.0, (-590.441294059), 2707.86227719156, (-2729.13));
      Rectangle2D rectangle2D2 = rectangleInsets0.createOutsetRectangle(rectangle2D1, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+k3F\"R$\"UI");
      rectangleInsets0.createOutsetRectangle(rectangle2D2);
      abstractBlock0.setMargin(rectangleInsets0);
      abstractBlock0.getBounds();
      abstractBlock0.toContentConstraint(rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range0).constrain(anyDouble());
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, (-2729.13));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = abstractBlock0.arrange(graphics2D0, rectangleConstraint0);
      rectangleConstraint0.calculateConstrainedSize(size2D0);
      RectangleConstraint rectangleConstraint1 = new RectangleConstraint(0.0, 0.0);
      abstractBlock0.calculateTotalHeight(1.0);
      rectangleConstraint0.toUnconstrainedWidth();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      size2D0.clone();
      abstractBlock0.setMargin((-590.441294059), (-2729.13), 2737.916, 1.0);
      Rectangle2D rectangle2D1 = abstractBlock0.trimPadding(rectangle2D0);
      abstractBlock0.getContentXOffset();
      abstractBlock0.setWidth(1598.8024);
      abstractBlock0.setID("+k3F5\"R$\"UI");
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 180.0, (-590.441294059), 2707.86227719156, (-2729.13));
      Rectangle2D rectangle2D2 = rectangleInsets0.createOutsetRectangle(rectangle2D1, true, true);
      rectangle2D2.setRect((double) 0.0F, (-775.7662069009), (double) 0.0F, 3016.0);
      rectangleInsets0.createOutsetRectangle(rectangle2D2);
      abstractBlock0.setMargin(rectangleInsets0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 0.0F, 0.0F, 0.0F);
      abstractBlock0.getMargin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      standardEntityCollection0.getEntity(210.304, 210.304);
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      abstractBlock0.trimPadding(rectangle2D0);
      abstractBlock0.getHeight();
      abstractBlock0.setWidth(0.0);
      abstractBlock0.setHeight(0.0);
      abstractBlock0.trimToContentHeight((-1048.8485));
      abstractBlock0.setPadding(0.0, 0.0, (-1048.8485), 181.6455294816);
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      BlockContainer blockContainer0 = new BlockContainer();
      Arrangement arrangement0 = blockContainer0.getArrangement();
      LegendTitle legendTitle0 = new LegendTitle(xYShapeRenderer0, arrangement0, arrangement0);
      RectangleInsets rectangleInsets0 = legendTitle0.getLegendItemGraphicPadding();
      abstractBlock0.setMargin(rectangleInsets0);
      legendTitle0.getPadding();
      blockContainer0.getMargin();
      abstractBlock0.calculateTotalHeight((double) xYShapeRenderer0.ZERO);
      legendTitle0.getBounds();
      blockContainer0.trimToContentWidth((-3646.36867087849));
      abstractBlock0.trimToContentHeight(0.0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range0).constrain(anyDouble());
      doReturn(0.0).when(range0).getLowerBound();
      doReturn(1.0E-100, 0.0).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, (-2729.13));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = new Size2D(0.0, 1.0E-100);
      Size2D size2D1 = rectangleConstraint0.calculateConstrainedSize(size2D0);
      rectangleConstraint0.calculateConstrainedSize(size2D1);
      abstractBlock0.toContentConstraint(rectangleConstraint0);
      double double0 = 1.0;
      Stack<Rectangle2D.Double> stack0 = new Stack<Rectangle2D.Double>();
      JTree jTree0 = new JTree(stack0);
      jTree0.getPathForRow(0);
      jTree0.getPathBounds((TreePath) null);
      // Undeclared exception!
      try { 
        abstractBlock0.trimMargin((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(0.001, 0.001);
      emptyBlock0.setBorder(0.001, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      rectangleConstraint0.toFixedWidth(0.001);
      rectangleConstraint0.toUnconstrainedHeight();
      rectangleConstraint0.toUnconstrainedWidth();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      emptyBlock0.trimPadding(rectangle0);
      rectangleConstraint0.toFixedWidth(Double.POSITIVE_INFINITY);
      rectangleConstraint0.toUnconstrainedWidth();
      emptyBlock0.toContentConstraint(rectangleConstraint0);
      emptyBlock0.setBorder(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0);
      emptyBlock0.getMargin();
      JScrollPane jScrollPane0 = null;
      try {
        jScrollPane0 = new JScrollPane(22, 2425);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid horizontalScrollBarPolicy
         //
         verifyException("javax.swing.JScrollPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.y2 = line2D_Float0.y2;
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      Rectangle2D rectangle2D1 = blockContainer0.trimMargin(rectangle2D0);
      blockContainer0.clone();
      blockContainer0.calculateTotalHeight(0.0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, (-151.7839582392), 0.0, 0.0);
      rectangle2D_Double0.height = (double) 0.0F;
      Rectangle2D rectangle2D2 = blockContainer0.trimBorder(rectangle2D_Double0);
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      ellipse2D_Double0.setFrame(rectangle2D2);
      Rectangle2D rectangle2D3 = ellipse2D_Double0.getBounds2D();
      rectangle2D_Double0.setFrame(rectangle2D3);
      rectangle2D_Double0.intersects(rectangle2D1);
      RectangleInsets rectangleInsets0 = blockContainer0.getMargin();
      blockContainer0.equals(rectangleInsets0);
      blockContainer0.trimPadding(rectangle2D_Double0);
      rectangleInsets0.createOutsetRectangle(rectangle2D0, false, false);
      blockContainer0.trimToContentHeight(0.0);
      blockContainer0.getPadding();
      blockContainer0.setPadding(rectangleInsets0);
      blockContainer0.getContentXOffset();
      blockContainer0.setWidth(1.0);
      blockContainer0.setPadding((-1624.42789935), 0.0, (double) 0.0F, 0.0);
      blockContainer0.calculateTotalWidth(0.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BlockContainer blockContainer0 = new BlockContainer();
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      BlockFrame blockFrame0 = blockContainer0.getFrame();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "subtitle");
      compositeTitle0.setVisible(true);
      compositeTitle0.setFrame(blockFrame0);
      blockContainer0.getBlocks();
      BlockContainer blockContainer1 = compositeTitle0.getContainer();
      blockContainer1.equals(blockContainer0);
      System.setCurrentTimeMillis((-1497L));
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Font font0 = defaultPolarItemRenderer0.getItemLabelFont((-373), (-373));
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance((-1.0), (-373));
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, true);
      Rectangle2D rectangle2D0 = font0.getMaxCharBounds(fontRenderContext0);
      Rectangle2D rectangle2D1 = blockContainer1.trimPadding(rectangle2D0);
      blockContainer0.trimBorder(rectangle2D1);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) (-373);
      floatArray0[2] = (float) (-373);
      floatArray0[3] = (float) (-373);
      floatArray0[4] = (float) (-1497L);
      floatArray0[5] = (float) (-373);
      AffineTransform affineTransform1 = new AffineTransform(floatArray0);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform1, (-373));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: -373
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("hotspot");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      labelBlock0.setToolTipText("+S=@hZ");
      Rectangle2D rectangle2D0 = rectangle2D_Double0.getFrame();
      Rectangle2D rectangle2D1 = labelBlock0.trimBorder(rectangle2D0);
      labelBlock0.trimPadding(rectangle2D1);
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      labelBlock0.toContentConstraint(rectangleConstraint0);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)122;
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-17);
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(2858, byteArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance((int) (byte)0, (double) 1.0F, (-1343.6487165763263));
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      int int0 = (-1);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)122;
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte) (-17);
      byteArray1[4] = (byte)122;
      byteArray1[5] = (byte) (-17);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((byte)122, 28, byteArray0, byteArray0, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      BlockContainer blockContainer0 = new BlockContainer();
      compositeTitle0.setTitleContainer(blockContainer0);
      blockContainer0.equals(compositeTitle0);
      compositeTitle0.clone();
      compositeTitle0.setBorder((-1629.0), 324.5, 324.5, 0.259610107374482);
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      compositeTitle0.setVisible(true);
      compositeTitle0.setTitleContainer(blockContainer0);
      compositeTitle0.getID();
      compositeTitle0.getID();
      compositeTitle0.setWidth(844.79);
      compositeTitle0.clone();
      compositeTitle0.getContentXOffset();
      blockContainer0.getMargin();
      compositeTitle0.getContentYOffset();
      blockContainer0.getHeight();
      compositeTitle0.getHeight();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.y2 = 0.5F;
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      Rectangle2D rectangle2D1 = blockContainer0.trimMargin(rectangle2D0);
      blockContainer0.clone();
      blockContainer0.calculateTotalHeight(0.0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, (-151.7839582392), 0.0, 0.0);
      rectangle2D_Double0.height = 1381.53558;
      Rectangle2D rectangle2D2 = blockContainer0.trimBorder(rectangle2D_Double0);
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      ellipse2D_Double0.setFrame(rectangle2D2);
      Rectangle2D rectangle2D3 = ellipse2D_Double0.getBounds2D();
      rectangle2D_Double0.setFrame(rectangle2D3);
      rectangle2D_Double0.intersects(rectangle2D1);
      RectangleInsets rectangleInsets0 = blockContainer0.getMargin();
      rectangle2D_Double0.setFrameFromDiagonal((-3370.086), 3185.154, 2.0, (double) 0.0F);
      blockContainer0.equals(rectangleInsets0);
      blockContainer0.trimPadding(rectangle2D_Double0);
      rectangleInsets0.createOutsetRectangle(rectangle2D0, false, false);
      blockContainer0.trimToContentHeight(0.0);
      blockContainer0.getPadding();
      blockContainer0.setPadding(rectangleInsets0);
      blockContainer0.getContentXOffset();
      blockContainer0.setWidth(1.0);
      blockContainer0.setPadding((-1624.42789935), 0.0, (double) 0.5F, 0.0);
      blockContainer0.calculateTotalWidth(0.0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.y2 = 0.5F;
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      Rectangle2D rectangle2D1 = blockContainer0.trimMargin(rectangle2D0);
      blockContainer0.clone();
      blockContainer0.calculateTotalHeight(0.0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 0.5F, 0.0, 0.0);
      rectangle2D_Double0.height = 1381.53558;
      Rectangle2D rectangle2D2 = blockContainer0.trimBorder(rectangle2D_Double0);
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      ellipse2D_Double0.setFrame(rectangle2D2);
      Rectangle2D rectangle2D3 = ellipse2D_Double0.getBounds2D();
      rectangle2D_Double0.setFrame(rectangle2D3);
      rectangle2D_Double0.intersects(rectangle2D1);
      RectangleInsets rectangleInsets0 = blockContainer0.getMargin();
      blockContainer0.equals(rectangleInsets0);
      blockContainer0.trimPadding(rectangle2D_Double0);
      rectangleInsets0.createOutsetRectangle(rectangle2D0, false, false);
      blockContainer0.trimToContentHeight(0.0);
      blockContainer0.getPadding();
      blockContainer0.setPadding(rectangleInsets0);
      blockContainer0.getContentXOffset();
      blockContainer0.setWidth(1.0);
      blockContainer0.setPadding((-1624.42789935), 0.0, (double) 0.5F, 0.0);
      blockContainer0.calculateTotalWidth(0.0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY).when(range0).constrain(anyDouble());
      doReturn(Double.POSITIVE_INFINITY, 0.0).when(range0).getLowerBound();
      doReturn(1.0, Double.POSITIVE_INFINITY).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, (-2729.13));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = abstractBlock0.arrange(graphics2D0, rectangleConstraint0);
      Size2D size2D1 = rectangleConstraint0.calculateConstrainedSize(size2D0);
      rectangleConstraint0.calculateConstrainedSize(size2D1);
      abstractBlock0.toContentConstraint(rectangleConstraint0);
      abstractBlock0.calculateTotalHeight(1.0);
      rectangleConstraint0.toUnconstrainedWidth();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      abstractBlock0.setMargin((-590.441294059), (-2729.13), 2737.916, 1.0);
      Rectangle2D rectangle2D1 = abstractBlock0.trimPadding(rectangle2D0);
      abstractBlock0.getContentXOffset();
      abstractBlock0.setWidth(1598.8024);
      abstractBlock0.setID("+k3F\"R$\"UI");
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 180.0, (-590.441294059), 2707.86227719156, (-2729.13));
      Rectangle2D rectangle2D2 = rectangleInsets0.createOutsetRectangle(rectangle2D1, true, true);
      rectangleInsets0.createOutsetRectangle(rectangle2D2);
      abstractBlock0.setMargin(rectangleInsets0);
      abstractBlock0.getBounds();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Font font0 = TextTitle.DEFAULT_FONT;
      LabelBlock labelBlock0 = new LabelBlock("-m", font0);
      RectangleInsets rectangleInsets0 = labelBlock0.getPadding();
      labelBlock0.setPadding(rectangleInsets0);
      labelBlock0.setMargin(1294.62972763, 1294.62972763, 1294.62972763, 1294.62972763);
      labelBlock0.setWidth(1294.62972763);
      labelBlock0.setPadding(rectangleInsets0);
      labelBlock0.calculateTotalWidth(1294.62972763);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((-2409.19), (-2409.19)).when(range0).constrain(anyDouble());
      doReturn((-2409.19)).when(range0).getLowerBound();
      doReturn(0.0, 0.18).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, (-2729.13));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = abstractBlock0.arrange(graphics2D0, rectangleConstraint0);
      rectangleConstraint0.calculateConstrainedSize(size2D0);
      abstractBlock0.toContentConstraint(rectangleConstraint0);
      abstractBlock0.calculateTotalHeight(1.0);
      rectangleConstraint0.toUnconstrainedWidth();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      abstractBlock0.setMargin((-590.441294059), (-2729.13), 2737.916, 1.0);
      Rectangle2D rectangle2D1 = abstractBlock0.trimPadding(rectangle2D0);
      abstractBlock0.getContentXOffset();
      abstractBlock0.setWidth(1598.8024);
      abstractBlock0.setID("+k3F\"R$\"UI");
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 180.0, (-590.441294059), 2707.86227719156, (-2729.13));
      Rectangle2D rectangle2D2 = rectangleInsets0.createOutsetRectangle(rectangle2D1, true, true);
      rectangleInsets0.createOutsetRectangle(rectangle2D2);
      abstractBlock0.setMargin(rectangleInsets0);
      abstractBlock0.getBounds();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      xYDifferenceRenderer0.setItemLabelAnchorOffset(0.0);
      LegendTitle legendTitle0 = new LegendTitle(xYDifferenceRenderer0);
      legendTitle0.setMargin((-133.327855412906), (-133.327855412906), 0.7853981633974483, (-1.0));
      legendTitle0.setPadding(3741.908, (-3510.35236), (-1492.498058849803), 0.18);
      legendTitle0.getMargin();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      standardEntityCollection0.getEntity(210.304, 210.304);
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      abstractBlock0.trimPadding(rectangle2D0);
      abstractBlock0.getHeight();
      abstractBlock0.setWidth(0.0);
      abstractBlock0.setHeight(0.0);
      abstractBlock0.trimToContentHeight((-1048.8485));
      abstractBlock0.setPadding(0.0, 0.0, (-1048.8485), 181.6455294816);
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      BlockContainer blockContainer0 = new BlockContainer();
      Arrangement arrangement0 = blockContainer0.getArrangement();
      LegendTitle legendTitle0 = new LegendTitle(xYShapeRenderer0, arrangement0, arrangement0);
      RectangleInsets rectangleInsets0 = legendTitle0.getLegendItemGraphicPadding();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getChart();
      legendTitle0.addChangeListener((TitleChangeListener) null);
      abstractBlock0.setMargin(rectangleInsets0);
      legendTitle0.getPadding();
      blockContainer0.getMargin();
      abstractBlock0.calculateTotalHeight((double) xYShapeRenderer0.ZERO);
      legendTitle0.getBounds();
      blockContainer0.trimToContentWidth((-3646.36867087849));
      abstractBlock0.trimMargin(rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setPadding((-180.0), (-180.0), (-180.0), (-180.0));
      abstractBlock0.trimToContentHeight((-180.0));
      Range range0 = new Range((-1.0), 2327.43);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1481.08764791), range0, lengthConstraintType0, 180.0, range0, lengthConstraintType1);
      abstractBlock0.toContentConstraint(rectangleConstraint0);
      abstractBlock0.trimToContentHeight(2327.43);
      abstractBlock0.getHeight();
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.getValueFont();
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance((-2875.42994265), 10.0F);
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      MarkerChangeEvent markerChangeEvent0 = null;
      try {
        markerChangeEvent0 = new MarkerChangeEvent((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      BlockContainer blockContainer1 = compositeTitle0.getContainer();
      blockContainer1.getContentYOffset();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      LegendTitle legendTitle0 = new LegendTitle(combinedRangeXYPlot0);
      Font font0 = legendTitle0.getItemFont();
      JFreeChart jFreeChart0 = new JFreeChart("distributor", font0, combinedRangeXYPlot0, true);
      LegendTitle legendTitle1 = jFreeChart0.getLegend();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 0.0, "W]pj+N=");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(cyclicNumberAxis0);
      combinedRangeXYPlot0.axisChanged(axisChangeEvent0);
      BlockBorder blockBorder0 = new BlockBorder(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      legendTitle1.setFrame(blockBorder0);
      legendTitle1.setPadding(1911.324691502, (-2645.9571174), (double) 1.0F, (-846.03904));
      BlockContainer blockContainer0 = legendTitle1.getItemContainer();
      blockContainer0.getBlocks();
      blockContainer0.setPadding((double) 10, 0.0, 0.0, Double.POSITIVE_INFINITY);
      legendTitle1.equals(combinedRangeXYPlot0);
      blockContainer0.getID();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      legendTitle0.setPosition(rectangleEdge0);
      legendTitle1.clone();
      blockContainer0.setBorder(0.5F, 10, (-1.0), 1.0F);
      legendTitle0.getContentYOffset();
      legendTitle0.setID("distributor");
      legendTitle1.getContentYOffset();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      PiePlot piePlot0 = new PiePlot(jDBCPieDataset0);
      RectangleInsets rectangleInsets0 = piePlot0.getSimpleLabelOffset();
      dateTitle0.setMargin(rectangleInsets0);
      dateTitle0.getContentXOffset();
      dateTitle0.setPadding(piePlot0.DEFAULT_INSETS);
      dateTitle0.getContentYOffset();
      int int0 = (-1);
      SystemColor systemColor0 = SystemColor.activeCaption;
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator((-1), systemColor0, 0.0F, 10, 4.18);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(90.0);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 10
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.trimToContentWidth(854.767);
      abstractBlock0.setBorder(1.0, (-1035.0), (-1464.209482672), (-1464.209482672));
      abstractBlock0.calculateTotalWidth(854.767);
      int int0 = 1;
      int int1 = 0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, 1, byteArray0, (-723), false, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      legendTitle0.setLegendItemGraphicAnchor(rectangleAnchor0);
      legendTitle0.setMargin(0.05, 0.05, 3016.575806, 0.05);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      legendTitle0.setPosition(rectangleEdge0);
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      legendTitle0.setVerticalAlignment(verticalAlignment0);
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 3873.5, 0.0, 3873.5, 324.12604045389);
      legendTitle0.setMargin(rectangleInsets0);
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      rectangleInsets0.trim(rectangle2D0);
      legendTitle0.setLegendItemGraphicEdge(rectangleEdge0);
      legendTitle0.setID("TK");
      legendTitle0.setID("TK");
      legendTitle0.setPadding(rectangleInsets0);
      legendTitle0.setMargin(3016.575806, (-1389.46878717041), 0.0, (-146.276388));
      legendTitle0.setID("MU~*@HRJC][T9ssQe");
      legendTitle0.setHeight(0.0);
      legendTitle0.getID();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(0.001, 0.001);
      assertEquals(0.001, emptyBlock0.getWidth(), 0.01);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01);
      assertEquals(0.001, emptyBlock0.getHeight(), 0.01);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01);
      assertNull(emptyBlock0.getID());
      assertNotNull(emptyBlock0);
      
      emptyBlock0.setBorder(0.001, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals(0.001, emptyBlock0.getContentYOffset(), 0.01);
      assertEquals(0.001, emptyBlock0.getWidth(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, emptyBlock0.getContentXOffset(), 0.01);
      assertEquals(0.001, emptyBlock0.getHeight(), 0.01);
      assertNull(emptyBlock0.getID());
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertNotNull(rectangleConstraint0);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedWidth(0.001);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint1.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.001, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint1.getHeightConstraintType());
      assertNotNull(rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint0.toUnconstrainedHeight();
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint2.getWidthConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint2.getHeightConstraintType());
      assertNotNull(rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertSame(rectangleConstraint2, rectangleConstraint0);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      
      RectangleConstraint rectangleConstraint3 = rectangleConstraint0.toUnconstrainedWidth();
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint3.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint3.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint3.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getHeight(), 0.01);
      assertNotNull(rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint0, rectangleConstraint2);
      assertSame(rectangleConstraint0, rectangleConstraint3);
      assertSame(rectangleConstraint3, rectangleConstraint0);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertSame(rectangleConstraint3, rectangleConstraint2);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      
      RectangleConstraint rectangleConstraint4 = rectangleConstraint0.toFixedWidth(Double.POSITIVE_INFINITY);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(Double.POSITIVE_INFINITY, rectangleConstraint4.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint4.getHeightConstraintType());
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint4.getWidthConstraintType());
      assertNotNull(rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint0, rectangleConstraint2);
      assertSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint4, rectangleConstraint0);
      assertNotSame(rectangleConstraint4, rectangleConstraint2);
      assertNotSame(rectangleConstraint4, rectangleConstraint1);
      assertNotSame(rectangleConstraint4, rectangleConstraint3);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint3));
      
      RectangleConstraint rectangleConstraint5 = rectangleConstraint0.toUnconstrainedWidth();
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint5.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint5.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint5.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint5.getWidth(), 0.01);
      assertNotNull(rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint0, rectangleConstraint2);
      assertSame(rectangleConstraint0, rectangleConstraint3);
      assertSame(rectangleConstraint0, rectangleConstraint5);
      assertSame(rectangleConstraint5, rectangleConstraint0);
      assertSame(rectangleConstraint5, rectangleConstraint3);
      assertNotSame(rectangleConstraint5, rectangleConstraint4);
      assertSame(rectangleConstraint5, rectangleConstraint2);
      assertNotSame(rectangleConstraint5, rectangleConstraint1);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint1));
      
      RectangleConstraint rectangleConstraint6 = emptyBlock0.toContentConstraint(rectangleConstraint0);
      assertEquals(0.001, emptyBlock0.getContentYOffset(), 0.01);
      assertEquals(0.001, emptyBlock0.getWidth(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, emptyBlock0.getContentXOffset(), 0.01);
      assertEquals(0.001, emptyBlock0.getHeight(), 0.01);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint6.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint6.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint6.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint6.getWidth(), 0.01);
      assertNotNull(rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint0, rectangleConstraint6);
      assertSame(rectangleConstraint0, rectangleConstraint2);
      assertSame(rectangleConstraint0, rectangleConstraint3);
      assertSame(rectangleConstraint0, rectangleConstraint5);
      assertSame(rectangleConstraint6, rectangleConstraint2);
      assertSame(rectangleConstraint6, rectangleConstraint3);
      assertSame(rectangleConstraint6, rectangleConstraint0);
      assertSame(rectangleConstraint6, rectangleConstraint5);
      assertNotSame(rectangleConstraint6, rectangleConstraint4);
      assertNotSame(rectangleConstraint6, rectangleConstraint1);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint1));
      
      emptyBlock0.setBorder(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0);
      assertEquals(0.001, emptyBlock0.getWidth(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, emptyBlock0.getContentXOffset(), 0.01);
      assertEquals(0.001, emptyBlock0.getHeight(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, emptyBlock0.getContentYOffset(), 0.01);
      assertNull(emptyBlock0.getID());
      
      JScrollPane jScrollPane0 = null;
      try {
        jScrollPane0 = new JScrollPane(22, 2425);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid horizontalScrollBarPolicy
         //
         verifyException("javax.swing.JScrollPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      int int0 = 0;
      dateTitle0.setMaximumLinesToDisplay(0);
      int int1 = 0;
      RectangleInsets rectangleInsets0 = null;
      // Undeclared exception!
      try { 
        dateTitle0.setMargin((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'margin' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer((-3124));
      LegendTitle legendTitle0 = new LegendTitle(cyclicXYItemRenderer0);
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      blockContainer0.clone();
      cyclicXYItemRenderer0.clearSeriesPaints(false);
      BlockBorder blockBorder0 = new BlockBorder(legendTitle0.DEFAULT_PADDING, cyclicXYItemRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      legendTitle0.setFrame(blockBorder0);
      blockContainer0.clear();
      blockContainer0.setMargin(legendTitle0.DEFAULT_PADDING);
      legendTitle0.getHeight();
      blockContainer0.setWidth(1731.2620100248);
      legendTitle0.setHeight(37.29102);
      blockContainer0.getHeight();
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try { 
        blockContainer0.trimPadding((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1229, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.5F, 0.5F, (-1.0), (-1291.68969303214));
      Rectangle2D.union(rectangle2D_Double0, rectangle2D_Double0, rectangle2D_Double0);
      compositeTitle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Double0);
      compositeTitle0.visible = true;
      Rectangle rectangle0 = new Rectangle();
      Point point0 = rectangle0.getLocation();
      point0.clone();
      point0.y = 760;
      point0.setLocation(0, (-2972));
      point0.clone();
      rectangle0.add(point0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      compositeTitle0.setPosition(rectangleEdge0);
      compositeTitle0.setBounds(rectangle0);
      compositeTitle0.setWidth(0.0);
      compositeTitle0.getFrame();
      compositeTitle0.getFrame();
      compositeTitle0.setWidth(1387.86);
      compositeTitle0.getBounds();
      compositeTitle0.getFrame();
      compositeTitle0.getBounds();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      dateTitle0.setText("");
      BlockBorder blockBorder0 = BlockBorder.NONE;
      blockBorder0.equals("Unable to add cloned data item.");
      dateTitle0.setFrame(blockBorder0);
      dateTitle0.setURLText("");
      dateTitle0.setBorder(246.769450490977, 902.0, 246.769450490977, 902.0);
      dateTitle0.equals("");
      dateTitle0.setHeight(1294.748);
      dateTitle0.clone();
      dateTitle0.getContentXOffset();
      dateTitle0.setFrame(blockBorder0);
      SystemColor systemColor0 = SystemColor.window;
      Color.getColor("<3z+0", (-504));
      dateTitle0.setBackgroundPaint(systemColor0);
      dateTitle0.setBorder(1294.748, 2458.4733209, 2458.4733209, (-296.46041));
      dateTitle0.getID();
      dateTitle0.getMargin();
      dateTitle0.getContentXOffset();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("L_8{", mockSimpleDateFormat0);
      spiderWebPlot0.setLabelGenerator(intervalCategoryItemLabelGenerator0);
      Paint paint0 = spiderWebPlot0.getLabelPaint();
      ColorBlock colorBlock0 = new ColorBlock(paint0, 0.25, 0.0);
      colorBlock0.getWidth();
      colorBlock0.getFrame();
      colorBlock0.getPadding();
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[3];
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      textTitle0.setPaint(systemColor0);
      textTitle0.setWidth((-1.0));
      // Undeclared exception!
      try { 
        textTitle0.setPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("hU[+|zzEC@ G5o(M*");
      textTitle0.clone();
      Class<AttributedCharacterIterator.Attribute> class0 = AttributedCharacterIterator.Attribute.class;
      Locale locale0 = Locale.US;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0, locale0);
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      RectangleInsets rectangleInsets0 = periodAxisLabelInfo0.getPadding();
      textTitle0.setMargin(rectangleInsets0);
      textTitle0.setText("org.jfree.data.time.TimePeriodAnchor");
      textTitle0.getPadding();
      // Undeclared exception!
      try { 
        textTitle0.setFrame((BlockFrame) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'frame' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      textTitle0.getID();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale(0.0, 1572.0);
      grayPaintScale0.getPaint(0.0);
      grayPaintScale0.clone();
      grayPaintScale0.getPaint(0.001);
      PeriodAxis periodAxis0 = new PeriodAxis("Z9wIX_fVez50[:bK!X");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, periodAxis0);
      grayPaintScale0.getPaint(2.0F);
      double double0 = 72.0;
      paintScaleLegend0.setStripOutlineStroke(periodAxis0.DEFAULT_TICK_MARK_STROKE);
      paintScaleLegend0.setWidth(72.0);
      Rectangle2D rectangle2D0 = null;
      paintScaleLegend0.setNotify(true);
      paintScaleLegend0.setMargin(periodAxis0.DEFAULT_TICK_LABEL_INSETS);
      // Undeclared exception!
      try { 
        paintScaleLegend0.setBounds((Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bounds' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setMargin(3226.73921, 3226.73921, 3226.73921, 3226.73921);
      abstractBlock0.trimToContentWidth(0.0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis("2^=YqK[*!!/i6QDu>");
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis0, periodAxis0, scatterRenderer0);
      CategoryAxis categoryAxis1 = categoryPlot0.getDomainAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis1);
      RectangleInsets rectangleInsets0 = combinedDomainCategoryPlot0.getAxisOffset();
      abstractBlock0.setMargin(rectangleInsets0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      Rectangle2D rectangle2D0 = periodAxis0.DEFAULT_AXIS_LABEL_INSETS.createAdjustedRectangle(defaultCaret0, lengthAdjustmentType0, lengthAdjustmentType0);
      abstractBlock0.setBounds(rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      // Undeclared exception!
      try { 
        abstractBlock0.trimBorder((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      RectangleInsets rectangleInsets0 = abstractBlock0.getPadding();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      rectangleInsets0.createInsetRectangle(rectangle2D0);
      rectangleInsets0.toString();
      // Undeclared exception!
      try { 
        abstractBlock0.toContentConstraint((RectangleConstraint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'c' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(range0).constrain(anyDouble());
      doReturn(0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, (-2729.13));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = abstractBlock0.arrange(graphics2D0, rectangleConstraint0);
      Size2D size2D1 = rectangleConstraint0.calculateConstrainedSize(size2D0);
      rectangleConstraint0.calculateConstrainedSize(size2D1);
      abstractBlock0.toContentConstraint(rectangleConstraint0);
      abstractBlock0.calculateTotalHeight(1.0);
      rectangleConstraint0.toUnconstrainedWidth();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      abstractBlock0.setMargin((-590.441294059), (-2729.13), 2737.916, 1.0);
      Rectangle2D rectangle2D1 = abstractBlock0.trimPadding(rectangle2D0);
      abstractBlock0.getContentXOffset();
      abstractBlock0.setWidth(1598.8024);
      abstractBlock0.setID("+k3F\"R$\"UI");
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 180.0, (-590.441294059), 2707.86227719156, (-2729.13));
      Rectangle2D rectangle2D2 = rectangleInsets0.createOutsetRectangle(rectangle2D1, true, true);
      rectangleInsets0.createOutsetRectangle(rectangle2D2);
      abstractBlock0.setMargin(rectangleInsets0);
      abstractBlock0.getBounds();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      compositeTitle0.getBounds();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = (-4681.843446);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(270.0, (-4681.843446), 0.0, 0.0);
      Rectangle2D rectangle2D0 = rectangle2D_Double0.getBounds2D();
      Rectangle2D rectangle2D1 = abstractBlock0.trimBorder(rectangle2D0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.drawBorder(graphics2D0, rectangle2D1);
      abstractBlock0.trimToContentWidth(0.0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = null;
      // Undeclared exception!
      try { 
        abstractBlock0.arrange(graphics2D1, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(1185.74, 1185.74, 1185.74, (-444.5276695101), 1185.74, 1185.74);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      abstractBlock0.trimPadding(rectangle2D0);
      abstractBlock0.setHeight(Double.POSITIVE_INFINITY);
      abstractBlock0.getHeight();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.y2 = 0.5F;
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      Rectangle2D rectangle2D1 = blockContainer0.trimMargin(rectangle2D0);
      blockContainer0.clone();
      blockContainer0.calculateTotalHeight(0.0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, (-151.7839582392), 0.0, 0.0);
      rectangle2D_Double0.height = 1381.53558;
      Rectangle2D rectangle2D2 = blockContainer0.trimBorder(rectangle2D_Double0);
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      ellipse2D_Double0.setFrame(rectangle2D2);
      Rectangle2D rectangle2D3 = ellipse2D_Double0.getBounds2D();
      rectangle2D_Double0.setFrame(rectangle2D3);
      rectangle2D_Double0.intersects(rectangle2D1);
      RectangleInsets rectangleInsets0 = blockContainer0.getMargin();
      blockContainer0.equals(rectangleInsets0);
      blockContainer0.trimPadding(rectangle2D_Double0);
      rectangleInsets0.createOutsetRectangle(rectangle2D0, false, false);
      blockContainer0.trimToContentHeight(0.0);
      blockContainer0.getPadding();
      blockContainer0.setPadding(rectangleInsets0);
      blockContainer0.getContentXOffset();
      blockContainer0.setWidth(1.0);
      blockContainer0.setPadding((-1624.42789935), 0.0, (double) 0.5F, 0.0);
      blockContainer0.calculateTotalWidth(0.0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setHeight(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("da21L`");
      labelBlock0.setToolTipText(":\"B57");
      Rectangle rectangle0 = new Rectangle((-1138), (-1138));
      Rectangle2D rectangle2D0 = labelBlock0.trimBorder(rectangle0);
      labelBlock0.trimPadding(rectangle2D0);
      labelBlock0.setPadding(0.0, 0.0, (-4075.35355), (-1.0));
      labelBlock0.clone();
      labelBlock0.getFrame();
      labelBlock0.getWidth();
      RectangleInsets rectangleInsets0 = labelBlock0.getPadding();
      labelBlock0.setPadding(rectangleInsets0);
      labelBlock0.setWidth(2094.8932396);
      labelBlock0.getPadding();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Font font0 = TextTitle.DEFAULT_FONT;
      LabelBlock labelBlock0 = new LabelBlock("-m", font0);
      RectangleInsets rectangleInsets0 = labelBlock0.getPadding();
      labelBlock0.setMargin(1294.62972763, 1294.62972763, 1294.62972763, 1294.62972763);
      labelBlock0.setWidth(1294.62972763);
      labelBlock0.setPadding(rectangleInsets0);
      labelBlock0.calculateTotalHeight(1294.62972763);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.getContentYOffset();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0).when(range0).getUpperBound();
      abstractBlock0.equals((Object) null);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, 0.0);
      abstractBlock0.arrange((Graphics2D) null, rectangleConstraint0);
      RectangleConstraint rectangleConstraint1 = new RectangleConstraint((-1.0), range0);
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range1).getUpperBound();
      rectangleConstraint1.toRangeWidth(range1);
      Range range2 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range2).getUpperBound();
      rectangleConstraint1.toRangeHeight(range2);
      Range range3 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range3).getUpperBound();
      rectangleConstraint0.toRangeHeight(range3);
      abstractBlock0.toContentConstraint(rectangleConstraint1);
      abstractBlock0.setWidth(0.0);
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("n8nJk;kJKXV");
      DrawingSupplier drawingSupplier0 = standardChartTheme0.getDrawingSupplier();
      standardChartTheme0.setDrawingSupplier(drawingSupplier0);
      Paint paint0 = standardChartTheme0.getLabelLinkPaint();
      standardChartTheme0.setDomainGridlinePaint(paint0);
      standardChartTheme0.setLabelLinkPaint(paint0);
      abstractBlock0.equals(standardChartTheme0);
      abstractBlock0.setPadding(0.0, 0.0, 0.0, 0.0);
      abstractBlock0.arrange((Graphics2D) null);
      abstractBlock0.getContentXOffset();
      abstractBlock0.getHeight();
      // Undeclared exception!
      try { 
        abstractBlock0.drawBorder((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.LANGUAGE;
      abstractBlock0.setPadding(Double.POSITIVE_INFINITY, 168.89363, Double.POSITIVE_INFINITY, 833.775357223);
      abstractBlock0.equals(attributedCharacterIterator_Attribute0);
      abstractBlock0.clone();
      abstractBlock0.getContentYOffset();
      abstractBlock0.setID("bounds");
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-730);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (-730);
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel((-730), (-730), floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 3 and should be 532900
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1331, 20);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(20, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1331, bufferedImage0.getTileWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1331, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(20, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertNotNull(bufferedImage0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(20, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1331, bufferedImage0.getTileWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1331, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(20, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertNotNull(sunGraphics2D0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.transformState);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      
      jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) rectangle2D_Double0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(20, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1331, bufferedImage0.getTileWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1331, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(20, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(2, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals((-8355712), sunGraphics2D0.eargb);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(2, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals((-8355712), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      
      jFreeChart0.setBorderVisible(false);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertNotNull(chartPanel0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      
      JFreeChart jFreeChart1 = chartPanel0.getChart();
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(jFreeChart1.getElementHinting());
      assertTrue(jFreeChart1.isNotify());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart1.getAntiAlias());
      assertNull(jFreeChart1.getID());
      assertEquals(0, jFreeChart1.getSubtitleCount());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertNotNull(jFreeChart1);
      assertSame(jFreeChart0, jFreeChart1);
      assertSame(jFreeChart1, jFreeChart0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      TextTitle textTitle0 = jFreeChart1.getTitle();
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(jFreeChart1.getElementHinting());
      assertTrue(jFreeChart1.isNotify());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart1.getAntiAlias());
      assertNull(jFreeChart1.getID());
      assertEquals(0, jFreeChart1.getSubtitleCount());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertTrue(textTitle0.getNotify());
      assertEquals("Series Title", textTitle0.getText());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getURLText());
      assertEquals(VerticalAlignment.CENTER, textTitle0.getVerticalAlignment());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getTextAlignment());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getHorizontalAlignment());
      assertEquals(RectangleEdge.BOTTOM, textTitle0.getPosition());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNotNull(textTitle0);
      assertSame(jFreeChart0, jFreeChart1);
      assertSame(jFreeChart1, jFreeChart0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(textTitle0.visible);
      
      RectangleInsets rectangleInsets0 = textTitle0.getPadding();
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(jFreeChart1.getElementHinting());
      assertTrue(jFreeChart1.isNotify());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart1.getAntiAlias());
      assertNull(jFreeChart1.getID());
      assertEquals(0, jFreeChart1.getSubtitleCount());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertTrue(textTitle0.getNotify());
      assertEquals("Series Title", textTitle0.getText());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getURLText());
      assertEquals(VerticalAlignment.CENTER, textTitle0.getVerticalAlignment());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getTextAlignment());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getHorizontalAlignment());
      assertEquals(RectangleEdge.BOTTOM, textTitle0.getPosition());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertNotNull(rectangleInsets0);
      assertSame(jFreeChart0, jFreeChart1);
      assertSame(jFreeChart1, jFreeChart0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(textTitle0.visible);
      
      textTitle0.setMargin((double) 0.5F, (double) 15, (double) 1.0F, (double) 10);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(jFreeChart1.getElementHinting());
      assertTrue(jFreeChart1.isNotify());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart1.getAntiAlias());
      assertNull(jFreeChart1.getID());
      assertEquals(0, jFreeChart1.getSubtitleCount());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertEquals(1.5, textTitle0.getContentYOffset(), 0.01);
      assertTrue(textTitle0.getNotify());
      assertEquals("Series Title", textTitle0.getText());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(16.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getURLText());
      assertEquals(VerticalAlignment.CENTER, textTitle0.getVerticalAlignment());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getTextAlignment());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getHorizontalAlignment());
      assertEquals(RectangleEdge.BOTTOM, textTitle0.getPosition());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertSame(jFreeChart0, jFreeChart1);
      assertSame(jFreeChart1, jFreeChart0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(textTitle0.visible);
      
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      assertNotNull(basicPanelUI0);
      
      Dimension dimension0 = basicPanelUI0.getMinimumSize(chartPanel0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertNull(dimension0);
      assertSame(jFreeChart0, jFreeChart1);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      
      chartPanel0.setMinimumSize((Dimension) null);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertSame(jFreeChart0, jFreeChart1);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      
      textTitle0.setMargin(0.0, (-2050.6925), (-440.24972292175), 0.0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(jFreeChart1.getElementHinting());
      assertTrue(jFreeChart1.isNotify());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart1.getAntiAlias());
      assertNull(jFreeChart1.getID());
      assertEquals(0, jFreeChart1.getSubtitleCount());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertTrue(textTitle0.getNotify());
      assertEquals("Series Title", textTitle0.getText());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.isVisible());
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getURLText());
      assertEquals(VerticalAlignment.CENTER, textTitle0.getVerticalAlignment());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getTextAlignment());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getHorizontalAlignment());
      assertEquals((-2049.6925), textTitle0.getContentXOffset(), 0.01);
      assertEquals(RectangleEdge.BOTTOM, textTitle0.getPosition());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertSame(jFreeChart0, jFreeChart1);
      assertSame(jFreeChart1, jFreeChart0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(textTitle0.visible);
      
      BlockBorder blockBorder0 = new BlockBorder(1.0, 10, 15, (-440.24972292175));
      assertNotNull(blockBorder0);
      
      textTitle0.setFrame(blockBorder0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(jFreeChart1.getElementHinting());
      assertTrue(jFreeChart1.isNotify());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart1.getAntiAlias());
      assertNull(jFreeChart1.getID());
      assertEquals(0, jFreeChart1.getSubtitleCount());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertTrue(textTitle0.getNotify());
      assertEquals("Series Title", textTitle0.getText());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.isVisible());
      assertNull(textTitle0.getID());
      assertEquals((-2039.6925), textTitle0.getContentXOffset(), 0.01);
      assertEquals(2.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getURLText());
      assertEquals(VerticalAlignment.CENTER, textTitle0.getVerticalAlignment());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getTextAlignment());
      assertEquals(HorizontalAlignment.CENTER, textTitle0.getHorizontalAlignment());
      assertEquals(RectangleEdge.BOTTOM, textTitle0.getPosition());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertSame(jFreeChart0, jFreeChart1);
      assertSame(jFreeChart1, jFreeChart0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(textTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      assertEquals(0.0, abstractBlock0.getContentYOffset(), 0.01);
      assertNull(abstractBlock0.getID());
      assertEquals(0.0, abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertNotNull(abstractBlock0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = abstractBlock0.arrange(graphics2D0);
      assertEquals(0.0, abstractBlock0.getContentYOffset(), 0.01);
      assertNull(abstractBlock0.getID());
      assertEquals(0.0, abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      
      abstractBlock0.setWidth(0.0);
      assertEquals(0.0, abstractBlock0.getContentYOffset(), 0.01);
      assertNull(abstractBlock0.getID());
      assertEquals(0.0, abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      
      abstractBlock0.setWidth((-810.0));
      assertEquals(0.0, abstractBlock0.getContentYOffset(), 0.01);
      assertNull(abstractBlock0.getID());
      assertEquals(0.0, abstractBlock0.getContentXOffset(), 0.01);
      assertEquals((-810.0), abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        abstractBlock0.arrange(graphics2D1, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null, tableOrder0);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_COLUMN, spiderWebPlot0.getDataExtractOrder());
      assertNotNull(spiderWebPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      RectangleEdge rectangleEdge0 = Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      assertEquals(RectangleEdge.RIGHT, rectangleEdge0);
      
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_COLUMN, spiderWebPlot0.getDataExtractOrder());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setBackgroundPaint(spiderWebPlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_COLUMN, spiderWebPlot0.getDataExtractOrder());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setBorderStroke(spiderWebPlot0.DEFAULT_LABEL_OUTLINE_STROKE);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_COLUMN, spiderWebPlot0.getDataExtractOrder());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_COLUMN, spiderWebPlot0.getDataExtractOrder());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertNotNull(bufferedImage0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      RectangleEdge rectangleEdge1 = RectangleEdge.LEFT;
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      ImageTitle imageTitle0 = new ImageTitle(bufferedImage0, rectangleEdge1, horizontalAlignment0, verticalAlignment0);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_COLUMN, spiderWebPlot0.getDataExtractOrder());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(RectangleEdge.LEFT, imageTitle0.getPosition());
      assertTrue(imageTitle0.getNotify());
      assertEquals(10.0, imageTitle0.getHeight(), 0.01);
      assertEquals(10.0, imageTitle0.getWidth(), 0.01);
      assertTrue(imageTitle0.isVisible());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(VerticalAlignment.CENTER, imageTitle0.getVerticalAlignment());
      assertEquals(HorizontalAlignment.LEFT, imageTitle0.getHorizontalAlignment());
      assertNotNull(imageTitle0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(imageTitle0.visible);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      
      Image image0 = bufferedImage0.getScaledInstance((-300), 10, 1086);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_COLUMN, spiderWebPlot0.getDataExtractOrder());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertNotNull(image0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      double double0 = imageTitle0.getContentXOffset();
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_COLUMN, spiderWebPlot0.getDataExtractOrder());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(RectangleEdge.LEFT, imageTitle0.getPosition());
      assertTrue(imageTitle0.getNotify());
      assertEquals(10.0, imageTitle0.getHeight(), 0.01);
      assertEquals(10.0, imageTitle0.getWidth(), 0.01);
      assertTrue(imageTitle0.isVisible());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(VerticalAlignment.CENTER, imageTitle0.getVerticalAlignment());
      assertEquals(HorizontalAlignment.LEFT, imageTitle0.getHorizontalAlignment());
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(imageTitle0.visible);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      
      jFreeChart0.setNotify(true);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_COLUMN, spiderWebPlot0.getDataExtractOrder());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_COLUMN, spiderWebPlot0.getDataExtractOrder());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertNotNull(sunGraphics2D0);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.1, 0.4);
      assertEquals(0.1, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.4, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = imageTitle0.arrange((Graphics2D) sunGraphics2D0, rectangleConstraint0);
      assertEquals(0.1, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.4, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_COLUMN, spiderWebPlot0.getDataExtractOrder());
      assertEquals(12.0, size2D0.getWidth(), 0.01);
      assertEquals(12.0, size2D0.getHeight(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(RectangleEdge.LEFT, imageTitle0.getPosition());
      assertTrue(imageTitle0.getNotify());
      assertEquals(10.0, imageTitle0.getHeight(), 0.01);
      assertEquals(10.0, imageTitle0.getWidth(), 0.01);
      assertTrue(imageTitle0.isVisible());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(VerticalAlignment.CENTER, imageTitle0.getVerticalAlignment());
      assertEquals(HorizontalAlignment.LEFT, imageTitle0.getHorizontalAlignment());
      assertNotNull(size2D0);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(12.0, size2D0.width, 0.01);
      assertEquals(12.0, size2D0.height, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(imageTitle0.visible);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      
      imageTitle0.setPadding(spiderWebPlot0.DEFAULT_INSETS);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_COLUMN, spiderWebPlot0.getDataExtractOrder());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(RectangleEdge.LEFT, imageTitle0.getPosition());
      assertTrue(imageTitle0.getNotify());
      assertEquals(10.0, imageTitle0.getHeight(), 0.01);
      assertEquals(10.0, imageTitle0.getWidth(), 0.01);
      assertTrue(imageTitle0.isVisible());
      assertEquals(8.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(4.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(VerticalAlignment.CENTER, imageTitle0.getVerticalAlignment());
      assertEquals(HorizontalAlignment.LEFT, imageTitle0.getHorizontalAlignment());
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(imageTitle0.visible);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      
      RectangleInsets rectangleInsets0 = imageTitle0.getPadding();
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_COLUMN, spiderWebPlot0.getDataExtractOrder());
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(RectangleEdge.LEFT, imageTitle0.getPosition());
      assertTrue(imageTitle0.getNotify());
      assertEquals(10.0, imageTitle0.getHeight(), 0.01);
      assertEquals(10.0, imageTitle0.getWidth(), 0.01);
      assertTrue(imageTitle0.isVisible());
      assertEquals(8.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(4.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(VerticalAlignment.CENTER, imageTitle0.getVerticalAlignment());
      assertEquals(HorizontalAlignment.LEFT, imageTitle0.getHorizontalAlignment());
      assertNotNull(rectangleInsets0);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(imageTitle0.visible);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      
      double double1 = imageTitle0.getHeight();
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_COLUMN, spiderWebPlot0.getDataExtractOrder());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(RectangleEdge.LEFT, imageTitle0.getPosition());
      assertTrue(imageTitle0.getNotify());
      assertEquals(10.0, imageTitle0.getHeight(), 0.01);
      assertEquals(10.0, imageTitle0.getWidth(), 0.01);
      assertTrue(imageTitle0.isVisible());
      assertEquals(8.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(4.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(VerticalAlignment.CENTER, imageTitle0.getVerticalAlignment());
      assertEquals(HorizontalAlignment.LEFT, imageTitle0.getHorizontalAlignment());
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals(10.0, double1, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(imageTitle0.visible);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      
      Size2D size2D1 = imageTitle0.arrange((Graphics2D) sunGraphics2D0);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_COLUMN, spiderWebPlot0.getDataExtractOrder());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(26.0, size2D1.getWidth(), 0.01);
      assertEquals(18.0, size2D1.getHeight(), 0.01);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(RectangleEdge.LEFT, imageTitle0.getPosition());
      assertTrue(imageTitle0.getNotify());
      assertEquals(10.0, imageTitle0.getHeight(), 0.01);
      assertEquals(10.0, imageTitle0.getWidth(), 0.01);
      assertTrue(imageTitle0.isVisible());
      assertEquals(8.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(4.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(VerticalAlignment.CENTER, imageTitle0.getVerticalAlignment());
      assertEquals(HorizontalAlignment.LEFT, imageTitle0.getHorizontalAlignment());
      assertNotNull(size2D1);
      assertNotSame(size2D1, size2D0);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(26.0, size2D1.width, 0.01);
      assertEquals(18.0, size2D1.height, 0.01);
      assertTrue(imageTitle0.visible);
      assertFalse(size2D1.equals((Object)size2D0));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      
      imageTitle0.setID((String) null);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_COLUMN, spiderWebPlot0.getDataExtractOrder());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(RectangleEdge.LEFT, imageTitle0.getPosition());
      assertTrue(imageTitle0.getNotify());
      assertEquals(10.0, imageTitle0.getHeight(), 0.01);
      assertEquals(10.0, imageTitle0.getWidth(), 0.01);
      assertTrue(imageTitle0.isVisible());
      assertEquals(8.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(4.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(VerticalAlignment.CENTER, imageTitle0.getVerticalAlignment());
      assertEquals(HorizontalAlignment.LEFT, imageTitle0.getHorizontalAlignment());
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(imageTitle0.visible);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      
      imageTitle0.setMargin((double) 10, 12.0, 0.0, 12.0);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_COLUMN, spiderWebPlot0.getDataExtractOrder());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(RectangleEdge.LEFT, imageTitle0.getPosition());
      assertTrue(imageTitle0.getNotify());
      assertEquals(20.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(10.0, imageTitle0.getHeight(), 0.01);
      assertEquals(10.0, imageTitle0.getWidth(), 0.01);
      assertTrue(imageTitle0.isVisible());
      assertNull(imageTitle0.getID());
      assertEquals(VerticalAlignment.CENTER, imageTitle0.getVerticalAlignment());
      assertEquals(HorizontalAlignment.LEFT, imageTitle0.getHorizontalAlignment());
      assertEquals(14.0, imageTitle0.getContentYOffset(), 0.01);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(imageTitle0.visible);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      
      BlockBorder blockBorder0 = new BlockBorder(imageTitle0.DEFAULT_PADDING, spiderWebPlot0.DEFAULT_LABEL_BACKGROUND_PAINT);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_COLUMN, spiderWebPlot0.getDataExtractOrder());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(RectangleEdge.LEFT, imageTitle0.getPosition());
      assertTrue(imageTitle0.getNotify());
      assertEquals(20.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(10.0, imageTitle0.getHeight(), 0.01);
      assertEquals(10.0, imageTitle0.getWidth(), 0.01);
      assertTrue(imageTitle0.isVisible());
      assertNull(imageTitle0.getID());
      assertEquals(VerticalAlignment.CENTER, imageTitle0.getVerticalAlignment());
      assertEquals(HorizontalAlignment.LEFT, imageTitle0.getHorizontalAlignment());
      assertEquals(14.0, imageTitle0.getContentYOffset(), 0.01);
      assertNotNull(blockBorder0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(imageTitle0.visible);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      
      boolean boolean0 = imageTitle0.equals(blockBorder0);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(TableOrder.BY_COLUMN, spiderWebPlot0.getDataExtractOrder());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(RectangleEdge.LEFT, imageTitle0.getPosition());
      assertTrue(imageTitle0.getNotify());
      assertEquals(20.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(10.0, imageTitle0.getHeight(), 0.01);
      assertEquals(10.0, imageTitle0.getWidth(), 0.01);
      assertTrue(imageTitle0.isVisible());
      assertNull(imageTitle0.getID());
      assertEquals(VerticalAlignment.CENTER, imageTitle0.getVerticalAlignment());
      assertEquals(HorizontalAlignment.LEFT, imageTitle0.getHorizontalAlignment());
      assertEquals(14.0, imageTitle0.getContentYOffset(), 0.01);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertFalse(boolean0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(imageTitle0.visible);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      assertEquals(HorizontalAlignment.RIGHT, dateTitle0.getHorizontalAlignment());
      assertNull(dateTitle0.getURLText());
      assertEquals(HorizontalAlignment.RIGHT, dateTitle0.getTextAlignment());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertEquals(RectangleEdge.BOTTOM, dateTitle0.getPosition());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertTrue(dateTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertTrue(dateTitle0.getNotify());
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertEquals(VerticalAlignment.CENTER, dateTitle0.getVerticalAlignment());
      assertNull(dateTitle0.getToolTipText());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertNull(dateTitle0.getID());
      assertNotNull(dateTitle0);
      assertTrue(dateTitle0.visible);
      
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-3325), (-3325));
      assertEquals((-3325), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-3325), waferMapDataset0.getMaxChipX());
      assertNotNull(waferMapDataset0);
      
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer((-3325), 0);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertNotNull(waferMapRenderer0);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      assertEquals((-3325), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-3325), waferMapDataset0.getMaxChipX());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertNotNull(waferMapPlot0);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart(waferMapPlot0);
      assertEquals((-3325), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-3325), waferMapDataset0.getMaxChipX());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertNotNull(jFreeChart0);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      dateTitle0.removeChangeListener(jFreeChart0);
      assertEquals(HorizontalAlignment.RIGHT, dateTitle0.getHorizontalAlignment());
      assertNull(dateTitle0.getURLText());
      assertEquals(HorizontalAlignment.RIGHT, dateTitle0.getTextAlignment());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertEquals(RectangleEdge.BOTTOM, dateTitle0.getPosition());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertTrue(dateTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertTrue(dateTitle0.getNotify());
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertEquals(VerticalAlignment.CENTER, dateTitle0.getVerticalAlignment());
      assertNull(dateTitle0.getToolTipText());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals((-3325), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-3325), waferMapDataset0.getMaxChipX());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(dateTitle0.visible);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      double double0 = dateTitle0.getContentYOffset();
      assertEquals(HorizontalAlignment.RIGHT, dateTitle0.getHorizontalAlignment());
      assertNull(dateTitle0.getURLText());
      assertEquals(HorizontalAlignment.RIGHT, dateTitle0.getTextAlignment());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertEquals(RectangleEdge.BOTTOM, dateTitle0.getPosition());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertTrue(dateTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertTrue(dateTitle0.getNotify());
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertEquals(VerticalAlignment.CENTER, dateTitle0.getVerticalAlignment());
      assertNull(dateTitle0.getToolTipText());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(1.0, double0, 0.01);
      assertTrue(dateTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer(779.59);
      assertEquals(779.59, xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01);
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBoxAndWhiskerRenderer0.getFillBox());
      assertFalse(xYBoxAndWhiskerRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBoxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYBoxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultCreateEntities());
      assertTrue(xYBoxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYBoxAndWhiskerRenderer0.getPassCount());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(xYBoxAndWhiskerRenderer0);
      
      LegendTitle legendTitle0 = new LegendTitle(xYBoxAndWhiskerRenderer0);
      assertEquals(779.59, xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01);
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBoxAndWhiskerRenderer0.getFillBox());
      assertFalse(xYBoxAndWhiskerRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBoxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYBoxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultCreateEntities());
      assertTrue(xYBoxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYBoxAndWhiskerRenderer0.getPassCount());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(RectangleEdge.TOP, legendTitle0.getPosition());
      assertNull(legendTitle0.getID());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertTrue(legendTitle0.isVisible());
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertTrue(legendTitle0.getNotify());
      assertNotNull(legendTitle0);
      assertTrue(legendTitle0.visible);
      
      double double0 = legendTitle0.getContentXOffset();
      assertEquals(779.59, xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01);
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBoxAndWhiskerRenderer0.getFillBox());
      assertFalse(xYBoxAndWhiskerRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBoxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYBoxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultCreateEntities());
      assertTrue(xYBoxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYBoxAndWhiskerRenderer0.getPassCount());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(RectangleEdge.TOP, legendTitle0.getPosition());
      assertNull(legendTitle0.getID());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertTrue(legendTitle0.isVisible());
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertTrue(legendTitle0.getNotify());
      assertEquals(1.0, double0, 0.01);
      assertTrue(legendTitle0.visible);
      
      legendTitle0.setBorder(1.0, 779.59, 169.91279, Double.POSITIVE_INFINITY);
      assertEquals(779.59, xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01);
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBoxAndWhiskerRenderer0.getFillBox());
      assertFalse(xYBoxAndWhiskerRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBoxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYBoxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBoxAndWhiskerRenderer0.getDefaultCreateEntities());
      assertTrue(xYBoxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYBoxAndWhiskerRenderer0.getPassCount());
      assertTrue(xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicLocation());
      assertEquals(RectangleAnchor.CENTER, legendTitle0.getLegendItemGraphicAnchor());
      assertEquals(RectangleEdge.TOP, legendTitle0.getPosition());
      assertNull(legendTitle0.getID());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertTrue(legendTitle0.isVisible());
      assertEquals(SortOrder.ASCENDING, legendTitle0.getSortOrder());
      assertEquals(HorizontalAlignment.CENTER, legendTitle0.getHorizontalAlignment());
      assertEquals(VerticalAlignment.CENTER, legendTitle0.getVerticalAlignment());
      assertEquals(2.0, legendTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(780.59, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(RectangleEdge.LEFT, legendTitle0.getLegendItemGraphicEdge());
      assertTrue(legendTitle0.getNotify());
      assertTrue(legendTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      assertEquals(0.0, abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertNull(abstractBlock0.getID());
      assertNotNull(abstractBlock0);
      
      abstractBlock0.setID("t<");
      assertEquals(0.0, abstractBlock0.getContentXOffset(), 0.01);
      assertEquals("t<", abstractBlock0.getID());
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      
      RectangleInsets rectangleInsets0 = abstractBlock0.getPadding();
      assertEquals(0.0, abstractBlock0.getContentXOffset(), 0.01);
      assertEquals("t<", abstractBlock0.getID());
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertNotNull(rectangleInsets0);
      
      double double0 = abstractBlock0.getHeight();
      assertEquals(0.0, abstractBlock0.getContentXOffset(), 0.01);
      assertEquals("t<", abstractBlock0.getID());
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      abstractBlock0.setPadding(0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, abstractBlock0.getContentXOffset(), 0.01);
      assertEquals("t<", abstractBlock0.getID());
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("frame");
      assertEquals(HorizontalAlignment.CENTER, shortTextTitle0.getHorizontalAlignment());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(VerticalAlignment.CENTER, shortTextTitle0.getVerticalAlignment());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals("frame", shortTextTitle0.getText());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, shortTextTitle0.getTextAlignment());
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertEquals(RectangleEdge.TOP, shortTextTitle0.getPosition());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNotNull(shortTextTitle0);
      assertTrue(shortTextTitle0.visible);
      
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("frame");
      assertEquals("frame", subCategoryAxis0.getLabel());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertNotNull(subCategoryAxis0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      RectangleInsets rectangleInsets0 = subCategoryAxis0.getTickLabelInsets();
      assertEquals("frame", subCategoryAxis0.getLabel());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertNotNull(rectangleInsets0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      shortTextTitle0.setMargin(rectangleInsets0);
      assertEquals(HorizontalAlignment.CENTER, shortTextTitle0.getHorizontalAlignment());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(VerticalAlignment.CENTER, shortTextTitle0.getVerticalAlignment());
      assertEquals(3.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(5.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals("frame", shortTextTitle0.getText());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(HorizontalAlignment.CENTER, shortTextTitle0.getTextAlignment());
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertEquals(RectangleEdge.TOP, shortTextTitle0.getPosition());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals("frame", subCategoryAxis0.getLabel());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(AxisLabelLocation.MIDDLE, subCategoryAxis0.getLabelLocation());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertTrue(shortTextTitle0.visible);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getDefaultItemLabelsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisible());
      assertNotNull(clusteredXYBarRenderer0);
      
      Color color0 = (Color)clusteredXYBarRenderer0.getDefaultOutlinePaint();
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getDefaultItemLabelsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertNotNull(color0);
      
      ColorBlock colorBlock0 = new ColorBlock(color0, (-2693.656534), (-286.9452));
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getDefaultItemLabelsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals((-286.9452), colorBlock0.getHeight(), 0.01);
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01);
      assertNull(colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01);
      assertEquals((-2693.656534), colorBlock0.getWidth(), 0.01);
      assertNotNull(colorBlock0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertTrue(range0.isNaNRange());
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((double) clusteredXYBarRenderer0.ZERO, range0);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getDefaultItemLabelsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertTrue(range0.isNaNRange());
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      RectangleConstraint rectangleConstraint1 = colorBlock0.toContentConstraint(rectangleConstraint0);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getDefaultItemLabelsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals((-286.9452), colorBlock0.getHeight(), 0.01);
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01);
      assertNull(colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01);
      assertEquals((-2693.656534), colorBlock0.getWidth(), 0.01);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertTrue(range0.isNaNRange());
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint1.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint1.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertNotNull(rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      
      colorBlock0.setID("/[p=;$;");
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getDefaultItemLabelsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals((-286.9452), colorBlock0.getHeight(), 0.01);
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01);
      assertEquals("/[p=;$;", colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01);
      assertEquals((-2693.656534), colorBlock0.getWidth(), 0.01);
      
      clusteredXYBarRenderer0.setDrawBarOutline(true);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getDefaultCreateEntities());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getDefaultItemLabelsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertTrue(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisible());
      
      double double0 = colorBlock0.calculateTotalHeight((double) clusteredXYBarRenderer0.ZERO);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getDefaultCreateEntities());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getDefaultItemLabelsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertTrue(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals((-286.9452), colorBlock0.getHeight(), 0.01);
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01);
      assertEquals("/[p=;$;", colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01);
      assertEquals((-2693.656534), colorBlock0.getWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = colorBlock0.trimToContentHeight((-90.0));
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getDefaultCreateEntities());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getDefaultItemLabelsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertTrue(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals((-286.9452), colorBlock0.getHeight(), 0.01);
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01);
      assertEquals("/[p=;$;", colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01);
      assertEquals((-2693.656534), colorBlock0.getWidth(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      colorBlock0.setBorder((-90.0), 0.0, 130.43092, (-364.63412501));
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getDefaultCreateEntities());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getDefaultItemLabelsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertTrue(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals((-286.9452), colorBlock0.getHeight(), 0.01);
      assertEquals((-90.0), colorBlock0.getContentYOffset(), 0.01);
      assertEquals("/[p=;$;", colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01);
      assertEquals((-2693.656534), colorBlock0.getWidth(), 0.01);
      
      double double2 = colorBlock0.trimToContentWidth((-3259.05));
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getDefaultCreateEntities());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getDefaultItemLabelsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertTrue(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals((-286.9452), colorBlock0.getHeight(), 0.01);
      assertEquals((-90.0), colorBlock0.getContentYOffset(), 0.01);
      assertEquals("/[p=;$;", colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01);
      assertEquals((-2693.656534), colorBlock0.getWidth(), 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      double double3 = colorBlock0.calculateTotalWidth((-90.0));
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getDefaultCreateEntities());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getDefaultItemLabelsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertTrue(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals((-286.9452), colorBlock0.getHeight(), 0.01);
      assertEquals((-90.0), colorBlock0.getContentYOffset(), 0.01);
      assertEquals("/[p=;$;", colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01);
      assertEquals((-2693.656534), colorBlock0.getWidth(), 0.01);
      assertEquals((-454.63412501), double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      double double4 = colorBlock0.getWidth();
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getDefaultCreateEntities());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getDefaultItemLabelsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertTrue(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals((-286.9452), colorBlock0.getHeight(), 0.01);
      assertEquals((-90.0), colorBlock0.getContentYOffset(), 0.01);
      assertEquals("/[p=;$;", colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01);
      assertEquals((-2693.656534), colorBlock0.getWidth(), 0.01);
      assertEquals((-2693.656534), double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      RectangleInsets rectangleInsets0 = colorBlock0.getMargin();
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getDefaultCreateEntities());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getDefaultItemLabelsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertTrue(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getDefaultSeriesVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals((-286.9452), colorBlock0.getHeight(), 0.01);
      assertEquals((-90.0), colorBlock0.getContentYOffset(), 0.01);
      assertEquals("/[p=;$;", colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01);
      assertEquals((-2693.656534), colorBlock0.getWidth(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertNotNull(rectangleInsets0);
      
      MultiTreeUI multiTreeUI0 = new MultiTreeUI();
      assertNotNull(multiTreeUI0);
      
      JTree jTree0 = new JTree();
      assertFalse(jTree0.getIgnoreRepaint());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertFalse(jTree0.isFocusCycleRoot());
      assertNotNull(jTree0);
      
      VolatileImage volatileImage0 = jTree0.createVolatileImage(2680, 793);
      assertFalse(jTree0.getIgnoreRepaint());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertFalse(jTree0.isFocusCycleRoot());
      assertNull(volatileImage0);
      
      // Undeclared exception!
      try { 
        multiTreeUI0.getPathBounds(jTree0, (TreePath) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertNull(abstractBlock0.getID());
      assertNotNull(abstractBlock0);
      
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(range0).constrain(anyDouble());
      doReturn(0.0).when(range0).getLowerBound();
      doReturn(1.0E-100, 0.0).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, (-2729.13));
      assertEquals((-2729.13), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertNotNull(rectangleConstraint0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = abstractBlock0.arrange(graphics2D0, rectangleConstraint0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertNull(abstractBlock0.getID());
      assertEquals((-2729.13), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals((-2729.13), size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertEquals((-2729.13), size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      
      Size2D size2D1 = rectangleConstraint0.calculateConstrainedSize(size2D0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertNull(abstractBlock0.getID());
      assertEquals((-2729.13), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals((-2729.13), size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      assertEquals((-2729.13), size2D1.getHeight(), 0.01);
      assertNotNull(size2D1);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D1, size2D0);
      assertEquals((-2729.13), size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertEquals((-2729.13), size2D1.height, 0.01);
      assertTrue(size2D1.equals((Object)size2D0));
      
      Size2D size2D2 = rectangleConstraint0.calculateConstrainedSize(size2D1);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertNull(abstractBlock0.getID());
      assertEquals((-2729.13), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals((-2729.13), size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      assertEquals((-2729.13), size2D1.getHeight(), 0.01);
      assertEquals((-2729.13), size2D2.getHeight(), 0.01);
      assertEquals(0.0, size2D2.getWidth(), 0.01);
      assertNotNull(size2D2);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D0, size2D2);
      assertNotSame(size2D1, size2D0);
      assertNotSame(size2D1, size2D2);
      assertNotSame(size2D2, size2D0);
      assertNotSame(size2D2, size2D1);
      assertEquals((-2729.13), size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertEquals((-2729.13), size2D1.height, 0.01);
      assertEquals((-2729.13), size2D2.height, 0.01);
      assertEquals(0.0, size2D2.width, 0.01);
      assertTrue(size2D0.equals((Object)size2D1));
      assertTrue(size2D1.equals((Object)size2D0));
      assertTrue(size2D2.equals((Object)size2D0));
      assertTrue(size2D2.equals((Object)size2D1));
      
      RectangleConstraint rectangleConstraint1 = abstractBlock0.toContentConstraint(rectangleConstraint0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertNull(abstractBlock0.getID());
      assertEquals((-2729.13), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint1.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint1.getWidthConstraintType());
      assertNotNull(rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      
      double double0 = abstractBlock0.calculateTotalHeight(1.0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertNull(abstractBlock0.getID());
      assertEquals(1.0, double0, 0.01);
      
      RectangleConstraint rectangleConstraint2 = RectangleConstraint.NONE;
      assertEquals(LengthConstraintType.NONE, rectangleConstraint2.getWidthConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint2.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertNotNull(rectangleConstraint2);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)abstractBlock0.getBounds();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertNull(abstractBlock0.getID());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      
      abstractBlock0.setMargin((-590.441294059), (-2729.13), 2737.916, 1.0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals((-2729.13), abstractBlock0.getContentXOffset(), 0.01);
      assertEquals((-590.441294059), abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertNull(abstractBlock0.getID());
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)abstractBlock0.trimPadding(rectangle2D_Float0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals((-2729.13), abstractBlock0.getContentXOffset(), 0.01);
      assertEquals((-590.441294059), abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertNull(abstractBlock0.getID());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Float1);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      
      double double1 = abstractBlock0.getContentXOffset();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals((-2729.13), abstractBlock0.getContentXOffset(), 0.01);
      assertEquals((-590.441294059), abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertNull(abstractBlock0.getID());
      assertEquals((-2729.13), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      abstractBlock0.setWidth(1598.8024);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals((-2729.13), abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(1598.8024, abstractBlock0.getWidth(), 0.01);
      assertEquals((-590.441294059), abstractBlock0.getContentYOffset(), 0.01);
      assertNull(abstractBlock0.getID());
      
      abstractBlock0.setID("+k3F\"R$\"UI");
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals((-2729.13), abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(1598.8024, abstractBlock0.getWidth(), 0.01);
      assertEquals("+k3F\"R$\"UI", abstractBlock0.getID());
      assertEquals((-590.441294059), abstractBlock0.getContentYOffset(), 0.01);
      
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 178.91997448345532, (-590.441294059), 2707.86227719156, (-2729.13));
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(2707.86227719156, rectangleInsets0.getBottom(), 0.01);
      assertEquals((-2729.13), rectangleInsets0.getRight(), 0.01);
      assertEquals((-590.441294059), rectangleInsets0.getLeft(), 0.01);
      assertEquals(178.91997448345532, rectangleInsets0.getTop(), 0.01);
      assertNotNull(rectangleInsets0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangleInsets0.createOutsetRectangle((Rectangle2D) rectangle2D_Float1, true, true);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals((-2729.13), abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(1598.8024, abstractBlock0.getWidth(), 0.01);
      assertEquals("+k3F\"R$\"UI", abstractBlock0.getID());
      assertEquals((-590.441294059), abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(2707.86227719156, rectangleInsets0.getBottom(), 0.01);
      assertEquals((-2729.13), rectangleInsets0.getRight(), 0.01);
      assertEquals((-590.441294059), rectangleInsets0.getLeft(), 0.01);
      assertEquals(178.91997448345532, rectangleInsets0.getTop(), 0.01);
      assertEquals((-1069.3443529705), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1264.4711513540526, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(590.441294059, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2707.86227719156, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-2729.13), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-178.91997448345532), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertEquals(2886.7822516750157, rectangle2D_Double0.height, 0.01);
      assertEquals(590.441294059, rectangle2D_Double0.x, 0.01);
      assertEquals((-3319.571294059), rectangle2D_Double0.width, 0.01);
      assertEquals((-178.91997448345532), rectangle2D_Double0.y, 0.01);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangleInsets0.createOutsetRectangle((Rectangle2D) rectangle2D_Double0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals((-2729.13), abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(1598.8024, abstractBlock0.getWidth(), 0.01);
      assertEquals("+k3F\"R$\"UI", abstractBlock0.getID());
      assertEquals((-590.441294059), abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(2707.86227719156, rectangleInsets0.getBottom(), 0.01);
      assertEquals((-2729.13), rectangleInsets0.getRight(), 0.01);
      assertEquals((-590.441294059), rectangleInsets0.getLeft(), 0.01);
      assertEquals(178.91997448345532, rectangleInsets0.getTop(), 0.01);
      assertEquals((-1069.3443529705), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1264.4711513540526, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(590.441294059, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2707.86227719156, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-2729.13), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-178.91997448345532), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-357.83994896691064), rectangle2D_Double1.getMinY(), 0.01);
      assertEquals((-5458.26), rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(1180.882588118, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(5415.72455438312, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals((-2138.688705941), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(2528.942302708105, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertEquals(2886.7822516750157, rectangle2D_Double0.height, 0.01);
      assertEquals(590.441294059, rectangle2D_Double0.x, 0.01);
      assertEquals((-3319.571294059), rectangle2D_Double0.width, 0.01);
      assertEquals((-178.91997448345532), rectangle2D_Double0.y, 0.01);
      assertEquals((-6639.142588118), rectangle2D_Double1.width, 0.01);
      assertEquals(1180.882588118, rectangle2D_Double1.x, 0.01);
      assertEquals(5773.564503350031, rectangle2D_Double1.height, 0.01);
      assertEquals((-357.83994896691064), rectangle2D_Double1.y, 0.01);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      abstractBlock0.setMargin(rectangleInsets0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(178.91997448345532, abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(1598.8024, abstractBlock0.getWidth(), 0.01);
      assertEquals("+k3F\"R$\"UI", abstractBlock0.getID());
      assertEquals((-590.441294059), abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(2707.86227719156, rectangleInsets0.getBottom(), 0.01);
      assertEquals((-2729.13), rectangleInsets0.getRight(), 0.01);
      assertEquals((-590.441294059), rectangleInsets0.getLeft(), 0.01);
      assertEquals(178.91997448345532, rectangleInsets0.getTop(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float2 = (Rectangle2D.Float)abstractBlock0.getBounds();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(178.91997448345532, abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(1598.8024, abstractBlock0.getWidth(), 0.01);
      assertEquals("+k3F\"R$\"UI", abstractBlock0.getID());
      assertEquals((-590.441294059), abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Float2);
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.y, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = abstractBlock0.equals(object0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(178.91997448345532, abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(1598.8024, abstractBlock0.getWidth(), 0.01);
      assertEquals("+k3F\"R$\"UI", abstractBlock0.getID());
      assertEquals((-590.441294059), abstractBlock0.getContentXOffset(), 0.01);
      assertFalse(boolean0);
      
      double double2 = abstractBlock0.trimToContentHeight(Double.POSITIVE_INFINITY);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(178.91997448345532, abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(1598.8024, abstractBlock0.getWidth(), 0.01);
      assertEquals("+k3F\"R$\"UI", abstractBlock0.getID());
      assertEquals((-590.441294059), abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      assertEquals(HorizontalAlignment.CENTER, compositeTitle0.getHorizontalAlignment());
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01);
      assertNull(compositeTitle0.getID());
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
      assertEquals(RectangleEdge.TOP, compositeTitle0.getPosition());
      assertTrue(compositeTitle0.getNotify());
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(VerticalAlignment.CENTER, compositeTitle0.getVerticalAlignment());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01);
      assertTrue(compositeTitle0.isVisible());
      assertNotNull(compositeTitle0);
      assertTrue(compositeTitle0.visible);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1233, 10, chartRenderingInfo0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(2, standardEntityCollection0.getEntityCount());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1233, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(1233, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertNotNull(bufferedImage0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(2, standardEntityCollection0.getEntityCount());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1233, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(1233, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertNotNull(sunGraphics2D0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(255, sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.5F, 0.5F, (-1.0), (-1291.68969303214));
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.5, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-1291.18969303214), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-0.5), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.5, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-645.34484651607), rectangle2D_Double0.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.5, rectangle2D_Double0.y, 0.01);
      assertEquals(0.5, rectangle2D_Double0.x, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.width, 0.01);
      assertEquals((-1291.68969303214), rectangle2D_Double0.height, 0.01);
      
      Collection collection0 = standardEntityCollection0.getEntities();
      assertEquals(2, standardEntityCollection0.getEntityCount());
      assertNotNull(collection0);
      
      Rectangle2D.union(rectangle2D_Double0, rectangle2D_Double0, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-0.5), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.5, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.5, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-645.34484651607), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1291.18969303214), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-0.5), rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-1291.18969303214), rectangle2D_Double0.y, 0.01);
      assertEquals(1291.68969303214, rectangle2D_Double0.height, 0.01);
      
      compositeTitle0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) rectangle2D_Double0);
      assertEquals(HorizontalAlignment.CENTER, compositeTitle0.getHorizontalAlignment());
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01);
      assertNull(compositeTitle0.getID());
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
      assertEquals(RectangleEdge.TOP, compositeTitle0.getPosition());
      assertTrue(compositeTitle0.getNotify());
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(VerticalAlignment.CENTER, compositeTitle0.getVerticalAlignment());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01);
      assertTrue(compositeTitle0.isVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(2, standardEntityCollection0.getEntityCount());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1233, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(1233, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.5, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-0.5), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-0.5), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-645.34484651607), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1290.18969303214), rectangle2D_Double0.getMinY(), 0.01);
      assertTrue(compositeTitle0.visible);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(255, sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0.5, rectangle2D_Double0.x, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.width, 0.01);
      assertEquals((-1290.18969303214), rectangle2D_Double0.y, 0.01);
      assertEquals(1289.68969303214, rectangle2D_Double0.height, 0.01);
      
      compositeTitle0.visible = true;
      assertEquals(HorizontalAlignment.CENTER, compositeTitle0.getHorizontalAlignment());
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01);
      assertNull(compositeTitle0.getID());
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
      assertEquals(RectangleEdge.TOP, compositeTitle0.getPosition());
      assertTrue(compositeTitle0.getNotify());
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(VerticalAlignment.CENTER, compositeTitle0.getVerticalAlignment());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01);
      assertTrue(compositeTitle0.isVisible());
      
      Rectangle rectangle0 = new Rectangle();
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      
      Point point0 = rectangle0.getLocation();
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertNotNull(point0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      
      Point point1 = (Point)point0.clone();
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertNotNull(point1);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertTrue(point1.equals((Object)point0));
      
      point0.y = 760;
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(760.0, point0.getY(), 0.01);
      
      point0.setLocation(0, (-2972));
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-2972.0), point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertNotSame(point0, point1);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals((-2972), point0.y);
      assertEquals(0, point0.x);
      assertFalse(point0.equals((Object)point1));
      
      Point point2 = (Point)point0.clone();
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals((-2972.0), point2.getY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-2972.0), point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertNotNull(point2);
      assertNotSame(point2, point1);
      assertNotSame(point2, point0);
      assertNotSame(point0, point2);
      assertNotSame(point0, point1);
      assertEquals(0, point2.x);
      assertEquals((-2972), point2.y);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals((-2972), point0.y);
      assertEquals(0, point0.x);
      assertFalse(point2.equals((Object)point1));
      assertTrue(point2.equals((Object)point0));
      assertFalse(point0.equals((Object)point1));
      
      rectangle0.add(point0);
      assertTrue(rectangle0.isEmpty());
      assertEquals(2972.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-2972.0), rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals((-2972.0), rectangle0.getMinY(), 0.01);
      assertEquals((-1486.0), rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-2972.0), point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertNotSame(point0, point2);
      assertNotSame(point0, point1);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals((-2972), rectangle0.y);
      assertEquals(2972, rectangle0.height);
      assertEquals((-2972), point0.y);
      assertEquals(0, point0.x);
      assertTrue(point0.equals((Object)point2));
      assertFalse(point0.equals((Object)point1));
      
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      compositeTitle0.setPosition(rectangleEdge0);
      assertEquals(HorizontalAlignment.CENTER, compositeTitle0.getHorizontalAlignment());
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01);
      assertNull(compositeTitle0.getID());
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
      assertEquals(RectangleEdge.TOP, compositeTitle0.getPosition());
      assertTrue(compositeTitle0.getNotify());
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(VerticalAlignment.CENTER, compositeTitle0.getVerticalAlignment());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01);
      assertTrue(compositeTitle0.isVisible());
      assertTrue(compositeTitle0.visible);
      
      compositeTitle0.setBounds(rectangle0);
      assertEquals(HorizontalAlignment.CENTER, compositeTitle0.getHorizontalAlignment());
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01);
      assertNull(compositeTitle0.getID());
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
      assertEquals(RectangleEdge.TOP, compositeTitle0.getPosition());
      assertTrue(compositeTitle0.getNotify());
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(VerticalAlignment.CENTER, compositeTitle0.getVerticalAlignment());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01);
      assertTrue(compositeTitle0.isVisible());
      assertTrue(rectangle0.isEmpty());
      assertEquals(2972.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-2972.0), rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals((-2972.0), rectangle0.getMinY(), 0.01);
      assertEquals((-1486.0), rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(compositeTitle0.visible);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals((-2972), rectangle0.y);
      assertEquals(2972, rectangle0.height);
      
      compositeTitle0.setWidth((-1.5031314344787636));
      assertEquals(HorizontalAlignment.CENTER, compositeTitle0.getHorizontalAlignment());
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01);
      assertNull(compositeTitle0.getID());
      assertEquals(RectangleEdge.TOP, compositeTitle0.getPosition());
      assertEquals((-1.5031314344787636), compositeTitle0.getWidth(), 0.01);
      assertTrue(compositeTitle0.getNotify());
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(VerticalAlignment.CENTER, compositeTitle0.getVerticalAlignment());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01);
      assertTrue(compositeTitle0.isVisible());
      assertTrue(compositeTitle0.visible);
      
      BlockBorder blockBorder0 = (BlockBorder)compositeTitle0.getFrame();
      assertEquals(HorizontalAlignment.CENTER, compositeTitle0.getHorizontalAlignment());
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01);
      assertNull(compositeTitle0.getID());
      assertEquals(RectangleEdge.TOP, compositeTitle0.getPosition());
      assertEquals((-1.5031314344787636), compositeTitle0.getWidth(), 0.01);
      assertTrue(compositeTitle0.getNotify());
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(VerticalAlignment.CENTER, compositeTitle0.getVerticalAlignment());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01);
      assertTrue(compositeTitle0.isVisible());
      assertNotNull(blockBorder0);
      assertTrue(compositeTitle0.visible);
      
      BlockBorder blockBorder1 = (BlockBorder)compositeTitle0.getFrame();
      assertEquals(HorizontalAlignment.CENTER, compositeTitle0.getHorizontalAlignment());
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01);
      assertNull(compositeTitle0.getID());
      assertEquals(RectangleEdge.TOP, compositeTitle0.getPosition());
      assertEquals((-1.5031314344787636), compositeTitle0.getWidth(), 0.01);
      assertTrue(compositeTitle0.getNotify());
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(VerticalAlignment.CENTER, compositeTitle0.getVerticalAlignment());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01);
      assertTrue(compositeTitle0.isVisible());
      assertNotNull(blockBorder1);
      assertSame(blockBorder1, blockBorder0);
      assertTrue(compositeTitle0.visible);
      
      compositeTitle0.setWidth(1387.86);
      assertEquals(HorizontalAlignment.CENTER, compositeTitle0.getHorizontalAlignment());
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01);
      assertNull(compositeTitle0.getID());
      assertEquals(1387.86, compositeTitle0.getWidth(), 0.01);
      assertEquals(RectangleEdge.TOP, compositeTitle0.getPosition());
      assertTrue(compositeTitle0.getNotify());
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(VerticalAlignment.CENTER, compositeTitle0.getVerticalAlignment());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01);
      assertTrue(compositeTitle0.isVisible());
      assertTrue(compositeTitle0.visible);
      
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertNotNull(defaultCaret0);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.height);
      
      BlockBorder blockBorder2 = (BlockBorder)compositeTitle0.getFrame();
      assertEquals(HorizontalAlignment.CENTER, compositeTitle0.getHorizontalAlignment());
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01);
      assertNull(compositeTitle0.getID());
      assertEquals(1387.86, compositeTitle0.getWidth(), 0.01);
      assertEquals(RectangleEdge.TOP, compositeTitle0.getPosition());
      assertTrue(compositeTitle0.getNotify());
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(VerticalAlignment.CENTER, compositeTitle0.getVerticalAlignment());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01);
      assertTrue(compositeTitle0.isVisible());
      assertNotNull(blockBorder2);
      assertSame(blockBorder2, blockBorder0);
      assertSame(blockBorder2, blockBorder1);
      assertTrue(compositeTitle0.visible);
      
      Rectangle rectangle1 = (Rectangle)compositeTitle0.getBounds();
      assertEquals(HorizontalAlignment.CENTER, compositeTitle0.getHorizontalAlignment());
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01);
      assertNull(compositeTitle0.getID());
      assertEquals(1387.86, compositeTitle0.getWidth(), 0.01);
      assertEquals(RectangleEdge.TOP, compositeTitle0.getPosition());
      assertTrue(compositeTitle0.getNotify());
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(VerticalAlignment.CENTER, compositeTitle0.getVerticalAlignment());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01);
      assertTrue(compositeTitle0.isVisible());
      assertEquals((-1486.0), rectangle1.getCenterY(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(2972.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals((-2972.0), rectangle1.getMinY(), 0.01);
      assertEquals((-2972.0), rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertNotNull(rectangle1);
      assertSame(rectangle1, rectangle0);
      assertTrue(compositeTitle0.visible);
      assertEquals((-2972), rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertEquals(2972, rectangle1.height);
      assertEquals(0, rectangle1.width);
      
      RectangleInsets rectangleInsets0 = compositeTitle0.getPadding();
      assertEquals(HorizontalAlignment.CENTER, compositeTitle0.getHorizontalAlignment());
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01);
      assertNull(compositeTitle0.getID());
      assertEquals(1387.86, compositeTitle0.getWidth(), 0.01);
      assertEquals(RectangleEdge.TOP, compositeTitle0.getPosition());
      assertTrue(compositeTitle0.getNotify());
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(VerticalAlignment.CENTER, compositeTitle0.getVerticalAlignment());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01);
      assertTrue(compositeTitle0.isVisible());
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertNotNull(rectangleInsets0);
      assertTrue(compositeTitle0.visible);
      
      SunGraphics2D sunGraphics2D1 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(2, standardEntityCollection0.getEntityCount());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1233, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(1233, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertNotNull(sunGraphics2D1);
      assertNotSame(sunGraphics2D1, sunGraphics2D0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0, sunGraphics2D1.constrainX);
      assertEquals(1, sunGraphics2D1.antialiasHint);
      assertEquals(0, sunGraphics2D1.clipState);
      assertEquals(255, sunGraphics2D1.pixel);
      assertEquals(1, sunGraphics2D1.interpolationType);
      assertEquals(0, sunGraphics2D1.constrainY);
      assertEquals(0, sunGraphics2D1.strokeHint);
      assertEquals(0, sunGraphics2D1.textAntialiasHint);
      assertEquals(0, sunGraphics2D1.renderHint);
      assertEquals((-1), sunGraphics2D1.eargb);
      assertEquals(140, sunGraphics2D1.lcdTextContrast);
      assertEquals(0, sunGraphics2D1.transX);
      assertEquals(0, sunGraphics2D1.compositeState);
      assertEquals(0, sunGraphics2D1.transY);
      assertEquals(0, sunGraphics2D1.transformState);
      assertEquals(0, sunGraphics2D1.strokeState);
      assertEquals(0, sunGraphics2D1.paintState);
      assertFalse(sunGraphics2D1.equals((Object)sunGraphics2D0));
      
      Size2D size2D0 = compositeTitle0.arrange((Graphics2D) sunGraphics2D1);
      assertEquals(HorizontalAlignment.CENTER, compositeTitle0.getHorizontalAlignment());
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01);
      assertNull(compositeTitle0.getID());
      assertEquals(1387.86, compositeTitle0.getWidth(), 0.01);
      assertEquals(RectangleEdge.TOP, compositeTitle0.getPosition());
      assertTrue(compositeTitle0.getNotify());
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(VerticalAlignment.CENTER, compositeTitle0.getVerticalAlignment());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01);
      assertTrue(compositeTitle0.isVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(2, standardEntityCollection0.getEntityCount());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1233, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(1233, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2.0, size2D0.getHeight(), 0.01);
      assertEquals(2.0, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertNotSame(sunGraphics2D1, sunGraphics2D0);
      assertTrue(compositeTitle0.visible);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0, sunGraphics2D1.constrainX);
      assertEquals(1, sunGraphics2D1.antialiasHint);
      assertEquals(0, sunGraphics2D1.clipState);
      assertEquals(255, sunGraphics2D1.pixel);
      assertEquals(1, sunGraphics2D1.interpolationType);
      assertEquals(0, sunGraphics2D1.constrainY);
      assertEquals(0, sunGraphics2D1.strokeHint);
      assertEquals(0, sunGraphics2D1.textAntialiasHint);
      assertEquals(0, sunGraphics2D1.renderHint);
      assertEquals((-1), sunGraphics2D1.eargb);
      assertEquals(140, sunGraphics2D1.lcdTextContrast);
      assertEquals(0, sunGraphics2D1.transX);
      assertEquals(0, sunGraphics2D1.compositeState);
      assertEquals(0, sunGraphics2D1.transY);
      assertEquals(0, sunGraphics2D1.transformState);
      assertEquals(0, sunGraphics2D1.strokeState);
      assertEquals(0, sunGraphics2D1.paintState);
      assertEquals(2.0, size2D0.width, 0.01);
      assertEquals(2.0, size2D0.height, 0.01);
      assertFalse(sunGraphics2D1.equals((Object)sunGraphics2D0));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Font font0 = PeriodAxisLabelInfo.DEFAULT_FONT;
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertNotNull(font0);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.0);
      assertTrue(defaultValueDataset0.getNotify());
      assertNotNull(defaultValueDataset0);
      
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.isNotify());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(meterPlot0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      boolean boolean0 = defaultValueDataset0.hasListener(meterPlot0);
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.isNotify());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(boolean0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Font font1 = font0.deriveFont((float) 10);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font1.hasUniformLineMetrics());
      assertEquals(0, font1.getStyle());
      assertTrue(font1.isPlain());
      assertFalse(font1.isItalic());
      assertEquals("SansSerif", font1.getName());
      assertFalse(font1.isTransformed());
      assertFalse(font1.isBold());
      assertEquals(10, font1.getSize());
      assertFalse(font1.hasLayoutAttributes());
      assertEquals(10.0F, font1.getSize2D(), 0.01F);
      assertNotNull(font1);
      assertNotSame(font0, font1);
      assertNotSame(font1, font0);
      assertTrue(font1.equals((Object)font0));
      
      JFreeChart jFreeChart0 = new JFreeChart("", font0, meterPlot0, false);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.isNotify());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNotNull(jFreeChart0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(font0.equals((Object)font1));
      
      DefaultValueDataset defaultValueDataset1 = (DefaultValueDataset)defaultValueDataset0.clone();
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(defaultValueDataset1.getNotify());
      assertNotNull(defaultValueDataset1);
      assertNotSame(defaultValueDataset0, defaultValueDataset1);
      assertNotSame(defaultValueDataset1, defaultValueDataset0);
      assertTrue(defaultValueDataset1.equals((Object)defaultValueDataset0));
      
      jFreeChart0.setElementHinting(false);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.isNotify());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNotSame(font0, font1);
      assertNotSame(defaultValueDataset0, defaultValueDataset1);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(font0.equals((Object)font1));
      assertTrue(defaultValueDataset0.equals((Object)defaultValueDataset1));
      
      ChartProgressEvent chartProgressEvent0 = new ChartProgressEvent(object0, jFreeChart0, (-1), (-2538));
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.isNotify());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals((-2538), chartProgressEvent0.getPercent());
      assertEquals((-1), chartProgressEvent0.getType());
      assertNotNull(chartProgressEvent0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(2, ChartProgressEvent.DRAWING_FINISHED);
      assertEquals(1, ChartProgressEvent.DRAWING_STARTED);
      assertTrue(font0.equals((Object)font1));
      assertTrue(defaultValueDataset0.equals((Object)defaultValueDataset1));
      
      float float0 = font0.getItalicAngle();
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertNotSame(font0, font1);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(font0.equals((Object)font1));
      
      JFreeChart jFreeChart1 = chartProgressEvent0.getChart();
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertTrue(defaultValueDataset0.getNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.isSubplot());
      assertEquals(DialShape.CIRCLE, meterPlot0.getDialShape());
      assertTrue(meterPlot0.isOutlineVisible());
      assertTrue(meterPlot0.isNotify());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertFalse(meterPlot0.fetchElementHintingFlag());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals((-2538), chartProgressEvent0.getPercent());
      assertEquals((-1), chartProgressEvent0.getType());
      assertTrue(jFreeChart1.getAntiAlias());
      assertNull(jFreeChart1.getID());
      assertEquals(0, jFreeChart1.getSubtitleCount());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart1.getElementHinting());
      assertTrue(jFreeChart1.isNotify());
      assertNotNull(jFreeChart1);
      assertNotSame(font0, font1);
      assertNotSame(defaultValueDataset0, defaultValueDataset1);
      assertSame(jFreeChart0, jFreeChart1);
      assertSame(jFreeChart1, jFreeChart0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(2, ChartProgressEvent.DRAWING_FINISHED);
      assertEquals(1, ChartProgressEvent.DRAWING_STARTED);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(font0.equals((Object)font1));
      assertTrue(defaultValueDataset0.equals((Object)defaultValueDataset1));
      
      // Undeclared exception!
      try { 
        jFreeChart1.getSubtitle(2372);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      BlockContainer blockContainer0 = new BlockContainer();
      compositeTitle0.setTitleContainer(blockContainer0);
      blockContainer0.equals(compositeTitle0);
      compositeTitle0.setBorder((-1629.0), 324.5, 324.5, 1.0);
      compositeTitle0.setVisible(true);
      compositeTitle0.setTitleContainer(blockContainer0);
      compositeTitle0.getID();
      compositeTitle0.getID();
      compositeTitle0.setWidth(844.79);
      compositeTitle0.clone();
      compositeTitle0.getContentXOffset();
      blockContainer0.getMargin();
      compositeTitle0.getContentYOffset();
      blockContainer0.getHeight();
      double double0 = compositeTitle0.getHeight();
      assertEquals(844.79, compositeTitle0.getWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = null;
      try {
        grayPaintScale0 = new GrayPaintScale(Double.POSITIVE_INFINITY, 0.0, 2856);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires lowerBound < upperBound.
         //
         verifyException("org.jfree.chart.renderer.GrayPaintScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.y2 = 0.5F;
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)line2D_Float0.getBounds2D();
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)blockContainer0.trimMargin(rectangle2D_Float0);
      blockContainer0.clone();
      blockContainer0.calculateTotalHeight(0.0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, (-151.7839582392), 0.0, 0.0);
      rectangle2D_Double0.height = 1381.53558;
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)blockContainer0.trimBorder(rectangle2D_Double0);
      rectangle2D_Float0.y = 0.0F;
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      ellipse2D_Double0.setFrame((Rectangle2D) rectangle2D_Double1);
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)ellipse2D_Double0.getBounds2D();
      rectangle2D_Double2.clone();
      rectangle2D_Double0.setFrame((Rectangle2D) rectangle2D_Double2);
      rectangle2D_Double0.intersects((Rectangle2D) rectangle2D_Float1);
      RectangleInsets rectangleInsets0 = blockContainer0.getMargin();
      blockContainer0.equals(rectangleInsets0);
      blockContainer0.trimPadding(rectangle2D_Double0);
      rectangle2D_Float1.intersects((Rectangle2D) rectangle2D_Double1);
      rectangleInsets0.createOutsetRectangle((Rectangle2D) rectangle2D_Float0, false, false);
      blockContainer0.trimToContentHeight(0.0);
      blockContainer0.getPadding();
      blockContainer0.setPadding(rectangleInsets0);
      blockContainer0.getContentXOffset();
      blockContainer0.setWidth(1.0);
      blockContainer0.setPadding((-1624.42789935), 0.0, (double) 0.5F, 0.0);
      double double0 = blockContainer0.calculateTotalWidth(0.0);
      assertEquals((-1624.42789935), blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }
}
