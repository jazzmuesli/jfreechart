/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:34:52 GMT 2019
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.ui.Size2D;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmptyBlock_ESTest extends EmptyBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-237.2536902054675), (-237.2536902054675));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = emptyBlock0.getBounds();
      emptyBlock0.draw(graphics2D0, rectangle2D0, (Object) rectangle2D0);
      assertEquals((-237.2536902054675), emptyBlock0.getWidth(), 0.01);
      assertEquals((-237.2536902054675), emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 0.0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0, 0.0).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      RectangleConstraint rectangleConstraint1 = emptyBlock0.toContentConstraint(rectangleConstraint0);
      emptyBlock0.arrange(graphics2D0, rectangleConstraint1);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01);
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(1.0, 2470.149895);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0, 0.0).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn(2470.149895).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      RectangleConstraint rectangleConstraint1 = emptyBlock0.toContentConstraint(rectangleConstraint0);
      Size2D size2D0 = emptyBlock0.arrange(graphics2D0, rectangleConstraint1);
      assertEquals(2470.149895, size2D0.height, 0.01);
      assertEquals(1.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-237.2536902054675), (-237.2536902054675));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0, 0.0).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((-1172.2195317074)).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn((double)0.0F).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      RectangleConstraint rectangleConstraint1 = emptyBlock0.toContentConstraint(rectangleConstraint0);
      Size2D size2D0 = emptyBlock0.arrange(graphics2D0, rectangleConstraint1);
      assertEquals((-237.2536902054675), size2D0.width, 0.01);
      assertEquals((-237.2536902054675), size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-1332.3777), (-1332.3777));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        emptyBlock0.draw(graphics2D0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(127.5271529767, 127.5271529767);
      Rectangle2D rectangle2D0 = emptyBlock0.getBounds();
      // Undeclared exception!
      try { 
        emptyBlock0.draw((Graphics2D) null, rectangle2D0, (Object) "#|8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 0.0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = emptyBlock0.getBounds();
      emptyBlock0.draw(graphics2D0, rectangle2D0);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01);
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 0.0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        emptyBlock0.arrange(graphics2D0, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.EmptyBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-237.2536902054675), (-237.2536902054675));
      EmptyBlock emptyBlock1 = (EmptyBlock)emptyBlock0.clone();
      assertEquals((-237.2536902054675), emptyBlock1.getWidth(), 0.01);
      assertEquals((-237.2536902054675), emptyBlock1.getHeight(), 0.01);
  }
}
