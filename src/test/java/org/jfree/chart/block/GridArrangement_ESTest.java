/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:16:48 GMT 2019
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.Raster;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.ChartHints;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.CenterArrangement;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.block.GridArrangement;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.ui.Size2D;
import org.jfree.data.Range;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Month;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GridArrangement_ESTest extends GridArrangement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-4733), 0);
      BlockContainer blockContainer0 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      defaultMultiValueCategoryDataset0.setNotify(false);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      gridArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      BlockContainer blockContainer1 = new BlockContainer(gridArrangement0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-4733);
      floatArray0[2] = (float) (-4733);
      floatArray0[3] = (float) 0;
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[8];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)6;
      int[] intArray0 = new int[0];
      gridArrangement0.arrangeRN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(326, (byte) (-6), intArray0, 0, true, 0, 340);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(90, 90);
      Object object0 = new Object();
      gridArrangement0.equals(object0);
      BlockContainer blockContainer0 = new BlockContainer();
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      Range range2 = Range.expandToInclude(range1, (-1.0));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(90, range2);
      gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      BlockContainer blockContainer1 = new BlockContainer(gridArrangement0);
      blockContainer1.add((Block) blockContainer0);
      gridArrangement0.arrange(blockContainer1, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, (-4733));
      BlockContainer blockContainer0 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      gridArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      BlockContainer blockContainer1 = new BlockContainer(gridArrangement0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-4733);
      floatArray0[1] = (float) (-4733);
      floatArray0[2] = (float) (-4733);
      floatArray0[3] = (float) 0;
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[8];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)6;
      int[] intArray0 = new int[0];
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(326, (byte) (-6), intArray0, 0, true, 0, 340);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-840), 363);
      BlockContainer blockContainer0 = new BlockContainer();
      Range range0 = new Range(363, 363);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-840), range0, lengthConstraintType0, 363, range0, lengthConstraintType0);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      gridArrangement0.arrangeNR(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      gridArrangement0.add((Block) null, (Object) null);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      gridArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      blockContainer0.setBorder((-2459.7), 10.0, 950.5, 0.0);
      gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      gridArrangement0.equals((Object) null);
      gridArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(352, 352);
      BlockContainer blockContainer0 = new BlockContainer();
      Graphics2D graphics2D0 = null;
      Month month0 = new Month(1, 1);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(352, 1, month0);
      dynamicTimeSeriesCollection0.getRangeBounds(false);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, 1);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      blockContainer0.getBlocks();
      blockContainer0.add((Block) blockContainer0);
      RectangleConstraint rectangleConstraint2 = null;
      // Undeclared exception!
      gridArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, rectangleConstraint1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(108, 108);
      Object object0 = new Object();
      gridArrangement0.equals(object0);
      BlockContainer blockContainer0 = new BlockContainer();
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      Range range2 = Range.expandToInclude(range1, (-1.0));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(108, range2);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      BlockContainer blockContainer1 = new BlockContainer(gridArrangement0);
      blockContainer1.add((Block) blockContainer0);
      gridArrangement0.arrange(blockContainer1, (Graphics2D) null, rectangleConstraint1);
      System.setCurrentTimeMillis(1000L);
      gridArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(1605, (-5));
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(38.5436376397726, (-1126.865));
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(90, 90);
      Object object0 = new Object();
      gridArrangement0.equals(object0);
      BlockContainer blockContainer0 = new BlockContainer();
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      Range range2 = Range.expandToInclude(range1, (-1.0));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(90, range2);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      BlockContainer blockContainer1 = new BlockContainer(gridArrangement0);
      gridArrangement0.arrange(blockContainer1, (Graphics2D) null, rectangleConstraint1);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      range2.toString();
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.FIXED;
      RectangleConstraint rectangleConstraint2 = new RectangleConstraint((-1.0), range0, lengthConstraintType0, 1.0, range2, lengthConstraintType1);
      gridArrangement0.arrange(blockContainer1, (Graphics2D) null, rectangleConstraint2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-4733), 0);
      BlockContainer blockContainer0 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      gridArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      BlockContainer blockContainer1 = new BlockContainer(gridArrangement0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-4733);
      floatArray0[1] = (float) (-4733);
      floatArray0[2] = (float) (-4733);
      floatArray0[3] = (float) 0;
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[8];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)6;
      int[] intArray0 = new int[6];
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(326, (byte) (-6), intArray0, 0, true, 0, 340);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(1605, 0);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(38.5436376397726, (-1126.865));
      gridArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.clear();
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      Graphics2D graphics2D0 = null;
      Month month0 = new Month(1, 1);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 1, month0);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(false);
      Range.shift(range0, (double) 2, false);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      BlockContainer blockContainer1 = new BlockContainer();
      blockContainer1.getBlocks();
      blockContainer0.add((Block) blockContainer1);
      RectangleConstraint rectangleConstraint2 = null;
      Size2D size2D0 = new Size2D();
      gridArrangement0.arrangeRF(blockContainer1, (Graphics2D) null, rectangleConstraint1);
      Size2D size2D1 = new Size2D();
      rectangleConstraint0.toRangeWidth(range0);
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-840), (-840));
      BlockContainer blockContainer0 = new BlockContainer();
      Graphics2D graphics2D0 = null;
      Range range0 = new Range((-840), (-840));
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-840), range0, lengthConstraintType0, (-840), range0, lengthConstraintType0);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      gridArrangement0.arrangeNR(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      gridArrangement0.add((Block) null, (Object) null);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      timeTableXYDataset0.getDomainBounds(true);
      Range.combineIgnoringNaN((Range) null, range0);
      RectangleConstraint rectangleConstraint2 = new RectangleConstraint((Range) null, (-840));
      // Undeclared exception!
      try { 
        gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(352, 352);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      Graphics2D graphics2D0 = null;
      Month month0 = new Month(1, 1);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(352, 1, month0);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(false);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      BlockContainer blockContainer1 = new BlockContainer();
      blockContainer1.getBlocks();
      blockContainer0.add((Block) blockContainer1);
      gridArrangement0.arrangeFN(blockContainer1, (Graphics2D) null, rectangleConstraint1);
      gridArrangement0.arrangeRF(blockContainer1, (Graphics2D) null, rectangleConstraint1);
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeNR(blockContainer0, (Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(90, 90);
      Object object0 = new Object();
      gridArrangement0.equals(object0);
      BlockContainer blockContainer0 = new BlockContainer();
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      range1.toString();
      Range range2 = Range.expandToInclude(range1, (-1.0));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(90, range2);
      gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint1 = new RectangleConstraint(0.0, range0, lengthConstraintType0, 90, range2, lengthConstraintType1);
      gridArrangement0.arrangeNR(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      gridArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-840), 363);
      BlockContainer blockContainer0 = new BlockContainer();
      Graphics2D graphics2D0 = null;
      Range range0 = new Range(363, 363);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      gridArrangement0.arrangeNR(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      gridArrangement0.add((Block) null, (Object) null);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      timeTableXYDataset0.getDomainBounds(true);
      Range.combineIgnoringNaN((Range) null, range0);
      RectangleConstraint rectangleConstraint2 = new RectangleConstraint((Range) null, (-840));
      // Undeclared exception!
      try { 
        gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(352, 352);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      Graphics2D graphics2D0 = null;
      Month month0 = new Month();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(352, 1, month0);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      BlockContainer blockContainer1 = new BlockContainer();
      blockContainer1.getBlocks();
      blockContainer0.add((Block) blockContainer1);
      CenterArrangement centerArrangement0 = new CenterArrangement();
      Size2D size2D0 = centerArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      rectangleConstraint1.calculateConstrainedSize(size2D0);
      // Undeclared exception!
      try { 
        gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(90, 90);
      Object object0 = new Object();
      gridArrangement0.equals(object0);
      BlockContainer blockContainer0 = new BlockContainer();
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, (double) 90);
      range1.toString();
      Range range2 = Range.expandToInclude(range1, (-1.0));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(90, range2);
      gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-840), 363);
      BlockContainer blockContainer0 = new BlockContainer();
      Graphics2D graphics2D0 = null;
      Range range0 = new Range(363, 363);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-840), range0, lengthConstraintType0, 363, range0, lengthConstraintType0);
      gridArrangement0.arrangeNR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.add((Block) null, (Object) null);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      timeTableXYDataset0.getDomainBounds(true);
      Range.combineIgnoringNaN((Range) null, range0);
      RectangleConstraint rectangleConstraint1 = new RectangleConstraint((Range) null, (-840));
      // Undeclared exception!
      try { 
        gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(90, 90);
      Object object0 = new Object();
      gridArrangement0.equals(object0);
      BlockContainer blockContainer0 = new BlockContainer();
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      range1.toString();
      Range range2 = Range.expandToInclude(range1, (-1.0));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(90, range2);
      gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      GridArrangement gridArrangement1 = new GridArrangement(90, 90);
      gridArrangement0.equals(gridArrangement1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-4733), (-1));
      BlockContainer blockContainer0 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      gridArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      BlockContainer blockContainer1 = new BlockContainer(gridArrangement0);
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) (-4733);
      floatArray0[2] = (float) (-4733);
      floatArray0[3] = (float) (-1);
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[8];
      int[] intArray0 = new int[0];
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(326, (byte) (-6), intArray0, (-1), true, 0, 340);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(46, 46);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      Graphics2D graphics2D0 = null;
      Month month0 = new Month();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(46, 1, month0);
      BlockContainer blockContainer1 = new BlockContainer();
      blockContainer1.getBlocks();
      blockContainer0.add((Block) blockContainer1);
      RectangleConstraint rectangleConstraint0 = null;
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(90, 90);
      Object object0 = new Object();
      gridArrangement0.equals(object0);
      BlockContainer blockContainer0 = new BlockContainer();
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      range1.toString();
      Range range2 = Range.expandToInclude(range1, (-1.0));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(90, range2);
      gridArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-840), 363);
      BlockContainer blockContainer0 = new BlockContainer();
      Range range0 = new Range(363, 363);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-840), range0, lengthConstraintType0, 363, range0, lengthConstraintType0);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      gridArrangement0.arrangeNR(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      gridArrangement0.add((Block) null, (Object) null);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      timeTableXYDataset0.getDomainBounds(true);
      RectangleConstraint rectangleConstraint2 = RectangleConstraint.NONE;
      gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint2);
      blockContainer0.setBorder((-2459.7), 10.0, 950.5, 0.0);
      gridArrangement0.equals((Object) null);
      gridArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(90, 90);
      Object object0 = new Object();
      gridArrangement0.equals(object0);
      BlockContainer blockContainer0 = new BlockContainer();
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      range1.toString();
      Range.expandToInclude(range1, (-1.0));
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      rectangleConstraint0.toUnconstrainedHeight();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint1 = new RectangleConstraint(range0, range0);
      GridArrangement gridArrangement0 = new GridArrangement(1728, (-1988));
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      RectangleConstraint rectangleConstraint2 = blockContainer0.toContentConstraint(rectangleConstraint1);
      gridArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint2);
      gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(1939, (-1));
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, 1939);
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 1809;
      GridArrangement gridArrangement0 = new GridArrangement(1809, 1809);
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, 0.8);
      Month month0 = new Month();
      gridArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      TimeSeries timeSeries0 = new TimeSeries(month0, "", "");
      gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      BlockContainer blockContainer1 = new BlockContainer(gridArrangement0);
      gridArrangement0.arrangeFN(blockContainer1, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.arrangeFF(blockContainer1, (Graphics2D) null, rectangleConstraint0);
      int int1 = 30;
      byte[] byteArray0 = new byte[0];
      ByteLookupTable byteLookupTable0 = null;
      try {
        byteLookupTable0 = new ByteLookupTable(30, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of components must  be at least 1
         //
         verifyException("java.awt.image.LookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(90, 90);
      Object object0 = new Object();
      gridArrangement0.equals(object0);
      BlockContainer blockContainer0 = new BlockContainer();
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      Range range2 = Range.expandToInclude(range1, (-1.0));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(90, range2);
      gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-328), 1);
      Object object0 = new Object();
      gridArrangement0.equals(object0);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      BufferedImage bufferedImage0 = new BufferedImage(1765, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, 1765);
      gridArrangement0.arrangeFN(blockContainer0, graphics2D0, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-4733), 0);
      BlockContainer blockContainer0 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      gridArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      BlockContainer blockContainer1 = new BlockContainer(gridArrangement0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-4733);
      floatArray0[1] = (float) (-4733);
      floatArray0[2] = (float) (-4733);
      floatArray0[3] = (float) 0;
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[8];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)6;
      int int0 = 1;
      int int1 = 1858;
      int[] intArray0 = new int[0];
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(326, (byte) (-6), intArray0, 0, true, 0, 340);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(350, 0);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-2.147483648E9), (-1.0));
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = (-2950);
      GridArrangement gridArrangement0 = new GridArrangement((-2950), (-2950));
      StyleContext styleContext0 = new StyleContext();
      AttributeSet attributeSet0 = null;
      FlowArrangement flowArrangement0 = new FlowArrangement();
      BlockContainer blockContainer0 = new BlockContainer(flowArrangement0);
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(4869, 4869);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)15;
      Graphics2D graphics2D0 = null;
      gridArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      byteArray0[5] = (byte)98;
      boolean boolean0 = true;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(4869, 4869, byteArray0, 0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      LabelBlock labelBlock0 = new LabelBlock("'");
      labelBlock0.setMargin(0.0, (-1.0), 0.0, (-2.147483648E9));
      gridArrangement0.add(labelBlock0, "'");
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-702.094), (-702.094));
      gridArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      BlockContainer blockContainer1 = new BlockContainer(gridArrangement0);
      gridArrangement0.arrangeFF(blockContainer1, (Graphics2D) null, rectangleConstraint0);
      BlockContainer blockContainer2 = new BlockContainer(gridArrangement0);
      BlockContainer blockContainer3 = new BlockContainer(gridArrangement0);
      gridArrangement0.add(blockContainer2, blockContainer3);
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      BlockContainer blockContainer0 = new BlockContainer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0, range0, lengthConstraintType0, 0, range0, lengthConstraintType1);
      gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      BlockContainer blockContainer0 = new BlockContainer();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0);
      intervalXYDelegate0.getDomainBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0, (Range) null);
      rectangleConstraint0.toFixedHeight((-2171.843776976));
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = (-2589);
      GridArrangement gridArrangement0 = new GridArrangement(335, (-2589));
      GridArrangement gridArrangement1 = new GridArrangement((-1593), 335);
      gridArrangement0.equals(gridArrangement1);
      BlockContainer blockContainer0 = null;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, gridArrangement0);
      RescaleOp rescaleOp0 = new RescaleOp(335, 1169.917F, renderingHints0);
      byte[][] byteArray0 = new byte[7][9];
      byte[] byteArray1 = new byte[7];
      byte byte0 = (byte) (-117);
      byteArray1[0] = (byte) (-117);
      byteArray1[1] = (byte)31;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)22;
      byteArray1[5] = (byte) (-47);
      byteArray1[6] = (byte) (-69);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-47);
      byteArray2[3] = (byte)31;
      byteArray2[4] = (byte) (-47);
      byteArray2[5] = (byte)22;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte) (-117);
      byteArray3[3] = (byte)22;
      byteArray3[4] = (byte) (-117);
      byteArray3[5] = (byte) (-47);
      byteArray3[6] = (byte)58;
      byteArray3[7] = (byte)0;
      byteArray3[8] = (byte)31;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)58;
      byteArray4[1] = (byte) (-69);
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte) (-117);
      byteArray4[4] = (byte)9;
      byteArray4[5] = (byte) (-47);
      byteArray4[6] = (byte)0;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[6];
      byteArray5[0] = (byte)0;
      byteArray5[1] = (byte)0;
      byteArray5[2] = (byte)22;
      byteArray5[3] = (byte)31;
      byteArray5[4] = (byte) (-47);
      byteArray5[5] = (byte)9;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[6];
      byteArray6[0] = (byte)0;
      byteArray6[1] = (byte)22;
      byteArray6[2] = (byte) (-47);
      byteArray6[3] = (byte)58;
      byteArray6[4] = (byte) (-117);
      byteArray6[5] = (byte) (-117);
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[2];
      byteArray7[0] = (byte)31;
      byteArray7[1] = (byte)73;
      byteArray0[6] = byteArray7;
      ByteLookupTable byteLookupTable0 = null;
      try {
        byteLookupTable0 = new ByteLookupTable((-1593), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset must be greater than 0
         //
         verifyException("java.awt.image.LookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(1874, 2057);
      GridArrangement gridArrangement1 = new GridArrangement(1018, 0);
      gridArrangement0.equals(gridArrangement1);
      BlockContainer blockContainer0 = new BlockContainer();
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-104);
      byte byte1 = (byte) (-36);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-13);
      ByteLookupTable byteLookupTable0 = null;
      try {
        byteLookupTable0 = new ByteLookupTable((-2030), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset must be greater than 0
         //
         verifyException("java.awt.image.LookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(1605, 0);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(38.5436376397726, (-1126.865));
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      Graphics2D graphics2D0 = null;
      gridArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getQ3Value(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-2169), 1);
      gridArrangement0.clear();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(31, 31);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      blockContainer0.setArrangement(gridArrangement0);
      int int0 = 0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 31;
      Graphics2D graphics2D0 = null;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.getRangeBounds(false);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, (-1));
      gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      floatArray0[1] = 287.5F;
      floatArray0[2] = (float) 31;
      Kernel kernel0 = new Kernel(0, (-1), floatArray0);
      Hashtable<RenderingHints.Key, GridArrangement> hashtable0 = new Hashtable<RenderingHints.Key, GridArrangement>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      ConvolveOp convolveOp0 = new ConvolveOp(kernel0, (-1), renderingHints0);
      int int1 = 1;
      ChartHints.Key chartHints_Key0 = new ChartHints.Key(0);
      hashtable0.put(chartHints_Key0, gridArrangement0);
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(1158, 1158);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-43.226245522), (-43.226245522));
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 0;
      GridArrangement gridArrangement0 = new GridArrangement(0, 337);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      rectangleConstraint0.toUnconstrainedHeight();
      Size2D size2D0 = blockContainer0.arrange((Graphics2D) null, rectangleConstraint0);
      rectangleConstraint0.calculateConstrainedSize(size2D0);
      gridArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      rectangleConstraint0.toRangeHeight(range0);
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(1, 1601);
      ChartHints.Key chartHints_Key0 = new ChartHints.Key(1601);
      gridArrangement0.equals(chartHints_Key0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(1, 1);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      gridArrangement0.equals(integer0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-840), 363);
      BlockContainer blockContainer0 = new BlockContainer();
      Graphics2D graphics2D0 = null;
      Range range0 = new Range(363, 363);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-840), range0, lengthConstraintType0, 363, range0, lengthConstraintType0);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      gridArrangement0.arrangeNR(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      gridArrangement0.add((Block) null, (Object) null);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      timeTableXYDataset0.getDomainBounds(true);
      RectangleConstraint rectangleConstraint2 = new RectangleConstraint((Range) null, (-840));
      // Undeclared exception!
      try { 
        gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      System.setCurrentTimeMillis((-2748L));
      GridArrangement gridArrangement0 = new GridArrangement(31, 31);
      BlockContainer blockContainer0 = null;
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(Double.NaN, (Range) null);
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRF((BlockContainer) null, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      Object object0 = new Object();
      gridArrangement0.add(blockContainer0, object0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 0;
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      rectangleConstraint0.toUnconstrainedWidth();
      rectangleConstraint0.toUnconstrainedWidth();
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeNR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      Range range0 = new Range(0, 0);
      Range range1 = Range.shift(range0, (double) 0, true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range1, 0);
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeNR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 1158);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-43.226245522), (-43.226245522));
      gridArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(352, 352);
      Graphics2D graphics2D0 = null;
      Month month0 = new Month(1, 1);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(352, 1, month0);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(false);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.getBlocks();
      RectangleConstraint rectangleConstraint1 = null;
      RectangleConstraint rectangleConstraint2 = rectangleConstraint0.toRangeWidth(range0);
      gridArrangement0.clear();
      gridArrangement0.clear();
      gridArrangement0.equals((Object) null);
      BlockContainer blockContainer1 = new BlockContainer();
      gridArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      gridArrangement0.clear();
      month0.getStart();
      gridArrangement0.clear();
      gridArrangement0.equals(dynamicTimeSeriesCollection0);
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(90, 90);
      Object object0 = new Object();
      gridArrangement0.equals(object0);
      BlockContainer blockContainer0 = new BlockContainer();
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      range1.toString();
      Range range2 = Range.expandToInclude(range1, (-1.0));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(90, range2);
      gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      GridArrangement gridArrangement1 = new GridArrangement(90, 90);
      gridArrangement0.equals(gridArrangement1);
      // Undeclared exception!
      try { 
        gridArrangement1.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(90, 90);
      Object object0 = new Object();
      gridArrangement0.equals(object0);
      BlockContainer blockContainer0 = new BlockContainer();
      Graphics2D graphics2D0 = null;
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      Range range2 = Range.expandToInclude(range1, (-1.0));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range2, range0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      gridArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      BlockContainer blockContainer1 = new BlockContainer();
      blockContainer1.add((Block) blockContainer0);
      // Undeclared exception!
      try { 
        gridArrangement0.arrange(blockContainer1, (Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(1605, 0);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(38.5436376397726, (-1126.87));
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      Kernel kernel0 = new Kernel(0, 0, floatArray0);
      HashMap<RenderingHints.Key, LabelBlock> hashMap0 = new HashMap<RenderingHints.Key, LabelBlock>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      ConvolveOp convolveOp0 = new ConvolveOp(kernel0, (-4063), renderingHints0);
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) (-4063);
      floatArray1[1] = (float) (-4063);
      floatArray1[2] = (float) (-4063);
      floatArray1[3] = (float) (-4063);
      floatArray1[4] = (float) (-4063);
      floatArray1[5] = (float) (-4063);
      RescaleOp rescaleOp0 = new RescaleOp(floatArray1, floatArray0, renderingHints0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage((-2787), 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 0
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 0;
      GridArrangement gridArrangement0 = new GridArrangement(0, 337);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      rectangleConstraint0.toUnconstrainedHeight();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      rectangleConstraint0.toRangeHeight(range0);
      RectangleConstraint rectangleConstraint1 = new RectangleConstraint((-1270.98882), Double.NaN);
      int int1 = 2361;
      int int2 = (-1812);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-1), 621, byteArray0, byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-4733), 0);
      BlockContainer blockContainer0 = new BlockContainer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      BlockContainer blockContainer1 = new BlockContainer();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      defaultBoxAndWhiskerXYDataset0.getRangeBounds(true);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1848.09057, (Range) null, lengthConstraintType0, 1848.09057, (Range) null, lengthConstraintType0);
      gridArrangement0.arrangeNF(blockContainer1, (Graphics2D) null, rectangleConstraint0);
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint1 = new RectangleConstraint(range0, range0);
      gridArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      BlockContainer blockContainer2 = new BlockContainer(gridArrangement0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-4733);
      floatArray0[1] = (float) (-4733);
      floatArray0[2] = (float) (-4733);
      floatArray0[3] = (float) 0;
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[8];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)6;
      int[] intArray0 = new int[0];
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(326, (byte) (-6), intArray0, 0, true, 0, 340);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-840), 363);
      BlockContainer blockContainer0 = new BlockContainer();
      Graphics2D graphics2D0 = null;
      Range range0 = new Range(363, 363);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-840), range0, lengthConstraintType0, 363, range0, lengthConstraintType0);
      RectangleConstraint rectangleConstraint1 = new RectangleConstraint(range0, range0);
      gridArrangement0.arrangeNR(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      gridArrangement0.add((Block) null, (Object) null);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      timeTableXYDataset0.getDomainBounds(true);
      RectangleConstraint rectangleConstraint2 = new RectangleConstraint((Range) null, (-840));
      // Undeclared exception!
      try { 
        gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }
}
