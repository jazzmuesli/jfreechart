/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:54:36 GMT 2019
 */

package org.jfree.chart.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.SystemColor;
import java.awt.image.BufferedImage;
import java.text.AttributedCharacterIterator;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.text.TextFragment;
import org.jfree.chart.text.TextLine;
import org.jfree.chart.ui.Size2D;
import org.jfree.chart.ui.TextAnchor;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class TextLine_ESTest extends TextLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Font font0 = Font.decode("cMpTjvt");
      Color color0 = Color.getColor("cMpTjvt", 2131);
      TextLine textLine0 = new TextLine("cMpTjvt", font0, color0);
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      TextAnchor textAnchor0 = TextAnchor.TOP_CENTER;
      textLine0.draw(graphics2D0, 2, 1, textAnchor0, 1, (-1860.16F), 1310.9459741);
      assertFalse(textAnchor0.isBaseline());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "\\u\\_Qxw\\G'g8[Urr;x";
      HashMap<AttributedCharacterIterator.Attribute, Object> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Object>();
      Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
      TextLine textLine0 = new TextLine(string0, font0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextLine textLine0 = new TextLine("org.jfree.data.xy.DefaultHighLowDataset");
      StyleContext styleContext0 = new StyleContext();
      Font font0 = styleContext0.getFont("y|)tSO?`,xmS", 781, (-1));
      SystemColor systemColor0 = SystemColor.menuText;
      TextFragment textFragment0 = new TextFragment("org.jfree.data.xy.DefaultHighLowDataset", font0, systemColor0, 781);
      textLine0.addFragment(textFragment0);
      TextFragment textFragment1 = textLine0.getLastTextFragment();
      assertNotNull(textFragment1);
      assertEquals(781.0F, textFragment1.getBaselineOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextLine textLine0 = new TextLine();
      Size2D size2D0 = textLine0.calculateDimensions((Graphics2D) null);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Hashtable<AttributedCharacterIterator.Attribute, Object> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Object>();
      Font font0 = new Font(hashtable0);
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      TextLine textLine0 = new TextLine("<n/~W{Z U`9ZX4P", font0, systemColor0);
      TextAnchor textAnchor0 = TextAnchor.CENTER_LEFT;
      // Undeclared exception!
      try { 
        textLine0.draw((Graphics2D) null, 0.0F, 0.0F, textAnchor0, 2781.8198F, (-1.0F), (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextLine textLine0 = new TextLine();
      textLine0.addFragment((TextFragment) null);
      // Undeclared exception!
      try { 
        textLine0.calculateDimensions((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextLine textLine0 = null;
      try {
        textLine0 = new TextLine((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Font font0 = Font.decode((String) null);
      Color color0 = Color.getColor("cMpTjvt", 2131);
      TextLine textLine0 = new TextLine("cMpTjvt", font0, color0);
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Size2D size2D0 = textLine0.calculateDimensions(graphics2D0);
      assertEquals(46.0, size2D0.width, 0.01);
      assertEquals(15.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextLine textLine0 = null;
      try {
        textLine0 = new TextLine("Null 'font' argument.", (Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hashtable<AttributedCharacterIterator.Attribute, Object> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Object>();
      Font font0 = new Font(hashtable0);
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      TextLine textLine0 = new TextLine("<n/~W{Z U`9ZX4P", font0, systemColor0);
      textLine0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextLine textLine0 = new TextLine();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      boolean boolean0 = textLine0.equals(matrixSeriesCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hashtable<AttributedCharacterIterator.Attribute, Object> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Object>(0);
      Font font0 = new Font(hashtable0);
      Color color0 = Color.BLACK;
      TextLine textLine0 = new TextLine("5E_)J-s>Tn", font0, color0);
      TextLine textLine1 = new TextLine();
      boolean boolean0 = textLine0.equals(textLine1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextLine textLine0 = new TextLine();
      boolean boolean0 = textLine0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Hashtable<AttributedCharacterIterator.Attribute, Object> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Object>(0);
      Font font0 = new Font(hashtable0);
      Color color0 = Color.BLACK;
      TextLine textLine0 = new TextLine("5E_)J-s>Tn", font0, color0);
      boolean boolean0 = textLine0.equals(textLine0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Font font0 = Font.decode("cMpTjvt");
      Color color0 = Color.getColor("cMpTjvt", 2131);
      TextLine textLine0 = new TextLine("cMpTjvt", font0, color0);
      TextFragment textFragment0 = textLine0.getLastTextFragment();
      assertEquals("cMpTjvt", textFragment0.getText());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextLine textLine0 = new TextLine();
      TextFragment textFragment0 = textLine0.getLastTextFragment();
      assertNull(textFragment0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextLine textLine0 = new TextLine();
      TextFragment textFragment0 = textLine0.getFirstTextFragment();
      assertNull(textFragment0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextLine textLine0 = new TextLine();
      TextAnchor textAnchor0 = TextAnchor.HALF_ASCENT_RIGHT;
      textLine0.draw((Graphics2D) null, 0.0F, 0.0F, textAnchor0, 0.0F, 0.0F, (-1.7976931348623157E308));
      assertFalse(textAnchor0.isLeft());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute>();
      Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
      TextLine textLine0 = null;
      try {
        textLine0 = new TextLine("d9a/Yp|YX|\"u", font0, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.text.TextLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Color color0 = Color.RED;
      TextLine textLine0 = null;
      try {
        textLine0 = new TextLine("org.jfree.data.time.Year", (Font) null, color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.text.TextLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Color color0 = Color.CYAN;
      TextLine textLine0 = null;
      try {
        textLine0 = new TextLine((String) null, (Font) null, color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.text.TextLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextLine textLine0 = new TextLine();
      TextAnchor textAnchor0 = TextAnchor.HALF_ASCENT_LEFT;
      textLine0.draw((Graphics2D) null, 0.0F, 0.0F, textAnchor0, 0.0F, 0.0F, (-1.7976931348623157E308));
      assertFalse(textAnchor0.isBaseline());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextLine textLine0 = new TextLine("k1_WS=QW!iD$df]qR");
      TextFragment textFragment0 = textLine0.getFirstTextFragment();
      assertEquals("k1_WS=QW!iD$df]qR", textFragment0.getText());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Hashtable<AttributedCharacterIterator.Attribute, Object> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Object>();
      Font font0 = new Font(hashtable0);
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      TextLine textLine0 = new TextLine("<n/~W{Z U`9ZX4P", font0, systemColor0);
      TextFragment textFragment0 = new TextFragment("q}}=-x?d;q6}3-l7", font0, systemColor0);
      textLine0.removeFragment(textFragment0);
      assertEquals("q}}=-x?d;q6}3-l7", textFragment0.getText());
  }
}
