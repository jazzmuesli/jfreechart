/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:47:58 GMT 2019
 */

package org.jfree.chart.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.SystemColor;
import java.awt.geom.AffineTransform;
import java.text.AttributedCharacterIterator;
import java.util.HashMap;
import java.util.Map;
import javax.swing.border.TitledBorder;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.text.TextFragment;
import org.jfree.chart.ui.TextAnchor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextFragment_ESTest extends TextFragment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<AttributedCharacterIterator.Attribute, String> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, String>();
      Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
      Color color0 = Color.green;
      TextFragment textFragment0 = new TextFragment(",L_?\t@&Zg", font0, color0, 1810.6876F);
      textFragment0.hashCode();
      assertEquals(1810.6876F, textFragment0.getBaselineOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      Font font0 = styleContext0.getFont((AttributeSet) styleContext_NamedStyle0);
      TextFragment textFragment0 = new TextFragment("Null 'paint' argument.", font0);
      TextAnchor textAnchor0 = TextAnchor.BASELINE_LEFT;
      // Undeclared exception!
      try { 
        textFragment0.draw((Graphics2D) null, (-1612.7773F), (-1.0F), textAnchor0, (byte) (-1), 0.0F, (-132.7));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<AttributedCharacterIterator.Attribute, Object> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Object>();
      Font font0 = new Font(hashMap0);
      SystemColor systemColor0 = SystemColor.windowText;
      GradientPaint gradientPaint0 = new GradientPaint((-4144.416F), (-4144.416F), systemColor0, (-4144.416F), (-4144.416F), systemColor0);
      TextFragment textFragment0 = new TextFragment("YRiXDpG<3,3-y", font0, gradientPaint0, (-4144.416F));
      textFragment0.getPaint();
      assertEquals((-4144.416F), textFragment0.getBaselineOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Font font0 = Font.decode("");
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(1047.8978, 1047.8978);
      Font font1 = font0.deriveFont(affineTransform0);
      TextFragment textFragment0 = new TextFragment("", font1);
      Font font2 = textFragment0.getFont();
      assertTrue(font2.isTransformed());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TitledBorder titledBorder0 = new TitledBorder("UBIPQeX|\u0001;zCxX*Qne");
      Font font0 = titledBorder0.getTitleFont();
      TextFragment textFragment0 = new TextFragment("UBIPQeX|\u0001;zCxX*Qne", font0);
      textFragment0.getFont();
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Font font0 = new Font("xGKX5C)VJWh($", 0, 0);
      TextFragment textFragment0 = new TextFragment("X=3qY:V", font0);
      Font font1 = textFragment0.getFont();
      assertEquals(0, font1.getSize());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<AttributedCharacterIterator.Attribute, String> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, String>();
      Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
      Color color0 = Color.green;
      TextFragment textFragment0 = new TextFragment(",L_?\t@&Zg", font0, color0, 1810.6876F);
      float float0 = textFragment0.getBaselineOffset();
      assertEquals(1810.6876F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      AttributeSet attributeSet1 = styleContext0.removeAttribute(attributeSet0, "zone");
      Font font0 = styleContext0.getFont(attributeSet1);
      Color color0 = Color.getColor("zone", 0);
      TextFragment textFragment0 = new TextFragment("zone", font0, color0, (-3993.4F));
      float float0 = textFragment0.getBaselineOffset();
      assertEquals((-3993.4F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      Font font0 = styleContext0.getFont("G0o", 3908, 3908);
      Color color0 = Color.gray;
      TextFragment textFragment0 = new TextFragment("G0o", font0, color0, 3908);
      TextAnchor textAnchor0 = TextAnchor.TOP_CENTER;
      // Undeclared exception!
      try { 
        textFragment0.calculateBaselineOffset((Graphics2D) null, textAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextFragment textFragment0 = null;
      try {
        textFragment0 = new TextFragment((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      AttributeSet attributeSet1 = styleContext0.removeAttribute(attributeSet0, "zone");
      Font font0 = styleContext0.getFont(attributeSet1);
      TextFragment textFragment0 = null;
      try {
        textFragment0 = new TextFragment("zone", font0, (Paint) null, 5408.6426F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Font font0 = Font.decode("L{=Fw2P[%&:>{");
      SystemColor systemColor0 = SystemColor.textInactiveText;
      TextFragment textFragment0 = new TextFragment("L{=Fw2P[%&:>{", font0, systemColor0, 0.0F);
      textFragment0.getText();
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      Color color0 = Color.GREEN;
      TextFragment textFragment0 = null;
      try {
        textFragment0 = new TextFragment((String) null, font0, color0, (-1161.63F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextFragment textFragment0 = null;
      try {
        textFragment0 = new TextFragment("", (Font) null, (Paint) null, (-286.97238F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextFragment textFragment0 = new TextFragment("");
      textFragment0.hashCode();
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Font font0 = Font.decode("");
      TextFragment textFragment0 = new TextFragment("", font0);
      boolean boolean0 = textFragment0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextFragment textFragment0 = new TextFragment("");
      boolean boolean0 = textFragment0.equals("");
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<AttributedCharacterIterator.Attribute, Object> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Object>();
      Font font0 = new Font(hashMap0);
      TextFragment textFragment0 = null;
      try {
        textFragment0 = new TextFragment("ABrCxyz", font0, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Font font0 = styleContext0.getFont((String) null, (-1055), (-1055));
      TextFragment textFragment0 = null;
      try {
        textFragment0 = new TextFragment((String) null, font0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      Font font0 = styleContext0.getFont((AttributeSet) styleContext_NamedStyle0);
      TextFragment textFragment0 = new TextFragment("Null 'paint' argument.", font0);
      // Undeclared exception!
      try { 
        textFragment0.calculateDimensions((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextFragment textFragment0 = new TextFragment("");
      textFragment0.getText();
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextFragment textFragment0 = new TextFragment("");
      float float0 = textFragment0.getBaselineOffset();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Font font0 = styleContext0.getFont((String) null, (-1055), (-1055));
      Color color0 = Color.black;
      TextFragment textFragment0 = new TextFragment("z", font0, color0);
      Font font1 = textFragment0.getFont();
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("Default", font1.getName());
  }
}
