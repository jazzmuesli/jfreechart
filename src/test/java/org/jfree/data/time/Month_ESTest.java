/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:29:58 GMT 2019
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.date.MonthConstants;
import org.jfree.chart.date.SerialDate;
import org.jfree.chart.date.SpreadsheetDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Month_ESTest extends Month_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Month month0 = new Month();
      Locale locale0 = Locale.ITALIAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      month0.peg(calendar0);
      month0.getMiddleMillisecond();
      month0.getYearValue();
      month0.getFirstMillisecond(calendar0);
      month0.peg(calendar0);
      month0.getMiddleMillisecond();
      month0.previous();
      month0.getLastMillisecond();
      month0.getFirstMillisecond();
      month0.getFirstMillisecond();
      Month month1 = (Month)month0.next();
      Day day0 = new Day();
      day0.previous();
      day0.getSerialIndex();
      month0.equals(day0);
      month0.toString();
      Month month2 = (Month)month0.next();
      month0.getFirstMillisecond(calendar0);
      month0.hashCode();
      Month month3 = (Month)month0.next();
      month0.getSerialIndex();
      month0.getYear();
      month0.toString();
      month0.getYearValue();
      month0.peg(calendar0);
      month0.getMonth();
      int int0 = MonthConstants.APRIL;
      month2.compareTo(month1);
      System.setCurrentTimeMillis((-2L));
      Month month4 = new Month();
      month3.equals("February 2014");
      month1.getYear();
      month4.next();
      Month.parseMonth("February 2014");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Month month0 = new Month(11, (-91));
      month0.previous();
      month0.getSerialIndex();
      month0.getYearValue();
      month0.getYearValue();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      month0.previous();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate(953);
      mockDate0.setTime((-824L));
      Month month0 = new Month(mockDate0);
      month0.compareTo(mockDate0);
      month0.getEnd();
      month0.getEnd();
      mockDate0.setTime(23);
      month0.getFirstMillisecond();
      month0.getYear();
      mockDate0.setTime(0);
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      month0.getSerialIndex();
      month0.getYearValue();
      month0.getFirstMillisecond();
      month0.getMonth();
      Month month1 = (Month)month0.previous();
      ((Month) regularTimePeriod0).equals(month0);
      month1.getYear();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(12, (String) null, 1924, 953, 23, 953, 0, 23, 534, 12, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Month month0 = new Month();
      Locale locale0 = Locale.ITALIAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      month0.peg(calendar0);
      month0.getMiddleMillisecond();
      month0.getYearValue();
      month0.getFirstMillisecond(calendar0);
      month0.peg(calendar0);
      month0.getMiddleMillisecond();
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      month0.getLastMillisecond();
      month0.getFirstMillisecond();
      month0.getFirstMillisecond();
      Month month1 = (Month)month0.next();
      Day day0 = new Day();
      day0.previous();
      day0.getSerialIndex();
      day0.getSerialIndex();
      month0.equals(day0);
      month0.toString();
      Month month2 = (Month)month0.next();
      month0.getFirstMillisecond(calendar0);
      month0.hashCode();
      Month month3 = (Month)month0.next();
      month0.getSerialIndex();
      month0.getYear();
      month0.toString();
      month0.getYearValue();
      month0.peg(calendar0);
      month0.getMonth();
      month2.compareTo(month1);
      System.setCurrentTimeMillis(11L);
      Month month4 = (Month)regularTimePeriod0.previous();
      month3.equals("February 2014");
      month1.getYear();
      month4.next();
      Month.parseMonth("February 2014");
      month0.getSerialIndex();
      System.setCurrentTimeMillis(12L);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Month month0 = new Month();
      Locale locale0 = Locale.ITALIAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      month0.peg(calendar0);
      month0.getMiddleMillisecond();
      month0.getYearValue();
      locale0.getDisplayScript();
      month0.getFirstMillisecond(calendar0);
      month0.peg(calendar0);
      month0.getMiddleMillisecond();
      month0.previous();
      month0.getLastMillisecond();
      month0.getFirstMillisecond();
      month0.getFirstMillisecond();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      Day day0 = new Day();
      day0.previous();
      day0.getSerialIndex();
      regularTimePeriod0.getMiddleMillisecond();
      day0.getSerialIndex();
      month0.equals(day0);
      month0.toString();
      RegularTimePeriod regularTimePeriod1 = month0.next();
      month0.getFirstMillisecond(calendar0);
      month0.hashCode();
      month0.next();
      month0.getSerialIndex();
      month0.getYear();
      month0.toString();
      month0.getYearValue();
      month0.peg(calendar0);
      month0.getMonth();
      month0.getMonth();
      ((Month) regularTimePeriod1).compareTo(regularTimePeriod0);
      System.setCurrentTimeMillis((-35L));
      month0.getYear();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Month month0 = new Month();
      Month month1 = new Month();
      int int0 = (-2036);
      int int1 = 1900;
      int int2 = 999;
      int int3 = 539;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2036), 1900, 1900, 999, 539);
      mockGregorianCalendar0.toZonedDateTime();
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.MIDDLE;
      month0.getMillisecond(timePeriodAnchor0, mockGregorianCalendar0);
      month1.equals(month0);
      mockGregorianCalendar0.set(0, (-2036), 999, 539, (-2036), 999);
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.getMaximum(999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 999
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Month month0 = new Month();
      Locale locale0 = Locale.ITALIAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      month0.peg(calendar0);
      month0.getMiddleMillisecond();
      month0.getYearValue();
      locale0.getDisplayScript();
      month0.getFirstMillisecond(calendar0);
      month0.peg(calendar0);
      month0.getMiddleMillisecond();
      month0.previous();
      month0.getLastMillisecond();
      month0.getFirstMillisecond();
      month0.getFirstMillisecond();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      Day day0 = new Day();
      day0.previous();
      day0.getSerialIndex();
      regularTimePeriod0.getMiddleMillisecond();
      day0.getSerialIndex();
      month0.equals(day0);
      month0.toString();
      Month month1 = new Month();
      month0.getFirstMillisecond(calendar0);
      month0.hashCode();
      month0.next();
      month0.getSerialIndex();
      month0.getYear();
      month0.toString();
      month0.getYearValue();
      month0.peg(calendar0);
      month0.getMonth();
      month0.getMonth();
      month1.compareTo(regularTimePeriod0);
      System.setCurrentTimeMillis(0L);
      month0.getYear();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Month month0 = new Month();
      Locale locale0 = Locale.ITALIAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      month0.peg(calendar0);
      month0.getMiddleMillisecond();
      month0.getYearValue();
      locale0.getDisplayScript();
      month0.getFirstMillisecond(calendar0);
      month0.peg(calendar0);
      month0.getMiddleMillisecond();
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      month0.getLastMillisecond();
      month0.getFirstMillisecond();
      month0.getFirstMillisecond();
      RegularTimePeriod regularTimePeriod1 = month0.next();
      Day day0 = new Day();
      day0.previous();
      day0.getSerialIndex();
      day0.getSerialIndex();
      month0.equals(day0);
      month0.toString();
      RegularTimePeriod regularTimePeriod2 = month0.next();
      month0.getFirstMillisecond(calendar0);
      month0.hashCode();
      RegularTimePeriod regularTimePeriod3 = month0.next();
      month0.getSerialIndex();
      month0.getYear();
      month0.toString();
      month0.getYearValue();
      month0.peg(calendar0);
      month0.getMonth();
      month0.getMonth();
      ((Month) regularTimePeriod2).compareTo(regularTimePeriod1);
      System.setCurrentTimeMillis(0L);
      regularTimePeriod0.previous();
      ((Month) regularTimePeriod3).equals("February 2014");
      Month.parseMonth("February 2014");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Month month0 = new Month();
      Locale locale0 = Locale.GERMAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      month0.getFirstMillisecond(calendar0);
      Year year0 = month0.getYear();
      month0.peg(calendar0);
      month0.compareTo("$-a-(|fZ5I, @kFBICl");
      month0.toString();
      MockDate mockDate0 = new MockDate(1, (-1192), (-1192));
      MockDate mockDate1 = new MockDate(12, (-725), (-1192), 9999, (-819));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      mockDate0.after(mockDate1);
      Year year1 = new Year(mockDate0);
      year1.next();
      year1.peg(calendar0);
      month0.peg(calendar0);
      month0.equals(year1);
      month0.getLastMillisecond();
      month0.equals(month0);
      month0.compareTo((Object) null);
      month0.compareTo(year0);
      month0.next();
      month0.equals(locale0);
      month0.getYearValue();
      month0.previous();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Month month0 = new Month();
      Locale locale0 = Locale.ITALIAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      month0.peg(calendar0);
      month0.getMiddleMillisecond();
      month0.getYearValue();
      locale0.getDisplayScript();
      month0.getFirstMillisecond(calendar0);
      month0.peg(calendar0);
      month0.getMiddleMillisecond();
      month0.previous();
      month0.getLastMillisecond();
      month0.getFirstMillisecond();
      month0.getFirstMillisecond();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      Day day0 = new Day();
      day0.previous();
      day0.getSerialIndex();
      day0.getSerialIndex();
      month0.equals(day0);
      month0.toString();
      RegularTimePeriod regularTimePeriod1 = month0.next();
      month0.getFirstMillisecond(calendar0);
      month0.hashCode();
      month0.next();
      month0.getSerialIndex();
      month0.getYear();
      month0.toString();
      month0.getYearValue();
      month0.peg(calendar0);
      month0.getMonth();
      month0.getMonth();
      ((Month) regularTimePeriod1).compareTo(regularTimePeriod0);
      System.setCurrentTimeMillis(0L);
      month0.getYear();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Month month0 = new Month();
      Locale locale0 = Locale.ITALIAN;
      MockCalendar.getInstance(locale0);
      // Undeclared exception!
      try { 
        month0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 67;
      Month month0 = new Month();
      int int1 = (-11);
      Month month1 = new Month();
      month0.compareTo(month1);
      month0.getYear();
      int int2 = 2;
      int int3 = 0;
      int int4 = (-322);
      Calendar calendar0 = null;
      // Undeclared exception!
      try { 
        month0.getMiddleMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Month month0 = new Month();
      Locale locale0 = Locale.ITALIAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      month0.peg(calendar0);
      month0.getMiddleMillisecond();
      int int0 = MonthConstants.MAY;
      locale0.getDisplayScript();
      month0.getFirstMillisecond(calendar0);
      month0.peg(calendar0);
      month0.getMiddleMillisecond();
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      regularTimePeriod0.previous();
      month0.getLastMillisecond();
      month0.getFirstMillisecond();
      month0.getFirstMillisecond();
      month0.next();
      Day day0 = null;
      try {
        day0 = new Day(5, 5, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      int int0 = (-2036);
      int int1 = 1900;
      int int2 = 999;
      int int3 = 539;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2036), 1900, 1900, 999, 539);
      mockGregorianCalendar0.toZonedDateTime();
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.MIDDLE;
      month0.getMillisecond(timePeriodAnchor0, mockGregorianCalendar0);
      ((Month) regularTimePeriod0).equals(month0);
      mockGregorianCalendar0.set(0, (-2036), 999, 539, (-2036), 999);
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.getMaximum(999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 999
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Month month0 = new Month(12, 1374);
      month0.next();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Month month0 = new Month();
      Calendar calendar0 = null;
      // Undeclared exception!
      try { 
        month0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Month month0 = new Month(2, (-361));
      // Undeclared exception!
      try { 
        Month.parseMonth("d:yy");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Year year0 = new Year(23);
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = Locale.TAIWAN;
      locale0.getDisplayCountry(locale1);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      year0.getFirstMillisecond(calendar0);
      year0.previous();
      Month month0 = new Month(10, year0);
      month0.getLastMillisecond();
      month0.next();
      month0.getMiddleMillisecond();
      month0.getYear();
      month0.compareTo(year0);
      month0.getFirstMillisecond();
      month0.getMonth();
      month0.toString();
      month0.hashCode();
      month0.toString();
      month0.hashCode();
      month0.getYearValue();
      month0.next();
      month0.next();
      month0.getMonth();
      month0.getMonth();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setTimeInMillis((-892L));
      month0.peg(mockGregorianCalendar0);
      month0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      month0.previous();
      month0.next();
      // Undeclared exception!
      try { 
        Month.parseMonth("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Month month0 = null;
      try {
        month0 = new Month(1, (Year) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-713), 0, (-713), 1937, 0);
      Month month0 = new Month(mockDate0);
      mockDate0.clone();
      month0.next();
      month0.getYear();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate(953);
      mockDate0.after(mockDate1);
      mockDate0.setTime((-795L));
      MockDate.UTC(953, 0, 953, 23, 953, 23);
      Month month0 = new Month(mockDate0);
      month0.compareTo(mockDate0);
      month0.getEnd();
      month0.getEnd();
      mockDate0.setTime(23);
      month0.getFirstMillisecond();
      mockDate0.setTime(0);
      month0.previous();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-225), 2028, 953, 30, 2028, 1924);
      month0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      mockGregorianCalendar0.clear();
      mockGregorianCalendar0.getWeekYear();
      month0.getSerialIndex();
      month0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      month0.peg(mockGregorianCalendar0);
      month0.getYearValue();
      month0.hashCode();
      month0.getFirstMillisecond();
      month0.getMonth();
      month0.previous();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(12, (String) null, 1924, 953, 735, 30, 6, 23, 534, 12, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      regularTimePeriod0.getSerialIndex();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(232, 25, 0, (-2253), 0, 1270);
      regularTimePeriod0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      regularTimePeriod0.getLastMillisecond();
      month0.getLastMillisecond();
      Calendar calendar0 = null;
      mockGregorianCalendar0.set(232, 232, 607);
      month0.previous();
      mockGregorianCalendar0.clear();
      // Undeclared exception!
      try { 
        month0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 3577, 1115, 0);
      Month month0 = new Month(mockDate0);
      month0.compareTo(mockDate0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Month month0 = null;
      try {
        month0 = new Month((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-970), 1017, 1017, (-1544), 4706, 45);
      Month month0 = new Month(mockDate0);
      mockDate0.getTime();
      mockDate0.setTime(4706);
      month0.getMonth();
      month0.hashCode();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "9q");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      month0.getLastMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3015, 91, 91, 0, 3015, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.clear();
      Month month0 = new Month(date0);
      month0.getFirstMillisecond();
      Calendar.getAvailableCalendarTypes();
      month0.getMiddleMillisecond();
      month0.getEnd();
      month0.getLastMillisecond();
      month0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      String string0 = "";
      // Undeclared exception!
      try { 
        Month.parseMonth("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2274);
      Date date0 = serialDate0.toDate();
      Month month0 = new Month(date0);
      SerialDate.createInstance(date0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 6, (-2577), (-2031), 5);
      month0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      month0.getMonth();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Month.parseMonth((String) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 3760;
      Instant instant0 = MockInstant.ofEpochMilli(3760);
      Date date0 = Date.from(instant0);
      Year year0 = new Year(date0);
      Month month0 = null;
      try {
        month0 = new Month(3760, year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Month outside valid range.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Month month0 = new Month();
      month0.hashCode();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1622L));
      fixedMillisecond0.getEnd();
      fixedMillisecond0.previous();
      month0.compareTo(fixedMillisecond0);
      month0.getLastMillisecond();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Month month0 = new Month();
      month0.getFirstMillisecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      month0.peg(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4L);
      TimeZone timeZone0 = TimeZone.getDefault();
      Month month0 = null;
      try {
        month0 = new Month(mockDate0, timeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Month month0 = new Month();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      month0.getFirstMillisecond(calendar0);
      month0.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3221);
      Date date0 = spreadsheetDate0.toDate();
      Month month0 = new Month(date0);
      Second second0 = new Second();
      month0.equals(second0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Month month0 = new Month();
      month0.previous();
      month0.next();
      month0.toString();
      Minute minute0 = new Minute();
      month0.compareTo(minute0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Month month0 = new Month();
      Millisecond millisecond0 = new Millisecond();
      month0.compareTo(millisecond0);
      month0.getSerialIndex();
      month0.next();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "minute";
      // Undeclared exception!
      try { 
        Month.parseMonth("minute");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the month.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Year year0 = new Year();
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.UK;
      locale0.getDisplayVariant(locale1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      MockDate mockDate0 = new MockDate((-9999), (-1), 9999);
      Month month0 = new Month(mockDate0);
      month0.previous();
      year0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      Month month1 = null;
      try {
        month1 = new Month((-2059), year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Month outside valid range.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Month month0 = new Month();
      month0.getMiddleMillisecond();
      month0.getYear();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Month month0 = new Month();
      month0.next();
      month0.previous();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Month month0 = new Month();
      month0.previous();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        Month.parseMonth("O}}a;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = " ";
      // Undeclared exception!
      try { 
        Month.parseMonth(" ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockDate mockDate0 = new MockDate(305, (-1532), 305);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      month0.getYearValue();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.TAIWAN;
      Month month0 = null;
      try {
        month0 = new Month(mockDate0, (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockDate mockDate0 = new MockDate(46, 46, 46);
      Month month0 = new Month(mockDate0);
      month0.getMonth();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        Month.parseMonth("5`}-<1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the month.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Month month0 = null;
      try {
        month0 = new Month(0, 2723);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Month outside valid range.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Month month0 = new Month();
      String string0 = "";
      Calendar calendar0 = null;
      // Undeclared exception!
      try { 
        month0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Month month0 = new Month();
      month0.getYear();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        Month.parseMonth("Can't evaluate the year.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the month.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Month month0 = null;
      try {
        month0 = new Month(1615, 1615);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Month outside valid range.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Month month0 = new Month();
      month0.getMonth();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Month month0 = new Month();
      Locale locale0 = Locale.ITALIAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      month0.peg(calendar0);
      month0.getMiddleMillisecond();
      month0.getYearValue();
      locale0.getDisplayScript();
      month0.getFirstMillisecond(calendar0);
      month0.peg(calendar0);
      month0.getMiddleMillisecond();
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      month0.getLastMillisecond();
      month0.getFirstMillisecond();
      month0.getFirstMillisecond();
      RegularTimePeriod regularTimePeriod1 = month0.next();
      Day day0 = new Day();
      day0.previous();
      day0.getSerialIndex();
      day0.getSerialIndex();
      month0.equals(day0);
      month0.toString();
      Month month1 = new Month();
      month0.getFirstMillisecond(calendar0);
      month0.hashCode();
      RegularTimePeriod regularTimePeriod2 = month0.next();
      month0.getSerialIndex();
      month0.getYear();
      month0.toString();
      month0.getYearValue();
      month0.peg(calendar0);
      month0.getMonth();
      month0.getMonth();
      month1.compareTo(regularTimePeriod1);
      System.setCurrentTimeMillis(0L);
      regularTimePeriod0.previous();
      ((Month) regularTimePeriod2).equals("February 2014");
      Month month2 = Month.parseMonth("February 2014");
      month2.getLastMillisecond();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Month month0 = null;
      try {
        month0 = new Month(14, 1900);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Month outside valid range.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Year year0 = new Year();
      Month month0 = null;
      try {
        month0 = new Month((-3462), year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Month outside valid range.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Month month0 = null;
      try {
        month0 = new Month((-1669), (-80));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Month outside valid range.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 30;
      Month month0 = null;
      try {
        month0 = new Month(30, (Year) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Month outside valid range.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.getTimeZone();
      locale0.getUnicodeLocaleKeys();
      locale0.stripExtensions();
      locale0.getDisplayCountry();
      mockGregorianCalendar0.getTimeZone();
      mockGregorianCalendar0.getTimeInMillis();
      // Undeclared exception!
      try { 
        Month.parseMonth("[-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the month.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Month month0 = new Month();
      Month month1 = new Month();
      int int0 = (-2036);
      int int1 = 1900;
      int int2 = 999;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2036), 1900, 1900, 999, 999);
      mockGregorianCalendar0.clear();
      month1.equals(month0);
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.getMaximum(999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 999
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        Month.parseMonth("!aHOm7eYvp)N_:<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the month.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      mockDate0.setTime((-824L));
      Month month0 = new Month(mockDate0);
      month0.compareTo(mockDate0);
      month0.getEnd();
      month0.getEnd();
      mockDate0.setTime(23);
      month0.getFirstMillisecond();
      month0.getYear();
      mockDate0.setTime(0);
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      month0.getYearValue();
      regularTimePeriod0.getLastMillisecond();
      month0.getMonth();
      Month month1 = (Month)month0.previous();
      ((Month) regularTimePeriod0).equals(month0);
      month1.getYear();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(12, (String) null, 1924, 953, 23, 953, 0, 23, 534, 12, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockDate mockDate0 = new MockDate(13L);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      month0.previous();
      Month month1 = new Month();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4L);
      TimeZone.getDefault();
      Month month0 = new Month();
      Millisecond millisecond0 = new Millisecond();
      month0.compareTo(millisecond0);
      month0.compareTo((Object) null);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Month month0 = new Month();
      Locale locale0 = Locale.ITALIAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      month0.peg(calendar0);
      month0.getMiddleMillisecond();
      month0.getYearValue();
      month0.getFirstMillisecond(calendar0);
      month0.peg(calendar0);
      month0.getMiddleMillisecond();
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      month0.getLastMillisecond();
      month0.getFirstMillisecond();
      month0.getFirstMillisecond();
      Month month1 = (Month)month0.next();
      Day day0 = new Day();
      day0.previous();
      day0.getSerialIndex();
      day0.getSerialIndex();
      month0.equals(day0);
      month0.toString();
      Month month2 = (Month)month0.next();
      month0.getFirstMillisecond(calendar0);
      month0.hashCode();
      Month month3 = (Month)month0.next();
      month0.getSerialIndex();
      month0.getYear();
      month0.toString();
      month0.getYearValue();
      month0.peg(calendar0);
      month0.getMonth();
      month0.getMonth();
      month2.compareTo(month1);
      System.setCurrentTimeMillis(0L);
      Month month4 = (Month)regularTimePeriod0.previous();
      month3.equals("February 2014");
      month1.getYear();
      month4.next();
      Month.parseMonth("February 2014");
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Month month0 = new Month();
      Locale locale0 = Locale.ITALIAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      month0.peg(calendar0);
      month0.getMiddleMillisecond();
      month0.getYearValue();
      month0.getFirstMillisecond(calendar0);
      month0.peg(calendar0);
      month0.getMiddleMillisecond();
      month0.previous();
      // Undeclared exception!
      try { 
        Month.parseMonth("1,p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the month.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Month month0 = new Month(12, 1374);
      RegularTimePeriod regularTimePeriod0 = month0.next();
      assertNotNull(regularTimePeriod0);
      
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.previous();
      assertNull(regularTimePeriod1);
      assertEquals(16501L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Month month0 = new Month();
      int int0 = MonthConstants.JUNE;
      assertEquals(6, int0);
  }
}
