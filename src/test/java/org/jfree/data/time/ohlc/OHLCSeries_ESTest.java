/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:30:17 GMT 2019
 */

package org.jfree.data.time.ohlc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.ohlc.OHLCItem;
import org.jfree.data.time.ohlc.OHLCSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OHLCSeries_ESTest extends OHLCSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OHLCItem oHLCItem0 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      OHLCSeries oHLCSeries0 = new OHLCSeries(oHLCItem0);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      OHLCItem oHLCItem1 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      doReturn((double)31).when(oHLCItem1).getCloseValue();
      doReturn((double)31).when(oHLCItem1).getHighValue();
      doReturn((double)0).when(oHLCItem1).getLowValue();
      doReturn((double)0).when(oHLCItem1).getOpenValue();
      doReturn(regularTimePeriod0).when(oHLCItem1).getPeriod();
      oHLCSeries0.add(oHLCItem1);
      OHLCItem oHLCItem2 = (OHLCItem)oHLCSeries0.remove(0);
      assertEquals(31.0, oHLCItem2.getHighValue(), 0.01);
      assertEquals(0.0, oHLCItem2.getOpenValue(), 0.01);
      assertEquals(0.0, oHLCItem2.getLowValue(), 0.01);
      assertEquals(31.0, oHLCItem2.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OHLCItem oHLCItem0 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      OHLCSeries oHLCSeries0 = new OHLCSeries(oHLCItem0);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      OHLCItem oHLCItem1 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      doReturn(1.5).when(oHLCItem1).getCloseValue();
      doReturn((-1451.670074010833)).when(oHLCItem1).getHighValue();
      doReturn((double)31).when(oHLCItem1).getLowValue();
      doReturn(0.0).when(oHLCItem1).getOpenValue();
      doReturn(regularTimePeriod0).when(oHLCItem1).getPeriod();
      oHLCSeries0.add(oHLCItem1);
      OHLCItem oHLCItem2 = (OHLCItem)oHLCSeries0.getDataItem(0);
      assertEquals(31.0, oHLCItem2.getLowValue(), 0.01);
      assertEquals((-1451.670074010833), oHLCItem2.getHighValue(), 0.01);
      assertEquals(0.0, oHLCItem2.getOpenValue(), 0.01);
      assertEquals(1.5, oHLCItem2.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OHLCItem oHLCItem0 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      OHLCSeries oHLCSeries0 = new OHLCSeries(oHLCItem0);
      // Undeclared exception!
      try { 
        oHLCSeries0.remove((-842));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OHLCItem oHLCItem0 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      OHLCSeries oHLCSeries0 = new OHLCSeries(oHLCItem0);
      // Undeclared exception!
      try { 
        oHLCSeries0.getPeriod((-14));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OHLCItem oHLCItem0 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      OHLCSeries oHLCSeries0 = new OHLCSeries(oHLCItem0);
      // Undeclared exception!
      try { 
        oHLCSeries0.getDataItem((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OHLCItem oHLCItem0 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      OHLCSeries oHLCSeries0 = new OHLCSeries(oHLCItem0);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn((-724), 0).when(regularTimePeriod0).compareTo(any());
      doReturn("").when(regularTimePeriod0).toString();
      OHLCItem oHLCItem1 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      doReturn((double)31).when(oHLCItem1).getCloseValue();
      doReturn(781.29).when(oHLCItem1).getHighValue();
      doReturn((-1124.3820071328776)).when(oHLCItem1).getLowValue();
      doReturn(0.0).when(oHLCItem1).getOpenValue();
      doReturn(regularTimePeriod0).when(oHLCItem1).getPeriod();
      oHLCSeries0.add(oHLCItem1);
      RegularTimePeriod regularTimePeriod1 = oHLCSeries0.getPeriod(0);
      oHLCSeries0.add(regularTimePeriod1, 2369.467, 2369.467, (-1.0), 2335.0);
      OHLCItem oHLCItem2 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      doReturn((double)31).when(oHLCItem2).getCloseValue();
      doReturn((double)31).when(oHLCItem2).getHighValue();
      doReturn((double)31).when(oHLCItem2).getLowValue();
      doReturn((double)31).when(oHLCItem2).getOpenValue();
      doReturn(regularTimePeriod1).when(oHLCItem2).getPeriod();
      // Undeclared exception!
      try { 
        oHLCSeries0.add(oHLCItem2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.ComparableObjectSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OHLCItem oHLCItem0 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      OHLCSeries oHLCSeries0 = new OHLCSeries(oHLCItem0);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      OHLCItem oHLCItem1 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      doReturn(1.5).when(oHLCItem1).getCloseValue();
      doReturn((-1451.670074010833)).when(oHLCItem1).getHighValue();
      doReturn((double)31).when(oHLCItem1).getLowValue();
      doReturn(0.0).when(oHLCItem1).getOpenValue();
      doReturn(regularTimePeriod0).when(oHLCItem1).getPeriod();
      oHLCSeries0.add(oHLCItem1);
      OHLCItem oHLCItem2 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(oHLCItem2).getCloseValue();
      doReturn(0.0).when(oHLCItem2).getHighValue();
      doReturn(0.0).when(oHLCItem2).getLowValue();
      doReturn(0.0).when(oHLCItem2).getOpenValue();
      doReturn((RegularTimePeriod) null).when(oHLCItem2).getPeriod();
      // Undeclared exception!
      try { 
        oHLCSeries0.add(oHLCItem2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.ohlc.OHLCSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OHLCItem oHLCItem0 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      OHLCSeries oHLCSeries0 = new OHLCSeries(oHLCItem0);
      OHLCItem oHLCItem1 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(oHLCItem1).getCloseValue();
      doReturn(0.0).when(oHLCItem1).getHighValue();
      doReturn(0.0).when(oHLCItem1).getLowValue();
      doReturn(0.0).when(oHLCItem1).getOpenValue();
      doReturn((RegularTimePeriod) null).when(oHLCItem1).getPeriod();
      // Undeclared exception!
      try { 
        oHLCSeries0.add(oHLCItem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OHLCItem oHLCItem0 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      OHLCSeries oHLCSeries0 = new OHLCSeries(oHLCItem0);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(regularTimePeriod0).compareTo(any());
      doReturn((String) null).when(regularTimePeriod0).toString();
      OHLCItem oHLCItem1 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      doReturn(1.5).when(oHLCItem1).getCloseValue();
      doReturn((-1451.670074010833)).when(oHLCItem1).getHighValue();
      doReturn((double)31).when(oHLCItem1).getLowValue();
      doReturn(0.0).when(oHLCItem1).getOpenValue();
      doReturn(regularTimePeriod0).when(oHLCItem1).getPeriod();
      oHLCSeries0.add(oHLCItem1);
      RegularTimePeriod regularTimePeriod1 = oHLCSeries0.getPeriod(0);
      // Undeclared exception!
      try { 
        oHLCSeries0.add(regularTimePeriod1, 0.0, (double) 0, (double) 0, 811.702);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.ComparableObjectSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OHLCSeries oHLCSeries0 = null;
      try {
        oHLCSeries0 = new OHLCSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OHLCItem oHLCItem0 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      OHLCSeries oHLCSeries0 = new OHLCSeries(oHLCItem0);
      // Undeclared exception!
      try { 
        oHLCSeries0.add((RegularTimePeriod) null, 1968.89, 1522.2475516178358, 379.628, (-1451.670074010833));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OHLCItem oHLCItem0 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      OHLCSeries oHLCSeries0 = new OHLCSeries(oHLCItem0);
      // Undeclared exception!
      try { 
        oHLCSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OHLCItem oHLCItem0 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      OHLCSeries oHLCSeries0 = new OHLCSeries(oHLCItem0);
      // Undeclared exception!
      try { 
        oHLCSeries0.getPeriod(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OHLCItem oHLCItem0 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      OHLCSeries oHLCSeries0 = new OHLCSeries(oHLCItem0);
      // Undeclared exception!
      try { 
        oHLCSeries0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OHLCItem oHLCItem0 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      OHLCSeries oHLCSeries0 = new OHLCSeries(oHLCItem0);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      OHLCItem oHLCItem1 = mock(OHLCItem.class, new ViolatedAssumptionAnswer());
      doReturn((double)31).when(oHLCItem1).getCloseValue();
      doReturn(781.29).when(oHLCItem1).getHighValue();
      doReturn((-1124.3820071328776)).when(oHLCItem1).getLowValue();
      doReturn(0.0).when(oHLCItem1).getOpenValue();
      doReturn(regularTimePeriod0).when(oHLCItem1).getPeriod();
      oHLCSeries0.add(oHLCItem1);
      // Undeclared exception!
      try { 
        oHLCSeries0.add((RegularTimePeriod) null, (double) 0, 781.29, 781.29, 321.45981);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.ohlc.OHLCSeries", e);
      }
  }
}
