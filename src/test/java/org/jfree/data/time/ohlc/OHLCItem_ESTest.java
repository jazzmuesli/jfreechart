/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:24:38 GMT 2019
 */

package org.jfree.data.time.ohlc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.ohlc.OHLCItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OHLCItem_ESTest extends OHLCItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      OHLCItem oHLCItem0 = new OHLCItem(regularTimePeriod0, (-1113.175), (-1113.175), (-1113.175), 456.70644);
      double double0 = oHLCItem0.getYValue();
      assertEquals(456.70644, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      OHLCItem oHLCItem0 = new OHLCItem(regularTimePeriod0, (-2383.9893599280094), (-2383.9893599280094), (-2383.9893599280094), (-4243.833));
      double double0 = oHLCItem0.getYValue();
      assertEquals((-4243.833), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      OHLCItem oHLCItem0 = new OHLCItem(regularTimePeriod0, 755.68792452, 1.0, 755.68792452, 0.0);
      double double0 = oHLCItem0.getOpenValue();
      assertEquals(755.68792452, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      OHLCItem oHLCItem0 = new OHLCItem(regularTimePeriod0, (-1174.0), (-1174.0), (-1.0), (-1.0));
      double double0 = oHLCItem0.getOpenValue();
      assertEquals((-1174.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      OHLCItem oHLCItem0 = new OHLCItem(regularTimePeriod0, (-1075.1138014), 2777.1039843169, 361.75399042, 2777.1039843169);
      double double0 = oHLCItem0.getLowValue();
      assertEquals(361.75399042, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      OHLCItem oHLCItem0 = new OHLCItem(regularTimePeriod0, (-2315.99682827), 1.0, (-2315.99682827), (-2315.99682827));
      double double0 = oHLCItem0.getLowValue();
      assertEquals((-2315.99682827), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      OHLCItem oHLCItem0 = new OHLCItem(regularTimePeriod0, 1632.0, 1632.0, 0.0, 0.0);
      double double0 = oHLCItem0.getHighValue();
      assertEquals(1632.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      OHLCItem oHLCItem0 = new OHLCItem(regularTimePeriod0, (-2383.9893599280094), (-2383.9893599280094), (-2383.9893599280094), (-4243.833));
      double double0 = oHLCItem0.getHighValue();
      assertEquals((-2383.9893599280094), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      OHLCItem oHLCItem0 = new OHLCItem(regularTimePeriod0, 0.0, 0.0, 0.0, 3646.86388);
      double double0 = oHLCItem0.getCloseValue();
      assertEquals(3646.86388, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      OHLCItem oHLCItem0 = new OHLCItem(regularTimePeriod0, (-2383.9893599280094), (-2383.9893599280094), (-2383.9893599280094), (-4243.833));
      double double0 = oHLCItem0.getCloseValue();
      assertEquals((-4243.833), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OHLCItem oHLCItem0 = null;
      try {
        oHLCItem0 = new OHLCItem((RegularTimePeriod) null, (-545.49), 3145.455650607, 3145.455650607, (-545.49));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      OHLCItem oHLCItem0 = new OHLCItem(regularTimePeriod0, 0, 0, 0, 0);
      double double0 = oHLCItem0.getCloseValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      OHLCItem oHLCItem0 = new OHLCItem(regularTimePeriod0, 0, 0, 0, 0);
      double double0 = oHLCItem0.getLowValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      OHLCItem oHLCItem0 = new OHLCItem(regularTimePeriod0, 0, 0, 0, 0);
      double double0 = oHLCItem0.getHighValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      OHLCItem oHLCItem0 = new OHLCItem(regularTimePeriod0, 0, 0, 0, 0);
      double double0 = oHLCItem0.getOpenValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn("T/Hl").when(regularTimePeriod0).toString();
      OHLCItem oHLCItem0 = new OHLCItem(regularTimePeriod0, 0, 0, 0, 0);
      RegularTimePeriod regularTimePeriod1 = oHLCItem0.getPeriod();
      assertSame(regularTimePeriod1, regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      OHLCItem oHLCItem0 = new OHLCItem(regularTimePeriod0, 0, 0, 0, 0);
      double double0 = oHLCItem0.getYValue();
      assertEquals(0.0, double0, 0.01);
  }
}
