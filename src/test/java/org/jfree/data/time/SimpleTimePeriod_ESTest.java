/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:00:44 GMT 2019
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.date.SpreadsheetDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SimpleTimePeriod_ESTest extends SimpleTimePeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1826L), 2L);
      simpleTimePeriod0.hashCode();
      assertEquals((-1826L), simpleTimePeriod0.getStartMillis());
      assertEquals(2L, simpleTimePeriod0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1826L), 2L);
      int int0 = simpleTimePeriod0.compareTo(simpleTimePeriod0);
      assertEquals(0, int0);
      assertEquals((-1826L), simpleTimePeriod0.getStartMillis());
      assertEquals(2L, simpleTimePeriod0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1321, 1321, 1321);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      long long0 = simpleTimePeriod0.getStartMillis();
      assertEquals(43065734400000L, long0);
      assertEquals(43065734400000L, simpleTimePeriod0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1826L), 2L);
      long long0 = simpleTimePeriod0.getStartMillis();
      assertEquals(2L, simpleTimePeriod0.getEndMillis());
      assertEquals((-1826L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      long long0 = simpleTimePeriod0.getEndMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2639), (-2639), (-2639), 3715, 0, 0);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      long long0 = simpleTimePeriod0.getEndMillis();
      assertEquals((-92643109200000L), simpleTimePeriod0.getStartMillis());
      assertEquals((-92643109200000L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1360L), (-1360L));
      // Undeclared exception!
      try { 
        simpleTimePeriod0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-526L), (-526L));
      Date date0 = simpleTimePeriod0.getStart();
      // Undeclared exception!
      try { 
        simpleTimePeriod0.compareTo(date0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockDate cannot be cast to org.jfree.data.time.TimePeriod
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = null;
      try {
        simpleTimePeriod0 = new SimpleTimePeriod((Date) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = null;
      try {
        simpleTimePeriod0 = new SimpleTimePeriod(3048L, 2L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      Date date0 = simpleTimePeriod0.getEnd();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-510L), (-510L));
      Date date0 = simpleTimePeriod0.getStart();
      Week week0 = new Week(date0);
      int int0 = simpleTimePeriod0.compareTo(week0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(150L, 150L);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(334);
      Date date0 = spreadsheetDate0.toDate();
      Year year0 = new Year(date0);
      int int0 = simpleTimePeriod0.compareTo(year0);
      assertEquals((-1), int0);
      assertEquals(150L, simpleTimePeriod0.getEndMillis());
      assertEquals(150L, simpleTimePeriod0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-510L), (-510L));
      Date date0 = simpleTimePeriod0.getStart();
      Week week0 = new Week(date0);
      boolean boolean0 = simpleTimePeriod0.equals(week0);
      assertEquals((-510L), simpleTimePeriod0.getEndMillis());
      assertEquals((-510L), week0.getFirstMillisecond());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(150L, 150L);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(334);
      Date date0 = spreadsheetDate0.toDate();
      Year year0 = new Year(date0);
      boolean boolean0 = simpleTimePeriod0.equals(year0);
      assertEquals(150L, simpleTimePeriod0.getStartMillis());
      assertEquals(150L, simpleTimePeriod0.getEndMillis());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      boolean boolean0 = simpleTimePeriod0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2L, 2L);
      boolean boolean0 = simpleTimePeriod0.equals(simpleTimePeriod0);
      assertTrue(boolean0);
      assertEquals(2L, simpleTimePeriod0.getStartMillis());
      assertEquals(2L, simpleTimePeriod0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      MockDate mockDate0 = new MockDate(0L);
      Hour hour0 = new Hour(mockDate0);
      boolean boolean0 = simpleTimePeriod0.equals(hour0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      MockDate mockDate1 = new MockDate(0, (-207), 0, 0, 2893, 2893);
      SimpleTimePeriod simpleTimePeriod0 = null;
      try {
        simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2L, 2L);
      long long0 = simpleTimePeriod0.getEndMillis();
      assertEquals(2L, simpleTimePeriod0.getStartMillis());
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      long long0 = simpleTimePeriod0.getStartMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1119, 1119, 1119, 1119, 1119, 0);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      Minute minute0 = new Minute();
      Day day0 = minute0.getDay();
      int int0 = simpleTimePeriod0.compareTo(day0);
      assertEquals(1, int0);
  }
}
