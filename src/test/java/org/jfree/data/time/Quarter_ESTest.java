/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:47:00 GMT 2019
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Quarter_ESTest extends Quarter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      regularTimePeriod0.compareTo(quarter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2441, 2441, 2441, (-288), 2126, 2441);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      Quarter quarter1 = new Quarter();
      ((Quarter) regularTimePeriod0).equals(quarter1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-66), (-66), 1401);
      Quarter quarter0 = new Quarter(mockDate0);
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      quarter0.equals(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2438, 140, 212, 274, (-2593));
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2438);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ENGLISH;
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      Quarter.parseQuarter("Q2/1832");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Quarter quarter0 = new Quarter(1, 0);
      quarter0.getYearValue();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Quarter quarter0 = new Quarter(1, (-5375));
      quarter0.getYear();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Quarter quarter0 = new Quarter(4, 4);
      System.setCurrentTimeMillis(0L);
      quarter0.getYear();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      System.setCurrentTimeMillis((-290L));
      quarter0.getYear();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter(mockDate0);
      Calendar calendar0 = MockCalendar.getInstance();
      quarter0.getLastMillisecond(calendar0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 1, 1, 4, 4);
      mockGregorianCalendar0.add(1, 4);
      quarter0.getLastMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1976, 635, 418, 0);
      quarter0.peg(mockGregorianCalendar0);
      quarter0.getLastMillisecond();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      quarter0.getLastMillisecond();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      Quarter quarter0 = new Quarter(mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 53, 23, 23, 1);
      quarter0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 1, 1, 4, 4);
      mockGregorianCalendar0.add(1, 4);
      quarter0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      quarter0.getFirstMillisecond();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-931), 0, 0, 121);
      Quarter quarter0 = new Quarter(mockDate0);
      // Undeclared exception!
      try { 
        quarter0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quarter.parseQuarter("org.jfree.data.time.Quarter");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"u\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quarter.parseQuarter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      // Undeclared exception!
      try { 
        quarter0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      // Undeclared exception!
      try { 
        quarter0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter(4, (Year) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-952), 10, (-952));
      TimeZone timeZone0 = TimeZone.getDefault();
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter(mockDate0, timeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1055), (-1055), (-1055));
      Quarter quarter0 = new Quarter(mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, (-3480), (-2226), 0);
      quarter0.peg(mockGregorianCalendar0);
      quarter0.getFirstMillisecond();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1055), (-1055), (-1055));
      Quarter quarter0 = new Quarter(mockDate0);
      quarter0.getYearValue();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1055), (-1055), (-1055));
      Quarter quarter0 = new Quarter(mockDate0);
      quarter0.getLastMillisecond();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1055), (-1055), (-1055));
      Quarter quarter0 = new Quarter(mockDate0);
      quarter0.getFirstMillisecond();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Quarter quarter0 = new Quarter(4, 4);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2045), 1, 24);
      quarter0.getLastMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      quarter0.getQuarter();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      quarter0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quarter.parseQuarter("U$VKTO]%zPQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Q found at end of string.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quarter.parseQuarter("The 'year' argument must be in range 1900 to 9999.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing Q.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Week week0 = new Week(1, 1);
      quarter0.compareTo(week0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      quarter0.compareTo(calendar0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2441, 2441, 2441, (-273), 2126, 2441);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      Year year0 = new Year(date0);
      Quarter quarter1 = new Quarter(1, year0);
      ((Quarter) regularTimePeriod0).equals(quarter1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2441, 2441, 2441, (-273), 2126, 2441);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      Year year0 = new Year(date0);
      Quarter quarter1 = new Quarter(4, year0);
      ((Quarter) regularTimePeriod0).equals(quarter1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Object object0 = new Object();
      quarter0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2441, 2441, 2441, (-273), 2126, 2441);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      quarter0.equals(quarter0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      quarter0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      quarter0.compareTo(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2441, 2441, 2441, (-273), 2126, 2441);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      Quarter quarter1 = (Quarter)quarter0.next();
      assertNotNull(quarter1);
      
      Quarter quarter2 = (Quarter)quarter1.previous();
      assertNull(quarter2);
      assertEquals(1583, quarter1.getYearValue());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Year year0 = new Year();
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter(9999, year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quarter outside valid range.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Quarter quarter0 = Quarter.parseQuarter("Q1/2014");
      assertEquals(8057L, quarter0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Year year0 = new Year((-92));
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter((-92), year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quarter outside valid range.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter(5, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quarter outside valid range.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Quarter quarter1 = (Quarter)quarter0.next();
      int int0 = quarter0.compareTo(quarter1);
      assertEquals(2, quarter1.getQuarter());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quarter outside valid range.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      long long0 = quarter0.getSerialIndex();
      assertEquals(8057L, long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      quarter0.hashCode();
      assertEquals(8057L, quarter0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      String string0 = quarter0.toString();
      assertEquals("Q1/2014", string0);
  }
}
