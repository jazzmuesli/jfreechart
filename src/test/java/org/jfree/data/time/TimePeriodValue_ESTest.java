/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:03:15 GMT 2019
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.date.SpreadsheetDate;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimePeriodValue_ESTest extends TimePeriodValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) regularTimePeriod0, 585.032959495);
      timePeriodValue0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Month month0 = new Month();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) month0, (-1.0));
      timePeriodValue0.setValue((Number) null);
      Number number0 = timePeriodValue0.getValue();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(612);
      Date date0 = spreadsheetDate0.toDate();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(date0, date0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) simpleTimePeriod0, (-1541.0456834));
      Number number0 = timePeriodValue0.getValue();
      assertEquals((-1541.0456834), number0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) hour0, (Number) 0);
      Number number0 = timePeriodValue0.getValue();
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, (Number) 999);
      Number number0 = timePeriodValue0.getValue();
      assertEquals(999, number0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimePeriodValue timePeriodValue0 = null;
      try {
        timePeriodValue0 = new TimePeriodValue((TimePeriod) null, (Number) 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, 585.032959495);
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)timePeriodValue0.getPeriod();
      assertEquals(1392409281320L, fixedMillisecond1.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, 585.032959495);
      Number number0 = timePeriodValue0.getValue();
      assertEquals(585.032959495, number0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Double double0 = new Double(0.0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, (Number) double0);
      timePeriodValue0.setValue((Number) null);
      timePeriodValue0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Double double0 = new Double(0.0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, (Number) double0);
      TimePeriodValue timePeriodValue1 = new TimePeriodValue((TimePeriod) fixedMillisecond0, (Number) double0);
      timePeriodValue1.setValue((Number) null);
      assertFalse(timePeriodValue1.equals((Object)timePeriodValue0));
      
      timePeriodValue0.setValue((Number) null);
      boolean boolean0 = timePeriodValue1.equals(timePeriodValue0);
      assertTrue(timePeriodValue1.equals((Object)timePeriodValue0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Double double0 = new Double(0.0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, (Number) double0);
      TimePeriodValue timePeriodValue1 = new TimePeriodValue((TimePeriod) fixedMillisecond0, (Number) double0);
      assertTrue(timePeriodValue1.equals((Object)timePeriodValue0));
      
      timePeriodValue1.setValue((Number) null);
      boolean boolean0 = timePeriodValue1.equals(timePeriodValue0);
      assertFalse(timePeriodValue1.equals((Object)timePeriodValue0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) regularTimePeriod0, (Number) (-9999));
      TimePeriodValue timePeriodValue1 = new TimePeriodValue((TimePeriod) year0, (double) 9999);
      boolean boolean0 = timePeriodValue0.equals(timePeriodValue1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Double double0 = new Double(0.0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, (Number) double0);
      boolean boolean0 = timePeriodValue0.equals("TimePeriodValue[Fri Feb 14 20:21:21 GMT 2014,null]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Double double0 = new Double(0.0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, (Number) double0);
      boolean boolean0 = timePeriodValue0.equals(timePeriodValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Double double0 = new Double(0.0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, (Number) double0);
      TimePeriodValue timePeriodValue1 = new TimePeriodValue((TimePeriod) fixedMillisecond0, (Number) double0);
      assertTrue(timePeriodValue1.equals((Object)timePeriodValue0));
      
      timePeriodValue1.setValue((Number) null);
      boolean boolean0 = timePeriodValue0.equals(timePeriodValue1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimePeriodValue timePeriodValue0 = null;
      try {
        timePeriodValue0 = new TimePeriodValue((TimePeriod) null, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Double double0 = new Double(0.0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, (Number) double0);
      Object object0 = timePeriodValue0.clone();
      boolean boolean0 = timePeriodValue0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Double double0 = new Double(0.0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, (Number) double0);
      String string0 = timePeriodValue0.toString();
      assertEquals("TimePeriodValue[Fri Feb 14 20:21:21 GMT 2014,0.0]", string0);
  }
}
