/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:29:12 GMT 2019
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.date.SerialDate;
import org.jfree.chart.date.SpreadsheetDate;
import org.jfree.data.DomainOrder;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.MovingAverage;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.VectorDataItem;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalDataItem;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MovingAverage_ESTest extends MovingAverage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertTrue(vectorSeriesCollection0.getNotify());
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((XYDataset) vectorSeriesCollection0, 1954, "", 4.9E-324, 4.9E-324);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.VectorSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("O/9f?x+kp", "", "date");
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("date", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = MovingAverage.createPointMovingAverage(timeSeries0, "source", 2);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("date", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertNull(timeSeries1.getDescription());
      assertNotNull(timeSeries1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      
      TimeSeries timeSeries0 = new TimeSeries(second0, "org.jfree.data.time.MovingAverage", "org.jfree.data.time.MovingAverage");
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("org.jfree.data.time.MovingAverage", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("org.jfree.data.time.MovingAverage", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("org.jfree.data.time.MovingAverage", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("org.jfree.data.time.MovingAverage", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(timeSeriesCollection0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0);
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 59, false);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("org.jfree.data.time.MovingAverage", timeSeries0.getRangeDescription());
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(59.0, timeSeries0.getMinY(), 0.01);
      assertEquals("org.jfree.data.time.MovingAverage", timeSeries0.getDomainDescription());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      TimeSeriesCollection timeSeriesCollection1 = MovingAverage.createMovingAverage(timeSeriesCollection0, "&_)$T[+&;92", 1349, 0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("org.jfree.data.time.MovingAverage", timeSeries0.getRangeDescription());
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(59.0, timeSeries0.getMinY(), 0.01);
      assertEquals("org.jfree.data.time.MovingAverage", timeSeries0.getDomainDescription());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection1.getDomainOrder());
      assertTrue(timeSeriesCollection1.getNotify());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection1.getXPosition());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(timeSeriesCollection1);
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertNotNull(timeSeriesCollection0);
      
      TimeSeriesCollection timeSeriesCollection1 = MovingAverage.createMovingAverage(timeSeriesCollection0, "", 1954, 1954);
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection1.getXPosition());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection1.getDomainOrder());
      assertTrue(timeSeriesCollection1.getNotify());
      assertNotNull(timeSeriesCollection1);
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1076);
      assertEquals(1902, spreadsheetDate0.getYYYY());
      assertEquals(11, spreadsheetDate0.getDayOfMonth());
      assertEquals(1076, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(12, spreadsheetDate0.getMonth());
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertNotNull(spreadsheetDate0);
      
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0, "JDBCCategoryDataset.executeQuery() : insufficient columns returned from the database.", "k])gj>EaZ`15o");
      assertEquals(1902, spreadsheetDate0.getYYYY());
      assertEquals(11, spreadsheetDate0.getDayOfMonth());
      assertEquals(1076, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(12, spreadsheetDate0.getMonth());
      assertTrue(timeSeries0.getNotify());
      assertEquals("JDBCCategoryDataset.executeQuery() : insufficient columns returned from the database.", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("k])gj>EaZ`15o", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(1902, spreadsheetDate0.getYYYY());
      assertEquals(11, spreadsheetDate0.getDayOfMonth());
      assertEquals(1076, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(12, spreadsheetDate0.getMonth());
      assertTrue(timeSeries0.getNotify());
      assertEquals("JDBCCategoryDataset.executeQuery() : insufficient columns returned from the database.", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("k])gj>EaZ`15o", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertNotNull(timeSeriesCollection0);
      
      timeSeries0.data = null;
      assertEquals(1902, spreadsheetDate0.getYYYY());
      assertEquals(11, spreadsheetDate0.getDayOfMonth());
      assertEquals(1076, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(12, spreadsheetDate0.getMonth());
      assertTrue(timeSeries0.getNotify());
      assertEquals("JDBCCategoryDataset.executeQuery() : insufficient columns returned from the database.", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("k])gj>EaZ`15o", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage(timeSeriesCollection0, "k])gj>EaZ`15o", 4, 261);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1885, 1885);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1884, dynamicTimeSeriesCollection0.getNewestIndex());
      assertTrue(dynamicTimeSeriesCollection0.getNotify());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((XYDataset) dynamicTimeSeriesCollection0, 0, "", (double) 2, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)MovingAverage.createMovingAverage((XYDataset) matrixSeriesCollection0, "periodCount must be greater than or equal to 2.", 1088L, 4593L);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertNotNull(xYSeriesCollection0);
      
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((XYDataset) xYSeriesCollection0, (-1088), "", (double) 4593L, (double) (-1088));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // skip must be >= 0.0.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotNull(matrixSeriesCollection0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)MovingAverage.createMovingAverage((XYDataset) matrixSeriesCollection0, "periodCount must be greater than or equal to 2.", (double) 4593L, (double) 4593L);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      
      TimeSeries timeSeries0 = new TimeSeries(second0, "org.jfree.data.time.MovingAverage", "org.jfree.data.time.MovingAverage");
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals("org.jfree.data.time.MovingAverage", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("org.jfree.data.time.MovingAverage", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(timeSeries0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 59, false);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals("org.jfree.data.time.MovingAverage", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("org.jfree.data.time.MovingAverage", timeSeries0.getDomainDescription());
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(59.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      TimeSeries timeSeries1 = MovingAverage.createMovingAverage(timeSeries0, "&_)$T[+&;92", 274, 1900);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals("org.jfree.data.time.MovingAverage", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("org.jfree.data.time.MovingAverage", timeSeries0.getDomainDescription());
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(59.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(timeSeries1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VectorDataItem vectorDataItem0 = new VectorDataItem((-2.147483648E9), 2166.878467712114, (-3359.47), 0.0);
      assertNotNull(vectorDataItem0);
      
      TimeSeries timeSeries0 = new TimeSeries(vectorDataItem0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = MovingAverage.createMovingAverage(timeSeries0, "/d", 4, 3389);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNotNull(timeSeries1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYIntervalDataItem xYIntervalDataItem0 = new XYIntervalDataItem(0.5, (-0.3580266014380658), (-0.3580266014380658), (-0.3580266014380658), 0.5, (-0.3580266014380658));
      assertNotNull(xYIntervalDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      MockDate mockDate0 = new MockDate(2033, 334, (-2145901912), 1210, 1351);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 334, 2033, (-1.0), 146.27806763270172, (-2145901912));
      assertEquals("Wed Sep 25 08:31:00 GMT 5871200", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItemArray0[0];
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItemArray0[0];
      oHLCDataItemArray0[5] = oHLCDataItemArray0[2];
      oHLCDataItemArray0[6] = oHLCDataItemArray0[0];
      oHLCDataItemArray0[7] = oHLCDataItemArray0[3];
      oHLCDataItemArray0[8] = oHLCDataItemArray0[3];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(xYIntervalDataItem0, oHLCDataItemArray0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertNotNull(defaultOHLCDataset0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)MovingAverage.createMovingAverage((XYDataset) defaultOHLCDataset0, "", 1698L, 2098L);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYIntervalDataItem xYIntervalDataItem0 = new XYIntervalDataItem(0.5, (-0.3580266014380658), (-0.3580266014380658), (-0.3580266014380658), 0.5, (-0.3580266014380658));
      assertNotNull(xYIntervalDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(xYIntervalDataItem0, oHLCDataItemArray0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((XYDataset) defaultOHLCDataset0, "", 1698L, 2098L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(801, 0, timeZone0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertTrue(dynamicTimeSeriesCollection0.getNotify());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      XYSeries xYSeries0 = MovingAverage.createMovingAverage((XYDataset) dynamicTimeSeriesCollection0, 182, "/ztk1}{%+R%Oex", (double) 182, (double) 0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertTrue(dynamicTimeSeriesCollection0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(xYSeries0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VectorDataItem vectorDataItem0 = new VectorDataItem((-2.147483648E9), 2166.878467712114, (-3359.47), 0.0);
      assertNotNull(vectorDataItem0);
      
      TimeSeries timeSeries0 = new TimeSeries(vectorDataItem0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertNotNull(timeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((XYDataset) timeSeriesCollection0, "_;D}t/*u\"+c@W2UD", 1457.70436968127, (-1356.675792085));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // skip must be >= 0.0.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertTrue(timeTableXYDataset0.getNotify());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(TimePeriodAnchor.START, timeTableXYDataset0.getXPosition());
      assertNotNull(timeTableXYDataset0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)MovingAverage.createMovingAverage((XYDataset) timeTableXYDataset0, (String) null, (-307L), (-307L));
      assertTrue(timeTableXYDataset0.getNotify());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(TimePeriodAnchor.START, timeTableXYDataset0.getXPosition());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((XYDataset) xYSeriesCollection0, 16, (String) null, (-738.0), (double) 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // period must be positive.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "org.jfree.data.time.MovingAverage", "org.jfree.data.time.MovingAverage");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 59, false);
      TimeSeries timeSeries1 = MovingAverage.createPointMovingAverage(timeSeries0, "&_)$T[+&;92", 1349);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "org.jfree.data.time.MovingAverage", "org.jfree.data.time.MovingAverage");
      // Undeclared exception!
      try { 
        MovingAverage.createPointMovingAverage(timeSeries0, "&_)$T[+&;92", (-386));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // periodCount must be greater than or equal to 2.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "org.jfree.data.time.MovingAverage", "org.jfree.data.time.MovingAverage");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 59, false);
      TimeSeries timeSeries1 = MovingAverage.createMovingAverage(timeSeries0, "&_)$T[+&;92", 274, (-446));
      assertEquals(59.0, timeSeries1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VectorDataItem vectorDataItem0 = new VectorDataItem((-2.147483648E9), 2166.878467712114, (-3359.47), 0.0);
      TimeSeries timeSeries0 = new TimeSeries(vectorDataItem0);
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage(timeSeries0, ".:x", 0, 3389);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // periodCount must be greater than or equal to 1.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0, "DefaultIntervalCategoryDataset: the number of series in the start value dataset does not match the number of series in the end value dataset.", "DefaultIntervalCategoryDataset: the number of series in the start value dataset does not match the number of series in the end value dataset.");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage(timeSeriesCollection0, "DefaultIntervalCategoryDataset: the number of series in the start value dataset does not match the number of series in the end value dataset.", 0, 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // periodCount must be greater than or equal to 1.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MovingAverage movingAverage0 = new MovingAverage();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((XYDataset) null, "2Z:'\u0007;>D-T<qG[Y!", (-3596L), (-3379L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
