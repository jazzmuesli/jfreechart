/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:37:34 GMT 2019
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.chrono.JapaneseDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.date.MonthConstants;
import org.jfree.chart.date.SerialDate;
import org.jfree.chart.date.SpreadsheetDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriodAnchor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Second_ESTest extends Second_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis((-1325L));
      Second second0 = new Second();
      Locale locale0 = Locale.UK;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      second0.getLastMillisecond(calendar0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      MockDate.UTC(0, 59, 0, 59, 59, 59);
      minute0.next();
      Second second0 = new Second(0, minute0);
      TimeZone timeZone0 = TimeZone.getDefault();
      MockCalendar.getInstance(timeZone0);
      minute0.previous();
      timeZone0.toZoneId();
      minute0.compareTo(timeZone0);
      second0.getMinute();
      second0.previous();
      second0.equals(mockDate0);
      second0.compareTo(mockDate0);
      mockDate0.before(mockDate0);
      System.setCurrentTimeMillis((-1734L));
      second0.next();
      second0.getMinute();
      second0.getSerialIndex();
      System.setCurrentTimeMillis(59);
      second0.getMinute();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-20), 1544, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      Second second0 = new Second(mockDate0, timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      second0.getEnd();
      second0.getFirstMillisecond(calendar0);
      second0.getMinute();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      second0.getSerialIndex();
      second0.getFirstMillisecond();
      int int0 = MonthConstants.JANUARY;
      calendar0.getLeastMaximum(0);
      second0.getLastMillisecond(calendar0);
      second0.getLastMillisecond(calendar0);
      second0.getLastMillisecond(calendar0);
      Second second1 = (Second)regularTimePeriod0.previous();
      second0.getLastMillisecond(calendar0);
      second0.getFirstMillisecond(calendar0);
      second0.getFirstMillisecond();
      Second second2 = (Second)second0.next();
      Second.parseSecond("");
      second0.hashCode();
      second0.getFirstMillisecond();
      second0.getFirstMillisecond();
      second0.getMinute();
      second0.equals(second0);
      second1.getSecond();
      second2.previous();
      second0.compareTo(second2);
      second1.getFirstMillisecond();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      MockDate.UTC(0, 59, (-2204), 59, 59, 59);
      minute0.next();
      Second second0 = new Second(0, minute0);
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.END;
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate.UTC((-2204), 59, 59, (-560), 59, 59);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      minute0.previous();
      timeZone0.toZoneId();
      minute0.compareTo(timeZone0);
      minute0.getMillisecond(timePeriodAnchor0, calendar0);
      second0.getMinute();
      second0.previous();
      second0.equals(mockDate0);
      second0.compareTo(mockDate0);
      MockDate mockDate1 = new MockDate();
      mockDate0.before(mockDate1);
      System.setCurrentTimeMillis(0);
      second0.next();
      second0.getMinute();
      second0.getSerialIndex();
      System.setCurrentTimeMillis(59);
      second0.getMinute();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      Second second0 = new Second(mockDate0, timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      second0.getEnd();
      second0.getFirstMillisecond(calendar0);
      second0.getMinute();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      second0.getSerialIndex();
      second0.getFirstMillisecond();
      second0.getLastMillisecond();
      second0.getSecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      calendar0.getLeastMaximum(0);
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      Second second1 = (Second)second0.previous();
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      regularTimePeriod0.previous();
      second0.getLastMillisecond(calendar0);
      second0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      second0.getFirstMillisecond();
      second0.next();
      second0.hashCode();
      second0.getFirstMillisecond();
      second0.getFirstMillisecond();
      second1.getMinute();
      second1.equals(second0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1544, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      Second second0 = new Second(mockDate0, timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      second0.getEnd();
      second0.getFirstMillisecond(calendar0);
      second0.getMinute();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      second0.getSerialIndex();
      second0.getFirstMillisecond();
      second0.getLastMillisecond();
      second0.getSecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      RegularTimePeriod regularTimePeriod1 = second0.previous();
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      regularTimePeriod0.previous();
      second0.getLastMillisecond(calendar0);
      second0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      second0.getFirstMillisecond();
      second0.next();
      second0.hashCode();
      second0.getFirstMillisecond();
      regularTimePeriod1.next();
      second0.next();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Second second0 = new Second();
      second0.getSerialIndex();
      second0.toString();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-79), 52, (-79));
      regularTimePeriod0.peg(mockGregorianCalendar0);
      second0.getMinute();
      regularTimePeriod0.next();
      second0.hashCode();
      second0.compareTo(regularTimePeriod0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "Fri Feb 14 20:21:21 GMT 2014", 59, (-785), 0, 1239, 0, (-785), 59, 13, (-1838));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 59
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Second second0 = new Second();
      // Undeclared exception!
      try { 
        second0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Second", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1544, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      Second second0 = new Second(mockDate0, timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      second0.getEnd();
      second0.getFirstMillisecond(calendar0);
      second0.getMinute();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      second0.getSerialIndex();
      second0.getFirstMillisecond();
      second0.getLastMillisecond();
      second0.getSecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      calendar0.getLeastMaximum(0);
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      Second second1 = (Second)regularTimePeriod0.previous();
      second0.getLastMillisecond(calendar0);
      second0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      second0.getFirstMillisecond();
      second0.next();
      second0.hashCode();
      second0.getFirstMillisecond();
      second0.getFirstMillisecond();
      second0.getMinute();
      second0.equals(second0);
      second1.getSecond();
      second0.getLastMillisecond();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1544, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      Second second0 = new Second(mockDate0, timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      second0.getEnd();
      second0.getFirstMillisecond(calendar0);
      second0.getMinute();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      second0.getSerialIndex();
      second0.getFirstMillisecond();
      second0.getLastMillisecond();
      second0.getSecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      calendar0.getLeastMaximum(0);
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      Second second1 = (Second)second0.previous();
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      regularTimePeriod0.previous();
      second0.getLastMillisecond(calendar0);
      second0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      second0.getFirstMillisecond();
      second0.next();
      second0.hashCode();
      second0.getFirstMillisecond();
      second0.getFirstMillisecond();
      second1.getMinute();
      second1.equals(second0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Second second0 = new Second();
      second0.previous();
      second0.getSerialIndex();
      second0.getMiddleMillisecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 5, 1031, 1, 0);
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.END;
      mockGregorianCalendar0.getActualMaximum(5);
      second0.next();
      mockGregorianCalendar0.add(1, 1524);
      second0.getMillisecond(timePeriodAnchor0, mockGregorianCalendar0);
      second0.peg(mockGregorianCalendar0);
      second0.getMiddleMillisecond();
      second0.getSerialIndex();
      second0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      second0.hashCode();
      second0.getFirstMillisecond();
      second0.hashCode();
      second0.getSerialIndex();
      second0.getLastMillisecond();
      second0.getFirstMillisecond();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1544, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      Second second0 = new Second(mockDate0, timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      second0.getEnd();
      second0.getFirstMillisecond(calendar0);
      second0.getMinute();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      second0.getSerialIndex();
      second0.getFirstMillisecond();
      second0.getLastMillisecond();
      second0.getSecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      second0.previous();
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      regularTimePeriod0.previous();
      second0.getLastMillisecond(calendar0);
      second0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      second0.getFirstMillisecond();
      second0.next();
      second0.hashCode();
      second0.getFirstMillisecond();
      second0.getFirstMillisecond();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate(720, 720, 720);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("Xw8cee.4q");
      Minute minute0 = new Minute(mockDate0, timeZone0, locale0);
      Second second0 = new Second(21, minute0);
      second0.getMinute();
      Minute minute1 = new Minute(mockDate0);
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.MIDDLE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-2020), 0, 0);
      minute1.getMillisecond(timePeriodAnchor0, mockGregorianCalendar0);
      Second second1 = new Second(720, minute1);
      second1.getMinute();
      // Undeclared exception!
      try { 
        second1.next();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Require 'second' (-47) to be in the range 0 to 59
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10);
      Second second0 = new Second(mockDate0);
      Instant instant0 = MockInstant.ofEpochSecond(3431L, (-1542L));
      Date.from(instant0);
      second0.getSecond();
      second0.getSerialIndex();
      second0.getSerialIndex();
      second0.hashCode();
      second0.getFirstMillisecond();
      Second.parseSecond("");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate(428L);
      Second second0 = new Second(mockDate0);
      second0.getSecond();
      second0.next();
      second0.getSerialIndex();
      second0.hashCode();
      second0.next();
      MockDate.UTC(59, 59, 17, 0, 0, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 132, 0);
      mockGregorianCalendar0.set(131, 131, 5151, (-267), 0, (-228));
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, 0, (-1834), 2, 13, (-688));
      mockGregorianCalendar1.isLeapYear(0);
      second0.getFirstMillisecond((Calendar) mockGregorianCalendar1);
      second0.equals(mockDate0);
      Calendar.getAvailableCalendarTypes();
      second0.getSerialIndex();
      second0.previous();
      second0.peg(mockGregorianCalendar1);
      second0.getSerialIndex();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Second second0 = new Second();
      second0.getSerialIndex();
      second0.toString();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      second0.getMinute();
      second0.hashCode();
      second0.compareTo(regularTimePeriod0);
      second0.previous();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "Fri Feb 14 20:21:21 GMT 2014", 59, (-785), 0, 1239, 0, (-785), 59, 13, (-1838));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 59
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate(13, 0, 181, 13, (-1656), 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      Second second0 = new Second(mockDate0, timeZone0, locale0);
      locale0.getExtension('h');
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      second0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      second0.getLastMillisecond();
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      mockGregorianCalendar0.set(2292, 181, 10, 13, 181, 0);
      Locale.getISOLanguages();
      mockGregorianCalendar0.getWeeksInWeekYear();
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.getActualMaximum(59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 59
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 244;
      MockDate mockDate0 = new MockDate(0, (-1551), 0, (-493), 244);
      TimeZone timeZone0 = TimeZone.getDefault();
      int int1 = 9999;
      MockDate mockDate1 = new MockDate(0, 9999, (-833));
      mockDate0.after(mockDate1);
      TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      Second second0 = null;
      try {
        second0 = new Second(mockDate0, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.inDaylightTime(mockDate0);
      timeZone0.clone();
      timeZone0.observesDaylightTime();
      timeZone0.setID("minute");
      Locale locale0 = Locale.CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      linkedList1.add(locale0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
      locale0.getDisplayCountry();
      Second second0 = new Second(mockDate0, timeZone0, locale0);
      second0.hashCode();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      second0.hashCode();
      second0.hashCode();
      second0.getLastMillisecond();
      second0.getLastMillisecond();
      second0.previous();
      second0.next();
      Second.parseSecond("minute");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Date date0 = null;
      Second second0 = null;
      try {
        second0 = new Second((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate(60L);
      Second second0 = new Second(mockDate0);
      mockDate0.getTime();
      mockDate0.toInstant();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "@jU");
      Locale locale0 = Locale.ITALY;
      locale0.getUnicodeLocaleAttributes();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      second0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      second0.getMinute();
      second0.hashCode();
      Millisecond millisecond0 = null;
      try {
        millisecond0 = new Millisecond(46, 59, 46, 59, 0, 4, 46);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Second second0 = new Second();
      Calendar calendar0 = MockCalendar.getInstance();
      second0.getFirstMillisecond(calendar0);
      second0.getSerialIndex();
      second0.getSerialIndex();
      second0.getLastMillisecond();
      second0.equals(calendar0);
      // Undeclared exception!
      try { 
        Second.parseSecond((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Second", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = new Locale(") outside valid range.", "[|t|,x.~c{l|;-D]\"", "[|t|,x.~c{l|;-D]\"");
      Locale locale1 = Locale.CHINESE;
      locale0.getDisplayVariant(locale1);
      locale0.getDisplayName();
      Minute.parseMinute(") outside valid range. ([|T|,X.~C{L|;-D]\",[|t|,x.~c{l|;-D]\")");
      MockCalendar.getInstance();
      Second.parseSecond("Quarter outside valid range.");
      Second.parseSecond("org.jfree.data.time.Quarter");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 2252;
      int int1 = 5;
      Second second0 = null;
      try {
        second0 = new Second((-162), 2252, (-162), 5, 5, 2252);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Require 'second' (-162) to be in the range 0 to 59
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Second second0 = new Second();
      second0.getLastMillisecond();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      second0.getSerialIndex();
      second0.compareTo(japaneseDate0);
      Second.parseSecond(")xwS;; `m");
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(90, 30, 3262);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'month' argument must be in the range 1 to 12.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Second second0 = new Second();
      second0.getLastMillisecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(59, 59, 37, (-61), 1, 0);
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.set((-61), 657);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Second.parseSecond("");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1882);
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, (-1882));
      Second second0 = null;
      try {
        second0 = new Second(mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Second second0 = new Second();
      second0.getSerialIndex();
      second0.getSerialIndex();
      Minute.parseMinute("O5ti#");
      Second second1 = null;
      try {
        second1 = new Second(0, (Minute) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'minute' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = (-81);
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-81), "");
      Locale locale0 = Locale.CANADA_FRENCH;
      Second second0 = null;
      try {
        second0 = new Second((Date) null, simpleTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Date date0 = Date.from(instant0);
      Second second0 = new Second(date0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(31, 59, 0);
      mockGregorianCalendar0.set(31, 31, 59);
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      Calendar calendar0 = MockCalendar.getInstance();
      second0.peg(calendar0);
      second0.getFirstMillisecond();
      Object object0 = new Object();
      second0.compareTo(object0);
      second0.hashCode();
      second0.getSecond();
      Month month0 = new Month();
      second0.compareTo(month0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Second second0 = new Second();
      Class<Object> class0 = Object.class;
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      RegularTimePeriod.createInstance(class0, (Date) null, timeZone0, locale0);
      second0.previous();
      second0.getMinute();
      second0.compareTo(class0);
      Second.parseSecond("");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Second second0 = new Second();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      second0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, 59, 1197, 1197, 59, 0);
      mockGregorianCalendar1.getActualMaximum(0);
      mockGregorianCalendar1.getWeeksInWeekYear();
      second0.peg(mockGregorianCalendar1);
      second0.previous();
      second0.getFirstMillisecond((Calendar) mockGregorianCalendar1);
      second0.getSecond();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Second second0 = new Second();
      second0.getMiddleMillisecond();
      second0.getMinute();
      second0.getEnd();
      second0.next();
      second0.next();
      second0.getStart();
      second0.getEnd();
      // Undeclared exception!
      try { 
        second0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Second", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Second second0 = null;
      try {
        second0 = new Second(213, (-2512), 399, (-2457), (-2512), 3568);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'month' argument must be in the range 1 to 12.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Second second0 = new Second();
      second0.equals("({*uO7Uz2V8J");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 231, 53, 0, 0);
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = new Locale("", "", "");
      Hour hour0 = new Hour(date0, simpleTimeZone0, locale0);
      Minute minute0 = new Minute(0, hour0);
      Second second0 = new Second(0, minute0);
      second0.next();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Minute minute0 = new Minute();
      Minute.parseMinute("H");
      Second second0 = new Second(0, minute0);
      second0.getMinute();
      second0.getLastMillisecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      second0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Second second0 = new Second();
      Calendar calendar0 = MockCalendar.getInstance();
      second0.peg(calendar0);
      second0.getSerialIndex();
      second0.hashCode();
      second0.getSerialIndex();
      second0.previous();
      second0.getFirstMillisecond();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Minute.parseMinute("bk;%LPnPAG");
      Second second0 = null;
      try {
        second0 = new Second(101, (Minute) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'minute' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Second second0 = new Second();
      Locale locale0 = Locale.CANADA_FRENCH;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      second0.getFirstMillisecond(calendar0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-27), 1544, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      Second second0 = new Second(mockDate0, timeZone0, locale0);
      MockDate mockDate1 = new MockDate(59, 1544, (-27));
      second0.getMinute();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      second0.getSerialIndex();
      second0.getFirstMillisecond();
      second0.getSecond();
      Second second1 = (Second)regularTimePeriod0.previous();
      second0.getFirstMillisecond();
      Second second2 = (Second)second0.next();
      second0.hashCode();
      second0.getFirstMillisecond();
      second0.getFirstMillisecond();
      second0.getMinute();
      second0.equals(second0);
      second1.getSecond();
      second2.previous();
      second0.compareTo(second2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      int int0 = (-2204);
      MockDate.UTC(0, 59, (-2204), 59, (-2204), 59);
      minute0.next();
      Second second0 = new Second(0, minute0);
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate.UTC((-2204), 0, 0, (-560), 0, 0);
      minute0.previous();
      timeZone0.toZoneId();
      minute0.compareTo(timeZone0);
      second0.getMinute();
      second0.previous();
      second0.equals(mockDate0);
      second0.compareTo(mockDate0);
      long long0 = (-1734L);
      MockDate mockDate1 = null;
      try {
        mockDate1 = new MockDate("second");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1544, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      Second second0 = new Second(mockDate0, timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      second0.getEnd();
      second0.getFirstMillisecond(calendar0);
      second0.getMinute();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      second0.getSerialIndex();
      second0.getFirstMillisecond();
      second0.getLastMillisecond();
      second0.getSecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      calendar0.getLeastMaximum(0);
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      Second second1 = (Second)second0.previous();
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      regularTimePeriod0.previous();
      second0.getLastMillisecond(calendar0);
      second0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      second0.getFirstMillisecond();
      second0.next();
      second0.hashCode();
      second0.getFirstMillisecond();
      second0.getFirstMillisecond();
      second1.getMinute();
      second1.equals(second0);
      Second.parseSecond("`7k@9k/._XGpf3");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Second second0 = new Second();
      second0.getSerialIndex();
      second0.toString();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      second0.getMinute();
      int int0 = Second.FIRST_SECOND_IN_MINUTE;
      second0.compareTo(regularTimePeriod0);
      second0.previous();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "Fri Feb 14 20:21:21 GMT 2014", 59, (-785), 0, 1239, 0, (-785), 59, 13, (-1838));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 59
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Second second0 = new Second();
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.getGregorianChange();
      TimeZone.getDefault();
      second0.getLastMillisecond();
      second0.getSerialIndex();
      Second.parseSecond(")xwS;; `m");
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      second0.toString();
      Locale locale1 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        locale1.getUnicodeLocaleType("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1544, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      Second second0 = new Second(mockDate0, timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      second0.getEnd();
      second0.getFirstMillisecond(calendar0);
      second0.getMinute();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      second0.getSerialIndex();
      second0.getFirstMillisecond();
      second0.getLastMillisecond();
      second0.getSecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      RegularTimePeriod regularTimePeriod1 = second0.previous();
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      RegularTimePeriod regularTimePeriod2 = regularTimePeriod0.previous();
      second0.getLastMillisecond(calendar0);
      second0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      second0.getFirstMillisecond();
      second0.next();
      second0.toString();
      second0.hashCode();
      second0.getFirstMillisecond();
      RegularTimePeriod regularTimePeriod3 = regularTimePeriod1.next();
      second0.next();
      Minute minute0 = new Minute();
      second0.compareTo(minute0);
      ((Second) regularTimePeriod2).equals(regularTimePeriod3);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1544, 1003);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      Second second0 = new Second(mockDate0, timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      second0.getEnd();
      second0.getFirstMillisecond(calendar0);
      second0.getMinute();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      second0.getSerialIndex();
      second0.getLastMillisecond();
      second0.getSecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      RegularTimePeriod regularTimePeriod1 = second0.previous();
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      RegularTimePeriod regularTimePeriod2 = regularTimePeriod0.previous();
      second0.getLastMillisecond(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2031,MONTH=4,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
      
      second0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      second0.getFirstMillisecond();
      regularTimePeriod1.getMiddleMillisecond();
      second0.next();
      second0.toString();
      second0.hashCode();
      second0.getFirstMillisecond();
      RegularTimePeriod regularTimePeriod3 = regularTimePeriod1.next();
      second0.next();
      Minute minute0 = new Minute();
      second0.compareTo(minute0);
      boolean boolean0 = ((Second) regularTimePeriod2).equals(regularTimePeriod3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Second second0 = null;
      try {
        second0 = new Second((-19), (-19), (-19), (-19), (-19), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }
}
