/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:02:07 GMT 2019
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class RegularTimePeriod_ESTest extends RegularTimePeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.MIDDLE;
      Calendar calendar0 = MockCalendar.getInstance();
      long long0 = second0.getMillisecond(timePeriodAnchor0, calendar0);
      assertEquals(1392409281819L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Year year0 = new Year((-306));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-9999), 9999, (-9999), 1, (-9999));
      year0.peg(mockGregorianCalendar0);
      long long0 = year0.getMiddleMillisecond();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Second second0 = new Second();
      long long0 = second0.getMiddleMillisecond();
      assertEquals(1392409281819L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3467), (-3467), (-3467), (-978), 356);
      fixedMillisecond0.peg(mockGregorianCalendar0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1L));
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      assertEquals(0L, regularTimePeriod0.getMiddleMillisecond());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Month month0 = new Month();
      long long0 = month0.getSerialIndex();
      assertEquals(24170L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Year year0 = new Year((-1953));
      long long0 = year0.getSerialIndex();
      assertEquals((-1953L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1929, 1929, 1929);
      Month month0 = new Month(mockDate0);
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.MIDDLE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 999, 0, 1465);
      long long0 = month0.getMillisecond(timePeriodAnchor0, mockGregorianCalendar0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-807L));
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.START;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 1229);
      long long0 = fixedMillisecond0.getMillisecond(timePeriodAnchor0, mockGregorianCalendar0);
      assertEquals((-807L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1L));
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      long long0 = regularTimePeriod0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1L));
      long long0 = fixedMillisecond0.getMiddleMillisecond();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1132L));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      Calendar calendar0 = MockCalendar.getInstance();
      long long0 = fixedMillisecond0.getLastMillisecond(calendar0);
      assertEquals((-1132L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Year year0 = new Year();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9999, 304, 0, 19, 0, 1);
      year0.peg(mockGregorianCalendar0);
      long long0 = year0.getLastMillisecond();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      long long0 = fixedMillisecond0.getLastMillisecond();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 0, 0, 1, 4);
      mockGregorianCalendar0.get(0);
      quarter0.peg(mockGregorianCalendar0);
      long long0 = quarter0.getLastMillisecond();
      assertEquals((-62135852160000L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3467), (-3467), (-3467), (-978), 356);
      Week week0 = new Week();
      long long0 = week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Month month0 = new Month(3, 1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      long long0 = month0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1585L);
      long long0 = fixedMillisecond0.getFirstMillisecond();
      assertEquals(1585L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("DN9#JNoh4H47");
      Class<Minute> class0 = Minute.class;
      MockDate mockDate0 = new MockDate(1, (-3265), 674);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance(class0, mockDate0, timeZone0, locale0);
      assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Week week0 = new Week(0, (-2677));
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.END;
      // Undeclared exception!
      try { 
        week0.getMillisecond(timePeriodAnchor0, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Week week0 = new Week();
      // Undeclared exception!
      try { 
        week0.getMiddleMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second(mockDate0);
      // Undeclared exception!
      try { 
        second0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Second", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Hour hour0 = new Hour();
      // Undeclared exception!
      try { 
        hour0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Hour", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        RegularTimePeriod.downsize((Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.RegularTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Minute minute0 = new Minute();
      Calendar calendar0 = MockCalendar.getInstance();
      long long0 = minute0.getMiddleMillisecond(calendar0);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Second> class0 = Second.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertEquals("class org.jfree.data.time.Millisecond", class1.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Hour> class0 = Hour.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertEquals("class org.jfree.data.time.Minute", class1.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertEquals("class org.jfree.data.time.Millisecond", class1.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Month> class0 = Month.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertEquals("class org.jfree.data.time.Day", class1.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Quarter> class0 = Quarter.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertEquals("class org.jfree.data.time.Month", class1.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Year> class0 = Year.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertEquals("class org.jfree.data.time.Quarter", class1.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Day> class0 = Day.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertEquals("class org.jfree.data.time.Hour", class1.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Date date0 = fixedMillisecond0.getEnd();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3467), (-3467), (-3467), (-978), 356);
      Minute minute0 = new Minute(date0);
      long long0 = minute0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      String string0 = fixedMillisecond0.toString();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Month month0 = new Month();
      Date date0 = month0.getStart();
      TimeZone timeZone0 = TimeZone.getTimeZone("DN9#JNoh4H47");
      Class<Minute> class0 = Minute.class;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Minute minute0 = (Minute)RegularTimePeriod.createInstance(class0, date0, timeZone0, locale0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Day day0 = new Day();
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      long long0 = day0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(1392409281320L, long0);
  }
}
