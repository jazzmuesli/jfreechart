/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:51:49 GMT 2019
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.DefaultKeyedValue;
import org.jfree.data.KeyedValueComparator;
import org.jfree.data.KeyedValueComparatorType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KeyedValueComparator_ESTest extends KeyedValueComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_KEY;
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      Byte byte0 = new Byte((byte)33);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(sortOrder0, byte0);
      DefaultKeyedValue defaultKeyedValue1 = new DefaultKeyedValue(byte0, byte0);
      // Undeclared exception!
      try { 
        keyedValueComparator0.compare(defaultKeyedValue0, defaultKeyedValue1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.util.SortOrder cannot be cast to java.lang.Byte
         //
         verifyException("java.lang.Byte", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_KEY;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      Float float0 = new Float(0.0F);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(keyedValueComparatorType0, float0);
      DefaultKeyedValue defaultKeyedValue1 = new DefaultKeyedValue(keyedValueComparatorType0, float0);
      int int0 = keyedValueComparator0.compare(defaultKeyedValue0, defaultKeyedValue1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KeyedValueComparator keyedValueComparator0 = null;
      try {
        keyedValueComparator0 = new KeyedValueComparator((KeyedValueComparatorType) null, (SortOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'type' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      Float float0 = new Float((-4114.9F));
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(sortOrder0, float0);
      Comparable<DefaultKeyedValue> comparable0 = (Comparable<DefaultKeyedValue>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(0L);
      DefaultKeyedValue defaultKeyedValue1 = new DefaultKeyedValue(comparable0, long0);
      int int0 = keyedValueComparator0.compare(defaultKeyedValue0, defaultKeyedValue1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      Float float0 = new Float(0.0);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(sortOrder0, float0);
      DefaultKeyedValue defaultKeyedValue1 = new DefaultKeyedValue(sortOrder0, float0);
      Byte byte0 = new Byte((byte) (-1));
      defaultKeyedValue0.setValue(byte0);
      int int0 = keyedValueComparator0.compare(defaultKeyedValue0, defaultKeyedValue1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      Float float0 = new Float(0.0);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(sortOrder0, float0);
      DefaultKeyedValue defaultKeyedValue1 = new DefaultKeyedValue(sortOrder0, float0);
      Byte byte0 = new Byte((byte)15);
      defaultKeyedValue0.setValue(byte0);
      int int0 = keyedValueComparator0.compare(defaultKeyedValue0, defaultKeyedValue1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      Float float0 = new Float(0.0);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(sortOrder0, float0);
      int int0 = keyedValueComparator0.compare(defaultKeyedValue0, defaultKeyedValue0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      Float float0 = new Float(0.0);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(sortOrder0, float0);
      DefaultKeyedValue defaultKeyedValue1 = new DefaultKeyedValue(sortOrder0, float0);
      defaultKeyedValue0.setValue((Number) null);
      int int0 = keyedValueComparator0.compare(defaultKeyedValue0, defaultKeyedValue1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      Float float0 = new Float(0.0F);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(keyedValueComparatorType0, float0);
      DefaultKeyedValue defaultKeyedValue1 = new DefaultKeyedValue(keyedValueComparatorType0, (Number) null);
      int int0 = keyedValueComparator0.compare(defaultKeyedValue0, defaultKeyedValue1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      int int0 = keyedValueComparator0.compare((Object) null, keyedValueComparatorType0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      int int0 = keyedValueComparator0.compare(keyedValueComparatorType0, (Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      Float float0 = new Float(0.0);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(sortOrder0, float0);
      int int0 = keyedValueComparator0.compare(defaultKeyedValue0, defaultKeyedValue0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      SortOrder sortOrder1 = keyedValueComparator0.getOrder();
      assertSame(sortOrder1, sortOrder0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_KEY;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      KeyedValueComparatorType keyedValueComparatorType1 = keyedValueComparator0.getType();
      assertEquals(KeyedValueComparatorType.BY_KEY, keyedValueComparatorType1);
  }
}
