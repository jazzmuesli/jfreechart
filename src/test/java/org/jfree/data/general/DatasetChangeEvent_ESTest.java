/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:39:52 GMT 2019
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.general.Dataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DatasetChangeEvent_ESTest extends DatasetChangeEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent("", (Dataset) null);
      Dataset dataset0 = datasetChangeEvent0.getDataset();
      assertNull(dataset0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Dataset dataset0 = mock(Dataset.class, new ViolatedAssumptionAnswer());
      DatasetChangeEvent datasetChangeEvent0 = null;
      try {
        datasetChangeEvent0 = new DatasetChangeEvent((Object) null, dataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Dataset dataset0 = mock(Dataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dataset0).toString();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent("", dataset0);
      Dataset dataset1 = datasetChangeEvent0.getDataset();
      assertSame(dataset1, dataset0);
  }
}
