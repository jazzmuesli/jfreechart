/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:59:11 GMT 2019
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.util.SortOrder;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.KeyedValues;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultPieDataset_ESTest extends DefaultPieDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      Comparable<DefaultKeyedValuesDataset> comparable0 = (Comparable<DefaultKeyedValuesDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(":K@cTyeV](]|d>5;").when(comparable0).toString();
      defaultPieDataset0.setValue(comparable0, 0.0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultPieDataset1.sortByKeys((SortOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      int int0 = defaultKeyedValuesDataset0.getItemCount();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, int0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) 0, 0.0);
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = (DefaultKeyedValuesDataset)defaultKeyedValuesDataset0.clone();
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      assertNotNull(defaultKeyedValuesDataset1);
      
      boolean boolean0 = defaultKeyedValuesDataset0.equals(defaultKeyedValuesDataset1);
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset2 = (DefaultKeyedValuesDataset)defaultKeyedValuesDataset0.clone();
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset2.getItemCount());
      assertTrue(defaultKeyedValuesDataset2.getNotify());
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertTrue(defaultKeyedValuesDataset2.equals((Object)defaultKeyedValuesDataset0));
      assertTrue(defaultKeyedValuesDataset2.equals((Object)defaultKeyedValuesDataset1));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset2);
      assertNotSame(defaultKeyedValuesDataset2, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset2, defaultKeyedValuesDataset0);
      assertNotNull(defaultKeyedValuesDataset2);
      
      boolean boolean1 = defaultKeyedValuesDataset0.equals(defaultKeyedValuesDataset2);
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset2.getItemCount());
      assertTrue(defaultKeyedValuesDataset2.getNotify());
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset2));
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertTrue(defaultKeyedValuesDataset2.equals((Object)defaultKeyedValuesDataset0));
      assertTrue(defaultKeyedValuesDataset2.equals((Object)defaultKeyedValuesDataset1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset2);
      assertNotSame(defaultKeyedValuesDataset2, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset2, defaultKeyedValuesDataset0);
      assertTrue(boolean1);
      
      Double double0 = (Double)defaultKeyedValuesDataset0.getValue(0);
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset2));
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset2);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset3 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset3.getItemCount());
      assertTrue(defaultKeyedValuesDataset3.getNotify());
      assertFalse(defaultKeyedValuesDataset3.equals((Object)defaultKeyedValuesDataset0));
      assertFalse(defaultKeyedValuesDataset3.equals((Object)defaultKeyedValuesDataset1));
      assertFalse(defaultKeyedValuesDataset3.equals((Object)defaultKeyedValuesDataset2));
      assertNotNull(defaultKeyedValuesDataset3);
      
      defaultKeyedValuesDataset3.setNotify(true);
      assertEquals(0, defaultKeyedValuesDataset3.getItemCount());
      assertTrue(defaultKeyedValuesDataset3.getNotify());
      assertFalse(defaultKeyedValuesDataset3.equals((Object)defaultKeyedValuesDataset0));
      assertFalse(defaultKeyedValuesDataset3.equals((Object)defaultKeyedValuesDataset1));
      assertFalse(defaultKeyedValuesDataset3.equals((Object)defaultKeyedValuesDataset2));
      assertNotSame(defaultKeyedValuesDataset3, defaultKeyedValuesDataset0);
      assertNotSame(defaultKeyedValuesDataset3, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset3, defaultKeyedValuesDataset2);
      
      int int1 = defaultKeyedValuesDataset3.getItemCount();
      assertEquals(0, defaultKeyedValuesDataset3.getItemCount());
      assertTrue(defaultKeyedValuesDataset3.getNotify());
      assertFalse(defaultKeyedValuesDataset3.equals((Object)defaultKeyedValuesDataset0));
      assertFalse(defaultKeyedValuesDataset3.equals((Object)defaultKeyedValuesDataset1));
      assertFalse(defaultKeyedValuesDataset3.equals((Object)defaultKeyedValuesDataset2));
      assertTrue(int1 == int0);
      assertNotSame(defaultKeyedValuesDataset3, defaultKeyedValuesDataset0);
      assertNotSame(defaultKeyedValuesDataset3, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset3, defaultKeyedValuesDataset2);
      assertEquals(0, int1);
      
      defaultKeyedValuesDataset3.setValue((Comparable) 0, (Number) double0);
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertTrue(defaultKeyedValuesDataset3.getNotify());
      assertEquals(1, defaultKeyedValuesDataset3.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset3));
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset2));
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertTrue(defaultKeyedValuesDataset3.equals((Object)defaultKeyedValuesDataset1));
      assertTrue(defaultKeyedValuesDataset3.equals((Object)defaultKeyedValuesDataset2));
      assertTrue(defaultKeyedValuesDataset3.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset2);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset3);
      assertNotSame(defaultKeyedValuesDataset3, defaultKeyedValuesDataset0);
      assertNotSame(defaultKeyedValuesDataset3, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset3, defaultKeyedValuesDataset2);
      
      boolean boolean2 = defaultKeyedValuesDataset0.equals(defaultKeyedValuesDataset3);
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertTrue(defaultKeyedValuesDataset3.getNotify());
      assertEquals(1, defaultKeyedValuesDataset3.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset3));
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset2));
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertTrue(defaultKeyedValuesDataset3.equals((Object)defaultKeyedValuesDataset1));
      assertTrue(defaultKeyedValuesDataset3.equals((Object)defaultKeyedValuesDataset2));
      assertTrue(defaultKeyedValuesDataset3.equals((Object)defaultKeyedValuesDataset0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset2);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset3);
      assertNotSame(defaultKeyedValuesDataset3, defaultKeyedValuesDataset0);
      assertNotSame(defaultKeyedValuesDataset3, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset3, defaultKeyedValuesDataset2);
      assertTrue(boolean2);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int2 = defaultKeyedValuesDataset0.getIndex(comparable0);
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset3));
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset2));
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset2);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset3);
      assertEquals((-1), int2);
      
      Comparable<DefaultPieDataset> comparable1 = (Comparable<DefaultPieDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      // Undeclared exception!
      try { 
        defaultKeyedValuesDataset0.remove(comparable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key (null) is not recognised.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultPieDataset0.sortByKeys(sortOrder0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      defaultPieDataset0.insertValue(0, (Comparable) sortOrder0, (-514.0));
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)defaultPieDataset0.clone();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      
      Double double0 = (Double)defaultPieDataset0.getValue((Comparable) sortOrder0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertEquals((-514.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = (Double)defaultPieDataset0.getValue(0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertEquals((-514.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = (Double)defaultPieDataset0.getValue((Comparable) sortOrder0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertEquals((-514.0), (double)double2, 0.01);
      assertNotNull(double2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(categoryDataset0).getColumnKeys();
      doReturn(0).when(categoryDataset0).getColumnCount();
      CategoryDataset categoryDataset1 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultKeyedValuesDataset0.getIndex(comparable0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals((-1), int0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 846);
      assertEquals(846, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertNotNull(categoryToPieDataset0);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertEquals(846, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertNull(list0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = (DefaultKeyedValuesDataset)defaultKeyedValuesDataset0.clone();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      assertNotNull(defaultKeyedValuesDataset1);
      
      boolean boolean0 = categoryToPieDataset0.equals(defaultKeyedValuesDataset1);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(846, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      defaultKeyedValuesDataset0.addChangeListener(categoryToPieDataset0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(846, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      
      int int1 = defaultKeyedValuesDataset0.getItemCount();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertFalse(int1 == int0);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertEquals(0, int1);
      
      int int2 = defaultKeyedValuesDataset0.hashCode();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      
      List list1 = defaultKeyedValuesDataset0.getKeys();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotNull(list1);
      
      List list2 = defaultKeyedValuesDataset0.getKeys();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertTrue(list2.equals((Object)list1));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(list2, list1);
      assertNotNull(list2);
      
      defaultKeyedValuesDataset0.clear();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      
      defaultKeyedValuesDataset0.insertValue(0, (Comparable) tableOrder0, (Number) null);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertFalse(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      
      Number number0 = defaultKeyedValuesDataset0.getValue((Comparable) tableOrder0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertFalse(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      int int0 = defaultPieDataset0.getItemCount();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, int0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = (DefaultKeyedValuesDataset)defaultKeyedValuesDataset0.clone();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      assertNotNull(defaultKeyedValuesDataset1);
      
      boolean boolean0 = defaultKeyedValuesDataset0.equals(defaultKeyedValuesDataset1);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      boolean boolean1 = defaultKeyedValuesDataset0.equals(defaultKeyedValuesDataset0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertTrue(boolean1);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int1 = defaultPieDataset0.getIndex(comparable0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1285));
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals((-1285), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      Number number0 = categoryToPieDataset0.getValue((Comparable) tableOrder0);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals((-1285), categoryToPieDataset0.getExtractIndex());
      assertNull(number0);
      
      boolean boolean2 = defaultKeyedValuesDataset0.equals(defaultKeyedValuesDataset1);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      assertTrue(boolean2);
      
      defaultKeyedValuesDataset0.setValue((Comparable) (-1), (Number) null);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertFalse(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      
      // Undeclared exception!
      try { 
        defaultKeyedValuesDataset0.getValue((-231));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -231
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((-1706), (-1706)).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((-1706)).when(categoryDataset0).getRowCount();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 3040);
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertNotNull(categoryToPieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(categoryToPieDataset0);
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      int int0 = categoryToPieDataset0.getIndex(tableOrder0);
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals((-1706), int0);
      
      defaultPieDataset0.removeChangeListener(categoryToPieDataset0);
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      defaultPieDataset0.removeChangeListener(categoryToPieDataset0);
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      defaultPieDataset0.insertValue(0, (Comparable) tableOrder0, (double) (-1706));
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("q?HL@o8").when(comparable0).toString();
      boolean boolean0 = defaultPieDataset0.equals("4");
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertFalse(boolean0);
      
      int int1 = defaultPieDataset0.getIndex(tableOrder0);
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      
      int int2 = defaultPieDataset1.hashCode();
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      int int3 = defaultPieDataset1.getIndex(tableOrder0);
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(0, int3);
      
      Number number0 = defaultPieDataset0.getValue((Comparable) tableOrder0);
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertEquals((-1706.0), number0);
      assertNotNull(number0);
      
      int int4 = categoryToPieDataset0.getIndex(1208628453);
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals((-1706), int4);
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.getValue(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: q?HL@o8
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getRowCount();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 3040);
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertNotNull(categoryToPieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(categoryToPieDataset0);
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      int int0 = categoryToPieDataset0.getIndex(tableOrder0);
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals((-1), int0);
      
      defaultPieDataset0.removeChangeListener(categoryToPieDataset0);
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      defaultPieDataset0.removeChangeListener(categoryToPieDataset0);
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      defaultPieDataset0.insertValue(0, (Comparable) tableOrder0, (double) (-1));
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("qinb9j.c+>l.4SK7@M").when(comparable0).toString();
      boolean boolean0 = defaultPieDataset0.equals("4");
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertFalse(boolean0);
      
      int int1 = defaultPieDataset0.getIndex(tableOrder0);
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      
      int int2 = defaultPieDataset1.hashCode();
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      Number number0 = defaultPieDataset0.getValue((Comparable) tableOrder0);
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertEquals((-1.0), number0);
      assertNotNull(number0);
      
      int int3 = defaultPieDataset1.getIndex(tableOrder0);
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(0, int3);
      
      int int4 = categoryToPieDataset0.getIndex(1208628453);
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.getValue(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: qinb9j.c+>l.4SK7@M
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      Comparable<DefaultKeyedValuesDataset> comparable0 = (Comparable<DefaultKeyedValuesDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(":K@cTyeV](]|d>5;").when(comparable0).toString();
      defaultPieDataset0.setValue(comparable0, 0.0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultPieDataset1.sortByKeys(sortOrder0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      defaultKeyedValues0.setValue(comparable1, (-1.0));
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)defaultPieDataset1.clone();
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(1, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotNull(defaultPieDataset2);
      
      defaultPieDataset2.setValue((Comparable) ":K@cTyeV](]|d>5;", 0.0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(2, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      
      boolean boolean0 = defaultPieDataset0.equals(defaultPieDataset2);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(2, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertFalse(boolean0);
      
      SortOrder sortOrder1 = SortOrder.DESCENDING;
      defaultPieDataset0.sortByKeys(sortOrder1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertSame(sortOrder1, sortOrder0);
      
      SortOrder sortOrder2 = SortOrder.DESCENDING;
      defaultPieDataset0.sortByKeys(sortOrder2);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertSame(sortOrder2, sortOrder1);
      assertSame(sortOrder2, sortOrder0);
      
      int int0 = defaultPieDataset2.getItemCount();
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(2, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultKeyedValuesDataset0.getIndex(comparable0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals((-1), int0);
      
      Comparable<DefaultPieDataset> comparable1 = (Comparable<DefaultPieDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValuesDataset0.clear();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultKeyedValuesDataset0.sortByValues(sortOrder0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      defaultKeyedValuesDataset0.setValue(comparable1, 0.0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      
      Number number0 = defaultKeyedValuesDataset0.getValue(0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      defaultKeyedValuesDataset0.fireDatasetChanged();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      
      defaultKeyedValuesDataset0.notifyListeners((DatasetChangeEvent) null);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValuesDataset0.getValue((-204));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -204
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.hashCode();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      
      defaultKeyedValuesDataset0.setValue((Comparable) 1, 2176.082692731359);
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValuesDataset0.sortByKeys(sortOrder0);
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      
      List list0 = defaultKeyedValuesDataset0.getKeys();
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      defaultKeyedValuesDataset0.hashCode();
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      
      defaultKeyedValuesDataset0.hashCode();
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = (DefaultKeyedValuesDataset)defaultKeyedValuesDataset0.clone();
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertEquals(1, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      assertNotNull(defaultKeyedValuesDataset1);
      
      defaultKeyedValuesDataset0.setValue((Comparable) sortOrder0, (Number) 32);
      assertEquals(2, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertFalse(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      
      int int0 = defaultKeyedValuesDataset0.getIndex(sortOrder0);
      assertEquals(2, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertFalse(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertEquals(1, int0);
      
      List list1 = defaultKeyedValuesDataset0.getKeys();
      assertEquals(2, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertFalse(list1.equals((Object)list0));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      
      List list2 = defaultKeyedValuesDataset0.getKeys();
      assertEquals(2, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertFalse(list2.isEmpty());
      assertEquals(2, list2.size());
      assertFalse(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertTrue(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotNull(list2);
      
      SortOrder sortOrder1 = SortOrder.DESCENDING;
      // Undeclared exception!
      try { 
        defaultKeyedValuesDataset0.sortByKeys(sortOrder1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.util.SortOrder cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.getValue((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)defaultPieDataset0.clone();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      
      defaultPieDataset0.removeChangeListener((DatasetChangeListener) null);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      
      DefaultPieDataset defaultPieDataset2 = new DefaultPieDataset(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset2);
      
      int int0 = defaultPieDataset2.getItemCount();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertEquals(0, int0);
      
      defaultPieDataset2.clear();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultPieDataset0.clear();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      
      Number number0 = defaultPieDataset2.getValue(0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNull(number0);
      
      defaultPieDataset0.setValue(comparable0, (Number) null);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      
      defaultPieDataset2.removeChangeListener((DatasetChangeListener) null);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      
      Comparable<DefaultKeyedValues> comparable1 = null;
      // Undeclared exception!
      try { 
        defaultPieDataset2.remove((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getRowCount();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 10);
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(categoryToPieDataset0);
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.hashCode();
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      defaultPieDataset0.setValue((Comparable) tableOrder0, (-1.0));
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      defaultPieDataset0.remove(tableOrder0);
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      boolean boolean0 = defaultPieDataset0.hasListener(categoryToPieDataset0);
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertFalse(boolean0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      SortOrder sortOrder1 = SortOrder.ASCENDING;
      defaultPieDataset0.sortByKeys(sortOrder1);
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertSame(sortOrder1, sortOrder0);
      
      defaultPieDataset0.sortByKeys(sortOrder0);
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertSame(sortOrder0, sortOrder1);
      
      DatasetGroup datasetGroup0 = defaultPieDataset0.getGroup();
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultPieDataset0.setGroup(datasetGroup0);
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      int int0 = defaultPieDataset0.getItemCount();
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, int0);
      
      int int1 = defaultPieDataset0.getIndex(0);
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      defaultPieDataset0.insertValue(0, (Comparable) tableOrder0, 0.0);
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      Number number0 = defaultPieDataset0.getValue((Comparable) tableOrder0);
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      int int2 = defaultPieDataset0.getIndex(sortOrder0);
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertSame(sortOrder0, sortOrder1);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.insertValue((-3026), (Comparable) tableOrder0, 2967.0842944);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getRowCount();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 3040);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(categoryToPieDataset0);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      int int0 = categoryToPieDataset0.getIndex(tableOrder0);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, int0);
      
      defaultPieDataset0.removeChangeListener(categoryToPieDataset0);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      defaultPieDataset0.removeChangeListener(categoryToPieDataset0);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      defaultPieDataset0.insertValue(0, (Comparable) tableOrder0, (double) 0);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      boolean boolean0 = defaultPieDataset0.equals("4");
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertFalse(boolean0);
      
      int int1 = defaultPieDataset0.getIndex(tableOrder0);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      
      int int2 = defaultPieDataset1.hashCode();
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      int int3 = defaultPieDataset1.getIndex(tableOrder0);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(0, int3);
      
      int int4 = categoryToPieDataset0.getIndex(1208628453);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(3040, categoryToPieDataset0.getExtractIndex());
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.getValue(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: null
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      Comparable<String> comparable0 = null;
      double double0 = 0.0;
      int int0 = defaultPieDataset0.getItemCount();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.setValue((Comparable) null, (Number) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      Comparable<DefaultKeyedValuesDataset> comparable0 = (Comparable<DefaultKeyedValuesDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparable0).toString();
      defaultPieDataset0.setValue(comparable0, 0.0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultPieDataset1.sortByKeys(sortOrder0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      defaultKeyedValues0.setValue(comparable1, (-1.0));
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)defaultPieDataset1.clone();
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(1, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotNull(defaultPieDataset2);
      
      boolean boolean0 = defaultPieDataset0.equals(defaultPieDataset2);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(1, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertTrue(boolean0);
      
      SortOrder sortOrder1 = SortOrder.DESCENDING;
      defaultPieDataset0.sortByKeys(sortOrder1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertSame(sortOrder1, sortOrder0);
      
      SortOrder sortOrder2 = SortOrder.DESCENDING;
      defaultPieDataset0.sortByKeys(sortOrder2);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertSame(sortOrder2, sortOrder1);
      assertSame(sortOrder2, sortOrder0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      int int0 = (-693);
      int int1 = defaultPieDataset0.getItemCount();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertNotNull(defaultKeyedValuesDataset0);
      
      Comparable<Object> comparable0 = null;
      // Undeclared exception!
      try { 
        defaultKeyedValuesDataset0.getIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      Comparable<DefaultKeyedValues> comparable0 = (Comparable<DefaultKeyedValues>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValuesDataset0.setValue(comparable0, 1.0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultKeyedValuesDataset0.getItemCount();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(1, int0);
      
      int int1 = defaultKeyedValuesDataset0.getIndex(1);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      defaultKeyedValuesDataset0.setValue(comparable1, (-4825.026218264));
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(2, defaultKeyedValuesDataset0.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValuesDataset0.getIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultPieDataset0.sortByKeys(sortOrder0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      int int0 = 1;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertNotNull(categoryToPieDataset0);
      
      defaultPieDataset0.addChangeListener(categoryToPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      
      int int1 = defaultPieDataset0.hashCode();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(int1 == int0);
      
      double double0 = Double.NaN;
      Comparable<String> comparable0 = null;
      // Undeclared exception!
      try { 
        defaultPieDataset0.setValue((Comparable) null, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      int int0 = 1610;
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Number number0 = defaultKeyedValuesDataset0.getValue(1610);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValuesDataset0.insertValue(1610, comparable0, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      boolean boolean0 = defaultPieDataset0.equals("2f,mMxK");
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultKeyedValuesDataset0.getIndex(comparable0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals((-1), int0);
      
      Comparable<DefaultPieDataset> comparable1 = (Comparable<DefaultPieDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValuesDataset0.clear();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultKeyedValuesDataset0.sortByValues(sortOrder0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      defaultKeyedValuesDataset0.notifyListeners(datasetChangeEvent0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      defaultKeyedValuesDataset0.setValue(comparable1, (-187.3310502383));
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      
      Number number0 = defaultKeyedValuesDataset0.getValue(0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertEquals((-187.3310502383), number0);
      assertNotNull(number0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertNotNull(categoryToPieDataset0);
      
      defaultKeyedValuesDataset0.removeChangeListener(categoryToPieDataset0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      
      defaultKeyedValuesDataset0.fireDatasetChanged();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      
      defaultKeyedValuesDataset0.notifyListeners((DatasetChangeEvent) null);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValuesDataset0.getValue((-204));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -204
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.hashCode();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultPieDataset0.sortByKeys(sortOrder0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.remove(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key (null) is not recognised.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = null;
      try {
        defaultPieDataset0 = new DefaultPieDataset((KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertNotNull(categoryToPieDataset0);
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryToPieDataset0.datasetChanged(datasetChangeEvent0);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      
      List list0 = defaultPieDataset0.getKeys();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = defaultPieDataset0.hasListener(categoryToPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertFalse(boolean0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultPieDataset0.sortByKeys(sortOrder0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      List list1 = defaultPieDataset0.getKeys();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertNotNull(list1);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertNotNull(defaultKeyedValuesDataset0);
      
      Number number0 = defaultKeyedValuesDataset0.getValue(0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertNull(number0);
      
      defaultPieDataset0.setValue((Comparable) sortOrder0, (Number) null);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertEquals(0, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotNull(defaultKeyedValuesDataset1);
      
      defaultKeyedValuesDataset1.fireDatasetChanged();
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertEquals(0, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      
      boolean boolean1 = defaultPieDataset0.equals(defaultKeyedValuesDataset1);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertEquals(0, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(boolean1 == boolean0);
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      assertFalse(boolean1);
      
      int int0 = 10;
      // Undeclared exception!
      try { 
        defaultKeyedValuesDataset0.getKey(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      List list0 = defaultPieDataset0.getKeys();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Comparable<DefaultKeyedValues> comparable0 = (Comparable<DefaultKeyedValues>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultPieDataset0.hashCode();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      int int0 = defaultPieDataset0.getIndex(comparable0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals((-1), int0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)defaultPieDataset0.clone();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      
      int int1 = defaultPieDataset0.hashCode();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(int1 == int0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      
      List list1 = defaultPieDataset0.getKeys();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      
      int int2 = defaultPieDataset0.hashCode();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(int2 == int0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.insertValue((-1), (Comparable) 1, (-3876.3707));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertNotNull(defaultKeyedValuesDataset0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      int int0 = 0;
      SortOrder sortOrder1 = SortOrder.ASCENDING;
      defaultKeyedValuesDataset0.sortByKeys(sortOrder1);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertSame(sortOrder1, sortOrder0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((List) null).when(categoryDataset0).getColumnKeys();
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertNotNull(categoryToPieDataset0);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertNull(list0);
      
      Number number0 = categoryToPieDataset0.getValue((Comparable) sortOrder0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertSame(sortOrder0, sortOrder1);
      assertNull(number0);
      
      CategoryDataset categoryDataset1 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      CategoryToPieDataset categoryToPieDataset1 = new CategoryToPieDataset(categoryDataset1, tableOrder0, 0);
      assertEquals(0, categoryToPieDataset1.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset1.getExtractType());
      assertTrue(categoryToPieDataset1.getNotify());
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertNotNull(categoryToPieDataset1);
      
      CategoryToPieDataset categoryToPieDataset2 = (CategoryToPieDataset)categoryToPieDataset1.clone();
      assertEquals(0, categoryToPieDataset1.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset1.getExtractType());
      assertTrue(categoryToPieDataset1.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset2.getExtractType());
      assertTrue(categoryToPieDataset2.getNotify());
      assertEquals(0, categoryToPieDataset2.getExtractIndex());
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertTrue(categoryToPieDataset2.equals((Object)categoryToPieDataset0));
      assertTrue(categoryToPieDataset2.equals((Object)categoryToPieDataset1));
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset2);
      assertNotSame(categoryToPieDataset2, categoryToPieDataset0);
      assertNotSame(categoryToPieDataset2, categoryToPieDataset1);
      assertNotNull(categoryToPieDataset2);
      
      boolean boolean0 = categoryToPieDataset0.hasListener(categoryToPieDataset1);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset1.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset1.getExtractType());
      assertTrue(categoryToPieDataset1.getNotify());
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset2));
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset2));
      assertNotSame(categoryToPieDataset0, categoryToPieDataset2);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset2);
      assertFalse(boolean0);
      
      defaultKeyedValuesDataset0.insertValue(0, (Comparable) sortOrder0, (Number) null);
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertSame(sortOrder0, sortOrder1);
      
      int int1 = defaultKeyedValuesDataset0.getIndex(sortOrder0);
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertTrue(int1 == int0);
      assertSame(sortOrder0, sortOrder1);
      assertEquals(0, int1);
      
      defaultKeyedValuesDataset0.sortByKeys(sortOrder0);
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertSame(sortOrder0, sortOrder1);
      
      defaultKeyedValuesDataset0.remove(sortOrder0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertSame(sortOrder0, sortOrder1);
      
      // Undeclared exception!
      try { 
        defaultKeyedValuesDataset0.getValue((Comparable) sortOrder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: ASCENDING
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultPieDataset0.sortByValues(sortOrder0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertNotNull(defaultKeyedValuesDataset0);
      
      List list0 = defaultKeyedValuesDataset0.getKeys();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      defaultKeyedValuesDataset0.fireDatasetChanged();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      
      defaultKeyedValuesDataset0.clear();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      List list1 = defaultKeyedValuesDataset0.getKeys();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertNotNull(list1);
      
      defaultKeyedValuesDataset0.setValue(comparable0, 527.428);
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      
      Comparable comparable1 = defaultKeyedValuesDataset0.getKey(0);
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertNotNull(comparable1);
      
      defaultKeyedValuesDataset0.clear();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertNotNull(categoryToPieDataset0);
      
      Number number0 = categoryToPieDataset0.getValue((Comparable) tableOrder0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertNull(number0);
      
      defaultKeyedValuesDataset0.setValue(comparable1, (Number) null);
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.fireDatasetChanged();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      defaultKeyedValuesDataset0.clear();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Number number0 = defaultKeyedValuesDataset0.getValue(311);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNull(number0);
      
      defaultKeyedValuesDataset0.setValue(comparable0, (Number) null);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      
      Number number1 = defaultKeyedValuesDataset0.getValue(0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertNull(number1);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertFalse(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotNull(defaultKeyedValuesDataset1);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertNotNull(categoryToPieDataset0);
      
      boolean boolean0 = defaultKeyedValuesDataset1.hasListener(categoryToPieDataset0);
      assertEquals(0, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertFalse(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      assertFalse(boolean0);
      
      boolean boolean1 = defaultKeyedValuesDataset0.equals(defaultKeyedValuesDataset1);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertFalse(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertFalse(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValuesDataset0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = (DefaultKeyedValuesDataset)defaultKeyedValuesDataset0.clone();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertEquals(0, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      assertNotNull(defaultKeyedValuesDataset1);
      
      Number number0 = defaultPieDataset0.getValue(0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNull(number0);
      
      List list0 = defaultPieDataset0.getKeys();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertNotNull(defaultKeyedValuesDataset0);
      
      List list0 = defaultKeyedValuesDataset0.getKeys();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List list1 = defaultKeyedValuesDataset0.getKeys();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      int int0 = (-906);
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, (-906));
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals((-906), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(categoryToPieDataset0);
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals((-906), categoryToPieDataset0.getExtractIndex());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      double double0 = 1002.14;
      defaultPieDataset0.setValue((Comparable) tableOrder0, 1002.14);
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals((-906), categoryToPieDataset0.getExtractIndex());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      defaultPieDataset0.remove(tableOrder0);
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals((-906), categoryToPieDataset0.getExtractIndex());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      defaultPieDataset0.addChangeListener(categoryToPieDataset0);
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals((-906), categoryToPieDataset0.getExtractIndex());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.remove(tableOrder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key (BY_COLUMN) is not recognised.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      int int0 = defaultPieDataset0.getItemCount();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.remove(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key (0) is not recognised.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      int int0 = defaultPieDataset0.getItemCount();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.insertValue((-190), (Comparable) 0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      int int0 = defaultPieDataset0.getItemCount();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.getValue((Comparable) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: 0
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultPieDataset1.getIndex(comparable0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultPieDataset0.sortByKeys(sortOrder0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      defaultPieDataset0.hashCode();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.validateObject();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultPieDataset0.sortByKeys(sortOrder0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      defaultPieDataset0.clear();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      
      boolean boolean0 = defaultPieDataset0.equals(defaultPieDataset1);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertTrue(boolean0);
      
      Comparable<String> comparable0 = null;
      // Undeclared exception!
      try { 
        defaultPieDataset0.getIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertNotNull(defaultKeyedValuesDataset0);
      
      int int0 = defaultKeyedValuesDataset0.getItemCount();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.getKey((-4944));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4944
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultPieDataset0.sortByKeys(sortOrder0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      List list0 = defaultPieDataset0.getKeys();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      Number number0 = defaultKeyedValuesDataset0.getValue(0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNull(number0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertNotNull(categoryToPieDataset0);
      
      boolean boolean0 = defaultKeyedValuesDataset0.hasListener(categoryToPieDataset0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertFalse(boolean0);
      
      defaultPieDataset0.setValue((Comparable) sortOrder0, (Number) null);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotNull(defaultKeyedValuesDataset1);
      
      defaultKeyedValuesDataset1.fireDatasetChanged();
      assertEquals(0, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset1.insertValue(0, (Comparable) sortOrder0, (Number) null);
      assertEquals(1, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertFalse(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      
      boolean boolean1 = defaultPieDataset0.equals(defaultKeyedValuesDataset1);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(1, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertFalse(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      assertTrue(boolean1);
      
      int int0 = 10;
      // Undeclared exception!
      try { 
        defaultKeyedValuesDataset0.getKey(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      Comparable<DefaultKeyedValuesDataset> comparable0 = (Comparable<DefaultKeyedValuesDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      defaultPieDataset0.clear();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.getValue(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: null
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparable0).toString();
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultKeyedValuesDataset0.sortByValues(sortOrder0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      List list0 = defaultKeyedValuesDataset0.getKeys();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      defaultKeyedValuesDataset0.clear();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValuesDataset0.remove(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key () is not recognised.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      Comparable<DefaultKeyedValuesDataset> comparable0 = (Comparable<DefaultKeyedValuesDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(":K@cTyeV](]|d>5;", ":K@cTyeV](]|d>5;", "s<Q6 KX*),b<yyb").when(comparable0).toString();
      defaultPieDataset0.setValue(comparable0, 0.0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultPieDataset1.sortByKeys(sortOrder0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      defaultKeyedValues0.setValue(comparable1, (-1.0));
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)defaultPieDataset1.clone();
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(1, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotNull(defaultPieDataset2);
      
      boolean boolean0 = defaultPieDataset0.equals(defaultPieDataset2);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(1, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertTrue(boolean0);
      
      SortOrder sortOrder1 = SortOrder.DESCENDING;
      defaultPieDataset0.sortByKeys(sortOrder1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertSame(sortOrder1, sortOrder0);
      
      SortOrder sortOrder2 = SortOrder.DESCENDING;
      defaultPieDataset0.sortByKeys(sortOrder2);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertSame(sortOrder2, sortOrder0);
      assertSame(sortOrder2, sortOrder1);
      
      int int0 = defaultPieDataset2.getItemCount();
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(1, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertEquals(1, int0);
      
      DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotNull(defaultKeyedValues1);
      
      boolean boolean1 = defaultPieDataset1.equals(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertFalse(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertFalse(boolean1 == boolean0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertNotNull(categoryToPieDataset0);
      
      boolean boolean0 = defaultKeyedValuesDataset0.hasListener(categoryToPieDataset0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertFalse(boolean0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultKeyedValuesDataset0.getIndex(comparable0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals((-1), int0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = (DefaultKeyedValuesDataset)defaultKeyedValuesDataset0.clone();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      assertNotNull(defaultKeyedValuesDataset1);
      
      int int1 = defaultKeyedValuesDataset0.getItemCount();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertFalse(int1 == int0);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertEquals(0, int1);
      
      defaultKeyedValuesDataset0.insertValue(0, (Comparable) tableOrder0, (double) 0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertFalse(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      
      int int2 = defaultKeyedValuesDataset0.hashCode();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertFalse(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      
      List list0 = defaultKeyedValuesDataset0.getKeys();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotNull(list0);
      
      List list1 = defaultKeyedValuesDataset0.getKeys();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      
      defaultKeyedValuesDataset0.clear();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      
      // Undeclared exception!
      try { 
        defaultKeyedValuesDataset0.insertValue(2566, (Comparable) tableOrder0, 180.5660308042885);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultPieDataset0.sortByKeys(sortOrder0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      List list0 = defaultPieDataset0.getKeys();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      Number number0 = defaultKeyedValuesDataset0.getValue(0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNull(number0);
      
      defaultPieDataset0.setValue((Comparable) sortOrder0, (Number) null);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotNull(defaultKeyedValuesDataset1);
      
      defaultKeyedValuesDataset1.fireDatasetChanged();
      assertEquals(0, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset1.insertValue(0, (Comparable) sortOrder0, (Number) null);
      assertEquals(1, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertFalse(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      
      boolean boolean0 = defaultPieDataset0.equals(defaultKeyedValuesDataset1);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(1, defaultKeyedValuesDataset1.getItemCount());
      assertTrue(defaultKeyedValuesDataset1.getNotify());
      assertFalse(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      int int0 = 10;
      // Undeclared exception!
      try { 
        defaultKeyedValuesDataset0.getKey(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.getItemCount();
      defaultKeyedValuesDataset0.setValue((Comparable) 0, 0.0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset1.equals(defaultKeyedValuesDataset0);
      defaultKeyedValuesDataset0.equals(defaultKeyedValuesDataset1);
      Object object0 = defaultKeyedValuesDataset0.clone();
      defaultKeyedValuesDataset0.equals(object0);
      // Undeclared exception!
      try { 
        defaultKeyedValuesDataset0.getValue((-231));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -231
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
