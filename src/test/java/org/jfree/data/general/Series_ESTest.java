/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:04:16 GMT 2019
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.util.Calendar;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.jfree.data.ComparableObjectSeries;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesTableModel;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.VectorSeries;
import org.jfree.data.xy.XIntervalDataItem;
import org.jfree.data.xy.XIntervalSeries;
import org.jfree.data.xy.XYIntervalSeries;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Series_ESTest extends Series_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      TimeSeries timeSeries0 = new TimeSeries(calendar0);
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0, true);
      timeSeries0.fireSeriesChanged();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(regularTimePeriod0, false, false);
      comparableObjectSeries0.setKey(quarter0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(fixedMillisecond0);
      yIntervalSeries0.setNotify(false);
      yIntervalSeries0.getNotify();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour((-1389), day0);
      VectorSeries vectorSeries0 = new VectorSeries(hour0);
      vectorSeries0.getItemCount();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Week week0 = new Week(400, 0);
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(week0);
      XIntervalDataItem xIntervalDataItem0 = mock(XIntervalDataItem.class, new ViolatedAssumptionAnswer());
      xIntervalSeries0.add(xIntervalDataItem0, false);
      xIntervalSeries0.getItemCount();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Week week0 = new Week((-821), (-821));
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(week0);
      comparableObjectSeries0.setDescription("2C !zlrj");
      comparableObjectSeries0.getDescription();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(fixedMillisecond0);
      timeSeries0.equals(yIntervalSeries0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Year year0 = new Year(0);
      TimeSeries timeSeries0 = new TimeSeries(year0, "cNsuR$D*bEh_&4}qZx.", "z80<");
      // Undeclared exception!
      try { 
        timeSeries0.setKey((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TaskSeries taskSeries0 = new TaskSeries("E6");
      taskSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TaskSeries taskSeries0 = new TaskSeries("E6");
      taskSeries0.getDescription();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(fixedMillisecond0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      yIntervalSeries0.addChangeListener(categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(quarter0);
      Calendar calendar0 = MockCalendar.getInstance();
      TimeSeries timeSeries0 = new TimeSeries(calendar0);
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      xYIntervalSeries0.addVetoableChangeListener(timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Month month0 = new Month();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(month0, false, false);
      xYIntervalSeries0.getKey();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      TimeSeries timeSeries0 = new TimeSeries(calendar0);
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      timeSeries0.fireSeriesChanged();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(quarter0);
      xYIntervalSeries0.setDescription("/E>v%Wr)a[e,t");
      xYIntervalSeries0.hashCode();
      assertTrue(xYIntervalSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Month month0 = new Month();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(month0, false, false);
      XYIntervalSeries xYIntervalSeries1 = (XYIntervalSeries)xYIntervalSeries0.clone();
      assertTrue(xYIntervalSeries1.equals((Object)xYIntervalSeries0));
      
      xYIntervalSeries1.setDescription("Key");
      boolean boolean0 = xYIntervalSeries0.equals(xYIntervalSeries1);
      assertFalse(boolean0);
      assertFalse(xYIntervalSeries1.equals((Object)xYIntervalSeries0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(quarter0);
      Calendar calendar0 = MockCalendar.getInstance();
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(calendar0, true, true);
      boolean boolean0 = xYIntervalSeries0.equals(xIntervalSeries0);
      assertFalse(boolean0);
      assertTrue(xIntervalSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      TimeSeries timeSeries0 = new TimeSeries(calendar0);
      boolean boolean0 = timeSeries0.isEmpty();
      assertTrue(boolean0);
      assertTrue(timeSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Week week0 = new Week(400, 0);
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(week0);
      XIntervalDataItem xIntervalDataItem0 = mock(XIntervalDataItem.class, new ViolatedAssumptionAnswer());
      xIntervalSeries0.add(xIntervalDataItem0, false);
      boolean boolean0 = xIntervalSeries0.isEmpty();
      assertTrue(xIntervalSeries0.getNotify());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(quarter0);
      xYIntervalSeries0.setNotify(true);
      assertNull(xYIntervalSeries0.getDescription());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      timeSeries0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertTrue(timeSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Month month0 = new Month();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(month0, false, false);
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYIntervalSeries0.removeVetoableChangeListener(xYSeriesCollection0);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYIntervalSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("#r9v@WR3h|c'e");
      timePeriodValues0.setDomainDescription("#r9v@WR3h|c'e");
      assertTrue(timePeriodValues0.getNotify());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(quarter0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("org.jfree.data.category.DefaultIntervalCategoryDataset", propertyChangeListener0);
      xYIntervalSeries0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertTrue(xYIntervalSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(quarter0);
      Calendar calendar0 = MockCalendar.getInstance();
      TimeSeries timeSeries0 = new TimeSeries(calendar0);
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      xYIntervalSeries0.removeChangeListener(timeSeriesCollection0);
      assertTrue(timeSeries0.getNotify());
      assertTrue(xYIntervalSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(fixedMillisecond0);
      boolean boolean0 = yIntervalSeries0.getNotify();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Month month0 = new Month();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(month0, false, false);
      XYIntervalSeries xYIntervalSeries1 = (XYIntervalSeries)xYIntervalSeries0.clone();
      boolean boolean0 = xYIntervalSeries0.equals(xYIntervalSeries1);
      assertTrue(boolean0);
      assertNotSame(xYIntervalSeries1, xYIntervalSeries0);
      assertTrue(xYIntervalSeries1.getNotify());
  }
}
