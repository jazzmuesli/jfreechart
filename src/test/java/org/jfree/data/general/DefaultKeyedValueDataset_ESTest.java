/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:58:22 GMT 2019
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.KeyedValue;
import org.jfree.data.general.DefaultKeyedValueDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DefaultKeyedValueDataset_ESTest extends DefaultKeyedValueDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      boolean boolean0 = defaultKeyedValueDataset0.equals(defaultKeyedValueDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hour hour0 = new Hour();
      Day day0 = hour0.getDay();
      Short short0 = new Short((short) (-1777));
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(day0, short0);
      Number number0 = defaultKeyedValueDataset0.getValue();
      assertEquals((short) (-1777), number0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      MockDate mockDate0 = new MockDate(334, 334, 334);
      Minute minute0 = new Minute(mockDate0);
      Hour hour0 = minute0.getHour();
      defaultKeyedValueDataset0.setValue(hour0, (Number) null);
      defaultKeyedValueDataset0.updateValue(0);
      Number number0 = defaultKeyedValueDataset0.getValue();
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour(0, day0);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(hour0, 23);
      Number number0 = defaultKeyedValueDataset0.getValue();
      assertEquals(23, number0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      // Undeclared exception!
      try { 
        defaultKeyedValueDataset0.setValue((Comparable) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Float float0 = new Float(Double.POSITIVE_INFINITY);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = null;
      try {
        defaultKeyedValueDataset0 = new DefaultKeyedValueDataset((Comparable) null, float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      Number number0 = defaultKeyedValueDataset0.getValue();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      Millisecond millisecond0 = new Millisecond();
      defaultKeyedValueDataset0.setValue(millisecond0, 999);
      Number number0 = defaultKeyedValueDataset0.getValue();
      assertEquals(999, number0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset((KeyedValue) null);
      Comparable comparable0 = defaultKeyedValueDataset0.getKey();
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      Millisecond millisecond0 = new Millisecond();
      defaultKeyedValueDataset0.setValue(millisecond0, 999);
      Comparable comparable0 = defaultKeyedValueDataset0.getKey();
      assertNotNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(comparable0, integer0);
      defaultKeyedValueDataset0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      defaultKeyedValueDataset0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(comparable0, integer0);
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset(defaultKeyedValueDataset0);
      defaultKeyedValueDataset1.setValue(integer0, integer0);
      Long long0 = new Long(0);
      defaultKeyedValueDataset1.updateValue(long0);
      defaultKeyedValueDataset0.setValue(integer0, integer0);
      boolean boolean0 = defaultKeyedValueDataset1.equals(defaultKeyedValueDataset0);
      assertFalse(defaultKeyedValueDataset1.equals((Object)defaultKeyedValueDataset0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      Integer integer0 = new Integer(0);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(comparable0, integer0);
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset(defaultKeyedValueDataset0);
      boolean boolean0 = defaultKeyedValueDataset1.equals(defaultKeyedValueDataset0);
      assertTrue(defaultKeyedValueDataset0.equals((Object)defaultKeyedValueDataset1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset(integer0, integer0);
      boolean boolean0 = defaultKeyedValueDataset0.equals(defaultKeyedValueDataset1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      boolean boolean0 = defaultKeyedValueDataset0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      Integer integer0 = new Integer(0);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(comparable0, integer0);
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset(defaultKeyedValueDataset0);
      assertTrue(defaultKeyedValueDataset1.equals((Object)defaultKeyedValueDataset0));
      
      defaultKeyedValueDataset1.setValue(integer0, integer0);
      boolean boolean0 = defaultKeyedValueDataset1.equals(defaultKeyedValueDataset0);
      assertFalse(defaultKeyedValueDataset1.equals((Object)defaultKeyedValueDataset0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      // Undeclared exception!
      try { 
        defaultKeyedValueDataset0.updateValue((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // updateValue: can't update null.
         //
         verifyException("org.jfree.data.general.DefaultKeyedValueDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset(defaultKeyedValueDataset0);
      Float float0 = new Float(1.0);
      // Undeclared exception!
      try { 
        defaultKeyedValueDataset1.updateValue(float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(comparable0, integer0);
      Object object0 = defaultKeyedValueDataset0.clone();
      assertNotSame(object0, defaultKeyedValueDataset0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset(defaultKeyedValueDataset0);
      boolean boolean0 = defaultKeyedValueDataset0.equals(defaultKeyedValueDataset1);
      assertTrue(boolean0);
  }
}
